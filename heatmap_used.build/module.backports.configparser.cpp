/* Generated code for Python source for module 'backports.configparser'
 * created by Nuitka version 0.5.28.1
 *
 * This code is in part copyright 2017 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The _module_backports$configparser is a Python object pointer of module type. */

/* Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_backports$configparser;
PyDictObject *moduledict_backports$configparser;

/* The module constants used, if any. */
static PyObject *const_unicode_plain_interpolation;
extern PyObject *const_tuple_str_plain_MutableMapping_tuple;
extern PyObject *const_str_plain_get;
static PyObject *const_dict_232d830ea747452602b3fbf1a87fe962;
static PyObject *const_tuple_8f340be7d65d4c529731c20c61f2d7df_tuple;
static PyObject *const_unicode_digest_f82f3044a826ec8f37ea1989caff8a4e;
extern PyObject *const_str_plain_startswith;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
static PyObject *const_tuple_unicode_plain_vars_none_tuple;
extern PyObject *const_str_plain_InterpolationSyntaxError;
extern PyObject *const_str_plain_warn;
extern PyObject *const_str_plain_MAX_INTERPOLATION_DEPTH;
extern PyObject *const_str_plain_NoOptionError;
static PyObject *const_tuple_unicode_empty_tuple;
static PyObject *const_str_plain_depth;
static PyObject *const_tuple_unicode_plain_value_unicode_empty_tuple;
static PyObject *const_str_plain_inst;
extern PyObject *const_str_plain___path__;
static PyObject *const_str_plain_BOOLEAN_STATES;
extern PyObject *const_str_plain_warnings;
static PyObject *const_str_plain_rest;
static PyObject *const_tuple_unicode_chr_61_unicode_chr_58_tuple;
extern PyObject *const_str_plain_args;
static PyObject *const_unicode_digest_3d6d15600c2f11e9754459914e332bbf;
static PyObject *const_str_plain_read_ok;
extern PyObject *const_str_plain_write;
extern PyObject *const_str_plain___exit__;
extern PyObject *const_str_plain_BasicInterpolation;
static PyObject *const_str_plain_before_read;
static PyObject *const_str_plain_accum;
extern PyObject *const_str_plain_itertools;
static PyObject *const_str_plain__handle_error;
static PyObject *const_unicode_digest_11beb09e0de26f74826a05c6f1fc1992;
static PyObject *const_str_plain_set;
static PyObject *const_unicode_digest_bd87c419367177d256cc0fdf0cb9a778;
static PyObject *const_unicode_digest_88556a5392a93fcde31f2432e52f3b0b;
static PyObject *const_unicode_digest_a323efdbe45e9fbbc3671543a313d2cf;
extern PyObject *const_str_plain_find;
static PyObject *const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple;
extern PyObject *const_str_plain__dict;
static PyObject *const_unicode_digest_aa6e002a5624aef8ede10ac56676c30b;
static PyObject *const_unicode_digest_fa3d841f27a9aa146426853cb2dc72ad;
extern PyObject *const_str_plain_encoding;
static PyObject *const_str_plain__SECT_TMPL;
extern PyObject *const_tuple_str_plain_self_str_plain_value_tuple;
static PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_tuple;
static PyObject *const_tuple_1ac7386b4f56dc6e73450d76941ab6da_tuple;
static PyObject *const_unicode_digest_8deb2a0fb571306186896008c4c5fd89;
static PyObject *const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple;
extern PyObject *const_str_plain_unicode_literals;
static PyObject *const_tuple_unicode_plain_header_tuple;
extern PyObject *const_str_plain_update;
static PyObject *const_str_plain_empty_lines_in_values;
static PyObject *const_unicode_digest_14d760694ac12dfa4c72b22a180ebfa1;
extern PyObject *const_str_plain___init__;
static PyObject *const_unicode_plain_no;
extern PyObject *const_str_plain_open;
static PyObject *const_unicode_plain_0;
static PyObject *const_unicode_plain_1;
static PyObject *const_str_plain_reference;
static PyObject *const_unicode_digest_9f20f6717c1f5b6d818952a8db8ef7c1;
extern PyObject *const_str_plain_items;
static PyObject *const_tuple_0b84ef46e0e4a1b841437ea04cc83002_tuple;
static PyObject *const_unicode_digest_922d4071dfffdf93a59015033bc38c95;
static PyObject *const_tuple_str_plain_self_str_plain_fp_str_plain_filename_tuple;
static PyObject *const_unicode_plain_default_section;
static PyObject *const_tuple_unicode_newline_tuple;
extern PyObject *const_str_angle_genexpr;
static PyObject *const_unicode_chr_123;
static PyObject *const_unicode_chr_124;
static PyObject *const_str_plain__read;
static PyObject *const_unicode_digest_196f7ecd368dc258e71cf76594c5dbd9;
static PyObject *const_unicode_digest_c40da24b9fb2f7d79a4e07fe6c8f5b08;
static PyObject *const_unicode_digest_34af11cfb02a76cc23098f7dbc1d08c8;
extern PyObject *const_str_plain_add;
static PyObject *const_tuple_fab2d55cc656484581228079d8fe5729_tuple;
static PyObject *const_str_plain_delimiters;
static PyObject *const_list_str_digest_ee02b24011111ba04dcb95fb5408b70c_list;
extern PyObject *const_str_digest_94f16859294f8d1bd1bc0ce9d8b35802;
extern PyObject *const_str_plain_ConverterMapping;
static PyObject *const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple;
static PyObject *const_unicode_digest_1918a014a5e3dd674f19733217aa18c6;
static PyObject *const_tuple_unicode_digest_88556a5392a93fcde31f2432e52f3b0b_tuple;
static PyObject *const_tuple_unicode_plain_utf8_tuple;
static PyObject *const_str_plain_allow_no_value;
extern PyObject *const_str_plain_group;
extern PyObject *const_str_plain_filename;
static PyObject *const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple;
static PyObject *const_unicode_digest_26f263beb79cc8e1a96654e83a2c718b;
static PyObject *const_tuple_5b34e4d16ce1d6568d0913835e1643d8_tuple;
extern PyObject *const_str_plain_match;
static PyObject *const_unicode_digest_79957acb7d23243c4cd1c73608e63b60;
static PyObject *const_tuple_1fbcd1fa7b15ec1fe200bc618ff93d5d_tuple;
static PyObject *const_tuple_6ffbea5a107892fce1d59c01a5876089_tuple;
static PyObject *const_unicode_digest_aa623b64bfb5399ec1f50c86b7d261e5;
static PyObject *const_str_plain_converters;
static PyObject *const_str_plain_section_name;
static PyObject *const_str_plain_converter;
static PyObject *const_unicode_digest_250f4411eb9a039678ff1da59c1dd93d;
static PyObject *const_unicode_digest_75d9aaf6a4859af17b4d875e9812cc2a;
static PyObject *const_tuple_str_plain_match_str_plain_parser_str_plain_s_tuple;
extern PyObject *const_str_plain_clear;
extern PyObject *const_str_plain_isspace;
static PyObject *const_unicode_digest_d5ff81d4d6c28083d6160214ce8f4bf9;
static PyObject *const_str_plain__get;
static PyObject *const_tuple_unicode_chr_37_tuple;
extern PyObject *const_str_plain_sys;
static PyObject *const_unicode_digest_1b9555de4b3c305c71ba07924825cf5a;
extern PyObject *const_str_plain_LegacyInterpolation;
static PyObject *const_str_plain__DEFAULT_INTERPOLATION;
static PyObject *const_unicode_digest_42b0ab13226a892a08ecc9034177b2cb;
static PyObject *const_unicode_digest_ea09ec4e8700c977766a0e16c21a30a1;
static PyObject *const_tuple_09410f2f2f2af282a8576ef9481559e4_tuple;
static PyObject *const_str_plain_getboolean;
static PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_d_tuple;
static PyObject *const_str_plain_getter;
static PyObject *const_str_plain_sect;
extern PyObject *const_str_digest_031a36d9e219a028fd504d88b7a8c068;
static PyObject *const_dict_af01fef0f5b348ee65397647dd94bd96;
extern PyObject *const_str_plain_sections;
static PyObject *const_tuple_str_plain_self_str_plain_key_str_plain_k_str_plain_inst_tuple;
static PyObject *const_unicode_digest_5b1239f5c0fafdafe0da77042401314f;
extern PyObject *const_str_plain_source;
extern PyObject *const_str_plain_delattr;
static PyObject *const_tuple_bf4c15b53bf3882e410458d5826bb932_tuple;
static PyObject *const_unicode_digest_a9245b0df173463d2e91b24cc86ec6f9;
static PyObject *const_str_plain__options;
static PyObject *const_unicode_digest_e29344b723f0d47339ac4bc00c9b3ffd;
extern PyObject *const_str_plain_proxy;
static PyObject *const_str_plain__comment_prefixes;
static PyObject *const_tuple_str_plain_self_str_plain_msg_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_f_str_plain_source_tuple;
static PyObject *const_str_plain_remove_option;
static PyObject *const_str_plain_before_get;
static PyObject *const_str_plain_NONSPACECRE;
extern PyObject *const_str_plain_raw;
static PyObject *const_str_plain_add_section;
extern PyObject *const_str_plain_ParsingError;
static PyObject *const_tuple_d328a853cb5f20ab31adeed177868e53_tuple;
extern PyObject *const_str_plain__UNSET;
static PyObject *const_str_plain_section;
extern PyObject *const_str_plain_defaults;
static PyObject *const_unicode_digest_e8721ca8abec0cfcd8995ac84d65f9bb;
static PyObject *const_unicode_digest_777628c26f9a8187996cd389e788a09c;
static PyObject *const_unicode_digest_597fc368a20a14ae60713b98d6c256f0;
static PyObject *const_unicode_digest_44aeb5afdb3eeeb7cb6c82f3ada09f3c;
static PyObject *const_unicode_digest_6e5f27735944d4660becbd9f74916e34;
static PyObject *const_str_plain__proxies;
static PyObject *const_str_plain_parser;
static PyObject *const_tuple_518ebbe3d6e13fd0cf0c811373cb2361_tuple;
static PyObject *const_str_plain__write_section;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_plain___all__;
static PyObject *const_tuple_str_plain_self_str_plain_section_tuple;
extern PyObject *const_str_plain_strict;
extern PyObject *const_str_plain_kwargs;
extern PyObject *const_str_plain_re;
extern PyObject *const_tuple_str_plain_self_str_plain_key_str_plain_value_tuple;
extern PyObject *const_str_plain___iter__;
extern PyObject *const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple;
static PyObject *const_unicode_digest_72bee08aee2a6d2e313877610e96cf3f;
extern PyObject *const_str_plain_interpolation;
static PyObject *const_tuple_7362694683cbbac7605a01b7d7947279_tuple;
static PyObject *const_str_plain_conv;
static PyObject *const_unicode_digest_f6b33aa61b9a3fd36565b9f938e21bbe;
static PyObject *const_str_plain_getfloat;
static PyObject *const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple;
static PyObject *const_unicode_plain_false;
static PyObject *const_str_plain_fpname;
extern PyObject *const_str_plain_map;
static PyObject *const_unicode_plain_DEFAULT;
static PyObject *const_unicode_digest_c79929ceb2ff30004e20959691df1cfe;
static PyObject *const_str_plain_remove_section;
static PyObject *const_str_plain__OPT_NV_TMPL;
static PyObject *const_tuple_unicode_plain_empty_lines_in_values_true_tuple;
extern PyObject *const_str_plain___file__;
static PyObject *const_unicode_plain_header;
static PyObject *const_unicode_digest_3ba0dd0c6928643e6077d299d4239035;
static PyObject *const_unicode_digest_c10a3c13ccfc02e12f49b700e84e610a;
static PyObject *const_unicode_digest_4a13f22bb229ffc0dd18e499d29bb520;
static PyObject *const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple;
extern PyObject *const_str_plain_str;
extern PyObject *const_str_plain_StringIO;
extern PyObject *const_str_plain___getitem__;
static PyObject *const_unicode_digest_a55e62ecebc3638c3790b61bfdecc84f;
extern PyObject *const_str_plain___metaclass__;
static PyObject *const_tuple_unicode_plain_strict_true_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_key_str_plain_value_str_plain___tuple;
static PyObject *const_str_plain_opts;
static PyObject *const_str_plain_comment_prefixes;
static PyObject *const_str_plain_rawval;
extern PyObject *const_tuple_none_none_tuple;
extern PyObject *const_str_plain_RawConfigParser;
static PyObject *const_str_plain_all_sections;
extern PyObject *const_str_plain_setter;
extern PyObject *const_str_plain_replace;
static PyObject *const_str_plain__join_multiline_values;
static PyObject *const_str_plain_has_section;
static PyObject *const_str_plain_read_dict;
static PyObject *const_unicode_digest_9f6ca6adc5a1daa353fb07ed2ede3cad;
static PyObject *const_unicode_digest_ea4d823bdfb88b939de467d57614ceb3;
static PyObject *const_str_plain_readfp;
extern PyObject *const_str_plain_DuplicateOptionError;
extern PyObject *const_str_plain_path;
static PyObject *const_unicode_empty;
static PyObject *const_str_plain_lineno;
static PyObject *const_tuple_4b7d0d7d284fbd2188a4bdc058f4fb16_tuple;
static PyObject *const_unicode_digest_81e2c763ec8c279bf7b5a4323f229e92;
extern PyObject *const_str_plain_name;
static PyObject *const_unicode_chr_61;
static PyObject *const_str_plain__allow_no_value;
static PyObject *const_unicode_plain_fallback;
static PyObject *const_unicode_digest_f12c4656a51d1e626cbcead58b6119d2;
static PyObject *const_tuple_unicode_plain__impl_none_tuple;
static PyObject *const_str_plain_vardict;
static PyObject *const_tuple_unicode_angle_dict_tuple;
static PyObject *const_str_plain__interpolate_some;
extern PyObject *const_str_plain_msg;
extern PyObject *const_str_plain_append;
static PyObject *const_str_plain_existed;
extern PyObject *const_str_plain_Interpolation;
static PyObject *const_tuple_unicode_chr_58_tuple;
extern PyObject *const_str_plain_DeprecationWarning;
extern PyObject *const_int_neg_1;
static PyObject *const_dict_f34551bd9b350227d9d52290f83daeb7;
static PyObject *const_str_plain__strict;
static PyObject *const_str_plain_optionstr;
static PyObject *const_unicode_digest_7ff059010e9310f13d6c5d4ea2f008dc;
static PyObject *const_str_plain_OPTCRE;
static PyObject *const_tuple_fa39a8b539bd1613ecffe553f3dde69b_tuple;
extern PyObject *const_str_plain_Error;
static PyObject *const_tuple_unicode_digest_62c889c67fbc8a8f6cf60127214f5229_tuple;
static PyObject *const_unicode_plain_section;
extern PyObject *const_str_plain_insert;
static PyObject *const_tuple_53c577bb263cd373580cbd1a38a3b7ef_tuple;
extern PyObject *const_str_plain__;
static PyObject *const_unicode_plain_vi;
extern PyObject *const_tuple_int_pos_1_tuple;
static PyObject *const_unicode_digest_595de77368bf8b4f1a509a3782848544;
static PyObject *const_unicode_digest_8ffdfa928271f03fe607bd119d1d0811;
static PyObject *const_unicode_digest_f3da1e8b37fff523f27655056557d16f;
extern PyObject *const_tuple_none_none_none_tuple;
extern PyObject *const_str_plain_division;
static PyObject *const_unicode_digest_9dda3b347f4490a721713de320c4939e;
static PyObject *const_unicode_plain_on;
extern PyObject *const_str_plain_pop;
static PyObject *const_unicode_chr_35;
static PyObject *const_unicode_chr_37;
static PyObject *const_unicode_chr_36;
static PyObject *const_str_plain_dictionary;
extern PyObject *const_str_plain_collections;
extern PyObject *const_str_plain_stacklevel;
static PyObject *const_unicode_plain_empty_lines_in_values;
static PyObject *const_tuple_1bdad6201c552b523a39052fe498eed6_tuple;
static PyObject *const_tuple_294f3cd008bf03960a75f8516370eaed_tuple;
static PyObject *const_str_plain__sections;
static PyObject *const_str_plain__unify_values;
static PyObject *const_unicode_digest_4ec1e2f352e46451c0a24f6ac1b5bf0d;
extern PyObject *const_str_plain_ConfigParser;
extern PyObject *const_str_plain_partial;
static PyObject *const_unicode_digest_d116969f3678a49de4788256651f4ba8;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_tuple_type_object_tuple;
static PyObject *const_unicode_chr_40;
static PyObject *const_tuple_648b937946f015cde569c4c2ca8649d8_tuple;
static PyObject *const_unicode_plain_comment_prefixes;
static PyObject *const_str_plain_optionxform;
static PyObject *const_str_plain_read_string;
extern PyObject *const_str_plain_decode;
static PyObject *const_tuple_ef677f8899292f812ba973ea661d9005_tuple;
static PyObject *const_str_plain__get_conv;
static PyObject *const_tuple_str_plain_self_str_plain_option_str_plain_section_tuple;
extern PyObject *const_str_plain_DuplicateSectionError;
static PyObject *const_unicode_digest_f84bc8ebfecfda0276b1d26eed2ae3f4;
static PyObject *const_tuple_05dc6e80a1e72145e6eb56080b9a795d_tuple;
static PyObject *const_unicode_digest_60be27da7e87e378758d9b87560fd1dc;
static PyObject *const_tuple_0b91b062b9ea890e5b46122de323346f_tuple;
static PyObject *const_str_plain_SECTCRE;
static PyObject *const_unicode_digest_4c9346a6b662bc8be66cfaa20ecc4958;
extern PyObject *const_str_plain_read;
static PyObject *const_unicode_plain_off;
extern PyObject *const_str_plain_key;
extern PyObject *const_str_plain_var;
static PyObject *const_str_plain_delim;
static PyObject *const_str_plain_filenames;
static PyObject *const_unicode_digest_4f2f59c5fd34e832e99e1afae744a1eb;
static PyObject *const_tuple_8170fc4e20b7416c8268b15f8a321606_tuple;
extern PyObject *const_str_plain_self;
static PyObject *const_unicode_plain_delimiters;
static PyObject *const_unicode_plain_inline_comment_prefixes;
extern PyObject *const_str_plain_val;
static PyObject *const_tuple_str_plain_option_str_plain_d_tuple;
static PyObject *const_str_digest_7cfcf4e3ecceb0a971b6d9a37c2398d0;
extern PyObject *const_str_plain_maxsize;
static PyObject *const_tuple_unicode_digest_c08197f9ec3b87cf34175c6ee14d2c8c_tuple;
static PyObject *const_str_plain_tmp_value;
extern PyObject *const_str_plain_MutableMapping;
static PyObject *const_tuple_str_plain_self_str_plain_section_str_plain_option_tuple;
static PyObject *const_unicode_digest_6101524743862210e4b5ed676eb377c1;
extern PyObject *const_str_plain_chain;
extern PyObject *const_str_plain_value;
extern PyObject *const_dict_f154c9a58c9419d7e391901d7b7fe49e;
static PyObject *const_unicode_digest_d92a042e50db9cd5d96099fd0dfc976b;
static PyObject *const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple;
static PyObject *const_unicode_plain_vars;
extern PyObject *const_str_plain_sub;
extern PyObject *const_str_plain___setitem__;
static PyObject *const_str_plain_section_items;
extern PyObject *const_str_plain_min;
static PyObject *const_str_plain__OPT_TMPL;
extern PyObject *const_str_plain_InterpolationDepthError;
static PyObject *const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple;
static PyObject *const_tuple_int_0_unicode_digest_712073c5ac5a3a5ae23dbedbd9e36f9a_tuple;
static PyObject *const_str_plain__delimiters;
extern PyObject *const_int_pos_10;
static PyObject *const_str_plain__interpolation_replace;
static PyObject *const_tuple_unicode_chr_36_tuple;
extern PyObject *const_str_plain_message;
extern PyObject *const_dict_empty;
extern PyObject *const_str_plain_strip;
static PyObject *const_str_plain_GETTERCRE;
extern PyObject *const_str_plain_InterpolationError;
static PyObject *const_unicode_digest_f8a9214f74c6e3de16fd714be673fbbe;
static PyObject *const_tuple_e9553513417345251cfa61446d055d17_tuple;
static PyObject *const_str_plain__parser;
extern PyObject *const_str_plain_errors;
static PyObject *const_unicode_digest_b0ecf39a2c510a4ac4c302165dbbfc85;
extern PyObject *const_int_pos_2;
static PyObject *const_tuple_unicode_angle_string_tuple;
static PyObject *const_unicode_digest_dbe5b95b36dede490343b16fa819c9d3;
extern PyObject *const_tuple_str_plain_ChainMap_tuple;
static PyObject *const_unicode_digest_cca2840096ce79eebf3fd9d166beac24;
extern PyObject *const_str_plain_SafeConfigParser;
extern PyObject *const_tuple_true_tuple;
static PyObject *const_unicode_digest_8fd76be66ef1f9e1525a445a9fe2ae66;
static PyObject *const_tuple_402cc1fb5f781edb557079498893b004_tuple;
static PyObject *const_str_plain_dict_type;
static PyObject *const_tuple_str_plain_self_str_plain_section_str_plain_existed_tuple;
static PyObject *const_unicode_digest_ea6cba6daff355ced485663c0798a1b3;
static PyObject *const_unicode_plain_raw;
static PyObject *const_unicode_plain_strict;
extern PyObject *const_int_pos_1;
static PyObject *const_tuple_d41583092ddfc8815e9c78caa843964c_tuple;
extern PyObject *const_str_plain_ExtendedInterpolation;
static PyObject *const_str_plain_vars;
static PyObject *const_unicode_digest_62c889c67fbc8a8f6cf60127214f5229;
extern PyObject *const_str_plain_OrderedDict;
extern PyObject *const_str_plain_join;
extern PyObject *const_str_plain_io;
extern PyObject *const_tuple_str_plain_self_str_plain_key_tuple;
static PyObject *const_unicode_angle_dict;
static PyObject *const_unicode_digest_b152aa221a76ab41baa98fbf6826b7bf;
extern PyObject *const_str_plain_functools;
extern PyObject *const_str_plain_options;
static PyObject *const_str_plain__interpolation;
extern PyObject *const_str_plain_L;
extern PyObject *const_str_plain___enter__;
static PyObject *const_tuple_unicode_plain_section_unicode_empty_tuple;
extern PyObject *const_str_plain_extend;
static PyObject *const_unicode_digest_5932e42aea3b879960f95809efa5dc41;
extern PyObject *const_str_plain_fp;
static PyObject *const_unicode_plain__impl;
static PyObject *const_unicode_plain_value;
extern PyObject *const_str_plain_SectionProxy;
extern PyObject *const_str_plain_m;
static PyObject *const_str_plain_option;
extern PyObject *const_str_plain_k;
extern PyObject *const_str_plain_d;
extern PyObject *const_str_plain_e;
extern PyObject *const_str_plain_f;
static PyObject *const_unicode_digest_a580203ae2f51c2fe9e7c0fe709b2d9f;
static PyObject *const_tuple_740d6674f6f61423511f2af55d717e03_tuple;
extern PyObject *const_str_plain_c;
extern PyObject *const_str_plain_line;
static PyObject *const_tuple_cff11dfbf3d13413ad3d037ba36caaf3_tuple;
static PyObject *const_tuple_b5a0a397f21f33e9de74beeb38637f36_tuple;
extern PyObject *const_str_plain___contains__;
static PyObject *const_unicode_plain_converters;
extern PyObject *const_str_plain_v;
static PyObject *const_tuple_int_0_unicode_digest_a672f37732d732178f7ab78af6651d17_tuple;
extern PyObject *const_str_plain_p;
extern PyObject *const_str_plain_s;
static PyObject *const_unicode_digest_712073c5ac5a3a5ae23dbedbd9e36f9a;
static PyObject *const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple;
extern PyObject *const_str_plain_escape;
static PyObject *const_unicode_digest_32a7c14e1962cf51e13e07dfdd18607b;
static PyObject *const_unicode_digest_d9bfe4bacf6eccce4ccb97839cac728a;
extern PyObject *const_str_plain_ChainMap;
static PyObject *const_unicode_digest_c08197f9ec3b87cf34175c6ee14d2c8c;
static PyObject *const_unicode_chr_59;
static PyObject *const_unicode_digest_e7d6c92e5f525c42a2b6d9279792135b;
static PyObject *const_str_plain_fallback;
static PyObject *const_unicode_digest_b7f7efa2c49b31ac4729f3ed5de7764e;
extern PyObject *const_str_plain_setdefault;
static PyObject *const_str_plain__impl;
static PyObject *const_tuple_abc308b2ba024d9227828c0d9b6c0f3a_tuple;
static PyObject *const_unicode_digest_103ef0436fca070da42cade6efad0c30;
extern PyObject *const_int_0;
static PyObject *const_unicode_digest_bb1414ad81bd2d95e4e4b42d0d0a436b;
static PyObject *const_str_plain_value_getter;
static PyObject *const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple;
static PyObject *const_unicode_digest_679c6565b3f0cccac66b5c85045c378a;
static PyObject *const_unicode_plain_option;
extern PyObject *const_str_plain_callable;
extern PyObject *const_str_plain__data;
static PyObject *const_unicode_digest_7b121adedd001c67062f1cdedf86549d;
extern PyObject *const_str_plain_compile;
extern PyObject *const_str_plain_absolute_import;
static PyObject *const_str_plain_space_around_delimiters;
static PyObject *const_tuple_d2d860e4cce3104a4798ae7fa69b2867_tuple;
static PyObject *const_str_plain__empty_lines_in_values;
extern PyObject *const_str_angle_lambda;
extern PyObject *const_str_plain_copy;
static PyObject *const_str_plain__validate_value_types;
static PyObject *const_unicode_plain_utf8;
extern PyObject *const_str_plain___package__;
static PyObject *const_str_plain_read_file;
extern PyObject *const_str_plain_popitem;
extern PyObject *const_str_plain_func;
static PyObject *const_tuple_unicode_plain_option_unicode_plain_vi_unicode_plain_value_tuple;
static PyObject *const_unicode_digest_982e13bc4959251905723e01bd1cf8ff;
static PyObject *const_tuple_unicode_digest_d92a042e50db9cd5d96099fd0dfc976b_tuple;
static PyObject *const_unicode_digest_4db7c54d6619a457f6080d2f26ecb116;
static PyObject *const_tuple_unicode_digest_7ff059010e9310f13d6c5d4ea2f008dc_tuple;
extern PyObject *const_tuple_str_plain_OrderedDict_tuple;
extern PyObject *const_str_plain_exc;
static PyObject *const_str_plain__name;
extern PyObject *const_str_plain___repr__;
static PyObject *const_unicode_chr_58;
extern PyObject *const_str_plain_start;
extern PyObject *const_str_plain_NoSectionError;
extern PyObject *const_str_plain_MissingSectionHeaderError;
static PyObject *const_unicode_digest_2b17af6512f94b422e2cdf46d7a2cd05;
extern PyObject *const_str_plain_print_function;
static PyObject *const_tuple_unicode_plain_name_tuple;
static PyObject *const_str_plain__defaults;
extern PyObject *const_str_plain_DEFAULTSECT;
static PyObject *const_tuple_882cf825907280cd818aafbc44a75e54_tuple;
extern PyObject *const_unicode_newline;
extern PyObject *const_str_plain___str__;
static PyObject *const_unicode_digest_b38a29c561849c4a73b47f8840a102d7;
static PyObject *const_unicode_digest_bb8336bd8643cdb9a361f59cbfe67d53;
static PyObject *const_str_plain_VERBOSE;
static PyObject *const_str_plain_default_section;
extern PyObject *const_str_plain_split;
static PyObject *const_unicode_digest_cb8953f72b664bec33773b24759057f2;
static PyObject *const_unicode_digest_ed11dd8625a67522a8dbc9eb062dabce;
static PyObject *const_tuple_unicode_plain_raw_false_tuple;
extern PyObject *const_str_plain_search;
static PyObject *const_str_plain__converters;
static PyObject *const_str_plain_sectdict;
static PyObject *const_unicode_digest_c3f2c8fd00d902a8a5910f161be13f89;
static PyObject *const_str_plain_before_write;
static PyObject *const_str_plain__inline_comment_prefixes;
static PyObject *const_tuple_unicode_plain_inline_comment_prefixes_none_tuple;
extern PyObject *const_str_plain_format;
static PyObject *const_unicode_digest_2056f54f51dda70a2e666ca792d6d9e2;
static PyObject *const_tuple_str_plain_self_str_plain_section_str_plain_opts_tuple;
extern PyObject *const_str_plain__default_dict;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain_lower;
static PyObject *const_unicode_digest_ee5eca4e6822fcb5c3a1f80b683f8ef5;
static PyObject *const_unicode_digest_876651e3baa8b4da865b7f2efeaddcf4;
static PyObject *const_unicode_digest_d11f6e3c207689d9d4133ffcf5b86765;
extern PyObject *const_str_plain_InterpolationMissingOptionError;
extern PyObject *const_str_plain_rstrip;
extern PyObject *const_str_plain_string;
static PyObject *const_str_plain_has_option;
static PyObject *const_str_plain_opt;
extern PyObject *const_str_plain_delimiter;
static PyObject *const_tuple_83b306704934f780ec1abb9795b2fd28_tuple;
extern PyObject *const_str_plain__ChainMap;
static PyObject *const_unicode_digest_1f92d9ab67c11fc46d9c44149d230a67;
extern PyObject *const_str_plain_PY2;
static PyObject *const_tuple_str_plain_self_str_plain_source_str_plain_filename_tuple;
extern PyObject *const_str_plain_values;
static PyObject *const_unicode_digest_9c0422138b231ab00ef3752351c8a02b;
static PyObject *const_unicode_digest_4c5d0a2590b13e3eb225faca93cf1ccc;
static PyObject *const_str_plain_OPTCRE_NV;
static PyObject *const_str_plain_before_set;
static PyObject *const_tuple_str_plain_self_str_plain_section_str_plain___tuple;
static PyObject *const_tuple_e81acbb6b5ba5121b952ce35d86e1f0c_tuple;
static PyObject *const_unicode_plain_get;
static PyObject *const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple;
static PyObject *const_unicode_plain_true;
static PyObject *const_unicode_digest_a312722c82c64d3d8d90846f8090973a;
static PyObject *const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple;
static PyObject *const_unicode_digest_54e7c558f1589423ec2e67698d109215;
static PyObject *const_str_plain_elements_added;
static PyObject *const_unicode_digest_8eeb96261c7bdfcc231650fb4bf54f49;
static PyObject *const_tuple_unicode_digest_aa623b64bfb5399ec1f50c86b7d261e5_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_parser_str_plain_getter_str_plain_m_tuple;
extern PyObject *const_str_plain_end;
static PyObject *const_tuple_str_plain_self_str_plain_optionstr_tuple;
static PyObject *const_str_plain_getint;
extern PyObject *const_list_7559f37a4d4a089c4373f758af56e97a_list;
static PyObject *const_tuple_252f8a908df52fd6ded436190a417ff5_tuple;
extern PyObject *const_str_plain___delitem__;
static PyObject *const_tuple_32e51553fbedf2e08f82df32b2ef578d_tuple;
static PyObject *const_unicode_angle_string;
static PyObject *const_str_digest_ee02b24011111ba04dcb95fb5408b70c;
static PyObject *const_str_plain_sectiondict;
static PyObject *const_dict_d86ae6d9cc5bf51b4834b1d52ac321cd;
static PyObject *const_unicode_digest_92620cfc7f97a4f02f72f4c332258a0d;
static PyObject *const_unicode_plain_name;
static PyObject *const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple;
static PyObject *const_str_plain_inline_comment_prefixes;
static PyObject *const_tuple_unicode_digest_4ec1e2f352e46451c0a24f6ac1b5bf0d_tuple;
static PyObject *const_unicode_plain_yes;
static PyObject *const_str_digest_2f4fe541d26921044713712808db8449;
extern PyObject *const_str_plain___doc__;
static PyObject *const_unicode_digest_7b3bca760f870946ea0048947045fdbf;
extern PyObject *const_str_plain_from_none;
static PyObject *const_str_plain__optcre;
static PyObject *const_unicode_digest_44790ccfcf06fce5c5bf48fb0ed505cc;
extern PyObject *const_str_plain___len__;
static PyObject *const_unicode_digest_dcda6f8db35b3ee07c3acac24bc12683;
static PyObject *const_unicode_digest_d932a45b6a9f6aa7080d2b26fbc636e4;
static PyObject *const_unicode_digest_a672f37732d732178f7ab78af6651d17;
extern PyObject *const_str_plain_keys;
static PyObject *const_unicode_digest_dae4a0e89d49141cd5a78a833b7df4e0;
static PyObject *const_str_plain__KEYCRE;
static PyObject *const_tuple_9257a6de32cab8660413f61fc0532bf4_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_lineno_str_plain_line_tuple;
static PyObject *const_str_plain_sfile;
static PyObject *const_str_plain__convert_to_boolean;
static PyObject *const_tuple_unicode_plain_option_unicode_empty_tuple;
static PyObject *const_unicode_digest_c924cb63340003048350ea06e3ba3ef4;
extern PyObject *const_tuple_none_tuple;
static PyObject *const_tuple_unicode_chr_35_unicode_chr_59_tuple;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_unicode_plain_interpolation = UNSTREAM_UNICODE( &constant_bin[ 13757 ], 13 );
    const_dict_232d830ea747452602b3fbf1a87fe962 = _PyDict_NewPresized( 1 );
    const_str_plain_delim = UNSTREAM_STRING( &constant_bin[ 13770 ], 5, 1 );
    const_unicode_digest_a55e62ecebc3638c3790b61bfdecc84f = UNSTREAM_UNICODE( &constant_bin[ 13775 ], 3 );
    PyDict_SetItem( const_dict_232d830ea747452602b3fbf1a87fe962, const_str_plain_delim, const_unicode_digest_a55e62ecebc3638c3790b61bfdecc84f );
    assert( PyDict_Size( const_dict_232d830ea747452602b3fbf1a87fe962 ) == 1 );
    const_tuple_8f340be7d65d4c529731c20c61f2d7df_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_8f340be7d65d4c529731c20c61f2d7df_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_8f340be7d65d4c529731c20c61f2d7df_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_str_plain_section = UNSTREAM_STRING( &constant_bin[ 13778 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_8f340be7d65d4c529731c20c61f2d7df_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    const_str_plain_option = UNSTREAM_STRING( &constant_bin[ 1170 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_8f340be7d65d4c529731c20c61f2d7df_tuple, 3, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_8f340be7d65d4c529731c20c61f2d7df_tuple, 4, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_unicode_digest_f82f3044a826ec8f37ea1989caff8a4e = UNSTREAM_UNICODE( &constant_bin[ 13785 ], 605 );
    const_tuple_unicode_plain_vars_none_tuple = PyTuple_New( 2 );
    const_unicode_plain_vars = UNSTREAM_UNICODE( &constant_bin[ 13839 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_vars_none_tuple, 0, const_unicode_plain_vars ); Py_INCREF( const_unicode_plain_vars );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_vars_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_tuple_unicode_empty_tuple = PyTuple_New( 1 );
    const_unicode_empty = UNSTREAM_UNICODE( &constant_bin[ 0 ], 0 );
    PyTuple_SET_ITEM( const_tuple_unicode_empty_tuple, 0, const_unicode_empty ); Py_INCREF( const_unicode_empty );
    const_str_plain_depth = UNSTREAM_STRING( &constant_bin[ 14390 ], 5, 1 );
    const_tuple_unicode_plain_value_unicode_empty_tuple = PyTuple_New( 2 );
    const_unicode_plain_value = UNSTREAM_UNICODE( &constant_bin[ 4908 ], 5 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_value_unicode_empty_tuple, 0, const_unicode_plain_value ); Py_INCREF( const_unicode_plain_value );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_value_unicode_empty_tuple, 1, const_unicode_empty ); Py_INCREF( const_unicode_empty );
    const_str_plain_inst = UNSTREAM_STRING( &constant_bin[ 112 ], 4, 1 );
    const_str_plain_BOOLEAN_STATES = UNSTREAM_STRING( &constant_bin[ 14395 ], 14, 1 );
    const_str_plain_rest = UNSTREAM_STRING( &constant_bin[ 9944 ], 4, 1 );
    const_tuple_unicode_chr_61_unicode_chr_58_tuple = PyTuple_New( 2 );
    const_unicode_chr_61 = UNSTREAM_UNICODE( &constant_bin[ 4957 ], 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_chr_61_unicode_chr_58_tuple, 0, const_unicode_chr_61 ); Py_INCREF( const_unicode_chr_61 );
    const_unicode_chr_58 = UNSTREAM_UNICODE( &constant_bin[ 99 ], 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_chr_61_unicode_chr_58_tuple, 1, const_unicode_chr_58 ); Py_INCREF( const_unicode_chr_58 );
    const_unicode_digest_3d6d15600c2f11e9754459914e332bbf = UNSTREAM_UNICODE( &constant_bin[ 14409 ], 50 );
    const_str_plain_read_ok = UNSTREAM_STRING( &constant_bin[ 14459 ], 7, 1 );
    const_str_plain_before_read = UNSTREAM_STRING( &constant_bin[ 14466 ], 11, 1 );
    const_str_plain_accum = UNSTREAM_STRING( &constant_bin[ 14477 ], 5, 1 );
    const_str_plain__handle_error = UNSTREAM_STRING( &constant_bin[ 14482 ], 13, 1 );
    const_unicode_digest_11beb09e0de26f74826a05c6f1fc1992 = UNSTREAM_UNICODE( &constant_bin[ 14495 ], 16 );
    const_str_plain_set = UNSTREAM_STRING( &constant_bin[ 26 ], 3, 1 );
    const_unicode_digest_bd87c419367177d256cc0fdf0cb9a778 = UNSTREAM_UNICODE( &constant_bin[ 14495 ], 2 );
    const_unicode_digest_88556a5392a93fcde31f2432e52f3b0b = UNSTREAM_UNICODE( &constant_bin[ 14511 ], 10 );
    const_unicode_digest_a323efdbe45e9fbbc3671543a313d2cf = UNSTREAM_UNICODE( &constant_bin[ 14521 ], 457 );
    const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_dictionary = UNSTREAM_STRING( &constant_bin[ 13871 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple, 1, const_str_plain_dictionary ); Py_INCREF( const_str_plain_dictionary );
    PyTuple_SET_ITEM( const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple, 2, const_str_plain_source ); Py_INCREF( const_str_plain_source );
    const_str_plain_elements_added = UNSTREAM_STRING( &constant_bin[ 14978 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple, 3, const_str_plain_elements_added ); Py_INCREF( const_str_plain_elements_added );
    PyTuple_SET_ITEM( const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple, 4, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple, 5, const_str_plain_keys ); Py_INCREF( const_str_plain_keys );
    PyTuple_SET_ITEM( const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple, 6, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple, 7, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_unicode_digest_aa6e002a5624aef8ede10ac56676c30b = UNSTREAM_UNICODE( &constant_bin[ 14992 ], 74 );
    const_unicode_digest_fa3d841f27a9aa146426853cb2dc72ad = UNSTREAM_UNICODE( &constant_bin[ 15066 ], 40 );
    const_str_plain__SECT_TMPL = UNSTREAM_STRING( &constant_bin[ 15106 ], 10, 1 );
    const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_tuple, 1, const_str_plain_p ); Py_INCREF( const_str_plain_p );
    const_tuple_1ac7386b4f56dc6e73450d76941ab6da_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_1ac7386b4f56dc6e73450d76941ab6da_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_1ac7386b4f56dc6e73450d76941ab6da_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_1ac7386b4f56dc6e73450d76941ab6da_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    const_str_plain_conv = UNSTREAM_STRING( &constant_bin[ 15116 ], 4, 1 );
    PyTuple_SET_ITEM( const_tuple_1ac7386b4f56dc6e73450d76941ab6da_tuple, 3, const_str_plain_conv ); Py_INCREF( const_str_plain_conv );
    PyTuple_SET_ITEM( const_tuple_1ac7386b4f56dc6e73450d76941ab6da_tuple, 4, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_str_plain_fallback = UNSTREAM_STRING( &constant_bin[ 3025 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_1ac7386b4f56dc6e73450d76941ab6da_tuple, 5, const_str_plain_fallback ); Py_INCREF( const_str_plain_fallback );
    const_unicode_digest_8deb2a0fb571306186896008c4c5fd89 = UNSTREAM_UNICODE( &constant_bin[ 15120 ], 14 );
    const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple, 1, const_str_plain_defaults ); Py_INCREF( const_str_plain_defaults );
    const_str_plain_all_sections = UNSTREAM_STRING( &constant_bin[ 15134 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple, 2, const_str_plain_all_sections ); Py_INCREF( const_str_plain_all_sections );
    PyTuple_SET_ITEM( const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple, 3, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple, 4, const_str_plain_options ); Py_INCREF( const_str_plain_options );
    PyTuple_SET_ITEM( const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple, 5, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple, 6, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    const_tuple_unicode_plain_header_tuple = PyTuple_New( 1 );
    const_unicode_plain_header = UNSTREAM_UNICODE( &constant_bin[ 15146 ], 6 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_header_tuple, 0, const_unicode_plain_header ); Py_INCREF( const_unicode_plain_header );
    const_str_plain_empty_lines_in_values = UNSTREAM_STRING( &constant_bin[ 15152 ], 21, 1 );
    const_unicode_digest_14d760694ac12dfa4c72b22a180ebfa1 = UNSTREAM_UNICODE( &constant_bin[ 15173 ], 2 );
    const_unicode_plain_no = UNSTREAM_UNICODE( &constant_bin[ 1406 ], 2 );
    const_unicode_plain_0 = UNSTREAM_UNICODE( &constant_bin[ 2262 ], 1 );
    const_unicode_plain_1 = UNSTREAM_UNICODE( &constant_bin[ 4832 ], 1 );
    const_str_plain_reference = UNSTREAM_STRING( &constant_bin[ 15175 ], 9, 1 );
    const_unicode_digest_9f20f6717c1f5b6d818952a8db8ef7c1 = UNSTREAM_UNICODE( &constant_bin[ 15184 ], 142 );
    const_tuple_0b84ef46e0e4a1b841437ea04cc83002_tuple = PyTuple_New( 2 );
    const_unicode_plain_comment_prefixes = UNSTREAM_UNICODE( &constant_bin[ 15326 ], 16 );
    PyTuple_SET_ITEM( const_tuple_0b84ef46e0e4a1b841437ea04cc83002_tuple, 0, const_unicode_plain_comment_prefixes ); Py_INCREF( const_unicode_plain_comment_prefixes );
    const_tuple_unicode_chr_35_unicode_chr_59_tuple = PyTuple_New( 2 );
    const_unicode_chr_35 = UNSTREAM_UNICODE( &constant_bin[ 252 ], 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_chr_35_unicode_chr_59_tuple, 0, const_unicode_chr_35 ); Py_INCREF( const_unicode_chr_35 );
    const_unicode_chr_59 = UNSTREAM_UNICODE( &constant_bin[ 15342 ], 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_chr_35_unicode_chr_59_tuple, 1, const_unicode_chr_59 ); Py_INCREF( const_unicode_chr_59 );
    PyTuple_SET_ITEM( const_tuple_0b84ef46e0e4a1b841437ea04cc83002_tuple, 1, const_tuple_unicode_chr_35_unicode_chr_59_tuple ); Py_INCREF( const_tuple_unicode_chr_35_unicode_chr_59_tuple );
    const_unicode_digest_922d4071dfffdf93a59015033bc38c95 = UNSTREAM_UNICODE( &constant_bin[ 15343 ], 303 );
    const_tuple_str_plain_self_str_plain_fp_str_plain_filename_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fp_str_plain_filename_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fp_str_plain_filename_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fp_str_plain_filename_tuple, 2, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    const_unicode_plain_default_section = UNSTREAM_UNICODE( &constant_bin[ 15646 ], 15 );
    const_tuple_unicode_newline_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_newline_tuple, 0, const_unicode_newline ); Py_INCREF( const_unicode_newline );
    const_unicode_chr_123 = UNSTREAM_UNICODE( &constant_bin[ 15130 ], 1 );
    const_unicode_chr_124 = UNSTREAM_UNICODE( &constant_bin[ 13776 ], 1 );
    const_str_plain__read = UNSTREAM_STRING( &constant_bin[ 14472 ], 5, 1 );
    const_unicode_digest_196f7ecd368dc258e71cf76594c5dbd9 = UNSTREAM_UNICODE( &constant_bin[ 15661 ], 57 );
    const_unicode_digest_c40da24b9fb2f7d79a4e07fe6c8f5b08 = UNSTREAM_UNICODE( &constant_bin[ 15718 ], 5 );
    const_unicode_digest_34af11cfb02a76cc23098f7dbc1d08c8 = UNSTREAM_UNICODE( &constant_bin[ 15723 ], 7 );
    const_tuple_fab2d55cc656484581228079d8fe5729_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_fab2d55cc656484581228079d8fe5729_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_parser = UNSTREAM_STRING( &constant_bin[ 15387 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_fab2d55cc656484581228079d8fe5729_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_fab2d55cc656484581228079d8fe5729_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_fab2d55cc656484581228079d8fe5729_tuple, 3, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_fab2d55cc656484581228079d8fe5729_tuple, 4, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_delimiters = UNSTREAM_STRING( &constant_bin[ 15730 ], 10, 1 );
    const_list_str_digest_ee02b24011111ba04dcb95fb5408b70c_list = PyList_New( 1 );
    const_str_digest_ee02b24011111ba04dcb95fb5408b70c = UNSTREAM_STRING( &constant_bin[ 15740 ], 52, 0 );
    PyList_SET_ITEM( const_list_str_digest_ee02b24011111ba04dcb95fb5408b70c_list, 0, const_str_digest_ee02b24011111ba04dcb95fb5408b70c ); Py_INCREF( const_str_digest_ee02b24011111ba04dcb95fb5408b70c );
    const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple, 3, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple, 4, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple, 5, const_str_plain_defaults ); Py_INCREF( const_str_plain_defaults );
    PyTuple_SET_ITEM( const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple, 6, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    const_unicode_digest_1918a014a5e3dd674f19733217aa18c6 = UNSTREAM_UNICODE( &constant_bin[ 15792 ], 145 );
    const_tuple_unicode_digest_88556a5392a93fcde31f2432e52f3b0b_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_88556a5392a93fcde31f2432e52f3b0b_tuple, 0, const_unicode_digest_88556a5392a93fcde31f2432e52f3b0b ); Py_INCREF( const_unicode_digest_88556a5392a93fcde31f2432e52f3b0b );
    const_tuple_unicode_plain_utf8_tuple = PyTuple_New( 1 );
    const_unicode_plain_utf8 = UNSTREAM_UNICODE( &constant_bin[ 15937 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_utf8_tuple, 0, const_unicode_plain_utf8 ); Py_INCREF( const_unicode_plain_utf8 );
    const_str_plain_allow_no_value = UNSTREAM_STRING( &constant_bin[ 15941 ], 14, 1 );
    const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 3, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 4, const_str_plain_raw ); Py_INCREF( const_str_plain_raw );
    const_str_plain_vars = UNSTREAM_STRING( &constant_bin[ 13839 ], 4, 1 );
    PyTuple_SET_ITEM( const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 5, const_str_plain_vars ); Py_INCREF( const_str_plain_vars );
    PyTuple_SET_ITEM( const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 6, const_str_plain_fallback ); Py_INCREF( const_str_plain_fallback );
    PyTuple_SET_ITEM( const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 7, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    PyTuple_SET_ITEM( const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 8, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_unicode_digest_26f263beb79cc8e1a96654e83a2c718b = UNSTREAM_UNICODE( &constant_bin[ 15955 ], 336 );
    const_tuple_5b34e4d16ce1d6568d0913835e1643d8_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_5b34e4d16ce1d6568d0913835e1643d8_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_5b34e4d16ce1d6568d0913835e1643d8_tuple, 1, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    const_str_plain_lineno = UNSTREAM_STRING( &constant_bin[ 16291 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_5b34e4d16ce1d6568d0913835e1643d8_tuple, 2, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_5b34e4d16ce1d6568d0913835e1643d8_tuple, 3, const_str_plain_line ); Py_INCREF( const_str_plain_line );
    const_unicode_digest_79957acb7d23243c4cd1c73608e63b60 = UNSTREAM_UNICODE( &constant_bin[ 16297 ], 150 );
    const_tuple_1fbcd1fa7b15ec1fe200bc618ff93d5d_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_1fbcd1fa7b15ec1fe200bc618ff93d5d_tuple, 0, const_str_plain_from_none ); Py_INCREF( const_str_plain_from_none );
    PyTuple_SET_ITEM( const_tuple_1fbcd1fa7b15ec1fe200bc618ff93d5d_tuple, 1, const_str_plain_open ); Py_INCREF( const_str_plain_open );
    PyTuple_SET_ITEM( const_tuple_1fbcd1fa7b15ec1fe200bc618ff93d5d_tuple, 2, const_str_plain_str ); Py_INCREF( const_str_plain_str );
    PyTuple_SET_ITEM( const_tuple_1fbcd1fa7b15ec1fe200bc618ff93d5d_tuple, 3, const_str_plain_PY2 ); Py_INCREF( const_str_plain_PY2 );
    const_tuple_6ffbea5a107892fce1d59c01a5876089_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 16447 ], 749 );
    const_unicode_digest_aa623b64bfb5399ec1f50c86b7d261e5 = UNSTREAM_UNICODE( &constant_bin[ 17196 ], 15 );
    const_str_plain_converters = UNSTREAM_STRING( &constant_bin[ 17186 ], 10, 1 );
    const_str_plain_section_name = UNSTREAM_STRING( &constant_bin[ 17211 ], 12, 1 );
    const_str_plain_converter = UNSTREAM_STRING( &constant_bin[ 15538 ], 9, 1 );
    const_unicode_digest_250f4411eb9a039678ff1da59c1dd93d = UNSTREAM_UNICODE( &constant_bin[ 17223 ], 12 );
    const_unicode_digest_75d9aaf6a4859af17b4d875e9812cc2a = UNSTREAM_UNICODE( &constant_bin[ 17235 ], 207 );
    const_tuple_str_plain_match_str_plain_parser_str_plain_s_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_match_str_plain_parser_str_plain_s_tuple, 0, const_str_plain_match ); Py_INCREF( const_str_plain_match );
    PyTuple_SET_ITEM( const_tuple_str_plain_match_str_plain_parser_str_plain_s_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_str_plain_match_str_plain_parser_str_plain_s_tuple, 2, const_str_plain_s ); Py_INCREF( const_str_plain_s );
    const_unicode_digest_d5ff81d4d6c28083d6160214ce8f4bf9 = UNSTREAM_UNICODE( &constant_bin[ 17442 ], 39 );
    const_str_plain__get = UNSTREAM_STRING( &constant_bin[ 548 ], 4, 1 );
    const_tuple_unicode_chr_37_tuple = PyTuple_New( 1 );
    const_unicode_chr_37 = UNSTREAM_UNICODE( &constant_bin[ 262 ], 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_chr_37_tuple, 0, const_unicode_chr_37 ); Py_INCREF( const_unicode_chr_37 );
    const_unicode_digest_1b9555de4b3c305c71ba07924825cf5a = UNSTREAM_UNICODE( &constant_bin[ 17481 ], 519 );
    const_str_plain__DEFAULT_INTERPOLATION = UNSTREAM_STRING( &constant_bin[ 16530 ], 22, 1 );
    const_unicode_digest_42b0ab13226a892a08ecc9034177b2cb = UNSTREAM_UNICODE( &constant_bin[ 18000 ], 34 );
    const_unicode_digest_ea09ec4e8700c977766a0e16c21a30a1 = UNSTREAM_UNICODE( &constant_bin[ 18034 ], 31 );
    const_tuple_09410f2f2f2af282a8576ef9481559e4_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_09410f2f2f2af282a8576ef9481559e4_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_09410f2f2f2af282a8576ef9481559e4_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_09410f2f2f2af282a8576ef9481559e4_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_09410f2f2f2af282a8576ef9481559e4_tuple, 3, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_09410f2f2f2af282a8576ef9481559e4_tuple, 4, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    const_str_plain_getboolean = UNSTREAM_STRING( &constant_bin[ 16831 ], 10, 1 );
    const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_d_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_d_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_d_tuple, 1, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    const_str_plain_getter = UNSTREAM_STRING( &constant_bin[ 15451 ], 6, 1 );
    const_str_plain_sect = UNSTREAM_STRING( &constant_bin[ 13778 ], 4, 1 );
    const_dict_af01fef0f5b348ee65397647dd94bd96 = _PyDict_NewPresized( 8 );
    const_unicode_plain_on = UNSTREAM_UNICODE( &constant_bin[ 412 ], 2 );
    PyDict_SetItem( const_dict_af01fef0f5b348ee65397647dd94bd96, const_unicode_plain_on, Py_True );
    const_unicode_plain_false = UNSTREAM_UNICODE( &constant_bin[ 18065 ], 5 );
    PyDict_SetItem( const_dict_af01fef0f5b348ee65397647dd94bd96, const_unicode_plain_false, Py_False );
    PyDict_SetItem( const_dict_af01fef0f5b348ee65397647dd94bd96, const_unicode_plain_no, Py_False );
    PyDict_SetItem( const_dict_af01fef0f5b348ee65397647dd94bd96, const_unicode_plain_1, Py_True );
    PyDict_SetItem( const_dict_af01fef0f5b348ee65397647dd94bd96, const_unicode_plain_0, Py_False );
    const_unicode_plain_off = UNSTREAM_UNICODE( &constant_bin[ 18070 ], 3 );
    PyDict_SetItem( const_dict_af01fef0f5b348ee65397647dd94bd96, const_unicode_plain_off, Py_False );
    const_unicode_plain_yes = UNSTREAM_UNICODE( &constant_bin[ 18073 ], 3 );
    PyDict_SetItem( const_dict_af01fef0f5b348ee65397647dd94bd96, const_unicode_plain_yes, Py_True );
    const_unicode_plain_true = UNSTREAM_UNICODE( &constant_bin[ 14759 ], 4 );
    PyDict_SetItem( const_dict_af01fef0f5b348ee65397647dd94bd96, const_unicode_plain_true, Py_True );
    assert( PyDict_Size( const_dict_af01fef0f5b348ee65397647dd94bd96 ) == 8 );
    const_tuple_str_plain_self_str_plain_key_str_plain_k_str_plain_inst_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_str_plain_k_str_plain_inst_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_str_plain_k_str_plain_inst_tuple, 1, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_str_plain_k_str_plain_inst_tuple, 2, const_str_plain_k ); Py_INCREF( const_str_plain_k );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_str_plain_k_str_plain_inst_tuple, 3, const_str_plain_inst ); Py_INCREF( const_str_plain_inst );
    const_unicode_digest_5b1239f5c0fafdafe0da77042401314f = UNSTREAM_UNICODE( &constant_bin[ 18076 ], 51 );
    const_tuple_bf4c15b53bf3882e410458d5826bb932_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_bf4c15b53bf3882e410458d5826bb932_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_bf4c15b53bf3882e410458d5826bb932_tuple, 1, const_str_plain_string ); Py_INCREF( const_str_plain_string );
    PyTuple_SET_ITEM( const_tuple_bf4c15b53bf3882e410458d5826bb932_tuple, 2, const_str_plain_source ); Py_INCREF( const_str_plain_source );
    const_str_plain_sfile = UNSTREAM_STRING( &constant_bin[ 18127 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_bf4c15b53bf3882e410458d5826bb932_tuple, 3, const_str_plain_sfile ); Py_INCREF( const_str_plain_sfile );
    const_unicode_digest_a9245b0df173463d2e91b24cc86ec6f9 = UNSTREAM_UNICODE( &constant_bin[ 18132 ], 130 );
    const_str_plain__options = UNSTREAM_STRING( &constant_bin[ 18262 ], 8, 1 );
    const_unicode_digest_e29344b723f0d47339ac4bc00c9b3ffd = UNSTREAM_UNICODE( &constant_bin[ 18270 ], 140 );
    const_str_plain__comment_prefixes = UNSTREAM_STRING( &constant_bin[ 18410 ], 17, 1 );
    const_tuple_str_plain_self_str_plain_msg_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_msg_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_msg_tuple, 1, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_tuple_str_plain_self_str_plain_f_str_plain_source_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_f_str_plain_source_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_f_str_plain_source_tuple, 1, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_f_str_plain_source_tuple, 2, const_str_plain_source ); Py_INCREF( const_str_plain_source );
    const_str_plain_remove_option = UNSTREAM_STRING( &constant_bin[ 16936 ], 13, 1 );
    const_str_plain_before_get = UNSTREAM_STRING( &constant_bin[ 18427 ], 10, 1 );
    const_str_plain_NONSPACECRE = UNSTREAM_STRING( &constant_bin[ 16594 ], 11, 1 );
    const_str_plain_add_section = UNSTREAM_STRING( &constant_bin[ 15260 ], 11, 1 );
    const_tuple_d328a853cb5f20ab31adeed177868e53_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_d328a853cb5f20ab31adeed177868e53_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_d328a853cb5f20ab31adeed177868e53_tuple, 1, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_d328a853cb5f20ab31adeed177868e53_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    const_str_plain_rawval = UNSTREAM_STRING( &constant_bin[ 18437 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_d328a853cb5f20ab31adeed177868e53_tuple, 3, const_str_plain_rawval ); Py_INCREF( const_str_plain_rawval );
    PyTuple_SET_ITEM( const_tuple_d328a853cb5f20ab31adeed177868e53_tuple, 4, const_str_plain_reference ); Py_INCREF( const_str_plain_reference );
    PyTuple_SET_ITEM( const_tuple_d328a853cb5f20ab31adeed177868e53_tuple, 5, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_unicode_digest_e8721ca8abec0cfcd8995ac84d65f9bb = UNSTREAM_UNICODE( &constant_bin[ 18443 ], 83 );
    const_unicode_digest_777628c26f9a8187996cd389e788a09c = UNSTREAM_UNICODE( &constant_bin[ 15724 ], 2 );
    const_unicode_digest_597fc368a20a14ae60713b98d6c256f0 = UNSTREAM_UNICODE( &constant_bin[ 18526 ], 27 );
    const_unicode_digest_44aeb5afdb3eeeb7cb6c82f3ada09f3c = UNSTREAM_UNICODE( &constant_bin[ 18553 ], 39 );
    const_unicode_digest_6e5f27735944d4660becbd9f74916e34 = UNSTREAM_UNICODE( &constant_bin[ 18592 ], 56 );
    const_str_plain__proxies = UNSTREAM_STRING( &constant_bin[ 18648 ], 8, 1 );
    const_tuple_518ebbe3d6e13fd0cf0c811373cb2361_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_518ebbe3d6e13fd0cf0c811373cb2361_tuple, 0, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_518ebbe3d6e13fd0cf0c811373cb2361_tuple, 1, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_518ebbe3d6e13fd0cf0c811373cb2361_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_518ebbe3d6e13fd0cf0c811373cb2361_tuple, 3, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    const_str_plain__write_section = UNSTREAM_STRING( &constant_bin[ 16917 ], 14, 1 );
    const_tuple_str_plain_self_str_plain_section_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    const_unicode_digest_72bee08aee2a6d2e313877610e96cf3f = UNSTREAM_UNICODE( &constant_bin[ 18656 ], 6 );
    const_tuple_7362694683cbbac7605a01b7d7947279_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 2, const_str_plain_raw ); Py_INCREF( const_str_plain_raw );
    PyTuple_SET_ITEM( const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 3, const_str_plain_vars ); Py_INCREF( const_str_plain_vars );
    PyTuple_SET_ITEM( const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 4, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    PyTuple_SET_ITEM( const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 5, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 6, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_value_getter = UNSTREAM_STRING( &constant_bin[ 18662 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 7, const_str_plain_value_getter ); Py_INCREF( const_str_plain_value_getter );
    PyTuple_SET_ITEM( const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 8, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    const_unicode_digest_f6b33aa61b9a3fd36565b9f938e21bbe = UNSTREAM_UNICODE( &constant_bin[ 18674 ], 82 );
    const_str_plain_getfloat = UNSTREAM_STRING( &constant_bin[ 16818 ], 8, 1 );
    const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple = PyTuple_New( 16 );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 1, const_str_plain_defaults ); Py_INCREF( const_str_plain_defaults );
    const_str_plain_dict_type = UNSTREAM_STRING( &constant_bin[ 18756 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 2, const_str_plain_dict_type ); Py_INCREF( const_str_plain_dict_type );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 3, const_str_plain_allow_no_value ); Py_INCREF( const_str_plain_allow_no_value );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 4, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 5, const_str_plain_delimiters ); Py_INCREF( const_str_plain_delimiters );
    const_str_plain_comment_prefixes = UNSTREAM_STRING( &constant_bin[ 15326 ], 16, 1 );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 6, const_str_plain_comment_prefixes ); Py_INCREF( const_str_plain_comment_prefixes );
    const_str_plain_inline_comment_prefixes = UNSTREAM_STRING( &constant_bin[ 18765 ], 23, 1 );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 7, const_str_plain_inline_comment_prefixes ); Py_INCREF( const_str_plain_inline_comment_prefixes );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 8, const_str_plain_strict ); Py_INCREF( const_str_plain_strict );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 9, const_str_plain_empty_lines_in_values ); Py_INCREF( const_str_plain_empty_lines_in_values );
    const_str_plain_default_section = UNSTREAM_STRING( &constant_bin[ 15646 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 10, const_str_plain_default_section ); Py_INCREF( const_str_plain_default_section );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 11, const_str_plain_interpolation ); Py_INCREF( const_str_plain_interpolation );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 12, const_str_plain_converters ); Py_INCREF( const_str_plain_converters );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 13, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 14, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 15, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    const_str_plain_fpname = UNSTREAM_STRING( &constant_bin[ 18788 ], 6, 1 );
    const_unicode_plain_DEFAULT = UNSTREAM_UNICODE( &constant_bin[ 13959 ], 7 );
    const_unicode_digest_c79929ceb2ff30004e20959691df1cfe = UNSTREAM_UNICODE( &constant_bin[ 18794 ], 545 );
    const_str_plain_remove_section = UNSTREAM_STRING( &constant_bin[ 16954 ], 14, 1 );
    const_str_plain__OPT_NV_TMPL = UNSTREAM_STRING( &constant_bin[ 16513 ], 12, 1 );
    const_tuple_unicode_plain_empty_lines_in_values_true_tuple = PyTuple_New( 2 );
    const_unicode_plain_empty_lines_in_values = UNSTREAM_UNICODE( &constant_bin[ 15152 ], 21 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_empty_lines_in_values_true_tuple, 0, const_unicode_plain_empty_lines_in_values ); Py_INCREF( const_unicode_plain_empty_lines_in_values );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_empty_lines_in_values_true_tuple, 1, Py_True ); Py_INCREF( Py_True );
    const_unicode_digest_3ba0dd0c6928643e6077d299d4239035 = UNSTREAM_UNICODE( &constant_bin[ 19339 ], 261 );
    const_unicode_digest_c10a3c13ccfc02e12f49b700e84e610a = UNSTREAM_UNICODE( &constant_bin[ 19600 ], 44 );
    const_unicode_digest_4a13f22bb229ffc0dd18e499d29bb520 = UNSTREAM_UNICODE( &constant_bin[ 19644 ], 48 );
    const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple = PyTuple_New( 16 );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 3, const_str_plain_accum ); Py_INCREF( const_str_plain_accum );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 4, const_str_plain_rest ); Py_INCREF( const_str_plain_rest );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 5, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 6, const_str_plain_map ); Py_INCREF( const_str_plain_map );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 7, const_str_plain_depth ); Py_INCREF( const_str_plain_depth );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 8, const_str_plain_rawval ); Py_INCREF( const_str_plain_rawval );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 9, const_str_plain_p ); Py_INCREF( const_str_plain_p );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 10, const_str_plain_c ); Py_INCREF( const_str_plain_c );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 11, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 12, const_str_plain_path ); Py_INCREF( const_str_plain_path );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 13, const_str_plain_sect ); Py_INCREF( const_str_plain_sect );
    const_str_plain_opt = UNSTREAM_STRING( &constant_bin[ 1170 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 14, const_str_plain_opt ); Py_INCREF( const_str_plain_opt );
    PyTuple_SET_ITEM( const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 15, const_str_plain_v ); Py_INCREF( const_str_plain_v );
    const_tuple_unicode_plain_strict_true_tuple = PyTuple_New( 2 );
    const_unicode_plain_strict = UNSTREAM_UNICODE( &constant_bin[ 19492 ], 6 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_strict_true_tuple, 0, const_unicode_plain_strict ); Py_INCREF( const_unicode_plain_strict );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_strict_true_tuple, 1, Py_True ); Py_INCREF( Py_True );
    const_tuple_str_plain_self_str_plain_key_str_plain_value_str_plain___tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_str_plain_value_str_plain___tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_str_plain_value_str_plain___tuple, 1, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_str_plain_value_str_plain___tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_str_plain_value_str_plain___tuple, 3, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    const_str_plain_opts = UNSTREAM_STRING( &constant_bin[ 19692 ], 4, 1 );
    const_str_plain__join_multiline_values = UNSTREAM_STRING( &constant_bin[ 17073 ], 22, 1 );
    const_str_plain_has_section = UNSTREAM_STRING( &constant_bin[ 16684 ], 11, 1 );
    const_str_plain_read_dict = UNSTREAM_STRING( &constant_bin[ 16751 ], 9, 1 );
    const_unicode_digest_9f6ca6adc5a1daa353fb07ed2ede3cad = UNSTREAM_UNICODE( &constant_bin[ 19696 ], 27 );
    const_unicode_digest_ea4d823bdfb88b939de467d57614ceb3 = UNSTREAM_UNICODE( &constant_bin[ 19723 ], 109 );
    const_str_plain_readfp = UNSTREAM_STRING( &constant_bin[ 16765 ], 6, 1 );
    const_tuple_4b7d0d7d284fbd2188a4bdc058f4fb16_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_4b7d0d7d284fbd2188a4bdc058f4fb16_tuple, 0, const_str_plain___module__ ); Py_INCREF( const_str_plain___module__ );
    PyTuple_SET_ITEM( const_tuple_4b7d0d7d284fbd2188a4bdc058f4fb16_tuple, 1, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    const_str_plain__KEYCRE = UNSTREAM_STRING( &constant_bin[ 19832 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_4b7d0d7d284fbd2188a4bdc058f4fb16_tuple, 2, const_str_plain__KEYCRE ); Py_INCREF( const_str_plain__KEYCRE );
    PyTuple_SET_ITEM( const_tuple_4b7d0d7d284fbd2188a4bdc058f4fb16_tuple, 3, const_str_plain_before_get ); Py_INCREF( const_str_plain_before_get );
    const_str_plain_before_set = UNSTREAM_STRING( &constant_bin[ 19839 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_4b7d0d7d284fbd2188a4bdc058f4fb16_tuple, 4, const_str_plain_before_set ); Py_INCREF( const_str_plain_before_set );
    const_str_plain__interpolation_replace = UNSTREAM_STRING( &constant_bin[ 19849 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_4b7d0d7d284fbd2188a4bdc058f4fb16_tuple, 5, const_str_plain__interpolation_replace ); Py_INCREF( const_str_plain__interpolation_replace );
    const_unicode_digest_81e2c763ec8c279bf7b5a4323f229e92 = UNSTREAM_UNICODE( &constant_bin[ 19871 ], 34 );
    const_str_plain__allow_no_value = UNSTREAM_STRING( &constant_bin[ 19905 ], 15, 1 );
    const_unicode_plain_fallback = UNSTREAM_UNICODE( &constant_bin[ 3025 ], 8 );
    const_unicode_digest_f12c4656a51d1e626cbcead58b6119d2 = UNSTREAM_UNICODE( &constant_bin[ 19920 ], 39 );
    const_tuple_unicode_plain__impl_none_tuple = PyTuple_New( 2 );
    const_unicode_plain__impl = UNSTREAM_UNICODE( &constant_bin[ 19959 ], 5 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain__impl_none_tuple, 0, const_unicode_plain__impl ); Py_INCREF( const_unicode_plain__impl );
    PyTuple_SET_ITEM( const_tuple_unicode_plain__impl_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_str_plain_vardict = UNSTREAM_STRING( &constant_bin[ 19964 ], 7, 1 );
    const_tuple_unicode_angle_dict_tuple = PyTuple_New( 1 );
    const_unicode_angle_dict = UNSTREAM_UNICODE( &constant_bin[ 19971 ], 6 );
    PyTuple_SET_ITEM( const_tuple_unicode_angle_dict_tuple, 0, const_unicode_angle_dict ); Py_INCREF( const_unicode_angle_dict );
    const_str_plain__interpolate_some = UNSTREAM_STRING( &constant_bin[ 19977 ], 17, 1 );
    const_str_plain_existed = UNSTREAM_STRING( &constant_bin[ 19994 ], 7, 1 );
    const_tuple_unicode_chr_58_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_chr_58_tuple, 0, const_unicode_chr_58 ); Py_INCREF( const_unicode_chr_58 );
    const_dict_f34551bd9b350227d9d52290f83daeb7 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_f34551bd9b350227d9d52290f83daeb7, const_str_plain_raw, Py_True );
    assert( PyDict_Size( const_dict_f34551bd9b350227d9d52290f83daeb7 ) == 1 );
    const_str_plain__strict = UNSTREAM_STRING( &constant_bin[ 20001 ], 7, 1 );
    const_str_plain_optionstr = UNSTREAM_STRING( &constant_bin[ 20008 ], 9, 1 );
    const_unicode_digest_7ff059010e9310f13d6c5d4ea2f008dc = UNSTREAM_UNICODE( &constant_bin[ 20017 ], 13 );
    const_str_plain_OPTCRE = UNSTREAM_STRING( &constant_bin[ 16569 ], 6, 1 );
    const_tuple_fa39a8b539bd1613ecffe553f3dde69b_tuple = PyTuple_New( 2 );
    const_unicode_digest_dbe5b95b36dede490343b16fa819c9d3 = UNSTREAM_UNICODE( &constant_bin[ 20030 ], 2 );
    PyTuple_SET_ITEM( const_tuple_fa39a8b539bd1613ecffe553f3dde69b_tuple, 0, const_unicode_digest_dbe5b95b36dede490343b16fa819c9d3 ); Py_INCREF( const_unicode_digest_dbe5b95b36dede490343b16fa819c9d3 );
    PyTuple_SET_ITEM( const_tuple_fa39a8b539bd1613ecffe553f3dde69b_tuple, 1, const_unicode_empty ); Py_INCREF( const_unicode_empty );
    const_tuple_unicode_digest_62c889c67fbc8a8f6cf60127214f5229_tuple = PyTuple_New( 1 );
    const_unicode_digest_62c889c67fbc8a8f6cf60127214f5229 = UNSTREAM_UNICODE( &constant_bin[ 4816 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_62c889c67fbc8a8f6cf60127214f5229_tuple, 0, const_unicode_digest_62c889c67fbc8a8f6cf60127214f5229 ); Py_INCREF( const_unicode_digest_62c889c67fbc8a8f6cf60127214f5229 );
    const_unicode_plain_section = UNSTREAM_UNICODE( &constant_bin[ 13778 ], 7 );
    const_tuple_53c577bb263cd373580cbd1a38a3b7ef_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_53c577bb263cd373580cbd1a38a3b7ef_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_53c577bb263cd373580cbd1a38a3b7ef_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_53c577bb263cd373580cbd1a38a3b7ef_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_53c577bb263cd373580cbd1a38a3b7ef_tuple, 3, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_unicode_plain_vi = UNSTREAM_UNICODE( &constant_bin[ 3 ], 2 );
    const_unicode_digest_595de77368bf8b4f1a509a3782848544 = UNSTREAM_UNICODE( &constant_bin[ 20032 ], 779 );
    const_unicode_digest_8ffdfa928271f03fe607bd119d1d0811 = UNSTREAM_UNICODE( &constant_bin[ 20811 ], 55 );
    const_unicode_digest_f3da1e8b37fff523f27655056557d16f = UNSTREAM_UNICODE( &constant_bin[ 20866 ], 136 );
    const_unicode_digest_9dda3b347f4490a721713de320c4939e = UNSTREAM_UNICODE( &constant_bin[ 21002 ], 210 );
    const_unicode_chr_36 = UNSTREAM_UNICODE( &constant_bin[ 257 ], 1 );
    const_tuple_1bdad6201c552b523a39052fe498eed6_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_1bdad6201c552b523a39052fe498eed6_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_1bdad6201c552b523a39052fe498eed6_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_1bdad6201c552b523a39052fe498eed6_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_1bdad6201c552b523a39052fe498eed6_tuple, 3, const_str_plain_source ); Py_INCREF( const_str_plain_source );
    PyTuple_SET_ITEM( const_tuple_1bdad6201c552b523a39052fe498eed6_tuple, 4, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_1bdad6201c552b523a39052fe498eed6_tuple, 5, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    PyTuple_SET_ITEM( const_tuple_1bdad6201c552b523a39052fe498eed6_tuple, 6, const_str_plain_message ); Py_INCREF( const_str_plain_message );
    const_tuple_294f3cd008bf03960a75f8516370eaed_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_294f3cd008bf03960a75f8516370eaed_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_294f3cd008bf03960a75f8516370eaed_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_294f3cd008bf03960a75f8516370eaed_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_294f3cd008bf03960a75f8516370eaed_tuple, 3, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_294f3cd008bf03960a75f8516370eaed_tuple, 4, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_294f3cd008bf03960a75f8516370eaed_tuple, 5, const_str_plain_defaults ); Py_INCREF( const_str_plain_defaults );
    const_str_plain__sections = UNSTREAM_STRING( &constant_bin[ 15137 ], 9, 1 );
    const_str_plain__unify_values = UNSTREAM_STRING( &constant_bin[ 17118 ], 13, 1 );
    const_unicode_digest_4ec1e2f352e46451c0a24f6ac1b5bf0d = UNSTREAM_UNICODE( &constant_bin[ 21212 ], 13 );
    const_unicode_digest_d116969f3678a49de4788256651f4ba8 = UNSTREAM_UNICODE( &constant_bin[ 21225 ], 25 );
    const_unicode_chr_40 = UNSTREAM_UNICODE( &constant_bin[ 171 ], 1 );
    const_tuple_648b937946f015cde569c4c2ca8649d8_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_648b937946f015cde569c4c2ca8649d8_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_648b937946f015cde569c4c2ca8649d8_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_648b937946f015cde569c4c2ca8649d8_tuple, 2, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_648b937946f015cde569c4c2ca8649d8_tuple, 3, const_str_plain_conv ); Py_INCREF( const_str_plain_conv );
    PyTuple_SET_ITEM( const_tuple_648b937946f015cde569c4c2ca8649d8_tuple, 4, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_648b937946f015cde569c4c2ca8649d8_tuple, 5, const_str_plain_getter ); Py_INCREF( const_str_plain_getter );
    const_str_plain_optionxform = UNSTREAM_STRING( &constant_bin[ 16868 ], 11, 1 );
    const_str_plain_read_string = UNSTREAM_STRING( &constant_bin[ 16735 ], 11, 1 );
    const_tuple_ef677f8899292f812ba973ea661d9005_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_ef677f8899292f812ba973ea661d9005_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_ef677f8899292f812ba973ea661d9005_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_ef677f8899292f812ba973ea661d9005_tuple, 2, const_str_plain_vars ); Py_INCREF( const_str_plain_vars );
    const_str_plain_sectiondict = UNSTREAM_STRING( &constant_bin[ 21250 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_ef677f8899292f812ba973ea661d9005_tuple, 3, const_str_plain_sectiondict ); Py_INCREF( const_str_plain_sectiondict );
    PyTuple_SET_ITEM( const_tuple_ef677f8899292f812ba973ea661d9005_tuple, 4, const_str_plain_vardict ); Py_INCREF( const_str_plain_vardict );
    PyTuple_SET_ITEM( const_tuple_ef677f8899292f812ba973ea661d9005_tuple, 5, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_ef677f8899292f812ba973ea661d9005_tuple, 6, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain__get_conv = UNSTREAM_STRING( &constant_bin[ 16793 ], 9, 1 );
    const_tuple_str_plain_self_str_plain_option_str_plain_section_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_option_str_plain_section_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_option_str_plain_section_tuple, 1, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_option_str_plain_section_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    const_unicode_digest_f84bc8ebfecfda0276b1d26eed2ae3f4 = UNSTREAM_UNICODE( &constant_bin[ 21261 ], 5 );
    const_tuple_05dc6e80a1e72145e6eb56080b9a795d_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_05dc6e80a1e72145e6eb56080b9a795d_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_05dc6e80a1e72145e6eb56080b9a795d_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_05dc6e80a1e72145e6eb56080b9a795d_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    const_str_plain_sectdict = UNSTREAM_STRING( &constant_bin[ 21266 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_05dc6e80a1e72145e6eb56080b9a795d_tuple, 3, const_str_plain_sectdict ); Py_INCREF( const_str_plain_sectdict );
    PyTuple_SET_ITEM( const_tuple_05dc6e80a1e72145e6eb56080b9a795d_tuple, 4, const_str_plain_existed ); Py_INCREF( const_str_plain_existed );
    const_unicode_digest_60be27da7e87e378758d9b87560fd1dc = UNSTREAM_UNICODE( &constant_bin[ 21274 ], 17 );
    const_tuple_0b91b062b9ea890e5b46122de323346f_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 21291 ], 283 );
    const_str_plain_SECTCRE = UNSTREAM_STRING( &constant_bin[ 16557 ], 7, 1 );
    const_unicode_digest_4c9346a6b662bc8be66cfaa20ecc4958 = UNSTREAM_UNICODE( &constant_bin[ 21574 ], 49 );
    const_str_plain_filenames = UNSTREAM_STRING( &constant_bin[ 15820 ], 9, 1 );
    const_unicode_digest_4f2f59c5fd34e832e99e1afae744a1eb = UNSTREAM_UNICODE( &constant_bin[ 21623 ], 43 );
    const_tuple_8170fc4e20b7416c8268b15f8a321606_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_8170fc4e20b7416c8268b15f8a321606_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_8170fc4e20b7416c8268b15f8a321606_tuple, 1, const_str_plain_filenames ); Py_INCREF( const_str_plain_filenames );
    PyTuple_SET_ITEM( const_tuple_8170fc4e20b7416c8268b15f8a321606_tuple, 2, const_str_plain_encoding ); Py_INCREF( const_str_plain_encoding );
    PyTuple_SET_ITEM( const_tuple_8170fc4e20b7416c8268b15f8a321606_tuple, 3, const_str_plain_read_ok ); Py_INCREF( const_str_plain_read_ok );
    PyTuple_SET_ITEM( const_tuple_8170fc4e20b7416c8268b15f8a321606_tuple, 4, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_8170fc4e20b7416c8268b15f8a321606_tuple, 5, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_unicode_plain_delimiters = UNSTREAM_UNICODE( &constant_bin[ 15730 ], 10 );
    const_unicode_plain_inline_comment_prefixes = UNSTREAM_UNICODE( &constant_bin[ 18765 ], 23 );
    const_tuple_str_plain_option_str_plain_d_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_option_str_plain_d_tuple, 0, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_str_plain_option_str_plain_d_tuple, 1, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    const_str_digest_7cfcf4e3ecceb0a971b6d9a37c2398d0 = UNSTREAM_STRING( &constant_bin[ 21666 ], 64, 0 );
    const_tuple_unicode_digest_c08197f9ec3b87cf34175c6ee14d2c8c_tuple = PyTuple_New( 1 );
    const_unicode_digest_c08197f9ec3b87cf34175c6ee14d2c8c = UNSTREAM_UNICODE( &constant_bin[ 18292 ], 9 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_c08197f9ec3b87cf34175c6ee14d2c8c_tuple, 0, const_unicode_digest_c08197f9ec3b87cf34175c6ee14d2c8c ); Py_INCREF( const_unicode_digest_c08197f9ec3b87cf34175c6ee14d2c8c );
    const_str_plain_tmp_value = UNSTREAM_STRING( &constant_bin[ 21730 ], 9, 1 );
    const_tuple_str_plain_self_str_plain_section_str_plain_option_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain_option_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain_option_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain_option_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    const_unicode_digest_6101524743862210e4b5ed676eb377c1 = UNSTREAM_UNICODE( &constant_bin[ 21739 ], 166 );
    const_unicode_digest_d92a042e50db9cd5d96099fd0dfc976b = UNSTREAM_UNICODE( &constant_bin[ 21905 ], 17 );
    const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple, 3, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple, 4, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple, 5, const_str_plain_tmp_value ); Py_INCREF( const_str_plain_tmp_value );
    const_str_plain_section_items = UNSTREAM_STRING( &constant_bin[ 21922 ], 13, 1 );
    const_str_plain__OPT_TMPL = UNSTREAM_STRING( &constant_bin[ 16499 ], 9, 1 );
    const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple = PyTuple_New( 14 );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 0, const_str_plain___module__ ); Py_INCREF( const_str_plain___module__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 1, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 2, const_str_plain___init__ ); Py_INCREF( const_str_plain___init__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 3, const_str_plain___repr__ ); Py_INCREF( const_str_plain___repr__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 4, const_str_plain___getitem__ ); Py_INCREF( const_str_plain___getitem__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 5, const_str_plain___setitem__ ); Py_INCREF( const_str_plain___setitem__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 6, const_str_plain___delitem__ ); Py_INCREF( const_str_plain___delitem__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 7, const_str_plain___contains__ ); Py_INCREF( const_str_plain___contains__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 8, const_str_plain___len__ ); Py_INCREF( const_str_plain___len__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 9, const_str_plain___iter__ ); Py_INCREF( const_str_plain___iter__ );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 10, const_str_plain__options ); Py_INCREF( const_str_plain__options );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 11, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 12, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 13, const_str_plain_get ); Py_INCREF( const_str_plain_get );
    const_tuple_int_0_unicode_digest_712073c5ac5a3a5ae23dbedbd9e36f9a_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_0_unicode_digest_712073c5ac5a3a5ae23dbedbd9e36f9a_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    const_unicode_digest_712073c5ac5a3a5ae23dbedbd9e36f9a = UNSTREAM_UNICODE( &constant_bin[ 21935 ], 7 );
    PyTuple_SET_ITEM( const_tuple_int_0_unicode_digest_712073c5ac5a3a5ae23dbedbd9e36f9a_tuple, 1, const_unicode_digest_712073c5ac5a3a5ae23dbedbd9e36f9a ); Py_INCREF( const_unicode_digest_712073c5ac5a3a5ae23dbedbd9e36f9a );
    const_str_plain__delimiters = UNSTREAM_STRING( &constant_bin[ 21942 ], 11, 1 );
    const_tuple_unicode_chr_36_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_chr_36_tuple, 0, const_unicode_chr_36 ); Py_INCREF( const_unicode_chr_36 );
    const_str_plain_GETTERCRE = UNSTREAM_STRING( &constant_bin[ 21953 ], 9, 1 );
    const_unicode_digest_f8a9214f74c6e3de16fd714be673fbbe = UNSTREAM_UNICODE( &constant_bin[ 21962 ], 48 );
    const_tuple_e9553513417345251cfa61446d055d17_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_e9553513417345251cfa61446d055d17_tuple, 0, const_unicode_digest_14d760694ac12dfa4c72b22a180ebfa1 ); Py_INCREF( const_unicode_digest_14d760694ac12dfa4c72b22a180ebfa1 );
    PyTuple_SET_ITEM( const_tuple_e9553513417345251cfa61446d055d17_tuple, 1, const_unicode_empty ); Py_INCREF( const_unicode_empty );
    const_str_plain__parser = UNSTREAM_STRING( &constant_bin[ 22010 ], 7, 1 );
    const_unicode_digest_b0ecf39a2c510a4ac4c302165dbbfc85 = UNSTREAM_UNICODE( &constant_bin[ 22017 ], 62 );
    const_tuple_unicode_angle_string_tuple = PyTuple_New( 1 );
    const_unicode_angle_string = UNSTREAM_UNICODE( &constant_bin[ 22079 ], 8 );
    PyTuple_SET_ITEM( const_tuple_unicode_angle_string_tuple, 0, const_unicode_angle_string ); Py_INCREF( const_unicode_angle_string );
    const_unicode_digest_cca2840096ce79eebf3fd9d166beac24 = UNSTREAM_UNICODE( &constant_bin[ 22087 ], 19 );
    const_unicode_digest_8fd76be66ef1f9e1525a445a9fe2ae66 = UNSTREAM_UNICODE( &constant_bin[ 22106 ], 33 );
    const_tuple_402cc1fb5f781edb557079498893b004_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_402cc1fb5f781edb557079498893b004_tuple, 0, const_str_plain___module__ ); Py_INCREF( const_str_plain___module__ );
    PyTuple_SET_ITEM( const_tuple_402cc1fb5f781edb557079498893b004_tuple, 1, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyTuple_SET_ITEM( const_tuple_402cc1fb5f781edb557079498893b004_tuple, 2, const_str_plain__KEYCRE ); Py_INCREF( const_str_plain__KEYCRE );
    PyTuple_SET_ITEM( const_tuple_402cc1fb5f781edb557079498893b004_tuple, 3, const_str_plain_before_get ); Py_INCREF( const_str_plain_before_get );
    PyTuple_SET_ITEM( const_tuple_402cc1fb5f781edb557079498893b004_tuple, 4, const_str_plain_before_set ); Py_INCREF( const_str_plain_before_set );
    PyTuple_SET_ITEM( const_tuple_402cc1fb5f781edb557079498893b004_tuple, 5, const_str_plain__interpolate_some ); Py_INCREF( const_str_plain__interpolate_some );
    const_tuple_str_plain_self_str_plain_section_str_plain_existed_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain_existed_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain_existed_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain_existed_tuple, 2, const_str_plain_existed ); Py_INCREF( const_str_plain_existed );
    const_unicode_digest_ea6cba6daff355ced485663c0798a1b3 = UNSTREAM_UNICODE( &constant_bin[ 22139 ], 41 );
    const_unicode_plain_raw = UNSTREAM_UNICODE( &constant_bin[ 401 ], 3 );
    const_tuple_d41583092ddfc8815e9c78caa843964c_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_d41583092ddfc8815e9c78caa843964c_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_d41583092ddfc8815e9c78caa843964c_tuple, 1, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_d41583092ddfc8815e9c78caa843964c_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_d41583092ddfc8815e9c78caa843964c_tuple, 3, const_str_plain_rawval ); Py_INCREF( const_str_plain_rawval );
    PyTuple_SET_ITEM( const_tuple_d41583092ddfc8815e9c78caa843964c_tuple, 4, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_unicode_digest_b152aa221a76ab41baa98fbf6826b7bf = UNSTREAM_UNICODE( &constant_bin[ 22180 ], 14 );
    const_str_plain__interpolation = UNSTREAM_STRING( &constant_bin[ 19849 ], 14, 1 );
    const_tuple_unicode_plain_section_unicode_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_section_unicode_empty_tuple, 0, const_unicode_plain_section ); Py_INCREF( const_unicode_plain_section );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_section_unicode_empty_tuple, 1, const_unicode_empty ); Py_INCREF( const_unicode_empty );
    const_unicode_digest_5932e42aea3b879960f95809efa5dc41 = UNSTREAM_UNICODE( &constant_bin[ 22194 ], 64 );
    const_unicode_digest_a580203ae2f51c2fe9e7c0fe709b2d9f = UNSTREAM_UNICODE( &constant_bin[ 22258 ], 29 );
    const_tuple_740d6674f6f61423511f2af55d717e03_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_740d6674f6f61423511f2af55d717e03_tuple, 0, const_str_plain___module__ ); Py_INCREF( const_str_plain___module__ );
    PyTuple_SET_ITEM( const_tuple_740d6674f6f61423511f2af55d717e03_tuple, 1, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyTuple_SET_ITEM( const_tuple_740d6674f6f61423511f2af55d717e03_tuple, 2, const_str_plain__DEFAULT_INTERPOLATION ); Py_INCREF( const_str_plain__DEFAULT_INTERPOLATION );
    PyTuple_SET_ITEM( const_tuple_740d6674f6f61423511f2af55d717e03_tuple, 3, const_str_plain_set ); Py_INCREF( const_str_plain_set );
    PyTuple_SET_ITEM( const_tuple_740d6674f6f61423511f2af55d717e03_tuple, 4, const_str_plain_add_section ); Py_INCREF( const_str_plain_add_section );
    const_tuple_cff11dfbf3d13413ad3d037ba36caaf3_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_cff11dfbf3d13413ad3d037ba36caaf3_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_cff11dfbf3d13413ad3d037ba36caaf3_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_str_plain_space_around_delimiters = UNSTREAM_STRING( &constant_bin[ 22287 ], 23, 1 );
    PyTuple_SET_ITEM( const_tuple_cff11dfbf3d13413ad3d037ba36caaf3_tuple, 2, const_str_plain_space_around_delimiters ); Py_INCREF( const_str_plain_space_around_delimiters );
    PyTuple_SET_ITEM( const_tuple_cff11dfbf3d13413ad3d037ba36caaf3_tuple, 3, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    PyTuple_SET_ITEM( const_tuple_cff11dfbf3d13413ad3d037ba36caaf3_tuple, 4, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    const_tuple_b5a0a397f21f33e9de74beeb38637f36_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_b5a0a397f21f33e9de74beeb38637f36_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_b5a0a397f21f33e9de74beeb38637f36_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_b5a0a397f21f33e9de74beeb38637f36_tuple, 2, const_str_plain_source ); Py_INCREF( const_str_plain_source );
    PyTuple_SET_ITEM( const_tuple_b5a0a397f21f33e9de74beeb38637f36_tuple, 3, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_b5a0a397f21f33e9de74beeb38637f36_tuple, 4, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    PyTuple_SET_ITEM( const_tuple_b5a0a397f21f33e9de74beeb38637f36_tuple, 5, const_str_plain_message ); Py_INCREF( const_str_plain_message );
    const_unicode_plain_converters = UNSTREAM_UNICODE( &constant_bin[ 17186 ], 10 );
    const_tuple_int_0_unicode_digest_a672f37732d732178f7ab78af6651d17_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_0_unicode_digest_a672f37732d732178f7ab78af6651d17_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    const_unicode_digest_a672f37732d732178f7ab78af6651d17 = UNSTREAM_UNICODE( &constant_bin[ 22310 ], 8 );
    PyTuple_SET_ITEM( const_tuple_int_0_unicode_digest_a672f37732d732178f7ab78af6651d17_tuple, 1, const_unicode_digest_a672f37732d732178f7ab78af6651d17 ); Py_INCREF( const_unicode_digest_a672f37732d732178f7ab78af6651d17 );
    const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple = PyTuple_New( 14 );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 3, const_str_plain_accum ); Py_INCREF( const_str_plain_accum );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 4, const_str_plain_rest ); Py_INCREF( const_str_plain_rest );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 5, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 6, const_str_plain_map ); Py_INCREF( const_str_plain_map );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 7, const_str_plain_depth ); Py_INCREF( const_str_plain_depth );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 8, const_str_plain_rawval ); Py_INCREF( const_str_plain_rawval );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 9, const_str_plain_p ); Py_INCREF( const_str_plain_p );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 10, const_str_plain_c ); Py_INCREF( const_str_plain_c );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 11, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 12, const_str_plain_var ); Py_INCREF( const_str_plain_var );
    PyTuple_SET_ITEM( const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 13, const_str_plain_v ); Py_INCREF( const_str_plain_v );
    const_unicode_digest_32a7c14e1962cf51e13e07dfdd18607b = UNSTREAM_UNICODE( &constant_bin[ 22318 ], 58 );
    const_unicode_digest_d9bfe4bacf6eccce4ccb97839cac728a = UNSTREAM_UNICODE( &constant_bin[ 22376 ], 202 );
    const_unicode_digest_e7d6c92e5f525c42a2b6d9279792135b = UNSTREAM_UNICODE( &constant_bin[ 22578 ], 7 );
    const_unicode_digest_b7f7efa2c49b31ac4729f3ed5de7764e = UNSTREAM_UNICODE( &constant_bin[ 22585 ], 47 );
    const_str_plain__impl = UNSTREAM_STRING( &constant_bin[ 19959 ], 5, 1 );
    const_tuple_abc308b2ba024d9227828c0d9b6c0f3a_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_abc308b2ba024d9227828c0d9b6c0f3a_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_abc308b2ba024d9227828c0d9b6c0f3a_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_abc308b2ba024d9227828c0d9b6c0f3a_tuple, 2, const_str_plain_conv ); Py_INCREF( const_str_plain_conv );
    PyTuple_SET_ITEM( const_tuple_abc308b2ba024d9227828c0d9b6c0f3a_tuple, 3, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_abc308b2ba024d9227828c0d9b6c0f3a_tuple, 4, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_unicode_digest_103ef0436fca070da42cade6efad0c30 = UNSTREAM_UNICODE( &constant_bin[ 22632 ], 184 );
    const_unicode_digest_bb1414ad81bd2d95e4e4b42d0d0a436b = UNSTREAM_UNICODE( &constant_bin[ 22816 ], 45 );
    const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple, 2, const_str_plain_section_name ); Py_INCREF( const_str_plain_section_name );
    PyTuple_SET_ITEM( const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple, 3, const_str_plain_section_items ); Py_INCREF( const_str_plain_section_items );
    PyTuple_SET_ITEM( const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple, 4, const_str_plain_delimiter ); Py_INCREF( const_str_plain_delimiter );
    PyTuple_SET_ITEM( const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple, 5, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple, 6, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_unicode_digest_679c6565b3f0cccac66b5c85045c378a = UNSTREAM_UNICODE( &constant_bin[ 22861 ], 29 );
    const_unicode_plain_option = UNSTREAM_UNICODE( &constant_bin[ 1170 ], 6 );
    const_unicode_digest_7b121adedd001c67062f1cdedf86549d = UNSTREAM_UNICODE( &constant_bin[ 22890 ], 22 );
    const_tuple_d2d860e4cce3104a4798ae7fa69b2867_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_d2d860e4cce3104a4798ae7fa69b2867_tuple, 0, const_unicode_newline ); Py_INCREF( const_unicode_newline );
    PyTuple_SET_ITEM( const_tuple_d2d860e4cce3104a4798ae7fa69b2867_tuple, 1, const_unicode_digest_bd87c419367177d256cc0fdf0cb9a778 ); Py_INCREF( const_unicode_digest_bd87c419367177d256cc0fdf0cb9a778 );
    const_str_plain__empty_lines_in_values = UNSTREAM_STRING( &constant_bin[ 22912 ], 22, 1 );
    const_str_plain__validate_value_types = UNSTREAM_STRING( &constant_bin[ 17160 ], 21, 1 );
    const_str_plain_read_file = UNSTREAM_STRING( &constant_bin[ 15872 ], 9, 1 );
    const_tuple_unicode_plain_option_unicode_plain_vi_unicode_plain_value_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_option_unicode_plain_vi_unicode_plain_value_tuple, 0, const_unicode_plain_option ); Py_INCREF( const_unicode_plain_option );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_option_unicode_plain_vi_unicode_plain_value_tuple, 1, const_unicode_plain_vi ); Py_INCREF( const_unicode_plain_vi );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_option_unicode_plain_vi_unicode_plain_value_tuple, 2, const_unicode_plain_value ); Py_INCREF( const_unicode_plain_value );
    const_unicode_digest_982e13bc4959251905723e01bd1cf8ff = UNSTREAM_UNICODE( &constant_bin[ 22934 ], 5153 );
    const_tuple_unicode_digest_d92a042e50db9cd5d96099fd0dfc976b_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_d92a042e50db9cd5d96099fd0dfc976b_tuple, 0, const_unicode_digest_d92a042e50db9cd5d96099fd0dfc976b ); Py_INCREF( const_unicode_digest_d92a042e50db9cd5d96099fd0dfc976b );
    const_unicode_digest_4db7c54d6619a457f6080d2f26ecb116 = UNSTREAM_UNICODE( &constant_bin[ 28087 ], 121 );
    const_tuple_unicode_digest_7ff059010e9310f13d6c5d4ea2f008dc_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_7ff059010e9310f13d6c5d4ea2f008dc_tuple, 0, const_unicode_digest_7ff059010e9310f13d6c5d4ea2f008dc ); Py_INCREF( const_unicode_digest_7ff059010e9310f13d6c5d4ea2f008dc );
    const_str_plain__name = UNSTREAM_STRING( &constant_bin[ 2602 ], 5, 1 );
    const_unicode_digest_2b17af6512f94b422e2cdf46d7a2cd05 = UNSTREAM_UNICODE( &constant_bin[ 28208 ], 468 );
    const_tuple_unicode_plain_name_tuple = PyTuple_New( 1 );
    const_unicode_plain_name = UNSTREAM_UNICODE( &constant_bin[ 798 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_name_tuple, 0, const_unicode_plain_name ); Py_INCREF( const_unicode_plain_name );
    const_str_plain__defaults = UNSTREAM_STRING( &constant_bin[ 28676 ], 9, 1 );
    const_tuple_882cf825907280cd818aafbc44a75e54_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_882cf825907280cd818aafbc44a75e54_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_882cf825907280cd818aafbc44a75e54_tuple, 1, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_882cf825907280cd818aafbc44a75e54_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_882cf825907280cd818aafbc44a75e54_tuple, 3, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_unicode_digest_b38a29c561849c4a73b47f8840a102d7 = UNSTREAM_UNICODE( &constant_bin[ 22754 ], 15 );
    const_unicode_digest_bb8336bd8643cdb9a361f59cbfe67d53 = UNSTREAM_UNICODE( &constant_bin[ 28685 ], 37 );
    const_str_plain_VERBOSE = UNSTREAM_STRING( &constant_bin[ 28722 ], 7, 1 );
    const_unicode_digest_cb8953f72b664bec33773b24759057f2 = UNSTREAM_UNICODE( &constant_bin[ 28729 ], 26 );
    const_unicode_digest_ed11dd8625a67522a8dbc9eb062dabce = UNSTREAM_UNICODE( &constant_bin[ 28755 ], 27 );
    const_tuple_unicode_plain_raw_false_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_raw_false_tuple, 0, const_unicode_plain_raw ); Py_INCREF( const_unicode_plain_raw );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_raw_false_tuple, 1, Py_False ); Py_INCREF( Py_False );
    const_str_plain__converters = UNSTREAM_STRING( &constant_bin[ 28782 ], 11, 1 );
    const_unicode_digest_c3f2c8fd00d902a8a5910f161be13f89 = UNSTREAM_UNICODE( &constant_bin[ 28793 ], 64 );
    const_str_plain_before_write = UNSTREAM_STRING( &constant_bin[ 28857 ], 12, 1 );
    const_str_plain__inline_comment_prefixes = UNSTREAM_STRING( &constant_bin[ 28869 ], 24, 1 );
    const_tuple_unicode_plain_inline_comment_prefixes_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_inline_comment_prefixes_none_tuple, 0, const_unicode_plain_inline_comment_prefixes ); Py_INCREF( const_unicode_plain_inline_comment_prefixes );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_inline_comment_prefixes_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_unicode_digest_2056f54f51dda70a2e666ca792d6d9e2 = UNSTREAM_UNICODE( &constant_bin[ 28893 ], 156 );
    const_tuple_str_plain_self_str_plain_section_str_plain_opts_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain_opts_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain_opts_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain_opts_tuple, 2, const_str_plain_opts ); Py_INCREF( const_str_plain_opts );
    const_unicode_digest_ee5eca4e6822fcb5c3a1f80b683f8ef5 = UNSTREAM_UNICODE( &constant_bin[ 29049 ], 24 );
    const_unicode_digest_876651e3baa8b4da865b7f2efeaddcf4 = UNSTREAM_UNICODE( &constant_bin[ 29073 ], 165 );
    const_unicode_digest_d11f6e3c207689d9d4133ffcf5b86765 = UNSTREAM_UNICODE( &constant_bin[ 29238 ], 503 );
    const_str_plain_has_option = UNSTREAM_STRING( &constant_bin[ 16884 ], 10, 1 );
    const_tuple_83b306704934f780ec1abb9795b2fd28_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_83b306704934f780ec1abb9795b2fd28_tuple, 0, const_unicode_plain_delimiters ); Py_INCREF( const_unicode_plain_delimiters );
    PyTuple_SET_ITEM( const_tuple_83b306704934f780ec1abb9795b2fd28_tuple, 1, const_tuple_unicode_chr_61_unicode_chr_58_tuple ); Py_INCREF( const_tuple_unicode_chr_61_unicode_chr_58_tuple );
    const_unicode_digest_1f92d9ab67c11fc46d9c44149d230a67 = UNSTREAM_UNICODE( &constant_bin[ 29741 ], 126 );
    const_tuple_str_plain_self_str_plain_source_str_plain_filename_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_source_str_plain_filename_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_source_str_plain_filename_tuple, 1, const_str_plain_source ); Py_INCREF( const_str_plain_source );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_source_str_plain_filename_tuple, 2, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    const_unicode_digest_9c0422138b231ab00ef3752351c8a02b = UNSTREAM_UNICODE( &constant_bin[ 29867 ], 467 );
    const_unicode_digest_4c5d0a2590b13e3eb225faca93cf1ccc = UNSTREAM_UNICODE( &constant_bin[ 30334 ], 123 );
    const_str_plain_OPTCRE_NV = UNSTREAM_STRING( &constant_bin[ 16580 ], 9, 1 );
    const_tuple_str_plain_self_str_plain_section_str_plain___tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain___tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain___tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_section_str_plain___tuple, 2, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    const_tuple_e81acbb6b5ba5121b952ce35d86e1f0c_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_e81acbb6b5ba5121b952ce35d86e1f0c_tuple, 0, const_str_plain___module__ ); Py_INCREF( const_str_plain___module__ );
    PyTuple_SET_ITEM( const_tuple_e81acbb6b5ba5121b952ce35d86e1f0c_tuple, 1, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyTuple_SET_ITEM( const_tuple_e81acbb6b5ba5121b952ce35d86e1f0c_tuple, 2, const_str_plain___init__ ); Py_INCREF( const_str_plain___init__ );
    PyTuple_SET_ITEM( const_tuple_e81acbb6b5ba5121b952ce35d86e1f0c_tuple, 3, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_e81acbb6b5ba5121b952ce35d86e1f0c_tuple, 4, const_str_plain_append ); Py_INCREF( const_str_plain_append );
    const_unicode_plain_get = UNSTREAM_UNICODE( &constant_bin[ 549 ], 3 );
    const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple, 1, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple, 3, const_str_plain_k ); Py_INCREF( const_str_plain_k );
    PyTuple_SET_ITEM( const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple, 4, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple, 5, const_str_plain_proxy ); Py_INCREF( const_str_plain_proxy );
    PyTuple_SET_ITEM( const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple, 6, const_str_plain_getter ); Py_INCREF( const_str_plain_getter );
    const_unicode_digest_a312722c82c64d3d8d90846f8090973a = UNSTREAM_UNICODE( &constant_bin[ 30457 ], 214 );
    const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 0, const_str_plain___module__ ); Py_INCREF( const_str_plain___module__ );
    PyTuple_SET_ITEM( const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 1, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyTuple_SET_ITEM( const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 2, const_str_plain_GETTERCRE ); Py_INCREF( const_str_plain_GETTERCRE );
    PyTuple_SET_ITEM( const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 3, const_str_plain___init__ ); Py_INCREF( const_str_plain___init__ );
    PyTuple_SET_ITEM( const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 4, const_str_plain___getitem__ ); Py_INCREF( const_str_plain___getitem__ );
    PyTuple_SET_ITEM( const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 5, const_str_plain___setitem__ ); Py_INCREF( const_str_plain___setitem__ );
    PyTuple_SET_ITEM( const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 6, const_str_plain___delitem__ ); Py_INCREF( const_str_plain___delitem__ );
    PyTuple_SET_ITEM( const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 7, const_str_plain___iter__ ); Py_INCREF( const_str_plain___iter__ );
    PyTuple_SET_ITEM( const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 8, const_str_plain___len__ ); Py_INCREF( const_str_plain___len__ );
    const_unicode_digest_54e7c558f1589423ec2e67698d109215 = UNSTREAM_UNICODE( &constant_bin[ 30671 ], 411 );
    const_unicode_digest_8eeb96261c7bdfcc231650fb4bf54f49 = UNSTREAM_UNICODE( &constant_bin[ 31082 ], 65 );
    const_tuple_unicode_digest_aa623b64bfb5399ec1f50c86b7d261e5_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_aa623b64bfb5399ec1f50c86b7d261e5_tuple, 0, const_unicode_digest_aa623b64bfb5399ec1f50c86b7d261e5 ); Py_INCREF( const_unicode_digest_aa623b64bfb5399ec1f50c86b7d261e5 );
    const_tuple_str_plain_self_str_plain_parser_str_plain_getter_str_plain_m_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_parser_str_plain_getter_str_plain_m_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_parser_str_plain_getter_str_plain_m_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_parser_str_plain_getter_str_plain_m_tuple, 2, const_str_plain_getter ); Py_INCREF( const_str_plain_getter );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_parser_str_plain_getter_str_plain_m_tuple, 3, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    const_tuple_str_plain_self_str_plain_optionstr_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_optionstr_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_optionstr_tuple, 1, const_str_plain_optionstr ); Py_INCREF( const_str_plain_optionstr );
    const_str_plain_getint = UNSTREAM_STRING( &constant_bin[ 16807 ], 6, 1 );
    const_tuple_252f8a908df52fd6ded436190a417ff5_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_252f8a908df52fd6ded436190a417ff5_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_252f8a908df52fd6ded436190a417ff5_tuple, 1, const_str_plain_exc ); Py_INCREF( const_str_plain_exc );
    PyTuple_SET_ITEM( const_tuple_252f8a908df52fd6ded436190a417ff5_tuple, 2, const_str_plain_fpname ); Py_INCREF( const_str_plain_fpname );
    PyTuple_SET_ITEM( const_tuple_252f8a908df52fd6ded436190a417ff5_tuple, 3, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_252f8a908df52fd6ded436190a417ff5_tuple, 4, const_str_plain_line ); Py_INCREF( const_str_plain_line );
    const_tuple_32e51553fbedf2e08f82df32b2ef578d_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_32e51553fbedf2e08f82df32b2ef578d_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_32e51553fbedf2e08f82df32b2ef578d_tuple, 1, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_32e51553fbedf2e08f82df32b2ef578d_tuple, 2, const_str_plain_fallback ); Py_INCREF( const_str_plain_fallback );
    PyTuple_SET_ITEM( const_tuple_32e51553fbedf2e08f82df32b2ef578d_tuple, 3, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_32e51553fbedf2e08f82df32b2ef578d_tuple, 4, const_str_plain__impl ); Py_INCREF( const_str_plain__impl );
    const_dict_d86ae6d9cc5bf51b4834b1d52ac321cd = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_d86ae6d9cc5bf51b4834b1d52ac321cd, const_str_plain_start, const_int_pos_1 );
    assert( PyDict_Size( const_dict_d86ae6d9cc5bf51b4834b1d52ac321cd ) == 1 );
    const_unicode_digest_92620cfc7f97a4f02f72f4c332258a0d = UNSTREAM_UNICODE( &constant_bin[ 31147 ], 232 );
    const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 1, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 2, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 3, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 4, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 5, const_str_plain_vars ); Py_INCREF( const_str_plain_vars );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 6, const_str_plain_rawval ); Py_INCREF( const_str_plain_rawval );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 7, const_str_plain_depth ); Py_INCREF( const_str_plain_depth );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 8, const_str_plain_replace ); Py_INCREF( const_str_plain_replace );
    PyTuple_SET_ITEM( const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 9, const_str_plain_e ); Py_INCREF( const_str_plain_e );
    const_tuple_unicode_digest_4ec1e2f352e46451c0a24f6ac1b5bf0d_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_4ec1e2f352e46451c0a24f6ac1b5bf0d_tuple, 0, const_unicode_digest_4ec1e2f352e46451c0a24f6ac1b5bf0d ); Py_INCREF( const_unicode_digest_4ec1e2f352e46451c0a24f6ac1b5bf0d );
    const_str_digest_2f4fe541d26921044713712808db8449 = UNSTREAM_STRING( &constant_bin[ 31379 ], 31, 0 );
    const_unicode_digest_7b3bca760f870946ea0048947045fdbf = UNSTREAM_UNICODE( &constant_bin[ 31410 ], 17 );
    const_str_plain__optcre = UNSTREAM_STRING( &constant_bin[ 31427 ], 7, 1 );
    const_unicode_digest_44790ccfcf06fce5c5bf48fb0ed505cc = UNSTREAM_UNICODE( &constant_bin[ 31434 ], 34 );
    const_unicode_digest_dcda6f8db35b3ee07c3acac24bc12683 = UNSTREAM_UNICODE( &constant_bin[ 31468 ], 14 );
    const_unicode_digest_d932a45b6a9f6aa7080d2b26fbc636e4 = UNSTREAM_UNICODE( &constant_bin[ 31482 ], 66 );
    const_unicode_digest_dae4a0e89d49141cd5a78a833b7df4e0 = UNSTREAM_UNICODE( &constant_bin[ 31548 ], 45 );
    const_tuple_9257a6de32cab8660413f61fc0532bf4_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_9257a6de32cab8660413f61fc0532bf4_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_9257a6de32cab8660413f61fc0532bf4_tuple, 1, const_str_plain_section ); Py_INCREF( const_str_plain_section );
    PyTuple_SET_ITEM( const_tuple_9257a6de32cab8660413f61fc0532bf4_tuple, 2, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_9257a6de32cab8660413f61fc0532bf4_tuple, 3, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_9257a6de32cab8660413f61fc0532bf4_tuple, 4, const_str_plain_sectdict ); Py_INCREF( const_str_plain_sectdict );
    const_tuple_str_plain_self_str_plain_lineno_str_plain_line_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_lineno_str_plain_line_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_lineno_str_plain_line_tuple, 1, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_lineno_str_plain_line_tuple, 2, const_str_plain_line ); Py_INCREF( const_str_plain_line );
    const_str_plain__convert_to_boolean = UNSTREAM_STRING( &constant_bin[ 17136 ], 19, 1 );
    const_tuple_unicode_plain_option_unicode_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_option_unicode_empty_tuple, 0, const_unicode_plain_option ); Py_INCREF( const_unicode_plain_option );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_option_unicode_empty_tuple, 1, const_unicode_empty ); Py_INCREF( const_unicode_empty );
    const_unicode_digest_c924cb63340003048350ea06e3ba3ef4 = UNSTREAM_UNICODE( &constant_bin[ 19723 ], 14 );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_backports$configparser( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_e9929961d51b8ac8760968522b189ffb;
static PyCodeObject *codeobj_cdd33381080862e8f2b55ee70f563b54;
static PyCodeObject *codeobj_3dba0c8888c9537cf6af4d557f33ce7c;
static PyCodeObject *codeobj_b28dd019ed58c09f14d3689247505663;
static PyCodeObject *codeobj_7697ffe4ae7754475e380588f515f957;
static PyCodeObject *codeobj_a24361983ffe6b51e65bf3b0f1bf29f3;
static PyCodeObject *codeobj_1d483adeff710e212cffa37f5abd1161;
static PyCodeObject *codeobj_7801595be13afb8720eaf8e586651659;
static PyCodeObject *codeobj_920dac7f37e06f5f6ce355b6cf15424d;
static PyCodeObject *codeobj_87408f1f826db72313e4fc65b40ab565;
static PyCodeObject *codeobj_1c597e76e6430bdcfa15394ab38ca898;
static PyCodeObject *codeobj_9815049f917ba554f86a83cfecf75243;
static PyCodeObject *codeobj_f39f8e2fa34d8c992a5aaf1d624dc002;
static PyCodeObject *codeobj_dfe6f968acd0490fca4f335531ef38b3;
static PyCodeObject *codeobj_38e2293536a89ccaf97ca62208348368;
static PyCodeObject *codeobj_7d72c5a1328b9be182f6506bb7c35c78;
static PyCodeObject *codeobj_c2f58cd04c5b6411726e80ed1d337a7a;
static PyCodeObject *codeobj_47ab76a39786d271d4004f9bcd2caf05;
static PyCodeObject *codeobj_4d9075612c6c82ef69847d9c6971ac19;
static PyCodeObject *codeobj_fc2c024fb30f3793c71e27c33495cbc5;
static PyCodeObject *codeobj_0e6f76a75cf39b59a5693dec2a8d022e;
static PyCodeObject *codeobj_beb8cf217168786cbfc0cffa934f6dcf;
static PyCodeObject *codeobj_c2668d862c6148091184820ea0e3e43d;
static PyCodeObject *codeobj_2b7353245759a55d688c9c933b7327cd;
static PyCodeObject *codeobj_3e3e08daeba1f2f41acf3dd74311fed1;
static PyCodeObject *codeobj_c2e2c04352c53777ade891322f9a784d;
static PyCodeObject *codeobj_f74f9293c5e7b1731951d53d79a519ec;
static PyCodeObject *codeobj_3015836a0b6402b78dd439182ba7e585;
static PyCodeObject *codeobj_e4f10a5bc7af73a97b01812bc8f651b3;
static PyCodeObject *codeobj_d7c59a1e0605ca9b4014603d0f36cf10;
static PyCodeObject *codeobj_ae840599afa6dc32ea4c9ee4e8dd87e2;
static PyCodeObject *codeobj_d2b77459cd226d739fe11c413ebe5386;
static PyCodeObject *codeobj_c5e80410636f7f6436eb99c1c306172c;
static PyCodeObject *codeobj_a5420b73d4db59845097e06f1d827349;
static PyCodeObject *codeobj_d95705f71f4e270c93e5dd5f7ddba45b;
static PyCodeObject *codeobj_60f3cb39b8eb02ad7baa6e877a6e3907;
static PyCodeObject *codeobj_2878d167ce214c4e3716ab16ab5e7e3a;
static PyCodeObject *codeobj_3d63a738ba45c810806c6b5d18a27e17;
static PyCodeObject *codeobj_92a69b115ee9417d928eedd215149698;
static PyCodeObject *codeobj_0b0031f5d0e5da44e03bcd50a2d36fce;
static PyCodeObject *codeobj_78951cd80c8ae318b1b1e563c8f65e5b;
static PyCodeObject *codeobj_6bad5d6328cf7eb9ea5b382bc11ab46e;
static PyCodeObject *codeobj_c9a0eb1d420f6fb05ca5f0971b53a48f;
static PyCodeObject *codeobj_bc110664060803235e326e00bc1c6e2e;
static PyCodeObject *codeobj_b9550e7d02bfa7b3b8c535599a03f2ec;
static PyCodeObject *codeobj_744f15a6dacd05be21a5ae8b69a5630c;
static PyCodeObject *codeobj_0795b625ce78321c74d98095e411cdd2;
static PyCodeObject *codeobj_b5c31df4eae6765cb7096a3dae45ff07;
static PyCodeObject *codeobj_5e419908535ffb567cbe7d7947a53ae3;
static PyCodeObject *codeobj_852592d0099987bfb5608bfa0794908e;
static PyCodeObject *codeobj_1cb4ee8f849e6ed15b3d3cccb81790b3;
static PyCodeObject *codeobj_a9d056abfb66efd51ab0ad66d53b7228;
static PyCodeObject *codeobj_4019ba08b58ba7d30d5741fe684fea6e;
static PyCodeObject *codeobj_4d7f0c1f5c85bcc025539d616b230c49;
static PyCodeObject *codeobj_f3e570871a913f5c3184102077875453;
static PyCodeObject *codeobj_ab1c2b3f959bff7c0e4bb051505dc51b;
static PyCodeObject *codeobj_6f97561e54b0e66dda4246d4acff942c;
static PyCodeObject *codeobj_71f2c142bbe82ea466be0ab6ea3535ac;
static PyCodeObject *codeobj_d717256835b597e7be6307bed192a9ab;
static PyCodeObject *codeobj_25b1e4ac38b8dd4e768369c3920f267a;
static PyCodeObject *codeobj_abed26e223c52a3234ad5e8dc70db996;
static PyCodeObject *codeobj_80653693d1f70a7a77e31361385ed7aa;
static PyCodeObject *codeobj_6e912e3ea1bbc83deaadbfb7d3822c32;
static PyCodeObject *codeobj_51cc3dc844562a78290fe7eda25da1c2;
static PyCodeObject *codeobj_7cfa546ecb06a850c3e5d3844990f666;
static PyCodeObject *codeobj_23a563440601bc013ec73f2f4d54f600;
static PyCodeObject *codeobj_ab55c2b179c81cb40e21314823bb83f0;
static PyCodeObject *codeobj_baeb827ef30a15138dc40640f0ad1f16;
static PyCodeObject *codeobj_ba94be6d76e470aaad260bd3038c6148;
static PyCodeObject *codeobj_6bdef8e962197536356cf8d3fd9c934f;
static PyCodeObject *codeobj_291f42a14f58b536292a20c599bac6f5;
static PyCodeObject *codeobj_6618e93e2d1bceb08c93139c77e98a4a;
static PyCodeObject *codeobj_2c223045dc62113b154f3510d62c8681;
static PyCodeObject *codeobj_9e0f9d0dc02a6e2954af5c6c2bc553d8;
static PyCodeObject *codeobj_503092ca0c346f01e6adeeb3bd535d10;
static PyCodeObject *codeobj_e2c98e119976a26715ef97014c3668ae;
static PyCodeObject *codeobj_f67fe1e40143ec3725182e2baf1d7514;
static PyCodeObject *codeobj_b061b1c70bd82a85c4b47597d5e5ce51;
static PyCodeObject *codeobj_3af5314f549e28ccdcc3972a01671d47;
static PyCodeObject *codeobj_feac3581a44afac5b067457ac2606c93;
static PyCodeObject *codeobj_dc9d3a3a388893342a3bf29832c2b90e;
static PyCodeObject *codeobj_09f24ec8ef427033a6c980f7171c595d;
static PyCodeObject *codeobj_7c73b6073210442193c92c29ca2b700b;
static PyCodeObject *codeobj_78a9953e49c06d6508c397cd361923f0;
static PyCodeObject *codeobj_6968cb8f25a83f309b79c19cdaa12478;
static PyCodeObject *codeobj_9e488e3e6b003bd4988650021f9a8896;
static PyCodeObject *codeobj_4a224452ed067dc5ed6241cca7d548cd;
static PyCodeObject *codeobj_cc0296cfc97e1e26991bcfd44b93b1d1;
static PyCodeObject *codeobj_109729f46230a734099fdc1f60bd4f48;
static PyCodeObject *codeobj_f8f4c647f95a11b72eadacb3437e5e7a;
static PyCodeObject *codeobj_62c3d8e16848ef7854278f3bc5ceb404;
static PyCodeObject *codeobj_7a2c4ef3755c467efd14b718fade8dba;
static PyCodeObject *codeobj_a2aaf48369809ea7f18bcf4f26799bec;
static PyCodeObject *codeobj_d8eab99f266489c382c69bb3041e835e;
static PyCodeObject *codeobj_0a1e04afecd3eca276cd28298ea7771e;
static PyCodeObject *codeobj_87161ff4786bfac1e552670a602c895f;
static PyCodeObject *codeobj_b0c3aba41106fb9db0b937d9a8930ab9;
static PyCodeObject *codeobj_fd6b6f72edb252c36d2235a132eb9d28;
static PyCodeObject *codeobj_e2a80832cee711c223f390fab4d7a96d;
static PyCodeObject *codeobj_8aac508308ce783222341b08cc71d0b4;

static void createModuleCodeObjects(void)
{
    module_filename_obj = const_str_digest_7cfcf4e3ecceb0a971b6d9a37c2398d0;
    codeobj_e9929961d51b8ac8760968522b189ffb = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 616, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_d_tuple, 1, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_cdd33381080862e8f2b55ee70f563b54 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 1039, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_tuple, 1, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3dba0c8888c9537cf6af4d557f33ce7c = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 874, const_tuple_518ebbe3d6e13fd0cf0c811373cb2361_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b28dd019ed58c09f14d3689247505663 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 877, const_tuple_str_plain_option_str_plain_d_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7697ffe4ae7754475e380588f515f957 = MAKE_CODEOBJ( module_filename_obj, const_str_digest_2f4fe541d26921044713712808db8449, 1, const_tuple_empty, 0, CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_a24361983ffe6b51e65bf3b0f1bf29f3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_BasicInterpolation, 365, const_tuple_402cc1fb5f781edb557079498893b004_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1d483adeff710e212cffa37f5abd1161 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ConfigParser, 1230, const_tuple_740d6674f6f61423511f2af55d717e03_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7801595be13afb8720eaf8e586651659 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ConverterMapping, 1334, const_tuple_8d4450454f5a7c8e2e4cf422bf632a9d_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_920dac7f37e06f5f6ce355b6cf15424d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ExtendedInterpolation, 437, const_tuple_402cc1fb5f781edb557079498893b004_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_87408f1f826db72313e4fc65b40ab565 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_LegacyInterpolation, 511, const_tuple_4b7d0d7d284fbd2188a4bdc058f4fb16_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1c597e76e6430bdcfa15394ab38ca898 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ParsingError, 286, const_tuple_e81acbb6b5ba5121b952ce35d86e1f0c_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9815049f917ba554f86a83cfecf75243 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_RawConfigParser, 549, const_tuple_6ffbea5a107892fce1d59c01a5876089_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f39f8e2fa34d8c992a5aaf1d624dc002 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SectionProxy, 1262, const_tuple_99f44bc3c29d70333ed0df92b0744d90_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_dfe6f968acd0490fca4f335531ef38b3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___contains__, 1001, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_38e2293536a89ccaf97ca62208348368 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___contains__, 1291, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7d72c5a1328b9be182f6506bb7c35c78 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___delitem__, 994, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c2f58cd04c5b6411726e80ed1d337a7a = MAKE_CODEOBJ( module_filename_obj, const_str_plain___delitem__, 1286, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_47ab76a39786d271d4004f9bcd2caf05 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___delitem__, 1372, const_tuple_str_plain_self_str_plain_key_str_plain_k_str_plain_inst_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4d9075612c6c82ef69847d9c6971ac19 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___getitem__, 977, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_fc2c024fb30f3793c71e27c33495cbc5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___getitem__, 1277, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0e6f76a75cf39b59a5693dec2a8d022e = MAKE_CODEOBJ( module_filename_obj, const_str_plain___getitem__, 1353, const_tuple_str_plain_self_str_plain_key_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_beb8cf217168786cbfc0cffa934f6dcf = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 160, const_tuple_str_plain_self_str_plain_msg_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c2668d862c6148091184820ea0e3e43d = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 173, const_tuple_str_plain_self_str_plain_section_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2b7353245759a55d688c9c933b7327cd = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 187, const_tuple_b5a0a397f21f33e9de74beeb38637f36_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3e3e08daeba1f2f41acf3dd74311fed1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 212, const_tuple_1bdad6201c552b523a39052fe498eed6_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c2e2c04352c53777ade891322f9a784d = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 235, const_tuple_str_plain_self_str_plain_option_str_plain_section_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f74f9293c5e7b1731951d53d79a519ec = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 246, const_tuple_882cf825907280cd818aafbc44a75e54_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3015836a0b6402b78dd439182ba7e585 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 256, const_tuple_d328a853cb5f20ab31adeed177868e53_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e4f10a5bc7af73a97b01812bc8f651b3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 276, const_tuple_d41583092ddfc8815e9c78caa843964c_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d7c59a1e0605ca9b4014603d0f36cf10 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 289, const_tuple_str_plain_self_str_plain_source_str_plain_filename_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ae840599afa6dc32ea4c9ee4e8dd87e2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 332, const_tuple_5b34e4d16ce1d6568d0913835e1643d8_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d2b77459cd226d739fe11c413ebe5386 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 590, const_tuple_3ec2feadef6256282c87f3baf13b7d14_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c5e80410636f7f6436eb99c1c306172c = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 1252, const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_a5420b73d4db59845097e06f1d827349 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 1265, const_tuple_648b937946f015cde569c4c2ca8649d8_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d95705f71f4e270c93e5dd5f7ddba45b = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 1344, const_tuple_str_plain_self_str_plain_parser_str_plain_getter_str_plain_m_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_60f3cb39b8eb02ad7baa6e877a6e3907 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___iter__, 1007, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2878d167ce214c4e3716ab16ab5e7e3a = MAKE_CODEOBJ( module_filename_obj, const_str_plain___iter__, 1297, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3d63a738ba45c810806c6b5d18a27e17 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___iter__, 1386, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_92a69b115ee9417d928eedd215149698 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___len__, 1004, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0b0031f5d0e5da44e03bcd50a2d36fce = MAKE_CODEOBJ( module_filename_obj, const_str_plain___len__, 1294, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_78951cd80c8ae318b1b1e563c8f65e5b = MAKE_CODEOBJ( module_filename_obj, const_str_plain___len__, 1389, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6bad5d6328cf7eb9ea5b382bc11ab46e = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 164, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c9a0eb1d420f6fb05ca5f0971b53a48f = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 1274, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bc110664060803235e326e00bc1c6e2e = MAKE_CODEOBJ( module_filename_obj, const_str_plain___setitem__, 982, const_tuple_str_plain_self_str_plain_key_str_plain_value_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b9550e7d02bfa7b3b8c535599a03f2ec = MAKE_CODEOBJ( module_filename_obj, const_str_plain___setitem__, 1282, const_tuple_str_plain_self_str_plain_key_str_plain_value_str_plain___tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_744f15a6dacd05be21a5ae8b69a5630c = MAKE_CODEOBJ( module_filename_obj, const_str_plain___setitem__, 1356, const_tuple_fba306677aca46f32e14634ef4f1df1a_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0795b625ce78321c74d98095e411cdd2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__convert_to_boolean, 1172, const_tuple_str_plain_self_str_plain_value_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b5c31df4eae6765cb7096a3dae45ff07 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__get, 813, const_tuple_abc308b2ba024d9227828c0d9b6c0f3a_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5e419908535ffb567cbe7d7947a53ae3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__get_conv, 816, const_tuple_1ac7386b4f56dc6e73450d76941ab6da_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_852592d0099987bfb5608bfa0794908e = MAKE_CODEOBJ( module_filename_obj, const_str_plain__handle_error, 1146, const_tuple_252f8a908df52fd6ded436190a417ff5_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_1cb4ee8f849e6ed15b3d3cccb81790b3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__interpolate_some, 395, const_tuple_f57b9e40e1790a7279c2c786ec612591_tuple, 8, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_a9d056abfb66efd51ab0ad66d53b7228 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__interpolate_some, 456, const_tuple_fc2425931a3c38c0bfa73c19a150e228_tuple, 8, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4019ba08b58ba7d30d5741fe684fea6e = MAKE_CODEOBJ( module_filename_obj, const_str_plain__interpolation_replace, 540, const_tuple_str_plain_match_str_plain_parser_str_plain_s_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4d7f0c1f5c85bcc025539d616b230c49 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__join_multiline_values, 1134, const_tuple_f7aa6275dcad487aadbf2e02dfe6c8c8_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f3e570871a913f5c3184102077875453 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__options, 1300, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ab1c2b3f959bff7c0e4bb051505dc51b = MAKE_CODEOBJ( module_filename_obj, const_str_plain__read, 1011, const_tuple_0b91b062b9ea890e5b46122de323346f_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6f97561e54b0e66dda4246d4acff942c = MAKE_CODEOBJ( module_filename_obj, const_str_plain__unify_values, 1152, const_tuple_ef677f8899292f812ba973ea661d9005_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_71f2c142bbe82ea466be0ab6ea3535ac = MAKE_CODEOBJ( module_filename_obj, const_str_plain__validate_value_types, 1179, const_tuple_8f340be7d65d4c529731c20c61f2d7df_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d717256835b597e7be6307bed192a9ab = MAKE_CODEOBJ( module_filename_obj, const_str_plain__write_section, 941, const_tuple_92f01587429ef3505c8d54b6a2428fc3_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_25b1e4ac38b8dd4e768369c3920f267a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_section, 645, const_tuple_str_plain_self_str_plain_section_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_abed26e223c52a3234ad5e8dc70db996 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_section, 1241, const_tuple_str_plain_self_str_plain_section_str_plain___tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_80653693d1f70a7a77e31361385ed7aa = MAKE_CODEOBJ( module_filename_obj, const_str_plain_append, 324, const_tuple_str_plain_self_str_plain_lineno_str_plain_line_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6e912e3ea1bbc83deaadbfb7d3822c32 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_get, 352, const_tuple_294f3cd008bf03960a75f8516370eaed_tuple, 6, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_51cc3dc844562a78290fe7eda25da1c2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_get, 382, const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple, 6, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7cfa546ecb06a850c3e5d3844990f666 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_get, 443, const_tuple_24d74b31ccebdd46e582fb7a0183be14_tuple, 6, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_23a563440601bc013ec73f2f4d54f600 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_get, 517, const_tuple_8cec7455f444c7b625efa5ada8f1a88a_tuple, 6, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ab55c2b179c81cb40e21314823bb83f0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_read, 358, const_tuple_fab2d55cc656484581228079d8fe5729_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_baeb827ef30a15138dc40640f0ad1f16 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_set, 355, const_tuple_fab2d55cc656484581228079d8fe5729_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ba94be6d76e470aaad260bd3038c6148 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_set, 387, const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6bdef8e962197536356cf8d3fd9c934f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_set, 448, const_tuple_c3b13810ab81dce9b2b6b51a850c7405_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_291f42a14f58b536292a20c599bac6f5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_set, 537, const_tuple_fab2d55cc656484581228079d8fe5729_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6618e93e2d1bceb08c93139c77e98a4a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_before_write, 361, const_tuple_fab2d55cc656484581228079d8fe5729_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2c223045dc62113b154f3510d62c8681 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_converters, 1225, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9e0f9d0dc02a6e2954af5c6c2bc553d8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_defaults, 637, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_503092ca0c346f01e6adeeb3bd535d10 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_filename, 304, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e2c98e119976a26715ef97014c3668ae = MAKE_CODEOBJ( module_filename_obj, const_str_plain_filename, 314, const_tuple_str_plain_self_str_plain_value_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f67fe1e40143ec3725182e2baf1d7514 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get, 771, const_tuple_e167b714773c0cdd88b561e73a5b50ee_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b061b1c70bd82a85c4b47597d5e5ce51 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get, 1316, const_tuple_32e51553fbedf2e08f82df32b2ef578d_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3af5314f549e28ccdcc3972a01671d47 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_getboolean, 843, const_tuple_53c577bb263cd373580cbd1a38a3b7ef_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_feac3581a44afac5b067457ac2606c93 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_getfloat, 836, const_tuple_53c577bb263cd373580cbd1a38a3b7ef_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_dc9d3a3a388893342a3bf29832c2b90e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_getint, 829, const_tuple_53c577bb263cd373580cbd1a38a3b7ef_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_09f24ec8ef427033a6c980f7171c595d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_has_option, 896, const_tuple_str_plain_self_str_plain_section_str_plain_option_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7c73b6073210442193c92c29ca2b700b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_has_section, 659, const_tuple_str_plain_self_str_plain_section_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_78a9953e49c06d6508c397cd361923f0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_items, 851, const_tuple_7362694683cbbac7605a01b7d7947279_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6968cb8f25a83f309b79c19cdaa12478 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_name, 1311, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9e488e3e6b003bd4988650021f9a8896 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_options, 666, const_tuple_str_plain_self_str_plain_section_str_plain_opts_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4a224452ed067dc5ed6241cca7d548cd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_optionxform, 893, const_tuple_str_plain_self_str_plain_optionstr_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_cc0296cfc97e1e26991bcfd44b93b1d1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_parser, 1306, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_109729f46230a734099fdc1f60bd4f48 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_popitem, 880, const_tuple_str_plain_self_str_plain_key_str_plain_value_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f8f4c647f95a11b72eadacb3437e5e7a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_read, 675, const_tuple_8170fc4e20b7416c8268b15f8a321606_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_62c3d8e16848ef7854278f3bc5ceb404 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_read_dict, 731, const_tuple_154d4cba0bb813a8d48b7308099f87c7_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7a2c4ef3755c467efd14b718fade8dba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_read_file, 711, const_tuple_str_plain_self_str_plain_f_str_plain_source_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_a2aaf48369809ea7f18bcf4f26799bec = MAKE_CODEOBJ( module_filename_obj, const_str_plain_read_string, 726, const_tuple_bf4c15b53bf3882e410458d5826bb932_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d8eab99f266489c382c69bb3041e835e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_readfp, 762, const_tuple_str_plain_self_str_plain_fp_str_plain_filename_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0a1e04afecd3eca276cd28298ea7771e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_remove_option, 954, const_tuple_05dc6e80a1e72145e6eb56080b9a795d_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_87161ff4786bfac1e552670a602c895f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_remove_section, 969, const_tuple_str_plain_self_str_plain_section_str_plain_existed_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_b0c3aba41106fb9db0b937d9a8930ab9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_sections, 640, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_fd6b6f72edb252c36d2235a132eb9d28 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_set, 910, const_tuple_9257a6de32cab8660413f61fc0532bf4_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e2a80832cee711c223f390fab4d7a96d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_set, 1235, const_tuple_09410f2f2f2af282a8576ef9481559e4_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8aac508308ce783222341b08cc71d0b4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write, 924, const_tuple_cff11dfbf3d13413ad3d037ba36caaf3_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_UNICODE_LITERALS | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
}

// The module function declarations.
#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *backports$configparser$$$function_28___init__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void backports$configparser$$$function_28___init__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator );
#endif


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *backports$configparser$$$function_60__read$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void backports$configparser$$$function_60__read$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator );
#endif


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_3_complex_call_helper_pos_star_dict( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_1_complex_call_helper_star_list_star_dict( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_4_complex_call_helper_pos_keywords_star_dict( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_10___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_11_filename(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_12_filename(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_13_append(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_14___init__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_15_before_get(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_16_before_set(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_17_before_read(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_18_before_write(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_19_before_get(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_1___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_20_before_set(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_21__interpolate_some(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_22_before_get(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_23_before_set(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_24__interpolate_some(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_25_before_get(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_26_before_set(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_27__interpolation_replace(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_28___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_29_defaults(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_2___repr__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_30_sections(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_31_add_section(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_32_has_section(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_33_options(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_34_read( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_35_read_file( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_36_read_string( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_37_read_dict( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_38_readfp( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_39_get(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_3___init__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_40__get(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_41__get_conv(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_42_getint(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_43_getfloat(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_44_getboolean(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_45_items( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_45_items$$$function_1_lambda( struct Nuitka_CellObject *closure_d, struct Nuitka_CellObject *closure_section, struct Nuitka_CellObject *closure_self );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_45_items$$$function_2_lambda( struct Nuitka_CellObject *closure_d );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_46_popitem(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_47_optionxform(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_48_has_option(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_49_set( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_4___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_50_write( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_51__write_section(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_52_remove_option(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_53_remove_section(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_54___getitem__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_55___setitem__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_56___delitem__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_57___contains__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_58___len__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_59___iter__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_5___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_60__read(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_61__join_multiline_values(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_62__handle_error(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_63__unify_values(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_64__convert_to_boolean(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_65__validate_value_types(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_66_converters(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_67_set( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_68_add_section(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_69___init__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_6___init__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_70___init__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_71___repr__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_72___getitem__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_73___setitem__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_74___delitem__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_75___contains__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_76___len__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_77___iter__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_78__options(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_79_parser(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_7___init__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_80_name(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_81_get( PyObject *defaults );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_82___init__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_83___getitem__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_84___setitem__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_85___delitem__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_86___iter__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_87___len__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_8___init__(  );


static PyObject *MAKE_FUNCTION_backports$configparser$$$function_9___init__(  );


// The module function definitions.
static PyObject *impl_backports$configparser$$$function_1___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_msg = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_called_instance_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_beb8cf217168786cbfc0cffa934f6dcf = NULL;

    struct Nuitka_FrameObject *frame_beb8cf217168786cbfc0cffa934f6dcf;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_beb8cf217168786cbfc0cffa934f6dcf, codeobj_beb8cf217168786cbfc0cffa934f6dcf, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_beb8cf217168786cbfc0cffa934f6dcf = cache_frame_beb8cf217168786cbfc0cffa934f6dcf;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_beb8cf217168786cbfc0cffa934f6dcf );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_beb8cf217168786cbfc0cffa934f6dcf ) == 2 ); // Frame stack

    // Framed code:
    tmp_assattr_name_1 = par_msg;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_message, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 161;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_1 = PyExc_Exception;
    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_msg;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_beb8cf217168786cbfc0cffa934f6dcf->m_frame.f_lineno = 162;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain___init__, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 162;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_beb8cf217168786cbfc0cffa934f6dcf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_beb8cf217168786cbfc0cffa934f6dcf );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_beb8cf217168786cbfc0cffa934f6dcf, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_beb8cf217168786cbfc0cffa934f6dcf->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_beb8cf217168786cbfc0cffa934f6dcf, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_beb8cf217168786cbfc0cffa934f6dcf,
        type_description_1,
        par_self,
        par_msg
    );


    // Release cached frame.
    if ( frame_beb8cf217168786cbfc0cffa934f6dcf == cache_frame_beb8cf217168786cbfc0cffa934f6dcf )
    {
        Py_DECREF( frame_beb8cf217168786cbfc0cffa934f6dcf );
    }
    cache_frame_beb8cf217168786cbfc0cffa934f6dcf = NULL;

    assertFrameObject( frame_beb8cf217168786cbfc0cffa934f6dcf );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_1___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_msg );
    Py_DECREF( par_msg );
    par_msg = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_msg );
    Py_DECREF( par_msg );
    par_msg = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_1___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_2___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_6bad5d6328cf7eb9ea5b382bc11ab46e = NULL;

    struct Nuitka_FrameObject *frame_6bad5d6328cf7eb9ea5b382bc11ab46e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6bad5d6328cf7eb9ea5b382bc11ab46e, codeobj_6bad5d6328cf7eb9ea5b382bc11ab46e, module_backports$configparser, sizeof(void *) );
    frame_6bad5d6328cf7eb9ea5b382bc11ab46e = cache_frame_6bad5d6328cf7eb9ea5b382bc11ab46e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6bad5d6328cf7eb9ea5b382bc11ab46e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6bad5d6328cf7eb9ea5b382bc11ab46e ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_message );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 165;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6bad5d6328cf7eb9ea5b382bc11ab46e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6bad5d6328cf7eb9ea5b382bc11ab46e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6bad5d6328cf7eb9ea5b382bc11ab46e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6bad5d6328cf7eb9ea5b382bc11ab46e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6bad5d6328cf7eb9ea5b382bc11ab46e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6bad5d6328cf7eb9ea5b382bc11ab46e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6bad5d6328cf7eb9ea5b382bc11ab46e,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_6bad5d6328cf7eb9ea5b382bc11ab46e == cache_frame_6bad5d6328cf7eb9ea5b382bc11ab46e )
    {
        Py_DECREF( frame_6bad5d6328cf7eb9ea5b382bc11ab46e );
    }
    cache_frame_6bad5d6328cf7eb9ea5b382bc11ab46e = NULL;

    assertFrameObject( frame_6bad5d6328cf7eb9ea5b382bc11ab46e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_2___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_2___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_3___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_left_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_c2668d862c6148091184820ea0e3e43d = NULL;

    struct Nuitka_FrameObject *frame_c2668d862c6148091184820ea0e3e43d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c2668d862c6148091184820ea0e3e43d, codeobj_c2668d862c6148091184820ea0e3e43d, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_c2668d862c6148091184820ea0e3e43d = cache_frame_c2668d862c6148091184820ea0e3e43d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c2668d862c6148091184820ea0e3e43d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c2668d862c6148091184820ea0e3e43d ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 174;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 174;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_left_name_1 = const_unicode_digest_b152aa221a76ab41baa98fbf6826b7bf;
    tmp_right_name_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    tmp_args_element_name_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 174;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_c2668d862c6148091184820ea0e3e43d->m_frame.f_lineno = 174;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 174;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = par_section;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_section, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 175;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = PyTuple_New( 1 );
    tmp_tuple_element_2 = par_section;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assattr_name_2, 0, tmp_tuple_element_2 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_args, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 176;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c2668d862c6148091184820ea0e3e43d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c2668d862c6148091184820ea0e3e43d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c2668d862c6148091184820ea0e3e43d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c2668d862c6148091184820ea0e3e43d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c2668d862c6148091184820ea0e3e43d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c2668d862c6148091184820ea0e3e43d,
        type_description_1,
        par_self,
        par_section
    );


    // Release cached frame.
    if ( frame_c2668d862c6148091184820ea0e3e43d == cache_frame_c2668d862c6148091184820ea0e3e43d )
    {
        Py_DECREF( frame_c2668d862c6148091184820ea0e3e43d );
    }
    cache_frame_c2668d862c6148091184820ea0e3e43d = NULL;

    assertFrameObject( frame_c2668d862c6148091184820ea0e3e43d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_3___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_3___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_4___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_source = python_pars[ 2 ];
    PyObject *par_lineno = python_pars[ 3 ];
    PyObject *var_msg = NULL;
    PyObject *var_message = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_2b7353245759a55d688c9c933b7327cd = NULL;

    struct Nuitka_FrameObject *frame_2b7353245759a55d688c9c933b7327cd;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2b7353245759a55d688c9c933b7327cd, codeobj_2b7353245759a55d688c9c933b7327cd, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_2b7353245759a55d688c9c933b7327cd = cache_frame_2b7353245759a55d688c9c933b7327cd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2b7353245759a55d688c9c933b7327cd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2b7353245759a55d688c9c933b7327cd ) == 2 ); // Frame stack

    // Framed code:
    tmp_assign_source_1 = PyList_New( 2 );
    tmp_operand_name_1 = par_section;

    CHECK_OBJECT( tmp_operand_name_1 );
    tmp_list_element_1 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_1 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_1 );

        exception_lineno = 188;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = const_unicode_digest_b38a29c561849c4a73b47f8840a102d7;
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_1, 1, tmp_list_element_1 );
    assert( var_msg == NULL );
    var_msg = tmp_assign_source_1;

    tmp_compare_left_1 = par_source;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_2 = PyList_New( 2 );
    tmp_list_element_2 = const_unicode_digest_cca2840096ce79eebf3fd9d166beac24;
    Py_INCREF( tmp_list_element_2 );
    PyList_SET_ITEM( tmp_assign_source_2, 0, tmp_list_element_2 );
    tmp_operand_name_2 = par_source;

    CHECK_OBJECT( tmp_operand_name_2 );
    tmp_list_element_2 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_2 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        exception_lineno = 190;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_2, 1, tmp_list_element_2 );
    assert( var_message == NULL );
    var_message = tmp_assign_source_2;

    tmp_compare_left_2 = par_lineno;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = Py_None;
    tmp_isnot_2 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if ( tmp_isnot_2 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_1 = var_message;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_1 = const_unicode_digest_dcda6f8db35b3ee07c3acac24bc12683;
    tmp_args_element_name_2 = par_lineno;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_2b7353245759a55d688c9c933b7327cd->m_frame.f_lineno = 192;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_format, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 192;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_2b7353245759a55d688c9c933b7327cd->m_frame.f_lineno = 192;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_2:;
    tmp_called_instance_2 = var_message;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_2b7353245759a55d688c9c933b7327cd->m_frame.f_lineno = 193;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_unicode_digest_88556a5392a93fcde31f2432e52f3b0b_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 193;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_3 = var_message;

    CHECK_OBJECT( tmp_called_instance_3 );
    tmp_args_element_name_3 = var_msg;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_2b7353245759a55d688c9c933b7327cd->m_frame.f_lineno = 194;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_extend, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 194;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_3 = var_message;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_msg;
        assert( old != NULL );
        var_msg = tmp_assign_source_3;
        Py_INCREF( var_msg );
        Py_DECREF( old );
    }

    goto branch_end_1;
    branch_no_1:;
    tmp_called_instance_4 = var_msg;

    CHECK_OBJECT( tmp_called_instance_4 );
    frame_2b7353245759a55d688c9c933b7327cd->m_frame.f_lineno = 197;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_insert, &PyTuple_GET_ITEM( const_tuple_int_0_unicode_digest_a672f37732d732178f7ab78af6651d17_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 197;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_1:;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 198;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___init__ );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_self;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_called_instance_5 = const_unicode_empty;
    tmp_args_element_name_6 = var_msg;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_2b7353245759a55d688c9c933b7327cd->m_frame.f_lineno = 198;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_args_element_name_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_join, call_args );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 198;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_2b7353245759a55d688c9c933b7327cd->m_frame.f_lineno = 198;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = par_section;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_section, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 199;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = par_source;

    CHECK_OBJECT( tmp_assattr_name_2 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_source, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 200;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_3 = par_lineno;

    CHECK_OBJECT( tmp_assattr_name_3 );
    tmp_assattr_target_3 = par_self;

    CHECK_OBJECT( tmp_assattr_target_3 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_lineno, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 201;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_4 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_4, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_source;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_4, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_lineno;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_4, 2, tmp_tuple_element_1 );
    tmp_assattr_target_4 = par_self;

    CHECK_OBJECT( tmp_assattr_target_4 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_args, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_4 );

        exception_lineno = 202;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_4 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2b7353245759a55d688c9c933b7327cd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2b7353245759a55d688c9c933b7327cd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2b7353245759a55d688c9c933b7327cd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2b7353245759a55d688c9c933b7327cd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2b7353245759a55d688c9c933b7327cd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2b7353245759a55d688c9c933b7327cd,
        type_description_1,
        par_self,
        par_section,
        par_source,
        par_lineno,
        var_msg,
        var_message
    );


    // Release cached frame.
    if ( frame_2b7353245759a55d688c9c933b7327cd == cache_frame_2b7353245759a55d688c9c933b7327cd )
    {
        Py_DECREF( frame_2b7353245759a55d688c9c933b7327cd );
    }
    cache_frame_2b7353245759a55d688c9c933b7327cd = NULL;

    assertFrameObject( frame_2b7353245759a55d688c9c933b7327cd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_4___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_source );
    Py_DECREF( par_source );
    par_source = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    CHECK_OBJECT( (PyObject *)var_msg );
    Py_DECREF( var_msg );
    var_msg = NULL;

    Py_XDECREF( var_message );
    var_message = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_source );
    Py_DECREF( par_source );
    par_source = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    Py_XDECREF( var_msg );
    var_msg = NULL;

    Py_XDECREF( var_message );
    var_message = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_4___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_5___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_source = python_pars[ 3 ];
    PyObject *par_lineno = python_pars[ 4 ];
    PyObject *var_msg = NULL;
    PyObject *var_message = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_3e3e08daeba1f2f41acf3dd74311fed1 = NULL;

    struct Nuitka_FrameObject *frame_3e3e08daeba1f2f41acf3dd74311fed1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3e3e08daeba1f2f41acf3dd74311fed1, codeobj_3e3e08daeba1f2f41acf3dd74311fed1, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3e3e08daeba1f2f41acf3dd74311fed1 = cache_frame_3e3e08daeba1f2f41acf3dd74311fed1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3e3e08daeba1f2f41acf3dd74311fed1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3e3e08daeba1f2f41acf3dd74311fed1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_assign_source_1 = PyList_New( 4 );
    tmp_operand_name_1 = par_option;

    CHECK_OBJECT( tmp_operand_name_1 );
    tmp_list_element_1 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_1 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_1 );

        exception_lineno = 213;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = const_unicode_digest_250f4411eb9a039678ff1da59c1dd93d;
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_1, 1, tmp_list_element_1 );
    tmp_operand_name_2 = par_section;

    CHECK_OBJECT( tmp_operand_name_2 );
    tmp_list_element_1 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_2 );
    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_1 );

        exception_lineno = 213;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_1, 2, tmp_list_element_1 );
    tmp_list_element_1 = const_unicode_digest_b38a29c561849c4a73b47f8840a102d7;
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_1, 3, tmp_list_element_1 );
    assert( var_msg == NULL );
    var_msg = tmp_assign_source_1;

    tmp_compare_left_1 = par_source;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_2 = PyList_New( 2 );
    tmp_list_element_2 = const_unicode_digest_cca2840096ce79eebf3fd9d166beac24;
    Py_INCREF( tmp_list_element_2 );
    PyList_SET_ITEM( tmp_assign_source_2, 0, tmp_list_element_2 );
    tmp_operand_name_3 = par_source;

    CHECK_OBJECT( tmp_operand_name_3 );
    tmp_list_element_2 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_3 );
    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_2 );

        exception_lineno = 216;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_2, 1, tmp_list_element_2 );
    assert( var_message == NULL );
    var_message = tmp_assign_source_2;

    tmp_compare_left_2 = par_lineno;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = Py_None;
    tmp_isnot_2 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if ( tmp_isnot_2 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_1 = var_message;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_1 = const_unicode_digest_dcda6f8db35b3ee07c3acac24bc12683;
    tmp_args_element_name_2 = par_lineno;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_3e3e08daeba1f2f41acf3dd74311fed1->m_frame.f_lineno = 218;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_format, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 218;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    frame_3e3e08daeba1f2f41acf3dd74311fed1->m_frame.f_lineno = 218;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_2:;
    tmp_called_instance_2 = var_message;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_3e3e08daeba1f2f41acf3dd74311fed1->m_frame.f_lineno = 219;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_unicode_digest_c08197f9ec3b87cf34175c6ee14d2c8c_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 219;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_3 = var_message;

    CHECK_OBJECT( tmp_called_instance_3 );
    tmp_args_element_name_3 = var_msg;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_3e3e08daeba1f2f41acf3dd74311fed1->m_frame.f_lineno = 220;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_extend, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 220;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_3 = var_message;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_msg;
        assert( old != NULL );
        var_msg = tmp_assign_source_3;
        Py_INCREF( var_msg );
        Py_DECREF( old );
    }

    goto branch_end_1;
    branch_no_1:;
    tmp_called_instance_4 = var_msg;

    CHECK_OBJECT( tmp_called_instance_4 );
    frame_3e3e08daeba1f2f41acf3dd74311fed1->m_frame.f_lineno = 223;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_insert, &PyTuple_GET_ITEM( const_tuple_int_0_unicode_digest_712073c5ac5a3a5ae23dbedbd9e36f9a_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_1:;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 224;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___init__ );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 224;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_self;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_called_instance_5 = const_unicode_empty;
    tmp_args_element_name_6 = var_msg;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_3e3e08daeba1f2f41acf3dd74311fed1->m_frame.f_lineno = 224;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_args_element_name_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_join, call_args );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 224;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    frame_3e3e08daeba1f2f41acf3dd74311fed1->m_frame.f_lineno = 224;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 224;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = par_section;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_section, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 225;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = par_option;

    CHECK_OBJECT( tmp_assattr_name_2 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_option, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_3 = par_source;

    CHECK_OBJECT( tmp_assattr_name_3 );
    tmp_assattr_target_3 = par_self;

    CHECK_OBJECT( tmp_assattr_target_3 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_source, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 227;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_4 = par_lineno;

    CHECK_OBJECT( tmp_assattr_name_4 );
    tmp_assattr_target_4 = par_self;

    CHECK_OBJECT( tmp_assattr_target_4 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_lineno, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 228;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_5 = PyTuple_New( 4 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_5, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_5, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_source;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_5, 2, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_lineno;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_5, 3, tmp_tuple_element_1 );
    tmp_assattr_target_5 = par_self;

    CHECK_OBJECT( tmp_assattr_target_5 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_args, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_5 );

        exception_lineno = 229;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_5 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e3e08daeba1f2f41acf3dd74311fed1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e3e08daeba1f2f41acf3dd74311fed1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3e3e08daeba1f2f41acf3dd74311fed1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3e3e08daeba1f2f41acf3dd74311fed1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3e3e08daeba1f2f41acf3dd74311fed1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3e3e08daeba1f2f41acf3dd74311fed1,
        type_description_1,
        par_self,
        par_section,
        par_option,
        par_source,
        par_lineno,
        var_msg,
        var_message
    );


    // Release cached frame.
    if ( frame_3e3e08daeba1f2f41acf3dd74311fed1 == cache_frame_3e3e08daeba1f2f41acf3dd74311fed1 )
    {
        Py_DECREF( frame_3e3e08daeba1f2f41acf3dd74311fed1 );
    }
    cache_frame_3e3e08daeba1f2f41acf3dd74311fed1 = NULL;

    assertFrameObject( frame_3e3e08daeba1f2f41acf3dd74311fed1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_5___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_source );
    Py_DECREF( par_source );
    par_source = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    CHECK_OBJECT( (PyObject *)var_msg );
    Py_DECREF( var_msg );
    var_msg = NULL;

    Py_XDECREF( var_message );
    var_message = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_source );
    Py_DECREF( par_source );
    par_source = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    Py_XDECREF( var_msg );
    var_msg = NULL;

    Py_XDECREF( var_message );
    var_message = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_5___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_6___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_option = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_left_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_c2e2c04352c53777ade891322f9a784d = NULL;

    struct Nuitka_FrameObject *frame_c2e2c04352c53777ade891322f9a784d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c2e2c04352c53777ade891322f9a784d, codeobj_c2e2c04352c53777ade891322f9a784d, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_c2e2c04352c53777ade891322f9a784d = cache_frame_c2e2c04352c53777ade891322f9a784d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c2e2c04352c53777ade891322f9a784d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c2e2c04352c53777ade891322f9a784d ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 236;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_left_name_1 = const_unicode_digest_ed11dd8625a67522a8dbc9eb062dabce;
    tmp_right_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
    tmp_args_element_name_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 236;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_c2e2c04352c53777ade891322f9a784d->m_frame.f_lineno = 236;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = par_option;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_option, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 238;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = par_section;

    CHECK_OBJECT( tmp_assattr_name_2 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_section, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 239;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_3 = PyTuple_New( 2 );
    tmp_tuple_element_2 = par_option;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assattr_name_3, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_section;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assattr_name_3, 1, tmp_tuple_element_2 );
    tmp_assattr_target_3 = par_self;

    CHECK_OBJECT( tmp_assattr_target_3 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_args, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_3 );

        exception_lineno = 240;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_3 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c2e2c04352c53777ade891322f9a784d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c2e2c04352c53777ade891322f9a784d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c2e2c04352c53777ade891322f9a784d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c2e2c04352c53777ade891322f9a784d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c2e2c04352c53777ade891322f9a784d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c2e2c04352c53777ade891322f9a784d,
        type_description_1,
        par_self,
        par_option,
        par_section
    );


    // Release cached frame.
    if ( frame_c2e2c04352c53777ade891322f9a784d == cache_frame_c2e2c04352c53777ade891322f9a784d )
    {
        Py_DECREF( frame_c2e2c04352c53777ade891322f9a784d );
    }
    cache_frame_c2e2c04352c53777ade891322f9a784d = NULL;

    assertFrameObject( frame_c2e2c04352c53777ade891322f9a784d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_6___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_6___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_7___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_option = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_msg = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_called_instance_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_f74f9293c5e7b1731951d53d79a519ec = NULL;

    struct Nuitka_FrameObject *frame_f74f9293c5e7b1731951d53d79a519ec;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f74f9293c5e7b1731951d53d79a519ec, codeobj_f74f9293c5e7b1731951d53d79a519ec, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f74f9293c5e7b1731951d53d79a519ec = cache_frame_f74f9293c5e7b1731951d53d79a519ec;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f74f9293c5e7b1731951d53d79a519ec );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f74f9293c5e7b1731951d53d79a519ec ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 247;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_msg;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_f74f9293c5e7b1731951d53d79a519ec->m_frame.f_lineno = 247;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain___init__, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 247;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = par_option;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_option, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 248;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = par_section;

    CHECK_OBJECT( tmp_assattr_name_2 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_section, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 249;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_3 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_3, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_3, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_msg;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_3, 2, tmp_tuple_element_1 );
    tmp_assattr_target_3 = par_self;

    CHECK_OBJECT( tmp_assattr_target_3 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_args, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_3 );

        exception_lineno = 250;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_3 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f74f9293c5e7b1731951d53d79a519ec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f74f9293c5e7b1731951d53d79a519ec );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f74f9293c5e7b1731951d53d79a519ec, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f74f9293c5e7b1731951d53d79a519ec->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f74f9293c5e7b1731951d53d79a519ec, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f74f9293c5e7b1731951d53d79a519ec,
        type_description_1,
        par_self,
        par_option,
        par_section,
        par_msg
    );


    // Release cached frame.
    if ( frame_f74f9293c5e7b1731951d53d79a519ec == cache_frame_f74f9293c5e7b1731951d53d79a519ec )
    {
        Py_DECREF( frame_f74f9293c5e7b1731951d53d79a519ec );
    }
    cache_frame_f74f9293c5e7b1731951d53d79a519ec = NULL;

    assertFrameObject( frame_f74f9293c5e7b1731951d53d79a519ec );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_7___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_msg );
    Py_DECREF( par_msg );
    par_msg = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_msg );
    Py_DECREF( par_msg );
    par_msg = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_7___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_8___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_option = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_rawval = python_pars[ 3 ];
    PyObject *par_reference = python_pars[ 4 ];
    PyObject *var_msg = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_3015836a0b6402b78dd439182ba7e585 = NULL;

    struct Nuitka_FrameObject *frame_3015836a0b6402b78dd439182ba7e585;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3015836a0b6402b78dd439182ba7e585, codeobj_3015836a0b6402b78dd439182ba7e585, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3015836a0b6402b78dd439182ba7e585 = cache_frame_3015836a0b6402b78dd439182ba7e585;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3015836a0b6402b78dd439182ba7e585 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3015836a0b6402b78dd439182ba7e585 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = const_unicode_digest_e29344b723f0d47339ac4bc00c9b3ffd;
    tmp_args_element_name_1 = par_option;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_section;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_reference;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_rawval;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_3015836a0b6402b78dd439182ba7e585->m_frame.f_lineno = 257;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS4( tmp_called_instance_1, const_str_plain_format, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 257;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_msg == NULL );
    var_msg = tmp_assign_source_1;

    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationError );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationError );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationError" );
        exception_tb = NULL;

        exception_lineno = 260;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_self;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = par_option;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_args_element_name_7 = par_section;

    CHECK_OBJECT( tmp_args_element_name_7 );
    tmp_args_element_name_8 = var_msg;

    CHECK_OBJECT( tmp_args_element_name_8 );
    frame_3015836a0b6402b78dd439182ba7e585->m_frame.f_lineno = 260;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
        tmp_unused = CALL_METHOD_WITH_ARGS4( tmp_called_instance_2, const_str_plain___init__, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 260;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = par_reference;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_reference, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = PyTuple_New( 4 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_2, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_2, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_rawval;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_2, 2, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_reference;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_2, 3, tmp_tuple_element_1 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_args, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 262;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3015836a0b6402b78dd439182ba7e585 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3015836a0b6402b78dd439182ba7e585 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3015836a0b6402b78dd439182ba7e585, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3015836a0b6402b78dd439182ba7e585->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3015836a0b6402b78dd439182ba7e585, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3015836a0b6402b78dd439182ba7e585,
        type_description_1,
        par_self,
        par_option,
        par_section,
        par_rawval,
        par_reference,
        var_msg
    );


    // Release cached frame.
    if ( frame_3015836a0b6402b78dd439182ba7e585 == cache_frame_3015836a0b6402b78dd439182ba7e585 )
    {
        Py_DECREF( frame_3015836a0b6402b78dd439182ba7e585 );
    }
    cache_frame_3015836a0b6402b78dd439182ba7e585 = NULL;

    assertFrameObject( frame_3015836a0b6402b78dd439182ba7e585 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_8___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_rawval );
    Py_DECREF( par_rawval );
    par_rawval = NULL;

    CHECK_OBJECT( (PyObject *)par_reference );
    Py_DECREF( par_reference );
    par_reference = NULL;

    CHECK_OBJECT( (PyObject *)var_msg );
    Py_DECREF( var_msg );
    var_msg = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_rawval );
    Py_DECREF( par_rawval );
    par_rawval = NULL;

    CHECK_OBJECT( (PyObject *)par_reference );
    Py_DECREF( par_reference );
    par_reference = NULL;

    Py_XDECREF( var_msg );
    var_msg = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_8___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_9___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_option = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_rawval = python_pars[ 3 ];
    PyObject *var_msg = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_e4f10a5bc7af73a97b01812bc8f651b3 = NULL;

    struct Nuitka_FrameObject *frame_e4f10a5bc7af73a97b01812bc8f651b3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e4f10a5bc7af73a97b01812bc8f651b3, codeobj_e4f10a5bc7af73a97b01812bc8f651b3, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e4f10a5bc7af73a97b01812bc8f651b3 = cache_frame_e4f10a5bc7af73a97b01812bc8f651b3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e4f10a5bc7af73a97b01812bc8f651b3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e4f10a5bc7af73a97b01812bc8f651b3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = const_unicode_digest_6101524743862210e4b5ed676eb377c1;
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_format );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = par_option;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_section;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MAX_INTERPOLATION_DEPTH );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MAX_INTERPOLATION_DEPTH );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MAX_INTERPOLATION_DEPTH" );
        exception_tb = NULL;

        exception_lineno = 280;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_rawval;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_e4f10a5bc7af73a97b01812bc8f651b3->m_frame.f_lineno = 277;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 277;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_msg == NULL );
    var_msg = tmp_assign_source_1;

    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationError );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationError );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationError" );
        exception_tb = NULL;

        exception_lineno = 282;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_self;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = par_option;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_args_element_name_7 = par_section;

    CHECK_OBJECT( tmp_args_element_name_7 );
    tmp_args_element_name_8 = var_msg;

    CHECK_OBJECT( tmp_args_element_name_8 );
    frame_e4f10a5bc7af73a97b01812bc8f651b3->m_frame.f_lineno = 282;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
        tmp_unused = CALL_METHOD_WITH_ARGS4( tmp_called_instance_1, const_str_plain___init__, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 282;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_rawval;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_1, 2, tmp_tuple_element_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_args, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 283;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e4f10a5bc7af73a97b01812bc8f651b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e4f10a5bc7af73a97b01812bc8f651b3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e4f10a5bc7af73a97b01812bc8f651b3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e4f10a5bc7af73a97b01812bc8f651b3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e4f10a5bc7af73a97b01812bc8f651b3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e4f10a5bc7af73a97b01812bc8f651b3,
        type_description_1,
        par_self,
        par_option,
        par_section,
        par_rawval,
        var_msg
    );


    // Release cached frame.
    if ( frame_e4f10a5bc7af73a97b01812bc8f651b3 == cache_frame_e4f10a5bc7af73a97b01812bc8f651b3 )
    {
        Py_DECREF( frame_e4f10a5bc7af73a97b01812bc8f651b3 );
    }
    cache_frame_e4f10a5bc7af73a97b01812bc8f651b3 = NULL;

    assertFrameObject( frame_e4f10a5bc7af73a97b01812bc8f651b3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_9___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_rawval );
    Py_DECREF( par_rawval );
    par_rawval = NULL;

    CHECK_OBJECT( (PyObject *)var_msg );
    Py_DECREF( var_msg );
    var_msg = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_rawval );
    Py_DECREF( par_rawval );
    par_rawval = NULL;

    Py_XDECREF( var_msg );
    var_msg = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_9___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_10___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_source = python_pars[ 1 ];
    PyObject *par_filename = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_d7c59a1e0605ca9b4014603d0f36cf10 = NULL;

    struct Nuitka_FrameObject *frame_d7c59a1e0605ca9b4014603d0f36cf10;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d7c59a1e0605ca9b4014603d0f36cf10, codeobj_d7c59a1e0605ca9b4014603d0f36cf10, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d7c59a1e0605ca9b4014603d0f36cf10 = cache_frame_d7c59a1e0605ca9b4014603d0f36cf10;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d7c59a1e0605ca9b4014603d0f36cf10 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d7c59a1e0605ca9b4014603d0f36cf10 ) == 2 ); // Frame stack

    // Framed code:
    tmp_and_left_value_1 = par_filename;

    CHECK_OBJECT( tmp_and_left_value_1 );
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_and_right_value_1 = par_source;

    CHECK_OBJECT( tmp_and_right_value_1 );
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_unicode_digest_32a7c14e1962cf51e13e07dfdd18607b;
    frame_d7c59a1e0605ca9b4014603d0f36cf10->m_frame.f_lineno = 293;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 293;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_operand_name_1 = par_filename;

    CHECK_OBJECT( tmp_operand_name_1 );
    tmp_and_left_value_2 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_operand_name_2 = par_source;

    CHECK_OBJECT( tmp_operand_name_2 );
    tmp_and_right_value_2 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_2 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 295;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_make_exception_arg_2 = const_unicode_digest_bb8336bd8643cdb9a361f59cbfe67d53;
    frame_d7c59a1e0605ca9b4014603d0f36cf10->m_frame.f_lineno = 296;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_2 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    assert( tmp_raise_type_2 != NULL );
    exception_type = tmp_raise_type_2;
    exception_lineno = 296;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_cond_value_3 = par_filename;

    CHECK_OBJECT( tmp_cond_value_3 );
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 297;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_1 = par_filename;

    CHECK_OBJECT( tmp_assign_source_1 );
    {
        PyObject *old = par_source;
        assert( old != NULL );
        par_source = tmp_assign_source_1;
        Py_INCREF( par_source );
        Py_DECREF( old );
    }

    branch_no_3:;
    branch_end_2:;
    branch_end_1:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 299;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_left_name_1 = const_unicode_digest_44790ccfcf06fce5c5bf48fb0ed505cc;
    tmp_right_name_1 = par_source;

    if ( tmp_right_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "source" );
        exception_tb = NULL;

        exception_lineno = 299;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 299;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_d7c59a1e0605ca9b4014603d0f36cf10->m_frame.f_lineno = 299;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = par_source;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "source" );
        exception_tb = NULL;

        exception_lineno = 300;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_source, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 300;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = PyList_New( 0 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_errors, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 301;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    tmp_assattr_name_3 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_source;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_assattr_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "source" );
        exception_tb = NULL;

        exception_lineno = 302;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assattr_name_3, 0, tmp_tuple_element_1 );
    tmp_assattr_target_3 = par_self;

    CHECK_OBJECT( tmp_assattr_target_3 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_args, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_3 );

        exception_lineno = 302;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_3 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7c59a1e0605ca9b4014603d0f36cf10 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7c59a1e0605ca9b4014603d0f36cf10 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d7c59a1e0605ca9b4014603d0f36cf10, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d7c59a1e0605ca9b4014603d0f36cf10->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d7c59a1e0605ca9b4014603d0f36cf10, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d7c59a1e0605ca9b4014603d0f36cf10,
        type_description_1,
        par_self,
        par_source,
        par_filename
    );


    // Release cached frame.
    if ( frame_d7c59a1e0605ca9b4014603d0f36cf10 == cache_frame_d7c59a1e0605ca9b4014603d0f36cf10 )
    {
        Py_DECREF( frame_d7c59a1e0605ca9b4014603d0f36cf10 );
    }
    cache_frame_d7c59a1e0605ca9b4014603d0f36cf10 = NULL;

    assertFrameObject( frame_d7c59a1e0605ca9b4014603d0f36cf10 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_10___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_source );
    par_source = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_source );
    par_source = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_10___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_11_filename( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_503092ca0c346f01e6adeeb3bd535d10 = NULL;

    struct Nuitka_FrameObject *frame_503092ca0c346f01e6adeeb3bd535d10;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_503092ca0c346f01e6adeeb3bd535d10, codeobj_503092ca0c346f01e6adeeb3bd535d10, module_backports$configparser, sizeof(void *) );
    frame_503092ca0c346f01e6adeeb3bd535d10 = cache_frame_503092ca0c346f01e6adeeb3bd535d10;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_503092ca0c346f01e6adeeb3bd535d10 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_503092ca0c346f01e6adeeb3bd535d10 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "warnings" );
        exception_tb = NULL;

        exception_lineno = 307;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 307;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = const_unicode_digest_e8721ca8abec0cfcd8995ac84d65f9bb;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DeprecationWarning" );
        exception_tb = NULL;

        exception_lineno = 310;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = PyDict_Copy( const_dict_f154c9a58c9419d7e391901d7b7fe49e );
    frame_503092ca0c346f01e6adeeb3bd535d10->m_frame.f_lineno = 307;
    tmp_unused = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 307;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_source );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 312;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_503092ca0c346f01e6adeeb3bd535d10 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_503092ca0c346f01e6adeeb3bd535d10 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_503092ca0c346f01e6adeeb3bd535d10 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_503092ca0c346f01e6adeeb3bd535d10, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_503092ca0c346f01e6adeeb3bd535d10->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_503092ca0c346f01e6adeeb3bd535d10, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_503092ca0c346f01e6adeeb3bd535d10,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_503092ca0c346f01e6adeeb3bd535d10 == cache_frame_503092ca0c346f01e6adeeb3bd535d10 )
    {
        Py_DECREF( frame_503092ca0c346f01e6adeeb3bd535d10 );
    }
    cache_frame_503092ca0c346f01e6adeeb3bd535d10 = NULL;

    assertFrameObject( frame_503092ca0c346f01e6adeeb3bd535d10 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_11_filename );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_11_filename );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_12_filename( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_kw_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_e2c98e119976a26715ef97014c3668ae = NULL;

    struct Nuitka_FrameObject *frame_e2c98e119976a26715ef97014c3668ae;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e2c98e119976a26715ef97014c3668ae, codeobj_e2c98e119976a26715ef97014c3668ae, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_e2c98e119976a26715ef97014c3668ae = cache_frame_e2c98e119976a26715ef97014c3668ae;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e2c98e119976a26715ef97014c3668ae );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e2c98e119976a26715ef97014c3668ae ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "warnings" );
        exception_tb = NULL;

        exception_lineno = 317;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 317;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = const_unicode_digest_e8721ca8abec0cfcd8995ac84d65f9bb;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DeprecationWarning" );
        exception_tb = NULL;

        exception_lineno = 320;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = PyDict_Copy( const_dict_f154c9a58c9419d7e391901d7b7fe49e );
    frame_e2c98e119976a26715ef97014c3668ae->m_frame.f_lineno = 317;
    tmp_unused = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 317;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = par_value;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_source, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 322;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e2c98e119976a26715ef97014c3668ae );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e2c98e119976a26715ef97014c3668ae );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e2c98e119976a26715ef97014c3668ae, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e2c98e119976a26715ef97014c3668ae->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e2c98e119976a26715ef97014c3668ae, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e2c98e119976a26715ef97014c3668ae,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_e2c98e119976a26715ef97014c3668ae == cache_frame_e2c98e119976a26715ef97014c3668ae )
    {
        Py_DECREF( frame_e2c98e119976a26715ef97014c3668ae );
    }
    cache_frame_e2c98e119976a26715ef97014c3668ae = NULL;

    assertFrameObject( frame_e2c98e119976a26715ef97014c3668ae );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_12_filename );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_12_filename );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_13_append( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_lineno = python_pars[ 1 ];
    PyObject *par_line = python_pars[ 2 ];
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    bool tmp_isnot_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_80653693d1f70a7a77e31361385ed7aa = NULL;

    struct Nuitka_FrameObject *frame_80653693d1f70a7a77e31361385ed7aa;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_80653693d1f70a7a77e31361385ed7aa, codeobj_80653693d1f70a7a77e31361385ed7aa, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_80653693d1f70a7a77e31361385ed7aa = cache_frame_80653693d1f70a7a77e31361385ed7aa;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_80653693d1f70a7a77e31361385ed7aa );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_80653693d1f70a7a77e31361385ed7aa ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_errors );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 325;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_lineno;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_line;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_1, 1, tmp_tuple_element_1 );
    frame_80653693d1f70a7a77e31361385ed7aa->m_frame.f_lineno = 325;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_append, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 325;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_message );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 326;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_inplace_assign_attr_1__start == NULL );
    tmp_inplace_assign_attr_1__start = tmp_assign_source_1;

    // Tried code:
    tmp_left_name_1 = tmp_inplace_assign_attr_1__start;

    CHECK_OBJECT( tmp_left_name_1 );
    tmp_left_name_2 = const_unicode_digest_11beb09e0de26f74826a05c6f1fc1992;
    tmp_right_name_2 = PyTuple_New( 2 );
    tmp_tuple_element_2 = par_lineno;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_line;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_2 );
    tmp_right_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 326;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_2 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 326;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    assert( tmp_inplace_assign_attr_1__end == NULL );
    tmp_inplace_assign_attr_1__end = tmp_assign_source_2;

    // Tried code:
    tmp_compare_left_1 = tmp_inplace_assign_attr_1__start;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = tmp_inplace_assign_attr_1__end;

    CHECK_OBJECT( tmp_compare_right_1 );
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assattr_name_1 = tmp_inplace_assign_attr_1__end;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_message, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 326;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }
    branch_no_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_80653693d1f70a7a77e31361385ed7aa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_80653693d1f70a7a77e31361385ed7aa );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_80653693d1f70a7a77e31361385ed7aa, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_80653693d1f70a7a77e31361385ed7aa->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_80653693d1f70a7a77e31361385ed7aa, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_80653693d1f70a7a77e31361385ed7aa,
        type_description_1,
        par_self,
        par_lineno,
        par_line
    );


    // Release cached frame.
    if ( frame_80653693d1f70a7a77e31361385ed7aa == cache_frame_80653693d1f70a7a77e31361385ed7aa )
    {
        Py_DECREF( frame_80653693d1f70a7a77e31361385ed7aa );
    }
    cache_frame_80653693d1f70a7a77e31361385ed7aa = NULL;

    assertFrameObject( frame_80653693d1f70a7a77e31361385ed7aa );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_13_append );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    CHECK_OBJECT( (PyObject *)par_line );
    Py_DECREF( par_line );
    par_line = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    CHECK_OBJECT( (PyObject *)par_line );
    Py_DECREF( par_line );
    par_line = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_13_append );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_14___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_filename = python_pars[ 1 ];
    PyObject *par_lineno = python_pars[ 2 ];
    PyObject *par_line = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_left_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_ae840599afa6dc32ea4c9ee4e8dd87e2 = NULL;

    struct Nuitka_FrameObject *frame_ae840599afa6dc32ea4c9ee4e8dd87e2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ae840599afa6dc32ea4c9ee4e8dd87e2, codeobj_ae840599afa6dc32ea4c9ee4e8dd87e2, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ae840599afa6dc32ea4c9ee4e8dd87e2 = cache_frame_ae840599afa6dc32ea4c9ee4e8dd87e2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ae840599afa6dc32ea4c9ee4e8dd87e2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ae840599afa6dc32ea4c9ee4e8dd87e2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 333;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 333;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_left_name_1 = const_unicode_digest_8ffdfa928271f03fe607bd119d1d0811;
    tmp_right_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_filename;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_lineno;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_line;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 2, tmp_tuple_element_1 );
    tmp_args_element_name_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 335;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_ae840599afa6dc32ea4c9ee4e8dd87e2->m_frame.f_lineno = 333;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 333;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assattr_name_1 = par_filename;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_source, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 337;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = par_lineno;

    CHECK_OBJECT( tmp_assattr_name_2 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_lineno, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 338;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_3 = par_line;

    CHECK_OBJECT( tmp_assattr_name_3 );
    tmp_assattr_target_3 = par_self;

    CHECK_OBJECT( tmp_assattr_target_3 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_line, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 339;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_4 = PyTuple_New( 3 );
    tmp_tuple_element_2 = par_filename;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assattr_name_4, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_lineno;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assattr_name_4, 1, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_line;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assattr_name_4, 2, tmp_tuple_element_2 );
    tmp_assattr_target_4 = par_self;

    CHECK_OBJECT( tmp_assattr_target_4 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_args, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_4 );

        exception_lineno = 340;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_4 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ae840599afa6dc32ea4c9ee4e8dd87e2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ae840599afa6dc32ea4c9ee4e8dd87e2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ae840599afa6dc32ea4c9ee4e8dd87e2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ae840599afa6dc32ea4c9ee4e8dd87e2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ae840599afa6dc32ea4c9ee4e8dd87e2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ae840599afa6dc32ea4c9ee4e8dd87e2,
        type_description_1,
        par_self,
        par_filename,
        par_lineno,
        par_line
    );


    // Release cached frame.
    if ( frame_ae840599afa6dc32ea4c9ee4e8dd87e2 == cache_frame_ae840599afa6dc32ea4c9ee4e8dd87e2 )
    {
        Py_DECREF( frame_ae840599afa6dc32ea4c9ee4e8dd87e2 );
    }
    cache_frame_ae840599afa6dc32ea4c9ee4e8dd87e2 = NULL;

    assertFrameObject( frame_ae840599afa6dc32ea4c9ee4e8dd87e2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_14___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    CHECK_OBJECT( (PyObject *)par_line );
    Py_DECREF( par_line );
    par_line = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    CHECK_OBJECT( (PyObject *)par_line );
    Py_DECREF( par_line );
    par_line = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_14___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_15_before_get( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *par_defaults = python_pars[ 5 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_value;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_15_before_get );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_defaults );
    Py_DECREF( par_defaults );
    par_defaults = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_15_before_get );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_16_before_set( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_value;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_16_before_set );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_16_before_set );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_17_before_read( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_value;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_17_before_read );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_17_before_read );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_18_before_write( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_value;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_18_before_write );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_18_before_write );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_19_before_get( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *par_defaults = python_pars[ 5 ];
    PyObject *var_L = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_return_value;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_51cc3dc844562a78290fe7eda25da1c2 = NULL;

    struct Nuitka_FrameObject *frame_51cc3dc844562a78290fe7eda25da1c2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = PyList_New( 0 );
    assert( var_L == NULL );
    var_L = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_51cc3dc844562a78290fe7eda25da1c2, codeobj_51cc3dc844562a78290fe7eda25da1c2, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_51cc3dc844562a78290fe7eda25da1c2 = cache_frame_51cc3dc844562a78290fe7eda25da1c2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_51cc3dc844562a78290fe7eda25da1c2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_51cc3dc844562a78290fe7eda25da1c2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_parser;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_option;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = var_L;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_value;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_args_element_name_5 = par_section;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = par_defaults;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_args_element_name_7 = const_int_pos_1;
    frame_51cc3dc844562a78290fe7eda25da1c2->m_frame.f_lineno = 384;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_unused = CALL_METHOD_WITH_ARGS7( tmp_called_instance_1, const_str_plain__interpolate_some, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 384;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_2 = const_unicode_empty;
    tmp_args_element_name_8 = var_L;

    CHECK_OBJECT( tmp_args_element_name_8 );
    frame_51cc3dc844562a78290fe7eda25da1c2->m_frame.f_lineno = 385;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_join, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 385;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_51cc3dc844562a78290fe7eda25da1c2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_51cc3dc844562a78290fe7eda25da1c2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_51cc3dc844562a78290fe7eda25da1c2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_51cc3dc844562a78290fe7eda25da1c2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_51cc3dc844562a78290fe7eda25da1c2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_51cc3dc844562a78290fe7eda25da1c2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_51cc3dc844562a78290fe7eda25da1c2,
        type_description_1,
        par_self,
        par_parser,
        par_section,
        par_option,
        par_value,
        par_defaults,
        var_L
    );


    // Release cached frame.
    if ( frame_51cc3dc844562a78290fe7eda25da1c2 == cache_frame_51cc3dc844562a78290fe7eda25da1c2 )
    {
        Py_DECREF( frame_51cc3dc844562a78290fe7eda25da1c2 );
    }
    cache_frame_51cc3dc844562a78290fe7eda25da1c2 = NULL;

    assertFrameObject( frame_51cc3dc844562a78290fe7eda25da1c2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_19_before_get );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_defaults );
    Py_DECREF( par_defaults );
    par_defaults = NULL;

    CHECK_OBJECT( (PyObject *)var_L );
    Py_DECREF( var_L );
    var_L = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_defaults );
    Py_DECREF( par_defaults );
    par_defaults = NULL;

    CHECK_OBJECT( (PyObject *)var_L );
    Py_DECREF( var_L );
    var_L = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_19_before_get );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_20_before_set( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *var_tmp_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_ba94be6d76e470aaad260bd3038c6148 = NULL;

    struct Nuitka_FrameObject *frame_ba94be6d76e470aaad260bd3038c6148;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ba94be6d76e470aaad260bd3038c6148, codeobj_ba94be6d76e470aaad260bd3038c6148, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ba94be6d76e470aaad260bd3038c6148 = cache_frame_ba94be6d76e470aaad260bd3038c6148;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ba94be6d76e470aaad260bd3038c6148 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ba94be6d76e470aaad260bd3038c6148 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_value;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_ba94be6d76e470aaad260bd3038c6148->m_frame.f_lineno = 388;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e9553513417345251cfa61446d055d17_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_tmp_value == NULL );
    var_tmp_value = tmp_assign_source_1;

    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__KEYCRE );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 389;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_unicode_empty;
    tmp_args_element_name_2 = var_tmp_value;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_ba94be6d76e470aaad260bd3038c6148->m_frame.f_lineno = 389;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_sub, call_args );
    }

    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 389;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_tmp_value;
        assert( old != NULL );
        var_tmp_value = tmp_assign_source_2;
        Py_DECREF( old );
    }

    tmp_compare_left_1 = const_unicode_chr_37;
    tmp_compare_right_1 = var_tmp_value;

    CHECK_OBJECT( tmp_compare_right_1 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_left_name_1 = const_unicode_digest_4c9346a6b662bc8be66cfaa20ecc4958;
    tmp_right_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_value;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    tmp_called_instance_3 = var_tmp_value;

    CHECK_OBJECT( tmp_called_instance_3 );
    frame_ba94be6d76e470aaad260bd3038c6148->m_frame.f_lineno = 392;
    tmp_tuple_element_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_find, &PyTuple_GET_ITEM( const_tuple_unicode_chr_37_tuple, 0 ) );

    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 392;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 391;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_ba94be6d76e470aaad260bd3038c6148->m_frame.f_lineno = 391;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 391;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooo";
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ba94be6d76e470aaad260bd3038c6148 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ba94be6d76e470aaad260bd3038c6148 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ba94be6d76e470aaad260bd3038c6148, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ba94be6d76e470aaad260bd3038c6148->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ba94be6d76e470aaad260bd3038c6148, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ba94be6d76e470aaad260bd3038c6148,
        type_description_1,
        par_self,
        par_parser,
        par_section,
        par_option,
        par_value,
        var_tmp_value
    );


    // Release cached frame.
    if ( frame_ba94be6d76e470aaad260bd3038c6148 == cache_frame_ba94be6d76e470aaad260bd3038c6148 )
    {
        Py_DECREF( frame_ba94be6d76e470aaad260bd3038c6148 );
    }
    cache_frame_ba94be6d76e470aaad260bd3038c6148 = NULL;

    assertFrameObject( frame_ba94be6d76e470aaad260bd3038c6148 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_value;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_20_before_set );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_tmp_value );
    Py_DECREF( var_tmp_value );
    var_tmp_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_tmp_value );
    var_tmp_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_20_before_set );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_21__interpolate_some( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_accum = python_pars[ 3 ];
    PyObject *par_rest = python_pars[ 4 ];
    PyObject *par_section = python_pars[ 5 ];
    PyObject *par_map = python_pars[ 6 ];
    PyObject *par_depth = python_pars[ 7 ];
    PyObject *var_rawval = NULL;
    PyObject *var_p = NULL;
    PyObject *var_c = NULL;
    PyObject *var_m = NULL;
    PyObject *var_var = NULL;
    PyObject *var_v = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Gt_1;
    int tmp_cmp_Gt_2;
    int tmp_cmp_In_1;
    int tmp_cmp_Lt_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    int tmp_exc_match_exception_match_1;
    bool tmp_is_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_upper_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_1cb4ee8f849e6ed15b3d3cccb81790b3 = NULL;

    struct Nuitka_FrameObject *frame_1cb4ee8f849e6ed15b3d3cccb81790b3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1cb4ee8f849e6ed15b3d3cccb81790b3, codeobj_1cb4ee8f849e6ed15b3d3cccb81790b3, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3 = cache_frame_1cb4ee8f849e6ed15b3d3cccb81790b3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1cb4ee8f849e6ed15b3d3cccb81790b3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1cb4ee8f849e6ed15b3d3cccb81790b3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_parser;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 397;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_value_1 = Py_True;
    tmp_dict_key_1 = const_str_plain_raw;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = par_rest;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain_fallback;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 397;
    tmp_assign_source_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 397;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_rawval == NULL );
    var_rawval = tmp_assign_source_1;

    tmp_compare_left_1 = par_depth;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MAX_INTERPOLATION_DEPTH );

    if (unlikely( tmp_compare_right_1 == NULL ))
    {
        tmp_compare_right_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MAX_INTERPOLATION_DEPTH );
    }

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MAX_INTERPOLATION_DEPTH" );
        exception_tb = NULL;

        exception_lineno = 398;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 398;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Gt_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationDepthError );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationDepthError );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationDepthError" );
        exception_tb = NULL;

        exception_lineno = 399;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_option;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_section;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = var_rawval;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 399;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 399;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 399;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    loop_start_1:;
    tmp_cond_value_1 = par_rest;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 400;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 400;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    goto loop_end_1;
    branch_no_2:;
    tmp_called_instance_1 = par_rest;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 401;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 401;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_find, &PyTuple_GET_ITEM( const_tuple_unicode_chr_37_tuple, 0 ) );

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 401;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_p;
        var_p = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_compare_left_2 = var_p;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = const_int_0;
    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 402;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Lt_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_2 = par_accum;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_append );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 403;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_rest;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 403;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 403;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 403;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_3:;
    tmp_compare_left_3 = var_p;

    CHECK_OBJECT( tmp_compare_left_3 );
    tmp_compare_right_3 = const_int_0;
    tmp_cmp_Gt_2 = RICH_COMPARE_BOOL_GT( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Gt_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 405;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Gt_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_3 = par_accum;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_append );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 406;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_slice_source_1 = par_rest;

    if ( tmp_slice_source_1 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 406;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_slice_upper_1 = var_p;

    CHECK_OBJECT( tmp_slice_upper_1 );
    tmp_args_element_name_5 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 406;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 406;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 406;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_slice_source_2 = par_rest;

    if ( tmp_slice_source_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 407;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_slice_lower_1 = var_p;

    CHECK_OBJECT( tmp_slice_lower_1 );
    tmp_assign_source_3 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_1, Py_None );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 407;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_rest;
        par_rest = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    branch_no_4:;
    tmp_sliceslicedel_index_lower_1 = 1;
    tmp_slice_index_upper_1 = 2;
    tmp_slice_source_3 = par_rest;

    if ( tmp_slice_source_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 409;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assign_source_4 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 409;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_c;
        var_c = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_compare_left_4 = var_c;

    CHECK_OBJECT( tmp_compare_left_4 );
    tmp_compare_right_4 = const_unicode_chr_37;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 410;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_instance_2 = par_accum;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 411;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_unicode_chr_37_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 411;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_2 = 2;
    tmp_slice_index_upper_2 = PY_SSIZE_T_MAX;
    tmp_slice_source_4 = par_rest;

    if ( tmp_slice_source_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 412;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assign_source_5 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 412;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_rest;
        par_rest = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    goto branch_end_5;
    branch_no_5:;
    tmp_compare_left_5 = var_c;

    CHECK_OBJECT( tmp_compare_left_5 );
    tmp_compare_right_5 = const_unicode_chr_40;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 413;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__KEYCRE );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 414;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_match );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 414;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = par_rest;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 414;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 414;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 414;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_m;
        var_m = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_compare_left_6 = var_m;

    CHECK_OBJECT( tmp_compare_left_6 );
    tmp_compare_right_6 = Py_None;
    tmp_is_1 = ( tmp_compare_left_6 == tmp_compare_right_6 );
    if ( tmp_is_1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );
    }

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationSyntaxError" );
        exception_tb = NULL;

        exception_lineno = 416;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_option;

    CHECK_OBJECT( tmp_args_element_name_7 );
    tmp_args_element_name_8 = par_section;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_left_name_1 = const_unicode_digest_d5ff81d4d6c28083d6160214ce8f4bf9;
    tmp_right_name_1 = par_rest;

    if ( tmp_right_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 417;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_9 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 417;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 416;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 416;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 416;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooo";
    goto frame_exception_exit_1;
    branch_no_7:;
    tmp_source_name_6 = par_parser;

    CHECK_OBJECT( tmp_source_name_6 );
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_optionxform );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 418;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_3 = var_m;

    CHECK_OBJECT( tmp_called_instance_3 );
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 418;
    tmp_args_element_name_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_group, &PyTuple_GET_ITEM( const_tuple_int_pos_1_tuple, 0 ) );

    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 418;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 418;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 418;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_var;
        var_var = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_slice_source_5 = par_rest;

    if ( tmp_slice_source_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 419;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_instance_4 = var_m;

    CHECK_OBJECT( tmp_called_instance_4 );
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 419;
    tmp_slice_lower_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_end );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 419;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = LOOKUP_SLICE( tmp_slice_source_5, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 419;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_rest;
        par_rest = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_subscribed_name_1 = par_map;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = var_var;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_assign_source_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 421;
        type_description_1 = "oooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_v;
        var_v = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_1cb4ee8f849e6ed15b3d3cccb81790b3 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_1cb4ee8f849e6ed15b3d3cccb81790b3, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_1cb4ee8f849e6ed15b3d3cccb81790b3, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_7 = PyThreadState_GET()->exc_type;
    tmp_compare_right_7 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 422;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_from_none );

    if (unlikely( tmp_called_name_8 == NULL ))
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_from_none );
    }

    if ( tmp_called_name_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "from_none" );
        exception_tb = NULL;

        exception_lineno = 423;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_9 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationMissingOptionError );

    if (unlikely( tmp_called_name_9 == NULL ))
    {
        tmp_called_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationMissingOptionError );
    }

    if ( tmp_called_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationMissingOptionError" );
        exception_tb = NULL;

        exception_lineno = 423;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_12 = par_option;

    CHECK_OBJECT( tmp_args_element_name_12 );
    tmp_args_element_name_13 = par_section;

    CHECK_OBJECT( tmp_args_element_name_13 );
    tmp_args_element_name_14 = var_rawval;

    CHECK_OBJECT( tmp_args_element_name_14 );
    tmp_args_element_name_15 = var_var;

    CHECK_OBJECT( tmp_args_element_name_15 );
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 423;
    {
        PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_9, call_args );
    }

    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 423;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 423;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 423;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_3;
    exception_lineno = 423;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooo";
    goto frame_exception_exit_1;
    goto branch_end_8;
    branch_no_8:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 420;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame) frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooo";
    goto frame_exception_exit_1;
    branch_end_8:;
    // End of try:
    try_end_1:;
    tmp_compare_left_8 = const_unicode_chr_37;
    tmp_compare_right_8 = var_v;

    CHECK_OBJECT( tmp_compare_right_8 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_source_name_7 = par_self;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__interpolate_some );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 426;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_16 = par_parser;

    CHECK_OBJECT( tmp_args_element_name_16 );
    tmp_args_element_name_17 = par_option;

    CHECK_OBJECT( tmp_args_element_name_17 );
    tmp_args_element_name_18 = par_accum;

    CHECK_OBJECT( tmp_args_element_name_18 );
    tmp_args_element_name_19 = var_v;

    CHECK_OBJECT( tmp_args_element_name_19 );
    tmp_args_element_name_20 = par_section;

    CHECK_OBJECT( tmp_args_element_name_20 );
    tmp_args_element_name_21 = par_map;

    CHECK_OBJECT( tmp_args_element_name_21 );
    tmp_left_name_2 = par_depth;

    CHECK_OBJECT( tmp_left_name_2 );
    tmp_right_name_2 = const_int_pos_1;
    tmp_args_element_name_22 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_args_element_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 427;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 426;
    {
        PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18, tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21, tmp_args_element_name_22 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS7( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_22 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 426;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_9;
    branch_no_9:;
    tmp_called_instance_5 = par_accum;

    CHECK_OBJECT( tmp_called_instance_5 );
    tmp_args_element_name_23 = var_v;

    CHECK_OBJECT( tmp_args_element_name_23 );
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 429;
    {
        PyObject *call_args[] = { tmp_args_element_name_23 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_append, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 429;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_9:;
    goto branch_end_6;
    branch_no_6:;
    tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );

    if (unlikely( tmp_called_name_11 == NULL ))
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );
    }

    if ( tmp_called_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationSyntaxError" );
        exception_tb = NULL;

        exception_lineno = 431;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_24 = par_option;

    CHECK_OBJECT( tmp_args_element_name_24 );
    tmp_args_element_name_25 = par_section;

    CHECK_OBJECT( tmp_args_element_name_25 );
    tmp_left_name_3 = const_unicode_digest_b7f7efa2c49b31ac4729f3ed5de7764e;
    tmp_right_name_3 = PyTuple_New( 1 );
    tmp_tuple_element_2 = par_rest;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_right_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 434;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_right_name_3, 0, tmp_tuple_element_2 );
    tmp_args_element_name_26 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_right_name_3 );
    if ( tmp_args_element_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 433;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame.f_lineno = 431;
    {
        PyObject *call_args[] = { tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26 };
        tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_args_element_name_26 );
    if ( tmp_raise_type_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 431;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_4;
    exception_lineno = 431;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooo";
    goto frame_exception_exit_1;
    branch_end_6:;
    branch_end_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 400;
        type_description_1 = "oooooooooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_1cb4ee8f849e6ed15b3d3cccb81790b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_1cb4ee8f849e6ed15b3d3cccb81790b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_1cb4ee8f849e6ed15b3d3cccb81790b3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1cb4ee8f849e6ed15b3d3cccb81790b3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1cb4ee8f849e6ed15b3d3cccb81790b3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1cb4ee8f849e6ed15b3d3cccb81790b3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1cb4ee8f849e6ed15b3d3cccb81790b3,
        type_description_1,
        par_self,
        par_parser,
        par_option,
        par_accum,
        par_rest,
        par_section,
        par_map,
        par_depth,
        var_rawval,
        var_p,
        var_c,
        var_m,
        var_var,
        var_v
    );


    // Release cached frame.
    if ( frame_1cb4ee8f849e6ed15b3d3cccb81790b3 == cache_frame_1cb4ee8f849e6ed15b3d3cccb81790b3 )
    {
        Py_DECREF( frame_1cb4ee8f849e6ed15b3d3cccb81790b3 );
    }
    cache_frame_1cb4ee8f849e6ed15b3d3cccb81790b3 = NULL;

    assertFrameObject( frame_1cb4ee8f849e6ed15b3d3cccb81790b3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_21__interpolate_some );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_accum );
    Py_DECREF( par_accum );
    par_accum = NULL;

    Py_XDECREF( par_rest );
    par_rest = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_map );
    Py_DECREF( par_map );
    par_map = NULL;

    CHECK_OBJECT( (PyObject *)par_depth );
    Py_DECREF( par_depth );
    par_depth = NULL;

    CHECK_OBJECT( (PyObject *)var_rawval );
    Py_DECREF( var_rawval );
    var_rawval = NULL;

    Py_XDECREF( var_p );
    var_p = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_var );
    var_var = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_accum );
    Py_DECREF( par_accum );
    par_accum = NULL;

    Py_XDECREF( par_rest );
    par_rest = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_map );
    Py_DECREF( par_map );
    par_map = NULL;

    CHECK_OBJECT( (PyObject *)par_depth );
    Py_DECREF( par_depth );
    par_depth = NULL;

    Py_XDECREF( var_rawval );
    var_rawval = NULL;

    Py_XDECREF( var_p );
    var_p = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_var );
    var_var = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_21__interpolate_some );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_22_before_get( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *par_defaults = python_pars[ 5 ];
    PyObject *var_L = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_return_value;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_7cfa546ecb06a850c3e5d3844990f666 = NULL;

    struct Nuitka_FrameObject *frame_7cfa546ecb06a850c3e5d3844990f666;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = PyList_New( 0 );
    assert( var_L == NULL );
    var_L = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7cfa546ecb06a850c3e5d3844990f666, codeobj_7cfa546ecb06a850c3e5d3844990f666, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_7cfa546ecb06a850c3e5d3844990f666 = cache_frame_7cfa546ecb06a850c3e5d3844990f666;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7cfa546ecb06a850c3e5d3844990f666 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7cfa546ecb06a850c3e5d3844990f666 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_parser;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_option;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = var_L;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_value;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_args_element_name_5 = par_section;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = par_defaults;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_args_element_name_7 = const_int_pos_1;
    frame_7cfa546ecb06a850c3e5d3844990f666->m_frame.f_lineno = 445;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_unused = CALL_METHOD_WITH_ARGS7( tmp_called_instance_1, const_str_plain__interpolate_some, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 445;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_2 = const_unicode_empty;
    tmp_args_element_name_8 = var_L;

    CHECK_OBJECT( tmp_args_element_name_8 );
    frame_7cfa546ecb06a850c3e5d3844990f666->m_frame.f_lineno = 446;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_join, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 446;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7cfa546ecb06a850c3e5d3844990f666 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7cfa546ecb06a850c3e5d3844990f666 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7cfa546ecb06a850c3e5d3844990f666 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7cfa546ecb06a850c3e5d3844990f666, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7cfa546ecb06a850c3e5d3844990f666->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7cfa546ecb06a850c3e5d3844990f666, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7cfa546ecb06a850c3e5d3844990f666,
        type_description_1,
        par_self,
        par_parser,
        par_section,
        par_option,
        par_value,
        par_defaults,
        var_L
    );


    // Release cached frame.
    if ( frame_7cfa546ecb06a850c3e5d3844990f666 == cache_frame_7cfa546ecb06a850c3e5d3844990f666 )
    {
        Py_DECREF( frame_7cfa546ecb06a850c3e5d3844990f666 );
    }
    cache_frame_7cfa546ecb06a850c3e5d3844990f666 = NULL;

    assertFrameObject( frame_7cfa546ecb06a850c3e5d3844990f666 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_22_before_get );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_defaults );
    Py_DECREF( par_defaults );
    par_defaults = NULL;

    CHECK_OBJECT( (PyObject *)var_L );
    Py_DECREF( var_L );
    var_L = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_defaults );
    Py_DECREF( par_defaults );
    par_defaults = NULL;

    CHECK_OBJECT( (PyObject *)var_L );
    Py_DECREF( var_L );
    var_L = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_22_before_get );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_23_before_set( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *var_tmp_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_6bdef8e962197536356cf8d3fd9c934f = NULL;

    struct Nuitka_FrameObject *frame_6bdef8e962197536356cf8d3fd9c934f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6bdef8e962197536356cf8d3fd9c934f, codeobj_6bdef8e962197536356cf8d3fd9c934f, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6bdef8e962197536356cf8d3fd9c934f = cache_frame_6bdef8e962197536356cf8d3fd9c934f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6bdef8e962197536356cf8d3fd9c934f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6bdef8e962197536356cf8d3fd9c934f ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_value;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_6bdef8e962197536356cf8d3fd9c934f->m_frame.f_lineno = 449;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_fa39a8b539bd1613ecffe553f3dde69b_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 449;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_tmp_value == NULL );
    var_tmp_value = tmp_assign_source_1;

    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__KEYCRE );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_unicode_empty;
    tmp_args_element_name_2 = var_tmp_value;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_6bdef8e962197536356cf8d3fd9c934f->m_frame.f_lineno = 450;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_sub, call_args );
    }

    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_tmp_value;
        assert( old != NULL );
        var_tmp_value = tmp_assign_source_2;
        Py_DECREF( old );
    }

    tmp_compare_left_1 = const_unicode_chr_36;
    tmp_compare_right_1 = var_tmp_value;

    CHECK_OBJECT( tmp_compare_right_1 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_left_name_1 = const_unicode_digest_4c9346a6b662bc8be66cfaa20ecc4958;
    tmp_right_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_value;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    tmp_called_instance_3 = var_tmp_value;

    CHECK_OBJECT( tmp_called_instance_3 );
    frame_6bdef8e962197536356cf8d3fd9c934f->m_frame.f_lineno = 453;
    tmp_tuple_element_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_find, &PyTuple_GET_ITEM( const_tuple_unicode_chr_36_tuple, 0 ) );

    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 453;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 452;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_6bdef8e962197536356cf8d3fd9c934f->m_frame.f_lineno = 452;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 452;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooo";
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6bdef8e962197536356cf8d3fd9c934f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6bdef8e962197536356cf8d3fd9c934f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6bdef8e962197536356cf8d3fd9c934f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6bdef8e962197536356cf8d3fd9c934f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6bdef8e962197536356cf8d3fd9c934f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6bdef8e962197536356cf8d3fd9c934f,
        type_description_1,
        par_self,
        par_parser,
        par_section,
        par_option,
        par_value,
        var_tmp_value
    );


    // Release cached frame.
    if ( frame_6bdef8e962197536356cf8d3fd9c934f == cache_frame_6bdef8e962197536356cf8d3fd9c934f )
    {
        Py_DECREF( frame_6bdef8e962197536356cf8d3fd9c934f );
    }
    cache_frame_6bdef8e962197536356cf8d3fd9c934f = NULL;

    assertFrameObject( frame_6bdef8e962197536356cf8d3fd9c934f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_value;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_23_before_set );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_tmp_value );
    Py_DECREF( var_tmp_value );
    var_tmp_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_tmp_value );
    var_tmp_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_23_before_set );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_24__interpolate_some( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_accum = python_pars[ 3 ];
    PyObject *par_rest = python_pars[ 4 ];
    PyObject *par_section = python_pars[ 5 ];
    PyObject *par_map = python_pars[ 6 ];
    PyObject *par_depth = python_pars[ 7 ];
    PyObject *var_rawval = NULL;
    PyObject *var_p = NULL;
    PyObject *var_c = NULL;
    PyObject *var_m = NULL;
    PyObject *var_path = NULL;
    PyObject *var_sect = NULL;
    PyObject *var_opt = NULL;
    PyObject *var_v = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_args_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Gt_1;
    int tmp_cmp_Gt_2;
    int tmp_cmp_In_1;
    int tmp_cmp_Lt_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_seq_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    int tmp_exc_match_exception_match_1;
    bool tmp_is_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    PyObject *tmp_raise_type_5;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_upper_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_a9d056abfb66efd51ab0ad66d53b7228 = NULL;

    struct Nuitka_FrameObject *frame_a9d056abfb66efd51ab0ad66d53b7228;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a9d056abfb66efd51ab0ad66d53b7228, codeobj_a9d056abfb66efd51ab0ad66d53b7228, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a9d056abfb66efd51ab0ad66d53b7228 = cache_frame_a9d056abfb66efd51ab0ad66d53b7228;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a9d056abfb66efd51ab0ad66d53b7228 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a9d056abfb66efd51ab0ad66d53b7228 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_parser;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 458;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_value_1 = Py_True;
    tmp_dict_key_1 = const_str_plain_raw;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = par_rest;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain_fallback;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 458;
    tmp_assign_source_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 458;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_rawval == NULL );
    var_rawval = tmp_assign_source_1;

    tmp_compare_left_1 = par_depth;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MAX_INTERPOLATION_DEPTH );

    if (unlikely( tmp_compare_right_1 == NULL ))
    {
        tmp_compare_right_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MAX_INTERPOLATION_DEPTH );
    }

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MAX_INTERPOLATION_DEPTH" );
        exception_tb = NULL;

        exception_lineno = 459;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Gt_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationDepthError );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationDepthError );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationDepthError" );
        exception_tb = NULL;

        exception_lineno = 460;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_option;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_section;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = var_rawval;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 460;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 460;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 460;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    loop_start_1:;
    tmp_cond_value_1 = par_rest;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 461;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 461;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    goto loop_end_1;
    branch_no_2:;
    tmp_called_instance_1 = par_rest;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 462;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 462;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_find, &PyTuple_GET_ITEM( const_tuple_unicode_chr_36_tuple, 0 ) );

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 462;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_p;
        var_p = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_compare_left_2 = var_p;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = const_int_0;
    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 463;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Lt_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_2 = par_accum;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_append );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 464;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_rest;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 464;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 464;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 464;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_3:;
    tmp_compare_left_3 = var_p;

    CHECK_OBJECT( tmp_compare_left_3 );
    tmp_compare_right_3 = const_int_0;
    tmp_cmp_Gt_2 = RICH_COMPARE_BOOL_GT( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Gt_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 466;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Gt_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_3 = par_accum;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_append );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 467;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_slice_source_1 = par_rest;

    if ( tmp_slice_source_1 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 467;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_slice_upper_1 = var_p;

    CHECK_OBJECT( tmp_slice_upper_1 );
    tmp_args_element_name_5 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 467;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 467;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 467;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_slice_source_2 = par_rest;

    if ( tmp_slice_source_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 468;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_slice_lower_1 = var_p;

    CHECK_OBJECT( tmp_slice_lower_1 );
    tmp_assign_source_3 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_1, Py_None );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_rest;
        par_rest = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    branch_no_4:;
    tmp_sliceslicedel_index_lower_1 = 1;
    tmp_slice_index_upper_1 = 2;
    tmp_slice_source_3 = par_rest;

    if ( tmp_slice_source_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 470;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assign_source_4 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 470;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_c;
        var_c = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_compare_left_4 = var_c;

    CHECK_OBJECT( tmp_compare_left_4 );
    tmp_compare_right_4 = const_unicode_chr_36;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 471;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_instance_2 = par_accum;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 472;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_unicode_chr_36_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 472;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_2 = 2;
    tmp_slice_index_upper_2 = PY_SSIZE_T_MAX;
    tmp_slice_source_4 = par_rest;

    if ( tmp_slice_source_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 473;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assign_source_5 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 473;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_rest;
        par_rest = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    goto branch_end_5;
    branch_no_5:;
    tmp_compare_left_5 = var_c;

    CHECK_OBJECT( tmp_compare_left_5 );
    tmp_compare_right_5 = const_unicode_chr_123;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 474;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__KEYCRE );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_match );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = par_rest;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 475;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 475;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_m;
        var_m = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_compare_left_6 = var_m;

    CHECK_OBJECT( tmp_compare_left_6 );
    tmp_compare_right_6 = Py_None;
    tmp_is_1 = ( tmp_compare_left_6 == tmp_compare_right_6 );
    if ( tmp_is_1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );
    }

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationSyntaxError" );
        exception_tb = NULL;

        exception_lineno = 477;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_option;

    CHECK_OBJECT( tmp_args_element_name_7 );
    tmp_args_element_name_8 = par_section;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_left_name_1 = const_unicode_digest_d5ff81d4d6c28083d6160214ce8f4bf9;
    tmp_right_name_1 = par_rest;

    if ( tmp_right_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 478;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_9 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 478;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 477;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 477;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooooo";
    goto frame_exception_exit_1;
    branch_no_7:;
    tmp_called_instance_4 = var_m;

    CHECK_OBJECT( tmp_called_instance_4 );
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 479;
    tmp_called_instance_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_group, &PyTuple_GET_ITEM( const_tuple_int_pos_1_tuple, 0 ) );

    if ( tmp_called_instance_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 479;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 479;
    tmp_assign_source_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_unicode_chr_58_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_3 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 479;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_path;
        var_path = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_slice_source_5 = par_rest;

    if ( tmp_slice_source_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 480;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_instance_5 = var_m;

    CHECK_OBJECT( tmp_called_instance_5 );
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 480;
    tmp_slice_lower_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_end );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = LOOKUP_SLICE( tmp_slice_source_5, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_rest;
        par_rest = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_assign_source_9 = par_section;

    CHECK_OBJECT( tmp_assign_source_9 );
    {
        PyObject *old = var_sect;
        var_sect = tmp_assign_source_9;
        Py_INCREF( var_sect );
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = par_option;

    CHECK_OBJECT( tmp_assign_source_10 );
    {
        PyObject *old = var_opt;
        var_opt = tmp_assign_source_10;
        Py_INCREF( var_opt );
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_len_arg_1 = var_path;

    CHECK_OBJECT( tmp_len_arg_1 );
    tmp_compare_left_7 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 484;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_compare_right_7 = const_int_pos_1;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_7 );

        exception_lineno = 484;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_7 );
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_source_name_6 = par_parser;

    CHECK_OBJECT( tmp_source_name_6 );
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_optionxform );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_subscribed_name_1 = var_path;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = const_int_0;
    tmp_args_element_name_10 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_args_element_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 485;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 485;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_opt;
        assert( old != NULL );
        var_opt = tmp_assign_source_11;
        Py_DECREF( old );
    }

    tmp_subscribed_name_2 = par_map;

    CHECK_OBJECT( tmp_subscribed_name_2 );
    tmp_subscript_name_2 = var_opt;

    CHECK_OBJECT( tmp_subscript_name_2 );
    tmp_assign_source_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 486;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_v;
        var_v = tmp_assign_source_12;
        Py_XDECREF( old );
    }

    goto branch_end_8;
    branch_no_8:;
    tmp_len_arg_2 = var_path;

    CHECK_OBJECT( tmp_len_arg_2 );
    tmp_compare_left_8 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_compare_left_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 487;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_compare_right_8 = const_int_pos_2;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_8 );

        exception_lineno = 487;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_8 );
    if ( tmp_cmp_Eq_4 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_subscribed_name_3 = var_path;

    CHECK_OBJECT( tmp_subscribed_name_3 );
    tmp_subscript_name_3 = const_int_0;
    tmp_assign_source_13 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 488;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_sect;
        assert( old != NULL );
        var_sect = tmp_assign_source_13;
        Py_DECREF( old );
    }

    tmp_source_name_7 = par_parser;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_optionxform );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 489;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_subscribed_name_4 = var_path;

    CHECK_OBJECT( tmp_subscribed_name_4 );
    tmp_subscript_name_4 = const_int_pos_1;
    tmp_args_element_name_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 489;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 489;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 489;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_opt;
        assert( old != NULL );
        var_opt = tmp_assign_source_14;
        Py_DECREF( old );
    }

    tmp_source_name_8 = par_parser;

    CHECK_OBJECT( tmp_source_name_8 );
    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_get );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 490;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_args_name_2 = PyTuple_New( 2 );
    tmp_tuple_element_2 = var_sect;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = var_opt;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_2 );
    tmp_kw_name_2 = PyDict_Copy( const_dict_f34551bd9b350227d9d52290f83daeb7 );
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 490;
    tmp_assign_source_15 = CALL_FUNCTION( tmp_called_name_9, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 490;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_v;
        var_v = tmp_assign_source_15;
        Py_XDECREF( old );
    }

    goto branch_end_9;
    branch_no_9:;
    tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );

    if (unlikely( tmp_called_name_10 == NULL ))
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );
    }

    if ( tmp_called_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationSyntaxError" );
        exception_tb = NULL;

        exception_lineno = 492;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_12 = par_option;

    CHECK_OBJECT( tmp_args_element_name_12 );
    tmp_args_element_name_13 = par_section;

    CHECK_OBJECT( tmp_args_element_name_13 );
    tmp_left_name_2 = const_unicode_digest_597fc368a20a14ae60713b98d6c256f0;
    tmp_right_name_2 = PyTuple_New( 1 );
    tmp_tuple_element_3 = par_rest;

    CHECK_OBJECT( tmp_tuple_element_3 );
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_3 );
    tmp_args_element_name_14 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 494;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 492;
    {
        PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14 };
        tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 492;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    exception_type = tmp_raise_type_3;
    exception_lineno = 492;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooooo";
    goto try_except_handler_2;
    branch_end_9:;
    branch_end_8:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_a9d056abfb66efd51ab0ad66d53b7228 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_a9d056abfb66efd51ab0ad66d53b7228, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_a9d056abfb66efd51ab0ad66d53b7228, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_9 = PyThreadState_GET()->exc_type;
    tmp_compare_right_9 = PyTuple_New( 3 );
    tmp_tuple_element_4 = PyExc_KeyError;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_compare_right_9, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoSectionError );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoSectionError );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_compare_right_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoSectionError" );
        exception_tb = NULL;

        exception_lineno = 495;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_compare_right_9, 1, tmp_tuple_element_4 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoOptionError );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoOptionError );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_compare_right_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoOptionError" );
        exception_tb = NULL;

        exception_lineno = 495;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_compare_right_9, 2, tmp_tuple_element_4 );
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_9, tmp_compare_right_9 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_9 );

        exception_lineno = 495;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_9 );
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_from_none );

    if (unlikely( tmp_called_name_11 == NULL ))
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_from_none );
    }

    if ( tmp_called_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "from_none" );
        exception_tb = NULL;

        exception_lineno = 496;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationMissingOptionError );

    if (unlikely( tmp_called_name_12 == NULL ))
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationMissingOptionError );
    }

    if ( tmp_called_name_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationMissingOptionError" );
        exception_tb = NULL;

        exception_lineno = 496;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_16 = par_option;

    CHECK_OBJECT( tmp_args_element_name_16 );
    tmp_args_element_name_17 = par_section;

    CHECK_OBJECT( tmp_args_element_name_17 );
    tmp_args_element_name_18 = var_rawval;

    CHECK_OBJECT( tmp_args_element_name_18 );
    tmp_called_instance_6 = const_unicode_chr_58;
    tmp_args_element_name_20 = var_path;

    CHECK_OBJECT( tmp_args_element_name_20 );
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 497;
    {
        PyObject *call_args[] = { tmp_args_element_name_20 };
        tmp_args_element_name_19 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_join, call_args );
    }

    if ( tmp_args_element_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 497;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 496;
    {
        PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18, tmp_args_element_name_19 };
        tmp_args_element_name_15 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_12, call_args );
    }

    Py_DECREF( tmp_args_element_name_19 );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 496;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_raise_type_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_4;
    exception_lineno = 496;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooooo";
    goto frame_exception_exit_1;
    goto branch_end_10;
    branch_no_10:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 483;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame) frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooo";
    goto frame_exception_exit_1;
    branch_end_10:;
    // End of try:
    try_end_1:;
    tmp_compare_left_10 = const_unicode_chr_36;
    tmp_compare_right_10 = var_v;

    if ( tmp_compare_right_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "v" );
        exception_tb = NULL;

        exception_lineno = 498;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_source_name_9 = par_self;

    CHECK_OBJECT( tmp_source_name_9 );
    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__interpolate_some );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 499;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_21 = par_parser;

    CHECK_OBJECT( tmp_args_element_name_21 );
    tmp_args_element_name_22 = var_opt;

    if ( tmp_args_element_name_22 == NULL )
    {
        Py_DECREF( tmp_called_name_13 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "opt" );
        exception_tb = NULL;

        exception_lineno = 499;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_23 = par_accum;

    CHECK_OBJECT( tmp_args_element_name_23 );
    tmp_args_element_name_24 = var_v;

    if ( tmp_args_element_name_24 == NULL )
    {
        Py_DECREF( tmp_called_name_13 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "v" );
        exception_tb = NULL;

        exception_lineno = 499;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_25 = var_sect;

    if ( tmp_args_element_name_25 == NULL )
    {
        Py_DECREF( tmp_called_name_13 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "sect" );
        exception_tb = NULL;

        exception_lineno = 499;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_10 = par_parser;

    CHECK_OBJECT( tmp_source_name_10 );
    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_items );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 500;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_3 = PyTuple_New( 1 );
    tmp_tuple_element_5 = var_sect;

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "sect" );
        exception_tb = NULL;

        exception_lineno = 500;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_5 );
    tmp_kw_name_3 = PyDict_Copy( const_dict_f34551bd9b350227d9d52290f83daeb7 );
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 500;
    tmp_dict_seq_1 = CALL_FUNCTION( tmp_called_name_14, tmp_args_name_3, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_name_3 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_dict_seq_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 500;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_26 = TO_DICT( tmp_dict_seq_1, NULL );
    Py_DECREF( tmp_dict_seq_1 );
    if ( tmp_args_element_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 500;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_left_name_3 = par_depth;

    CHECK_OBJECT( tmp_left_name_3 );
    tmp_right_name_3 = const_int_pos_1;
    tmp_args_element_name_27 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_3 );
    if ( tmp_args_element_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_26 );

        exception_lineno = 501;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 499;
    {
        PyObject *call_args[] = { tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26, tmp_args_element_name_27 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS7( tmp_called_name_13, call_args );
    }

    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_26 );
    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 499;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_11;
    branch_no_11:;
    tmp_source_name_11 = par_accum;

    CHECK_OBJECT( tmp_source_name_11 );
    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_append );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 503;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_28 = var_v;

    if ( tmp_args_element_name_28 == NULL )
    {
        Py_DECREF( tmp_called_name_15 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "v" );
        exception_tb = NULL;

        exception_lineno = 503;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 503;
    {
        PyObject *call_args[] = { tmp_args_element_name_28 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
    }

    Py_DECREF( tmp_called_name_15 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 503;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_11:;
    goto branch_end_6;
    branch_no_6:;
    tmp_called_name_16 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );

    if (unlikely( tmp_called_name_16 == NULL ))
    {
        tmp_called_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError );
    }

    if ( tmp_called_name_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationSyntaxError" );
        exception_tb = NULL;

        exception_lineno = 505;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_29 = par_option;

    CHECK_OBJECT( tmp_args_element_name_29 );
    tmp_args_element_name_30 = par_section;

    CHECK_OBJECT( tmp_args_element_name_30 );
    tmp_left_name_4 = const_unicode_digest_bb1414ad81bd2d95e4e4b42d0d0a436b;
    tmp_right_name_4 = PyTuple_New( 1 );
    tmp_tuple_element_6 = par_rest;

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_right_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rest" );
        exception_tb = NULL;

        exception_lineno = 508;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_right_name_4, 0, tmp_tuple_element_6 );
    tmp_args_element_name_31 = BINARY_OPERATION_REMAINDER( tmp_left_name_4, tmp_right_name_4 );
    Py_DECREF( tmp_right_name_4 );
    if ( tmp_args_element_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 507;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame.f_lineno = 505;
    {
        PyObject *call_args[] = { tmp_args_element_name_29, tmp_args_element_name_30, tmp_args_element_name_31 };
        tmp_raise_type_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_16, call_args );
    }

    Py_DECREF( tmp_args_element_name_31 );
    if ( tmp_raise_type_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 505;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_5;
    exception_lineno = 505;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooooo";
    goto frame_exception_exit_1;
    branch_end_6:;
    branch_end_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 461;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_a9d056abfb66efd51ab0ad66d53b7228 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_a9d056abfb66efd51ab0ad66d53b7228 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_a9d056abfb66efd51ab0ad66d53b7228 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a9d056abfb66efd51ab0ad66d53b7228, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a9d056abfb66efd51ab0ad66d53b7228->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a9d056abfb66efd51ab0ad66d53b7228, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a9d056abfb66efd51ab0ad66d53b7228,
        type_description_1,
        par_self,
        par_parser,
        par_option,
        par_accum,
        par_rest,
        par_section,
        par_map,
        par_depth,
        var_rawval,
        var_p,
        var_c,
        var_m,
        var_path,
        var_sect,
        var_opt,
        var_v
    );


    // Release cached frame.
    if ( frame_a9d056abfb66efd51ab0ad66d53b7228 == cache_frame_a9d056abfb66efd51ab0ad66d53b7228 )
    {
        Py_DECREF( frame_a9d056abfb66efd51ab0ad66d53b7228 );
    }
    cache_frame_a9d056abfb66efd51ab0ad66d53b7228 = NULL;

    assertFrameObject( frame_a9d056abfb66efd51ab0ad66d53b7228 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_24__interpolate_some );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_accum );
    Py_DECREF( par_accum );
    par_accum = NULL;

    Py_XDECREF( par_rest );
    par_rest = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_map );
    Py_DECREF( par_map );
    par_map = NULL;

    CHECK_OBJECT( (PyObject *)par_depth );
    Py_DECREF( par_depth );
    par_depth = NULL;

    CHECK_OBJECT( (PyObject *)var_rawval );
    Py_DECREF( var_rawval );
    var_rawval = NULL;

    Py_XDECREF( var_p );
    var_p = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_path );
    var_path = NULL;

    Py_XDECREF( var_sect );
    var_sect = NULL;

    Py_XDECREF( var_opt );
    var_opt = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_accum );
    Py_DECREF( par_accum );
    par_accum = NULL;

    Py_XDECREF( par_rest );
    par_rest = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_map );
    Py_DECREF( par_map );
    par_map = NULL;

    CHECK_OBJECT( (PyObject *)par_depth );
    Py_DECREF( par_depth );
    par_depth = NULL;

    Py_XDECREF( var_rawval );
    var_rawval = NULL;

    Py_XDECREF( var_p );
    var_p = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_path );
    var_path = NULL;

    Py_XDECREF( var_sect );
    var_sect = NULL;

    Py_XDECREF( var_opt );
    var_opt = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_24__interpolate_some );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_25_before_get( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *par_vars = python_pars[ 5 ];
    PyObject *var_rawval = NULL;
    PyObject *var_depth = NULL;
    PyObject *var_replace = NULL;
    PyObject *var_e = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_23a563440601bc013ec73f2f4d54f600 = NULL;

    struct Nuitka_FrameObject *frame_23a563440601bc013ec73f2f4d54f600;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = par_value;

    CHECK_OBJECT( tmp_assign_source_1 );
    assert( var_rawval == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_rawval = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_23a563440601bc013ec73f2f4d54f600, codeobj_23a563440601bc013ec73f2f4d54f600, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_23a563440601bc013ec73f2f4d54f600 = cache_frame_23a563440601bc013ec73f2f4d54f600;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_23a563440601bc013ec73f2f4d54f600 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_23a563440601bc013ec73f2f4d54f600 ) == 2 ); // Frame stack

    // Framed code:
    tmp_assign_source_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MAX_INTERPOLATION_DEPTH );

    if (unlikely( tmp_assign_source_2 == NULL ))
    {
        tmp_assign_source_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MAX_INTERPOLATION_DEPTH );
    }

    if ( tmp_assign_source_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MAX_INTERPOLATION_DEPTH" );
        exception_tb = NULL;

        exception_lineno = 519;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    assert( var_depth == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_depth = tmp_assign_source_2;

    loop_start_1:;
    tmp_cond_value_1 = var_depth;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "depth" );
        exception_tb = NULL;

        exception_lineno = 520;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 520;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    tmp_left_name_1 = var_depth;

    if ( tmp_left_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "depth" );
        exception_tb = NULL;

        exception_lineno = 521;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_right_name_1 = const_int_pos_1;
    tmp_result = BINARY_OPERATION_INPLACE( PyNumber_InPlaceSubtract, &tmp_left_name_1, tmp_right_name_1 );
    tmp_assign_source_3 = tmp_left_name_1;
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 521;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    var_depth = tmp_assign_source_3;

    tmp_and_left_value_1 = par_value;

    if ( tmp_and_left_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;

        exception_lineno = 522;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 522;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_compexpr_left_1 = const_unicode_digest_777628c26f9a8187996cd389e788a09c;
    tmp_compexpr_right_1 = par_value;

    if ( tmp_compexpr_right_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;

        exception_lineno = 522;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 522;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_2 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_2 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 522;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 523;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_partial );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 523;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 1 );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__interpolation_replace );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );

        exception_lineno = 523;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_parser;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_parser;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_23a563440601bc013ec73f2f4d54f600->m_frame.f_lineno = 523;
    tmp_assign_source_4 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 523;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_replace;
        var_replace = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__KEYCRE );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 525;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_sub );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 525;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = var_replace;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_value;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;

        exception_lineno = 525;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_23a563440601bc013ec73f2f4d54f600->m_frame.f_lineno = 525;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 525;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_value;
        par_value = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_left_name_2 = par_value;

    CHECK_OBJECT( tmp_left_name_2 );
    tmp_right_name_2 = par_vars;

    CHECK_OBJECT( tmp_right_name_2 );
    tmp_assign_source_6 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 527;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_value;
        assert( old != NULL );
        par_value = tmp_assign_source_6;
        Py_DECREF( old );
    }

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_23a563440601bc013ec73f2f4d54f600 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_23a563440601bc013ec73f2f4d54f600, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_23a563440601bc013ec73f2f4d54f600, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_7 = PyThreadState_GET()->exc_value;
    assert( var_e == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_e = tmp_assign_source_7;

    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_from_none );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_from_none );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "from_none" );
        exception_tb = NULL;

        exception_lineno = 529;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationMissingOptionError );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationMissingOptionError );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationMissingOptionError" );
        exception_tb = NULL;

        exception_lineno = 529;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_option;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_args_element_name_5 = par_section;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = var_rawval;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_source_name_5 = var_e;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_args );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 530;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = const_int_0;
    tmp_args_element_name_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 530;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_23a563440601bc013ec73f2f4d54f600->m_frame.f_lineno = 529;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 529;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_23a563440601bc013ec73f2f4d54f600->m_frame.f_lineno = 529;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 529;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 529;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooo";
    goto frame_exception_exit_1;
    goto branch_end_3;
    branch_no_3:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 526;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_23a563440601bc013ec73f2f4d54f600->m_frame) frame_23a563440601bc013ec73f2f4d54f600->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooo";
    goto frame_exception_exit_1;
    branch_end_3:;
    // End of try:
    try_end_1:;
    goto branch_end_2;
    branch_no_2:;
    goto loop_end_1;
    branch_end_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 520;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_and_left_value_2 = par_value;

    if ( tmp_and_left_value_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;

        exception_lineno = 533;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 533;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_compexpr_left_2 = const_unicode_digest_777628c26f9a8187996cd389e788a09c;
    tmp_compexpr_right_2 = par_value;

    if ( tmp_compexpr_right_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;

        exception_lineno = 533;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 533;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_3 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_3 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 533;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationDepthError );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationDepthError );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "InterpolationDepthError" );
        exception_tb = NULL;

        exception_lineno = 534;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = par_option;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_args_element_name_9 = par_section;

    CHECK_OBJECT( tmp_args_element_name_9 );
    tmp_args_element_name_10 = var_rawval;

    CHECK_OBJECT( tmp_args_element_name_10 );
    frame_23a563440601bc013ec73f2f4d54f600->m_frame.f_lineno = 534;
    {
        PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
    }

    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 534;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 534;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooo";
    goto frame_exception_exit_1;
    branch_no_4:;
    tmp_return_value = par_value;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;

        exception_lineno = 535;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_23a563440601bc013ec73f2f4d54f600 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_23a563440601bc013ec73f2f4d54f600 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_23a563440601bc013ec73f2f4d54f600 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_23a563440601bc013ec73f2f4d54f600, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_23a563440601bc013ec73f2f4d54f600->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_23a563440601bc013ec73f2f4d54f600, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_23a563440601bc013ec73f2f4d54f600,
        type_description_1,
        par_self,
        par_parser,
        par_section,
        par_option,
        par_value,
        par_vars,
        var_rawval,
        var_depth,
        var_replace,
        var_e
    );


    // Release cached frame.
    if ( frame_23a563440601bc013ec73f2f4d54f600 == cache_frame_23a563440601bc013ec73f2f4d54f600 )
    {
        Py_DECREF( frame_23a563440601bc013ec73f2f4d54f600 );
    }
    cache_frame_23a563440601bc013ec73f2f4d54f600 = NULL;

    assertFrameObject( frame_23a563440601bc013ec73f2f4d54f600 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_25_before_get );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    Py_XDECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_vars );
    Py_DECREF( par_vars );
    par_vars = NULL;

    CHECK_OBJECT( (PyObject *)var_rawval );
    Py_DECREF( var_rawval );
    var_rawval = NULL;

    Py_XDECREF( var_depth );
    var_depth = NULL;

    Py_XDECREF( var_replace );
    var_replace = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    Py_XDECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_vars );
    Py_DECREF( par_vars );
    par_vars = NULL;

    CHECK_OBJECT( (PyObject *)var_rawval );
    Py_DECREF( var_rawval );
    var_rawval = NULL;

    Py_XDECREF( var_depth );
    var_depth = NULL;

    Py_XDECREF( var_replace );
    var_replace = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_25_before_get );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_26_before_set( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_section = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_value = python_pars[ 4 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_value;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_26_before_set );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_26_before_set );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_27__interpolation_replace( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_match = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *var_s = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    bool tmp_is_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_4019ba08b58ba7d30d5741fe684fea6e = NULL;

    struct Nuitka_FrameObject *frame_4019ba08b58ba7d30d5741fe684fea6e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4019ba08b58ba7d30d5741fe684fea6e, codeobj_4019ba08b58ba7d30d5741fe684fea6e, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4019ba08b58ba7d30d5741fe684fea6e = cache_frame_4019ba08b58ba7d30d5741fe684fea6e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4019ba08b58ba7d30d5741fe684fea6e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4019ba08b58ba7d30d5741fe684fea6e ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_match;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_4019ba08b58ba7d30d5741fe684fea6e->m_frame.f_lineno = 542;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_group, &PyTuple_GET_ITEM( const_tuple_int_pos_1_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 542;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_s == NULL );
    var_s = tmp_assign_source_1;

    tmp_compare_left_1 = var_s;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_instance_2 = par_match;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_4019ba08b58ba7d30d5741fe684fea6e->m_frame.f_lineno = 544;
    tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_group );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 544;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_left_name_1 = const_unicode_digest_34af11cfb02a76cc23098f7dbc1d08c8;
    tmp_called_instance_3 = par_parser;

    CHECK_OBJECT( tmp_called_instance_3 );
    tmp_args_element_name_1 = var_s;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_4019ba08b58ba7d30d5741fe684fea6e->m_frame.f_lineno = 546;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_right_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_optionxform, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4019ba08b58ba7d30d5741fe684fea6e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4019ba08b58ba7d30d5741fe684fea6e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4019ba08b58ba7d30d5741fe684fea6e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4019ba08b58ba7d30d5741fe684fea6e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4019ba08b58ba7d30d5741fe684fea6e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4019ba08b58ba7d30d5741fe684fea6e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4019ba08b58ba7d30d5741fe684fea6e,
        type_description_1,
        par_match,
        par_parser,
        var_s
    );


    // Release cached frame.
    if ( frame_4019ba08b58ba7d30d5741fe684fea6e == cache_frame_4019ba08b58ba7d30d5741fe684fea6e )
    {
        Py_DECREF( frame_4019ba08b58ba7d30d5741fe684fea6e );
    }
    cache_frame_4019ba08b58ba7d30d5741fe684fea6e = NULL;

    assertFrameObject( frame_4019ba08b58ba7d30d5741fe684fea6e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_27__interpolation_replace );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_match );
    Py_DECREF( par_match );
    par_match = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)var_s );
    Py_DECREF( var_s );
    var_s = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_match );
    Py_DECREF( par_match );
    par_match = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_27__interpolation_replace );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_28___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_defaults = python_pars[ 1 ];
    PyObject *par_dict_type = python_pars[ 2 ];
    PyObject *par_allow_no_value = python_pars[ 3 ];
    PyObject *par_kwargs = python_pars[ 4 ];
    PyObject *var_delimiters = NULL;
    PyObject *var_comment_prefixes = NULL;
    PyObject *var_inline_comment_prefixes = NULL;
    PyObject *var_strict = NULL;
    PyObject *var_empty_lines_in_values = NULL;
    PyObject *var_default_section = NULL;
    PyObject *var_interpolation = NULL;
    PyObject *var_converters = NULL;
    PyObject *var_key = NULL;
    PyObject *var_value = NULL;
    PyObject *var_d = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscribed_2;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subscript_2;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_ass_subvalue_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_name_6;
    PyObject *tmp_assattr_name_7;
    PyObject *tmp_assattr_name_8;
    PyObject *tmp_assattr_name_9;
    PyObject *tmp_assattr_name_10;
    PyObject *tmp_assattr_name_11;
    PyObject *tmp_assattr_name_12;
    PyObject *tmp_assattr_name_13;
    PyObject *tmp_assattr_name_14;
    PyObject *tmp_assattr_name_15;
    PyObject *tmp_assattr_name_16;
    PyObject *tmp_assattr_name_17;
    PyObject *tmp_assattr_name_18;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assattr_target_6;
    PyObject *tmp_assattr_target_7;
    PyObject *tmp_assattr_target_8;
    PyObject *tmp_assattr_target_9;
    PyObject *tmp_assattr_target_10;
    PyObject *tmp_assattr_target_11;
    PyObject *tmp_assattr_target_12;
    PyObject *tmp_assattr_target_13;
    PyObject *tmp_assattr_target_14;
    PyObject *tmp_assattr_target_15;
    PyObject *tmp_assattr_target_16;
    PyObject *tmp_assattr_target_17;
    PyObject *tmp_assattr_target_18;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_next_source_1;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_outline_return_value_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_tuple_arg_1;
    PyObject *tmp_tuple_arg_2;
    PyObject *tmp_tuple_arg_3;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_d2b77459cd226d739fe11c413ebe5386 = NULL;

    struct Nuitka_FrameObject *frame_d2b77459cd226d739fe11c413ebe5386;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d2b77459cd226d739fe11c413ebe5386, codeobj_d2b77459cd226d739fe11c413ebe5386, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d2b77459cd226d739fe11c413ebe5386 = cache_frame_d2b77459cd226d739fe11c413ebe5386;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d2b77459cd226d739fe11c413ebe5386 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d2b77459cd226d739fe11c413ebe5386 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 594;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_83b306704934f780ec1abb9795b2fd28_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 594;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_delimiters == NULL );
    var_delimiters = tmp_assign_source_1;

    tmp_called_instance_2 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 595;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_0b84ef46e0e4a1b841437ea04cc83002_tuple, 0 ) );

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 595;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_comment_prefixes == NULL );
    var_comment_prefixes = tmp_assign_source_2;

    tmp_called_instance_3 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_3 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 596;
    tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_unicode_plain_inline_comment_prefixes_none_tuple, 0 ) );

    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 596;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_inline_comment_prefixes == NULL );
    var_inline_comment_prefixes = tmp_assign_source_3;

    tmp_called_instance_4 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_4 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 597;
    tmp_assign_source_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_unicode_plain_strict_true_tuple, 0 ) );

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 597;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_strict == NULL );
    var_strict = tmp_assign_source_4;

    tmp_called_instance_5 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_5 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 598;
    tmp_assign_source_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_unicode_plain_empty_lines_in_values_true_tuple, 0 ) );

    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 598;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_empty_lines_in_values == NULL );
    var_empty_lines_in_values = tmp_assign_source_5;

    tmp_source_name_1 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 599;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_unicode_plain_default_section;
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DEFAULTSECT );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEFAULTSECT );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DEFAULTSECT" );
        exception_tb = NULL;

        exception_lineno = 599;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 599;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 599;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_default_section == NULL );
    var_default_section = tmp_assign_source_6;

    tmp_source_name_2 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_get );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 600;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = const_unicode_plain_interpolation;
    tmp_args_element_name_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_args_element_name_4 == NULL ))
    {
        tmp_args_element_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 600;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 600;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 600;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_interpolation == NULL );
    var_interpolation = tmp_assign_source_7;

    tmp_source_name_3 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_get );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 601;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_unicode_plain_converters;
    tmp_args_element_name_6 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_args_element_name_6 == NULL ))
    {
        tmp_args_element_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 601;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 601;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 601;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_converters == NULL );
    var_converters = tmp_assign_source_8;

    tmp_assattr_name_1 = par_dict_type;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__dict, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 603;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_6 = par_self;

    CHECK_OBJECT( tmp_called_instance_6 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 604;
    tmp_assattr_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain__dict );
    if ( tmp_assattr_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__sections, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 604;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    tmp_called_instance_7 = par_self;

    CHECK_OBJECT( tmp_called_instance_7 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 605;
    tmp_assattr_name_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_7, const_str_plain__dict );
    if ( tmp_assattr_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 605;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_3 = par_self;

    CHECK_OBJECT( tmp_assattr_target_3 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__defaults, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_3 );

        exception_lineno = 605;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_3 );
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ConverterMapping );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ConverterMapping );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ConverterMapping" );
        exception_tb = NULL;

        exception_lineno = 606;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_self;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 606;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_assattr_name_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_assattr_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 606;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_4 = par_self;

    CHECK_OBJECT( tmp_assattr_target_4 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__converters, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_4 );

        exception_lineno = 606;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_4 );
    tmp_called_instance_8 = par_self;

    CHECK_OBJECT( tmp_called_instance_8 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 607;
    tmp_assattr_name_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain__dict );
    if ( tmp_assattr_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 607;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_5 = par_self;

    CHECK_OBJECT( tmp_assattr_target_5 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__proxies, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_5 );

        exception_lineno = 607;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_5 );
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_SectionProxy );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SectionProxy );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SectionProxy" );
        exception_tb = NULL;

        exception_lineno = 608;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = par_self;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_args_element_name_9 = var_default_section;

    CHECK_OBJECT( tmp_args_element_name_9 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 608;
    {
        PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_ass_subvalue_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
    }

    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 608;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__proxies );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subvalue_1 );

        exception_lineno = 608;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_ass_subscript_1 = var_default_section;

    CHECK_OBJECT( tmp_ass_subscript_1 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 608;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_1 = par_defaults;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 609;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_instance_9 = par_defaults;

    CHECK_OBJECT( tmp_called_instance_9 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 610;
    tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_9, const_str_plain_items );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 610;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 610;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_9;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_10 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_10 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooo";
            exception_lineno = 610;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_10;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_11 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 610;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_12 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_12 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooooooooooo";
        exception_lineno = 610;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_12;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooooooooooo";
        exception_lineno = 610;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooooooooo";
                exception_lineno = 610;
                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooooooooooooooo";
        exception_lineno = 610;
        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_14 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_14 );
    {
        PyObject *old = var_key;
        var_key = tmp_assign_source_14;
        Py_INCREF( var_key );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_15 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_15 );
    {
        PyObject *old = var_value;
        var_value = tmp_assign_source_15;
        Py_INCREF( var_value );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_ass_subvalue_2 = var_value;

    CHECK_OBJECT( tmp_ass_subvalue_2 );
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__defaults );
    if ( tmp_ass_subscribed_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 611;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_called_instance_10 = par_self;

    CHECK_OBJECT( tmp_called_instance_10 );
    tmp_args_element_name_10 = var_key;

    CHECK_OBJECT( tmp_args_element_name_10 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 611;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_ass_subscript_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_optionxform, call_args );
    }

    if ( tmp_ass_subscript_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subscribed_2 );

        exception_lineno = 611;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
    Py_DECREF( tmp_ass_subscribed_2 );
    Py_DECREF( tmp_ass_subscript_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 611;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 610;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_1:;
    tmp_tuple_arg_1 = var_delimiters;

    CHECK_OBJECT( tmp_tuple_arg_1 );
    tmp_assattr_name_6 = PySequence_Tuple( tmp_tuple_arg_1 );
    if ( tmp_assattr_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 612;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_6 = par_self;

    CHECK_OBJECT( tmp_assattr_target_6 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain__delimiters, tmp_assattr_name_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_6 );

        exception_lineno = 612;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_6 );
    tmp_compare_left_1 = var_delimiters;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = const_tuple_unicode_chr_61_unicode_chr_58_tuple;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 613;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_cond_value_2 = par_allow_no_value;

    CHECK_OBJECT( tmp_cond_value_2 );
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 614;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_source_name_6 = par_self;

    CHECK_OBJECT( tmp_source_name_6 );
    tmp_assattr_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_OPTCRE_NV );
    if ( tmp_assattr_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 614;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_source_name_7 = par_self;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_assattr_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_OPTCRE );
    if ( tmp_assattr_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 614;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    condexpr_end_1:;
    tmp_assattr_target_7 = par_self;

    CHECK_OBJECT( tmp_assattr_target_7 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain__optcre, tmp_assattr_name_7 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_7 );

        exception_lineno = 614;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_7 );
    goto branch_end_2;
    branch_no_2:;
    tmp_source_name_8 = const_unicode_chr_124;
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_join );
    assert( tmp_called_name_6 != NULL );
    tmp_iter_arg_3 = var_delimiters;

    CHECK_OBJECT( tmp_iter_arg_3 );
    tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 616;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_genexpr_1__$0 == NULL );
    tmp_genexpr_1__$0 = tmp_assign_source_17;

    // Tried code:
    tmp_outline_return_value_1 = Nuitka_Generator_New(
        backports$configparser$$$function_28___init__$$$genexpr_1_genexpr_context,
        module_backports$configparser,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        NULL,
#endif
        codeobj_e9929961d51b8ac8760968522b189ffb,
        1
    );

    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
    assert( Py_SIZE( tmp_outline_return_value_1 ) >= 1 ); 


    goto try_return_handler_5;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_28___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_5:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_1;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_28___init__ );
    return NULL;
    outline_result_1:;
    tmp_args_element_name_11 = tmp_outline_return_value_1;
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 616;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 616;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_d == NULL );
    var_d = tmp_assign_source_16;

    tmp_cond_value_3 = par_allow_no_value;

    CHECK_OBJECT( tmp_cond_value_3 );
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 617;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 618;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_compile );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 618;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = par_self;

    CHECK_OBJECT( tmp_source_name_11 );
    tmp_source_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__OPT_NV_TMPL );
    if ( tmp_source_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 618;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_format );
    Py_DECREF( tmp_source_name_10 );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 618;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = var_d;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_delim;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 618;
    tmp_args_element_name_12 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_8, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 618;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_12 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 619;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_VERBOSE );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 619;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 618;
    {
        PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13 };
        tmp_assattr_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_12 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_assattr_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 618;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_8 = par_self;

    CHECK_OBJECT( tmp_assattr_target_8 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_8, const_str_plain__optcre, tmp_assattr_name_8 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_8 );

        exception_lineno = 618;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_8 );
    goto branch_end_3;
    branch_no_3:;
    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 621;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_compile );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_15 = par_self;

    CHECK_OBJECT( tmp_source_name_15 );
    tmp_source_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__OPT_TMPL );
    if ( tmp_source_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 621;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_format );
    Py_DECREF( tmp_source_name_14 );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 621;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_2 = var_d;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain_delim;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 621;
    tmp_args_element_name_14 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_10, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 621;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_16 == NULL )
    {
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 622;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_VERBOSE );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 622;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 621;
    {
        PyObject *call_args[] = { tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_assattr_name_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_14 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_assattr_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_9 = par_self;

    CHECK_OBJECT( tmp_assattr_target_9 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_9, const_str_plain__optcre, tmp_assattr_name_9 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_9 );

        exception_lineno = 621;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_9 );
    branch_end_3:;
    branch_end_2:;
    tmp_or_left_value_1 = var_comment_prefixes;

    CHECK_OBJECT( tmp_or_left_value_1 );
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 623;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_or_right_value_1 = const_tuple_empty;
    tmp_tuple_arg_2 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_tuple_arg_2 = tmp_or_left_value_1;
    or_end_1:;
    tmp_assattr_name_10 = PySequence_Tuple( tmp_tuple_arg_2 );
    if ( tmp_assattr_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 623;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_10 = par_self;

    CHECK_OBJECT( tmp_assattr_target_10 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_10, const_str_plain__comment_prefixes, tmp_assattr_name_10 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_10 );

        exception_lineno = 623;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_10 );
    tmp_or_left_value_2 = var_inline_comment_prefixes;

    CHECK_OBJECT( tmp_or_left_value_2 );
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    if ( tmp_or_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 624;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    tmp_or_right_value_2 = const_tuple_empty;
    tmp_tuple_arg_3 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_tuple_arg_3 = tmp_or_left_value_2;
    or_end_2:;
    tmp_assattr_name_11 = PySequence_Tuple( tmp_tuple_arg_3 );
    if ( tmp_assattr_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 624;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_11 = par_self;

    CHECK_OBJECT( tmp_assattr_target_11 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_11, const_str_plain__inline_comment_prefixes, tmp_assattr_name_11 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_11 );

        exception_lineno = 624;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_11 );
    tmp_assattr_name_12 = var_strict;

    CHECK_OBJECT( tmp_assattr_name_12 );
    tmp_assattr_target_12 = par_self;

    CHECK_OBJECT( tmp_assattr_target_12 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_12, const_str_plain__strict, tmp_assattr_name_12 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 625;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_13 = par_allow_no_value;

    CHECK_OBJECT( tmp_assattr_name_13 );
    tmp_assattr_target_13 = par_self;

    CHECK_OBJECT( tmp_assattr_target_13 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_13, const_str_plain__allow_no_value, tmp_assattr_name_13 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 626;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_14 = var_empty_lines_in_values;

    CHECK_OBJECT( tmp_assattr_name_14 );
    tmp_assattr_target_14 = par_self;

    CHECK_OBJECT( tmp_assattr_target_14 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_14, const_str_plain__empty_lines_in_values, tmp_assattr_name_14 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 627;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_15 = var_default_section;

    CHECK_OBJECT( tmp_assattr_name_15 );
    tmp_assattr_target_15 = par_self;

    CHECK_OBJECT( tmp_assattr_target_15 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_15, const_str_plain_default_section, tmp_assattr_name_15 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 628;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_16 = var_interpolation;

    CHECK_OBJECT( tmp_assattr_name_16 );
    tmp_assattr_target_16 = par_self;

    CHECK_OBJECT( tmp_assattr_target_16 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_16, const_str_plain__interpolation, tmp_assattr_name_16 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 629;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = par_self;

    CHECK_OBJECT( tmp_source_name_17 );
    tmp_compare_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain__interpolation );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 630;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_compare_right_2 == NULL ))
    {
        tmp_compare_right_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_compare_right_2 == NULL )
    {
        Py_DECREF( tmp_compare_left_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 630;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_is_1 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_is_1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_18 = par_self;

    CHECK_OBJECT( tmp_source_name_18 );
    tmp_assattr_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain__DEFAULT_INTERPOLATION );
    if ( tmp_assattr_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 631;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_17 = par_self;

    CHECK_OBJECT( tmp_assattr_target_17 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_17, const_str_plain__interpolation, tmp_assattr_name_17 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_17 );

        exception_lineno = 631;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_17 );
    branch_no_4:;
    tmp_source_name_19 = par_self;

    CHECK_OBJECT( tmp_source_name_19 );
    tmp_compare_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain__interpolation );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 632;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_3 = Py_None;
    tmp_is_2 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    Py_DECREF( tmp_compare_left_3 );
    if ( tmp_is_2 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Interpolation );

    if (unlikely( tmp_called_name_11 == NULL ))
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Interpolation );
    }

    if ( tmp_called_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "Interpolation" );
        exception_tb = NULL;

        exception_lineno = 633;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 633;
    tmp_assattr_name_18 = CALL_FUNCTION_NO_ARGS( tmp_called_name_11 );
    if ( tmp_assattr_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 633;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_18 = par_self;

    CHECK_OBJECT( tmp_assattr_target_18 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_18, const_str_plain__interpolation, tmp_assattr_name_18 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_18 );

        exception_lineno = 633;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_18 );
    branch_no_5:;
    tmp_compare_left_4 = var_converters;

    CHECK_OBJECT( tmp_compare_left_4 );
    tmp_compare_right_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_compare_right_4 == NULL ))
    {
        tmp_compare_right_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_compare_right_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 634;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_isnot_1 = ( tmp_compare_left_4 != tmp_compare_right_4 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_20 = par_self;

    CHECK_OBJECT( tmp_source_name_20 );
    tmp_called_instance_11 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain__converters );
    if ( tmp_called_instance_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 635;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_16 = var_converters;

    CHECK_OBJECT( tmp_args_element_name_16 );
    frame_d2b77459cd226d739fe11c413ebe5386->m_frame.f_lineno = 635;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_update, call_args );
    }

    Py_DECREF( tmp_called_instance_11 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 635;
        type_description_1 = "oooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_6:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d2b77459cd226d739fe11c413ebe5386 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d2b77459cd226d739fe11c413ebe5386 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d2b77459cd226d739fe11c413ebe5386, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d2b77459cd226d739fe11c413ebe5386->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d2b77459cd226d739fe11c413ebe5386, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d2b77459cd226d739fe11c413ebe5386,
        type_description_1,
        par_self,
        par_defaults,
        par_dict_type,
        par_allow_no_value,
        par_kwargs,
        var_delimiters,
        var_comment_prefixes,
        var_inline_comment_prefixes,
        var_strict,
        var_empty_lines_in_values,
        var_default_section,
        var_interpolation,
        var_converters,
        var_key,
        var_value,
        var_d
    );


    // Release cached frame.
    if ( frame_d2b77459cd226d739fe11c413ebe5386 == cache_frame_d2b77459cd226d739fe11c413ebe5386 )
    {
        Py_DECREF( frame_d2b77459cd226d739fe11c413ebe5386 );
    }
    cache_frame_d2b77459cd226d739fe11c413ebe5386 = NULL;

    assertFrameObject( frame_d2b77459cd226d739fe11c413ebe5386 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_28___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_defaults );
    Py_DECREF( par_defaults );
    par_defaults = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    CHECK_OBJECT( (PyObject *)par_allow_no_value );
    Py_DECREF( par_allow_no_value );
    par_allow_no_value = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_delimiters );
    Py_DECREF( var_delimiters );
    var_delimiters = NULL;

    CHECK_OBJECT( (PyObject *)var_comment_prefixes );
    Py_DECREF( var_comment_prefixes );
    var_comment_prefixes = NULL;

    CHECK_OBJECT( (PyObject *)var_inline_comment_prefixes );
    Py_DECREF( var_inline_comment_prefixes );
    var_inline_comment_prefixes = NULL;

    CHECK_OBJECT( (PyObject *)var_strict );
    Py_DECREF( var_strict );
    var_strict = NULL;

    CHECK_OBJECT( (PyObject *)var_empty_lines_in_values );
    Py_DECREF( var_empty_lines_in_values );
    var_empty_lines_in_values = NULL;

    CHECK_OBJECT( (PyObject *)var_default_section );
    Py_DECREF( var_default_section );
    var_default_section = NULL;

    CHECK_OBJECT( (PyObject *)var_interpolation );
    Py_DECREF( var_interpolation );
    var_interpolation = NULL;

    CHECK_OBJECT( (PyObject *)var_converters );
    Py_DECREF( var_converters );
    var_converters = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_d );
    var_d = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_defaults );
    Py_DECREF( par_defaults );
    par_defaults = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    CHECK_OBJECT( (PyObject *)par_allow_no_value );
    Py_DECREF( par_allow_no_value );
    par_allow_no_value = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_delimiters );
    var_delimiters = NULL;

    Py_XDECREF( var_comment_prefixes );
    var_comment_prefixes = NULL;

    Py_XDECREF( var_inline_comment_prefixes );
    var_inline_comment_prefixes = NULL;

    Py_XDECREF( var_strict );
    var_strict = NULL;

    Py_XDECREF( var_empty_lines_in_values );
    var_empty_lines_in_values = NULL;

    Py_XDECREF( var_default_section );
    var_default_section = NULL;

    Py_XDECREF( var_interpolation );
    var_interpolation = NULL;

    Py_XDECREF( var_converters );
    var_converters = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_d );
    var_d = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_28___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct backports$configparser$$$function_28___init__$$$genexpr_1_genexpr_locals {
    PyObject *var_d
    PyObject *tmp_iter_value_0
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *backports$configparser$$$function_28___init__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void backports$configparser$$$function_28___init__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_d = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_e9929961d51b8ac8760968522b189ffb, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    if ( generator->m_closure[0] == NULL )
    {
        tmp_next_source_1 = NULL;
    }
    else
    {
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
    }

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "No";
            exception_lineno = 616;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = var_d;
        var_d = tmp_assign_source_2;
        Py_INCREF( var_d );
        Py_XDECREF( old );
    }

    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 616;
        type_description_1 = "No";
        goto try_except_handler_2;
    }

    tmp_args_element_name_1 = var_d;

    CHECK_OBJECT( tmp_args_element_name_1 );
    generator->m_frame->m_frame.f_lineno = 616;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_expression_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_escape, call_args );
    }

    if ( tmp_expression_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 616;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 616;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 616;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            NULL,
            var_d
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_d );
    var_d = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_d );
    var_d = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_backports$configparser$$$function_29_defaults( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 = NULL;

    struct Nuitka_FrameObject *frame_9e0f9d0dc02a6e2954af5c6c2bc553d8;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9e0f9d0dc02a6e2954af5c6c2bc553d8, codeobj_9e0f9d0dc02a6e2954af5c6c2bc553d8, module_backports$configparser, sizeof(void *) );
    frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 = cache_frame_9e0f9d0dc02a6e2954af5c6c2bc553d8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__defaults );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 638;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9e0f9d0dc02a6e2954af5c6c2bc553d8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9e0f9d0dc02a6e2954af5c6c2bc553d8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9e0f9d0dc02a6e2954af5c6c2bc553d8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9e0f9d0dc02a6e2954af5c6c2bc553d8,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 == cache_frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 )
    {
        Py_DECREF( frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 );
    }
    cache_frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 = NULL;

    assertFrameObject( frame_9e0f9d0dc02a6e2954af5c6c2bc553d8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_29_defaults );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_29_defaults );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_30_sections( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_list_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_b0c3aba41106fb9db0b937d9a8930ab9 = NULL;

    struct Nuitka_FrameObject *frame_b0c3aba41106fb9db0b937d9a8930ab9;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b0c3aba41106fb9db0b937d9a8930ab9, codeobj_b0c3aba41106fb9db0b937d9a8930ab9, module_backports$configparser, sizeof(void *) );
    frame_b0c3aba41106fb9db0b937d9a8930ab9 = cache_frame_b0c3aba41106fb9db0b937d9a8930ab9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b0c3aba41106fb9db0b937d9a8930ab9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b0c3aba41106fb9db0b937d9a8930ab9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__sections );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 643;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_b0c3aba41106fb9db0b937d9a8930ab9->m_frame.f_lineno = 643;
    tmp_list_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_keys );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_list_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 643;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_return_value = PySequence_List( tmp_list_arg_1 );
    Py_DECREF( tmp_list_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 643;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b0c3aba41106fb9db0b937d9a8930ab9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b0c3aba41106fb9db0b937d9a8930ab9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b0c3aba41106fb9db0b937d9a8930ab9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b0c3aba41106fb9db0b937d9a8930ab9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b0c3aba41106fb9db0b937d9a8930ab9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b0c3aba41106fb9db0b937d9a8930ab9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b0c3aba41106fb9db0b937d9a8930ab9,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_b0c3aba41106fb9db0b937d9a8930ab9 == cache_frame_b0c3aba41106fb9db0b937d9a8930ab9 )
    {
        Py_DECREF( frame_b0c3aba41106fb9db0b937d9a8930ab9 );
    }
    cache_frame_b0c3aba41106fb9db0b937d9a8930ab9 = NULL;

    assertFrameObject( frame_b0c3aba41106fb9db0b937d9a8930ab9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_30_sections );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_30_sections );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_31_add_section( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscribed_2;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subscript_2;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_ass_subvalue_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_Eq_1;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    static struct Nuitka_FrameObject *cache_frame_25b1e4ac38b8dd4e768369c3920f267a = NULL;

    struct Nuitka_FrameObject *frame_25b1e4ac38b8dd4e768369c3920f267a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_25b1e4ac38b8dd4e768369c3920f267a, codeobj_25b1e4ac38b8dd4e768369c3920f267a, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_25b1e4ac38b8dd4e768369c3920f267a = cache_frame_25b1e4ac38b8dd4e768369c3920f267a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_25b1e4ac38b8dd4e768369c3920f267a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_25b1e4ac38b8dd4e768369c3920f267a ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par_section;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_default_section );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 651;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_1 );

        exception_lineno = 651;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_left_name_1 = const_unicode_digest_ee5eca4e6822fcb5c3a1f80b683f8ef5;
    tmp_right_name_1 = par_section;

    CHECK_OBJECT( tmp_right_name_1 );
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 652;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_25b1e4ac38b8dd4e768369c3920f267a->m_frame.f_lineno = 652;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 652;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_compare_left_2 = par_section;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_compare_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__sections );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 654;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_2 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DuplicateSectionError );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DuplicateSectionError );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DuplicateSectionError" );
        exception_tb = NULL;

        exception_lineno = 655;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_section;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_25b1e4ac38b8dd4e768369c3920f267a->m_frame.f_lineno = 655;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 655;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 655;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_25b1e4ac38b8dd4e768369c3920f267a->m_frame.f_lineno = 656;
    tmp_ass_subvalue_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__dict );
    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 656;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__sections );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subvalue_1 );

        exception_lineno = 656;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_ass_subscript_1 = par_section;

    CHECK_OBJECT( tmp_ass_subscript_1 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 656;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_SectionProxy );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SectionProxy );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SectionProxy" );
        exception_tb = NULL;

        exception_lineno = 657;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_section;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_25b1e4ac38b8dd4e768369c3920f267a->m_frame.f_lineno = 657;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_ass_subvalue_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_ass_subvalue_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 657;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__proxies );
    if ( tmp_ass_subscribed_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subvalue_2 );

        exception_lineno = 657;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_ass_subscript_2 = par_section;

    CHECK_OBJECT( tmp_ass_subscript_2 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
    Py_DECREF( tmp_ass_subscribed_2 );
    Py_DECREF( tmp_ass_subvalue_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 657;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_25b1e4ac38b8dd4e768369c3920f267a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_25b1e4ac38b8dd4e768369c3920f267a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_25b1e4ac38b8dd4e768369c3920f267a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_25b1e4ac38b8dd4e768369c3920f267a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_25b1e4ac38b8dd4e768369c3920f267a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_25b1e4ac38b8dd4e768369c3920f267a,
        type_description_1,
        par_self,
        par_section
    );


    // Release cached frame.
    if ( frame_25b1e4ac38b8dd4e768369c3920f267a == cache_frame_25b1e4ac38b8dd4e768369c3920f267a )
    {
        Py_DECREF( frame_25b1e4ac38b8dd4e768369c3920f267a );
    }
    cache_frame_25b1e4ac38b8dd4e768369c3920f267a = NULL;

    assertFrameObject( frame_25b1e4ac38b8dd4e768369c3920f267a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_31_add_section );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_31_add_section );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_32_has_section( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_7c73b6073210442193c92c29ca2b700b = NULL;

    struct Nuitka_FrameObject *frame_7c73b6073210442193c92c29ca2b700b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7c73b6073210442193c92c29ca2b700b, codeobj_7c73b6073210442193c92c29ca2b700b, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_7c73b6073210442193c92c29ca2b700b = cache_frame_7c73b6073210442193c92c29ca2b700b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7c73b6073210442193c92c29ca2b700b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7c73b6073210442193c92c29ca2b700b ) == 2 ); // Frame stack

    // Framed code:
    tmp_compexpr_left_1 = par_section;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__sections );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 664;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 664;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7c73b6073210442193c92c29ca2b700b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7c73b6073210442193c92c29ca2b700b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7c73b6073210442193c92c29ca2b700b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7c73b6073210442193c92c29ca2b700b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7c73b6073210442193c92c29ca2b700b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7c73b6073210442193c92c29ca2b700b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7c73b6073210442193c92c29ca2b700b,
        type_description_1,
        par_self,
        par_section
    );


    // Release cached frame.
    if ( frame_7c73b6073210442193c92c29ca2b700b == cache_frame_7c73b6073210442193c92c29ca2b700b )
    {
        Py_DECREF( frame_7c73b6073210442193c92c29ca2b700b );
    }
    cache_frame_7c73b6073210442193c92c29ca2b700b = NULL;

    assertFrameObject( frame_7c73b6073210442193c92c29ca2b700b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_32_has_section );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_32_has_section );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_33_options( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *var_opts = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_list_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_9e488e3e6b003bd4988650021f9a8896 = NULL;

    struct Nuitka_FrameObject *frame_9e488e3e6b003bd4988650021f9a8896;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9e488e3e6b003bd4988650021f9a8896, codeobj_9e488e3e6b003bd4988650021f9a8896, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_9e488e3e6b003bd4988650021f9a8896 = cache_frame_9e488e3e6b003bd4988650021f9a8896;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9e488e3e6b003bd4988650021f9a8896 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9e488e3e6b003bd4988650021f9a8896 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__sections );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_subscript_name_1 = par_section;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_called_instance_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    frame_9e488e3e6b003bd4988650021f9a8896->m_frame.f_lineno = 669;
    tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_copy );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    assert( var_opts == NULL );
    var_opts = tmp_assign_source_1;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_9e488e3e6b003bd4988650021f9a8896 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_9e488e3e6b003bd4988650021f9a8896, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_9e488e3e6b003bd4988650021f9a8896, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 670;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_from_none );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_from_none );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "from_none" );
        exception_tb = NULL;

        exception_lineno = 671;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoSectionError );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoSectionError );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoSectionError" );
        exception_tb = NULL;

        exception_lineno = 671;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_section;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_9e488e3e6b003bd4988650021f9a8896->m_frame.f_lineno = 671;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_9e488e3e6b003bd4988650021f9a8896->m_frame.f_lineno = 671;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 671;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 668;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_9e488e3e6b003bd4988650021f9a8896->m_frame) frame_9e488e3e6b003bd4988650021f9a8896->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    branch_end_1:;
    // End of try:
    try_end_1:;
    tmp_source_name_2 = var_opts;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_update );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 672;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__defaults );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 672;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_9e488e3e6b003bd4988650021f9a8896->m_frame.f_lineno = 672;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 672;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_2 = var_opts;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_9e488e3e6b003bd4988650021f9a8896->m_frame.f_lineno = 673;
    tmp_list_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_keys );
    if ( tmp_list_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 673;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = PySequence_List( tmp_list_arg_1 );
    Py_DECREF( tmp_list_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 673;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_9e488e3e6b003bd4988650021f9a8896 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_9e488e3e6b003bd4988650021f9a8896 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_9e488e3e6b003bd4988650021f9a8896 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9e488e3e6b003bd4988650021f9a8896, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9e488e3e6b003bd4988650021f9a8896->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9e488e3e6b003bd4988650021f9a8896, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9e488e3e6b003bd4988650021f9a8896,
        type_description_1,
        par_self,
        par_section,
        var_opts
    );


    // Release cached frame.
    if ( frame_9e488e3e6b003bd4988650021f9a8896 == cache_frame_9e488e3e6b003bd4988650021f9a8896 )
    {
        Py_DECREF( frame_9e488e3e6b003bd4988650021f9a8896 );
    }
    cache_frame_9e488e3e6b003bd4988650021f9a8896 = NULL;

    assertFrameObject( frame_9e488e3e6b003bd4988650021f9a8896 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_33_options );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)var_opts );
    Py_DECREF( var_opts );
    var_opts = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    Py_XDECREF( var_opts );
    var_opts = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_33_options );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_34_read( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_filenames = python_pars[ 1 ];
    PyObject *par_encoding = python_pars[ 2 ];
    PyObject *var_read_ok = NULL;
    PyObject *var_filename = NULL;
    PyObject *var_fp = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    PyObject *tmp_with_1__indicator = NULL;
    PyObject *tmp_with_1__source = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    bool tmp_is_1;
    bool tmp_is_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_next_source_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_f8f4c647f95a11b72eadacb3437e5e7a = NULL;

    struct Nuitka_FrameObject *frame_f8f4c647f95a11b72eadacb3437e5e7a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f8f4c647f95a11b72eadacb3437e5e7a, codeobj_f8f4c647f95a11b72eadacb3437e5e7a, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f8f4c647f95a11b72eadacb3437e5e7a = cache_frame_f8f4c647f95a11b72eadacb3437e5e7a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f8f4c647f95a11b72eadacb3437e5e7a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f8f4c647f95a11b72eadacb3437e5e7a ) == 2 ); // Frame stack

    // Framed code:
    tmp_and_left_value_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_PY2 );

    if (unlikely( tmp_and_left_value_1 == NULL ))
    {
        tmp_and_left_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY2 );
    }

    if ( tmp_and_left_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "PY2" );
        exception_tb = NULL;

        exception_lineno = 687;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 687;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_isinstance_inst_1 = par_filenames;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = (PyObject *)&PyString_Type;
    tmp_and_right_value_1 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 687;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 687;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "warnings" );
        exception_tb = NULL;

        exception_lineno = 691;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 691;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = const_unicode_digest_1918a014a5e3dd674f19733217aa18c6;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DeprecationWarning" );
        exception_tb = NULL;

        exception_lineno = 695;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = PyDict_Copy( const_dict_f154c9a58c9419d7e391901d7b7fe49e );
    frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = 691;
    tmp_unused = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 691;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_1 = PyList_New( 1 );
    tmp_list_element_1 = par_filenames;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_1, 0, tmp_list_element_1 );
    {
        PyObject *old = par_filenames;
        assert( old != NULL );
        par_filenames = tmp_assign_source_1;
        Py_DECREF( old );
    }

    goto branch_end_1;
    branch_no_1:;
    tmp_isinstance_inst_2 = par_filenames;

    CHECK_OBJECT( tmp_isinstance_inst_2 );
    tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str );

    if (unlikely( tmp_isinstance_cls_2 == NULL ))
    {
        tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_str );
    }

    if ( tmp_isinstance_cls_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "str" );
        exception_tb = NULL;

        exception_lineno = 699;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 699;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_2 = PyList_New( 1 );
    tmp_list_element_2 = par_filenames;

    CHECK_OBJECT( tmp_list_element_2 );
    Py_INCREF( tmp_list_element_2 );
    PyList_SET_ITEM( tmp_assign_source_2, 0, tmp_list_element_2 );
    {
        PyObject *old = par_filenames;
        assert( old != NULL );
        par_filenames = tmp_assign_source_2;
        Py_DECREF( old );
    }

    branch_no_2:;
    branch_end_1:;
    tmp_assign_source_3 = PyList_New( 0 );
    assert( var_read_ok == NULL );
    var_read_ok = tmp_assign_source_3;

    tmp_iter_arg_1 = par_filenames;

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "filenames" );
        exception_tb = NULL;

        exception_lineno = 702;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_4;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooo";
            exception_lineno = 702;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_assign_source_6 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = var_filename;
        var_filename = tmp_assign_source_6;
        Py_INCREF( var_filename );
        Py_XDECREF( old );
    }

    // Tried code:
    // Tried code:
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_open );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_open );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "open" );
        exception_tb = NULL;

        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }

    tmp_args_name_2 = PyTuple_New( 1 );
    tmp_tuple_element_2 = var_filename;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_encoding;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_encoding;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = 704;
    tmp_assign_source_7 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_args_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_with_1__source;
        tmp_with_1__source = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_source_name_2 = tmp_with_1__source;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_assign_source_8 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___exit__ );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_with_1__exit;
        tmp_with_1__exit = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_source_name_3 = tmp_with_1__source;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_called_name_3 = LOOKUP_SPECIAL( tmp_source_name_3, const_str_plain___enter__ );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = 704;
    tmp_assign_source_9 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
    Py_DECREF( tmp_called_name_3 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_with_1__enter;
        tmp_with_1__enter = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = Py_True;
    {
        PyObject *old = tmp_with_1__indicator;
        tmp_with_1__indicator = tmp_assign_source_10;
        Py_INCREF( tmp_with_1__indicator );
        Py_XDECREF( old );
    }

    tmp_assign_source_11 = tmp_with_1__enter;

    CHECK_OBJECT( tmp_assign_source_11 );
    {
        PyObject *old = var_fp;
        var_fp = tmp_assign_source_11;
        Py_INCREF( var_fp );
        Py_XDECREF( old );
    }

    // Tried code:
    // Tried code:
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = var_fp;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = var_filename;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = 705;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain__read, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 705;
        type_description_1 = "oooooo";
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_unused );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_f8f4c647f95a11b72eadacb3437e5e7a );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_f8f4c647f95a11b72eadacb3437e5e7a, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_f8f4c647f95a11b72eadacb3437e5e7a, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_BaseException;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_12 = Py_False;
    {
        PyObject *old = tmp_with_1__indicator;
        assert( old != NULL );
        tmp_with_1__indicator = tmp_assign_source_12;
        Py_INCREF( tmp_with_1__indicator );
        Py_DECREF( old );
    }

    tmp_called_name_4 = tmp_with_1__exit;

    CHECK_OBJECT( tmp_called_name_4 );
    tmp_args_element_name_3 = PyThreadState_GET()->exc_type;
    tmp_args_element_name_4 = PyThreadState_GET()->exc_value;
    tmp_args_element_name_5 = PyThreadState_GET()->exc_traceback;
    frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = 704;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_cond_value_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, call_args );
    }

    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_no_4;
    }
    else
    {
        goto branch_yes_4;
    }
    branch_yes_4:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 704;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame) frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooo";
    goto try_except_handler_5;
    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 704;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame) frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooo";
    goto try_except_handler_5;
    branch_end_3:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_34_read );
    return NULL;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    tmp_compare_left_2 = tmp_with_1__indicator;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = Py_True;
    tmp_is_1 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if ( tmp_is_1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_name_5 = tmp_with_1__exit;

    CHECK_OBJECT( tmp_called_name_5 );
    frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = 704;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        Py_DECREF( exception_keeper_type_2 );
        Py_XDECREF( exception_keeper_value_2 );
        Py_XDECREF( exception_keeper_tb_2 );

        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_unused );
    branch_no_5:;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_4;
    // End of try:
    try_end_2:;
    tmp_compare_left_3 = tmp_with_1__indicator;

    CHECK_OBJECT( tmp_compare_left_3 );
    tmp_compare_right_3 = Py_True;
    tmp_is_2 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if ( tmp_is_2 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_called_name_6 = tmp_with_1__exit;

    CHECK_OBJECT( tmp_called_name_6 );
    frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = 704;
    tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 704;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_unused );
    branch_no_6:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    Py_XDECREF( tmp_with_1__indicator );
    tmp_with_1__indicator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_3;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_f8f4c647f95a11b72eadacb3437e5e7a );
    if ( exception_keeper_tb_4 == NULL )
    {
        exception_keeper_tb_4 = MAKE_TRACEBACK( frame_f8f4c647f95a11b72eadacb3437e5e7a, exception_keeper_lineno_4 );
    }
    else if ( exception_keeper_lineno_4 != 0 )
    {
        exception_keeper_tb_4 = ADD_TRACEBACK( exception_keeper_tb_4, frame_f8f4c647f95a11b72eadacb3437e5e7a, exception_keeper_lineno_4 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
    PUBLISH_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
    tmp_compare_left_4 = PyThreadState_GET()->exc_type;
    tmp_compare_right_4 = PyExc_IOError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 706;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    if ( tmp_exc_match_exception_match_2 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    goto loop_start_1;
    goto branch_end_7;
    branch_no_7:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 703;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame) frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooo";
    goto try_except_handler_2;
    branch_end_7:;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    Py_XDECREF( tmp_with_1__indicator );
    tmp_with_1__indicator = NULL;

    tmp_called_instance_2 = var_read_ok;

    CHECK_OBJECT( tmp_called_instance_2 );
    tmp_args_element_name_6 = var_filename;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame.f_lineno = 708;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 708;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_f8f4c647f95a11b72eadacb3437e5e7a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_f8f4c647f95a11b72eadacb3437e5e7a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f8f4c647f95a11b72eadacb3437e5e7a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f8f4c647f95a11b72eadacb3437e5e7a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f8f4c647f95a11b72eadacb3437e5e7a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f8f4c647f95a11b72eadacb3437e5e7a,
        type_description_1,
        par_self,
        par_filenames,
        par_encoding,
        var_read_ok,
        var_filename,
        var_fp
    );


    // Release cached frame.
    if ( frame_f8f4c647f95a11b72eadacb3437e5e7a == cache_frame_f8f4c647f95a11b72eadacb3437e5e7a )
    {
        Py_DECREF( frame_f8f4c647f95a11b72eadacb3437e5e7a );
    }
    cache_frame_f8f4c647f95a11b72eadacb3437e5e7a = NULL;

    assertFrameObject( frame_f8f4c647f95a11b72eadacb3437e5e7a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = var_read_ok;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_34_read );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filenames );
    par_filenames = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)var_read_ok );
    Py_DECREF( var_read_ok );
    var_read_ok = NULL;

    Py_XDECREF( var_filename );
    var_filename = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filenames );
    par_filenames = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    Py_XDECREF( var_read_ok );
    var_read_ok = NULL;

    Py_XDECREF( var_filename );
    var_filename = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_34_read );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_35_read_file( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_f = python_pars[ 1 ];
    PyObject *par_source = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    int tmp_exc_match_exception_match_1;
    bool tmp_is_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_7a2c4ef3755c467efd14b718fade8dba = NULL;

    struct Nuitka_FrameObject *frame_7a2c4ef3755c467efd14b718fade8dba;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7a2c4ef3755c467efd14b718fade8dba, codeobj_7a2c4ef3755c467efd14b718fade8dba, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_7a2c4ef3755c467efd14b718fade8dba = cache_frame_7a2c4ef3755c467efd14b718fade8dba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7a2c4ef3755c467efd14b718fade8dba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7a2c4ef3755c467efd14b718fade8dba ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par_source;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried code:
    tmp_source_name_1 = par_f;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 721;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_source;
        assert( old != NULL );
        par_source = tmp_assign_source_1;
        Py_DECREF( old );
    }

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_7a2c4ef3755c467efd14b718fade8dba );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_7a2c4ef3755c467efd14b718fade8dba, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_7a2c4ef3755c467efd14b718fade8dba, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_AttributeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 722;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_2 = const_unicode_digest_c40da24b9fb2f7d79a4e07fe6c8f5b08;
    {
        PyObject *old = par_source;
        assert( old != NULL );
        par_source = tmp_assign_source_2;
        Py_INCREF( par_source );
        Py_DECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 720;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_7a2c4ef3755c467efd14b718fade8dba->m_frame) frame_7a2c4ef3755c467efd14b718fade8dba->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    branch_end_2:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_35_read_file );
    return NULL;
    // End of try:
    try_end_1:;
    branch_no_1:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__read );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 724;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_f;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_source;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "source" );
        exception_tb = NULL;

        exception_lineno = 724;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_7a2c4ef3755c467efd14b718fade8dba->m_frame.f_lineno = 724;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 724;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 1
    RESTORE_FRAME_EXCEPTION( frame_7a2c4ef3755c467efd14b718fade8dba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_7a2c4ef3755c467efd14b718fade8dba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7a2c4ef3755c467efd14b718fade8dba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7a2c4ef3755c467efd14b718fade8dba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7a2c4ef3755c467efd14b718fade8dba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7a2c4ef3755c467efd14b718fade8dba,
        type_description_1,
        par_self,
        par_f,
        par_source
    );


    // Release cached frame.
    if ( frame_7a2c4ef3755c467efd14b718fade8dba == cache_frame_7a2c4ef3755c467efd14b718fade8dba )
    {
        Py_DECREF( frame_7a2c4ef3755c467efd14b718fade8dba );
    }
    cache_frame_7a2c4ef3755c467efd14b718fade8dba = NULL;

    assertFrameObject( frame_7a2c4ef3755c467efd14b718fade8dba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_35_read_file );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_f );
    Py_DECREF( par_f );
    par_f = NULL;

    Py_XDECREF( par_source );
    par_source = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_f );
    Py_DECREF( par_f );
    par_f = NULL;

    Py_XDECREF( par_source );
    par_source = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_35_read_file );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_36_read_string( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_string = python_pars[ 1 ];
    PyObject *par_source = python_pars[ 2 ];
    PyObject *var_sfile = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_return_value;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_a2aaf48369809ea7f18bcf4f26799bec = NULL;

    struct Nuitka_FrameObject *frame_a2aaf48369809ea7f18bcf4f26799bec;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a2aaf48369809ea7f18bcf4f26799bec, codeobj_a2aaf48369809ea7f18bcf4f26799bec, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a2aaf48369809ea7f18bcf4f26799bec = cache_frame_a2aaf48369809ea7f18bcf4f26799bec;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a2aaf48369809ea7f18bcf4f26799bec );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a2aaf48369809ea7f18bcf4f26799bec ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_io );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "io" );
        exception_tb = NULL;

        exception_lineno = 728;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_string;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_a2aaf48369809ea7f18bcf4f26799bec->m_frame.f_lineno = 728;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_StringIO, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 728;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_sfile == NULL );
    var_sfile = tmp_assign_source_1;

    tmp_called_instance_2 = par_self;

    CHECK_OBJECT( tmp_called_instance_2 );
    tmp_args_element_name_2 = var_sfile;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_source;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_a2aaf48369809ea7f18bcf4f26799bec->m_frame.f_lineno = 729;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_read_file, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 729;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2aaf48369809ea7f18bcf4f26799bec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2aaf48369809ea7f18bcf4f26799bec );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a2aaf48369809ea7f18bcf4f26799bec, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a2aaf48369809ea7f18bcf4f26799bec->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a2aaf48369809ea7f18bcf4f26799bec, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a2aaf48369809ea7f18bcf4f26799bec,
        type_description_1,
        par_self,
        par_string,
        par_source,
        var_sfile
    );


    // Release cached frame.
    if ( frame_a2aaf48369809ea7f18bcf4f26799bec == cache_frame_a2aaf48369809ea7f18bcf4f26799bec )
    {
        Py_DECREF( frame_a2aaf48369809ea7f18bcf4f26799bec );
    }
    cache_frame_a2aaf48369809ea7f18bcf4f26799bec = NULL;

    assertFrameObject( frame_a2aaf48369809ea7f18bcf4f26799bec );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_36_read_string );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_string );
    Py_DECREF( par_string );
    par_string = NULL;

    CHECK_OBJECT( (PyObject *)par_source );
    Py_DECREF( par_source );
    par_source = NULL;

    CHECK_OBJECT( (PyObject *)var_sfile );
    Py_DECREF( var_sfile );
    var_sfile = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_string );
    Py_DECREF( par_string );
    par_string = NULL;

    CHECK_OBJECT( (PyObject *)par_source );
    Py_DECREF( par_source );
    par_source = NULL;

    Py_XDECREF( var_sfile );
    var_sfile = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_36_read_string );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_37_read_dict( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_dictionary = python_pars[ 1 ];
    PyObject *par_source = python_pars[ 2 ];
    PyObject *var_elements_added = NULL;
    PyObject *var_section = NULL;
    PyObject *var_keys = NULL;
    PyObject *var_key = NULL;
    PyObject *var_value = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    int tmp_exc_match_exception_match_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_62c3d8e16848ef7854278f3bc5ceb404 = NULL;

    struct Nuitka_FrameObject *frame_62c3d8e16848ef7854278f3bc5ceb404;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = PySet_New( NULL );
    assert( var_elements_added == NULL );
    var_elements_added = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_62c3d8e16848ef7854278f3bc5ceb404, codeobj_62c3d8e16848ef7854278f3bc5ceb404, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_62c3d8e16848ef7854278f3bc5ceb404 = cache_frame_62c3d8e16848ef7854278f3bc5ceb404;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_62c3d8e16848ef7854278f3bc5ceb404 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_62c3d8e16848ef7854278f3bc5ceb404 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_dictionary;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 745;
    tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_items );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 745;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 745;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooo";
            exception_lineno = 745;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 745;
        type_description_1 = "oooooooo";
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooo";
        exception_lineno = 745;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooo";
        exception_lineno = 745;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooo";
                exception_lineno = 745;
                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooooooo";
        exception_lineno = 745;
        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = var_section;
        var_section = tmp_assign_source_7;
        Py_INCREF( var_section );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_8 );
    {
        PyObject *old = var_keys;
        var_keys = tmp_assign_source_8;
        Py_INCREF( var_keys );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_str );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "str" );
        exception_tb = NULL;

        exception_lineno = 746;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_1 = var_section;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 746;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 746;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_section;
        assert( old != NULL );
        var_section = tmp_assign_source_9;
        Py_DECREF( old );
    }

    // Tried code:
    tmp_called_instance_2 = par_self;

    CHECK_OBJECT( tmp_called_instance_2 );
    tmp_args_element_name_2 = var_section;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 748;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_add_section, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 748;
        type_description_1 = "oooooooo";
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_unused );
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_62c3d8e16848ef7854278f3bc5ceb404 );
    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_62c3d8e16848ef7854278f3bc5ceb404, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_62c3d8e16848ef7854278f3bc5ceb404, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DuplicateSectionError );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DuplicateSectionError );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_compare_right_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DuplicateSectionError" );
        exception_tb = NULL;

        exception_lineno = 749;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_compare_right_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = PyExc_ValueError;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_compare_right_1, 1, tmp_tuple_element_1 );
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_1 );

        exception_lineno = 749;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_and_left_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__strict );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 750;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 750;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_compexpr_left_1 = var_section;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_compexpr_right_1 = var_elements_added;

    CHECK_OBJECT( tmp_compexpr_right_1 );
    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 750;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    Py_INCREF( tmp_and_right_value_1 );
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 750;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 751;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame) frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooo";
    goto try_except_handler_2;
    branch_no_2:;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 747;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame) frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooo";
    goto try_except_handler_2;
    branch_end_1:;
    goto try_end_3;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_37_read_dict );
    return NULL;
    // End of try:
    try_end_3:;
    tmp_called_instance_3 = var_elements_added;

    CHECK_OBJECT( tmp_called_instance_3 );
    tmp_args_element_name_3 = var_section;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 752;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_add, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 752;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_4 = var_keys;

    CHECK_OBJECT( tmp_called_instance_4 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 753;
    tmp_iter_arg_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_items );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 753;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 753;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_2__for_iterator;
        tmp_for_loop_2__for_iterator = tmp_assign_source_10;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooo";
            exception_lineno = 753;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_4 = tmp_for_loop_2__iter_value;

    CHECK_OBJECT( tmp_iter_arg_4 );
    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_4 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 753;
        type_description_1 = "oooooooo";
        goto try_except_handler_7;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter;
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_12;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_unpack_3 );
    tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooo";
        exception_lineno = 753;
        goto try_except_handler_8;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_1;
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_unpack_4 );
    tmp_assign_source_14 = UNPACK_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_14 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooo";
        exception_lineno = 753;
        goto try_except_handler_8;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_2;
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_14;
        Py_XDECREF( old );
    }

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_iterator_name_2 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooo";
                exception_lineno = 753;
                goto try_except_handler_8;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooooooo";
        exception_lineno = 753;
        goto try_except_handler_8;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_7;
    // End of try:
    try_end_4:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_6;
    // End of try:
    try_end_5:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    tmp_assign_source_15 = tmp_tuple_unpack_2__element_1;

    CHECK_OBJECT( tmp_assign_source_15 );
    {
        PyObject *old = var_key;
        var_key = tmp_assign_source_15;
        Py_INCREF( var_key );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    tmp_assign_source_16 = tmp_tuple_unpack_2__element_2;

    CHECK_OBJECT( tmp_assign_source_16 );
    {
        PyObject *old = var_value;
        var_value = tmp_assign_source_16;
        Py_INCREF( var_value );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_optionxform );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 754;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_str );
    }

    if ( tmp_called_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "str" );
        exception_tb = NULL;

        exception_lineno = 754;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }

    tmp_args_element_name_5 = var_key;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 754;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 754;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 754;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 754;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_key;
        assert( old != NULL );
        var_key = tmp_assign_source_17;
        Py_DECREF( old );
    }

    tmp_compare_left_2 = var_value;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_str );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "str" );
        exception_tb = NULL;

        exception_lineno = 756;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }

    tmp_args_element_name_6 = var_value;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 756;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 756;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_value;
        assert( old != NULL );
        var_value = tmp_assign_source_18;
        Py_DECREF( old );
    }

    branch_no_3:;
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_and_left_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__strict );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 757;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_2 );

        exception_lineno = 757;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    Py_DECREF( tmp_and_left_value_2 );
    tmp_compexpr_left_2 = PyTuple_New( 2 );
    tmp_tuple_element_2 = var_section;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_compexpr_left_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = var_key;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_compexpr_left_2, 1, tmp_tuple_element_2 );
    tmp_compexpr_right_2 = var_elements_added;

    CHECK_OBJECT( tmp_compexpr_right_2 );
    tmp_and_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 757;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    Py_INCREF( tmp_and_right_value_2 );
    tmp_cond_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 757;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DuplicateOptionError );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DuplicateOptionError );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DuplicateOptionError" );
        exception_tb = NULL;

        exception_lineno = 758;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }

    tmp_args_element_name_7 = var_section;

    CHECK_OBJECT( tmp_args_element_name_7 );
    tmp_args_element_name_8 = var_key;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_args_element_name_9 = par_source;

    CHECK_OBJECT( tmp_args_element_name_9 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 758;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
    }

    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 758;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 758;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooo";
    goto try_except_handler_6;
    branch_no_4:;
    tmp_called_instance_5 = var_elements_added;

    CHECK_OBJECT( tmp_called_instance_5 );
    tmp_args_element_name_10 = PyTuple_New( 2 );
    tmp_tuple_element_3 = var_section;

    CHECK_OBJECT( tmp_tuple_element_3 );
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_10, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = var_key;

    CHECK_OBJECT( tmp_tuple_element_3 );
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_10, 1, tmp_tuple_element_3 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 759;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_add, call_args );
    }

    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 759;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_6 = par_self;

    CHECK_OBJECT( tmp_called_instance_6 );
    tmp_args_element_name_11 = var_section;

    CHECK_OBJECT( tmp_args_element_name_11 );
    tmp_args_element_name_12 = var_key;

    CHECK_OBJECT( tmp_args_element_name_12 );
    tmp_args_element_name_13 = var_value;

    CHECK_OBJECT( tmp_args_element_name_13 );
    frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame.f_lineno = 760;
    {
        PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12, tmp_args_element_name_13 };
        tmp_unused = CALL_METHOD_WITH_ARGS3( tmp_called_instance_6, const_str_plain_set, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 760;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 753;
        type_description_1 = "oooooooo";
        goto try_except_handler_6;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_2;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 745;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_62c3d8e16848ef7854278f3bc5ceb404 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_62c3d8e16848ef7854278f3bc5ceb404 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_62c3d8e16848ef7854278f3bc5ceb404, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_62c3d8e16848ef7854278f3bc5ceb404->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_62c3d8e16848ef7854278f3bc5ceb404, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_62c3d8e16848ef7854278f3bc5ceb404,
        type_description_1,
        par_self,
        par_dictionary,
        par_source,
        var_elements_added,
        var_section,
        var_keys,
        var_key,
        var_value
    );


    // Release cached frame.
    if ( frame_62c3d8e16848ef7854278f3bc5ceb404 == cache_frame_62c3d8e16848ef7854278f3bc5ceb404 )
    {
        Py_DECREF( frame_62c3d8e16848ef7854278f3bc5ceb404 );
    }
    cache_frame_62c3d8e16848ef7854278f3bc5ceb404 = NULL;

    assertFrameObject( frame_62c3d8e16848ef7854278f3bc5ceb404 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_37_read_dict );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_dictionary );
    Py_DECREF( par_dictionary );
    par_dictionary = NULL;

    CHECK_OBJECT( (PyObject *)par_source );
    Py_DECREF( par_source );
    par_source = NULL;

    CHECK_OBJECT( (PyObject *)var_elements_added );
    Py_DECREF( var_elements_added );
    var_elements_added = NULL;

    Py_XDECREF( var_section );
    var_section = NULL;

    Py_XDECREF( var_keys );
    var_keys = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_dictionary );
    Py_DECREF( par_dictionary );
    par_dictionary = NULL;

    CHECK_OBJECT( (PyObject *)par_source );
    Py_DECREF( par_source );
    par_source = NULL;

    CHECK_OBJECT( (PyObject *)var_elements_added );
    Py_DECREF( var_elements_added );
    var_elements_added = NULL;

    Py_XDECREF( var_section );
    var_section = NULL;

    Py_XDECREF( var_keys );
    var_keys = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_37_read_dict );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_38_readfp( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *par_filename = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_d8eab99f266489c382c69bb3041e835e = NULL;

    struct Nuitka_FrameObject *frame_d8eab99f266489c382c69bb3041e835e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d8eab99f266489c382c69bb3041e835e, codeobj_d8eab99f266489c382c69bb3041e835e, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d8eab99f266489c382c69bb3041e835e = cache_frame_d8eab99f266489c382c69bb3041e835e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d8eab99f266489c382c69bb3041e835e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d8eab99f266489c382c69bb3041e835e ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "warnings" );
        exception_tb = NULL;

        exception_lineno = 764;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 764;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = const_unicode_digest_f6b33aa61b9a3fd36565b9f938e21bbe;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DeprecationWarning" );
        exception_tb = NULL;

        exception_lineno = 767;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = PyDict_Copy( const_dict_f154c9a58c9419d7e391901d7b7fe49e );
    frame_d8eab99f266489c382c69bb3041e835e->m_frame.f_lineno = 764;
    tmp_unused = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 764;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_read_file );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 769;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_2 = PyTuple_New( 1 );
    tmp_tuple_element_2 = par_fp;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_filename;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_source;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_d8eab99f266489c382c69bb3041e835e->m_frame.f_lineno = 769;
    tmp_unused = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 769;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d8eab99f266489c382c69bb3041e835e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d8eab99f266489c382c69bb3041e835e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d8eab99f266489c382c69bb3041e835e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d8eab99f266489c382c69bb3041e835e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d8eab99f266489c382c69bb3041e835e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d8eab99f266489c382c69bb3041e835e,
        type_description_1,
        par_self,
        par_fp,
        par_filename
    );


    // Release cached frame.
    if ( frame_d8eab99f266489c382c69bb3041e835e == cache_frame_d8eab99f266489c382c69bb3041e835e )
    {
        Py_DECREF( frame_d8eab99f266489c382c69bb3041e835e );
    }
    cache_frame_d8eab99f266489c382c69bb3041e835e = NULL;

    assertFrameObject( frame_d8eab99f266489c382c69bb3041e835e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_38_readfp );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_38_readfp );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_39_get( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_kwargs = python_pars[ 3 ];
    PyObject *var_raw = NULL;
    PyObject *var_vars = NULL;
    PyObject *var_fallback = NULL;
    PyObject *var_d = NULL;
    PyObject *var_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    bool tmp_is_1;
    bool tmp_is_2;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_f67fe1e40143ec3725182e2baf1d7514 = NULL;

    struct Nuitka_FrameObject *frame_f67fe1e40143ec3725182e2baf1d7514;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f67fe1e40143ec3725182e2baf1d7514, codeobj_f67fe1e40143ec3725182e2baf1d7514, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f67fe1e40143ec3725182e2baf1d7514 = cache_frame_f67fe1e40143ec3725182e2baf1d7514;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f67fe1e40143ec3725182e2baf1d7514 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f67fe1e40143ec3725182e2baf1d7514 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = 787;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_unicode_plain_raw_false_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 787;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_raw == NULL );
    var_raw = tmp_assign_source_1;

    tmp_called_instance_2 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = 788;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_unicode_plain_vars_none_tuple, 0 ) );

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 788;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_vars == NULL );
    var_vars = tmp_assign_source_2;

    tmp_source_name_1 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 789;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_unicode_plain_fallback;
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 789;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = 789;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 789;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_fallback == NULL );
    var_fallback = tmp_assign_source_3;

    // Tried code:
    tmp_called_instance_3 = par_self;

    CHECK_OBJECT( tmp_called_instance_3 );
    tmp_args_element_name_3 = par_section;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = var_vars;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = 792;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_assign_source_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain__unify_values, call_args );
    }

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 792;
        type_description_1 = "ooooooooo";
        goto try_except_handler_2;
    }
    assert( var_d == NULL );
    var_d = tmp_assign_source_4;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_f67fe1e40143ec3725182e2baf1d7514 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_f67fe1e40143ec3725182e2baf1d7514, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_f67fe1e40143ec3725182e2baf1d7514, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoSectionError );

    if (unlikely( tmp_compare_right_1 == NULL ))
    {
        tmp_compare_right_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoSectionError );
    }

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoSectionError" );
        exception_tb = NULL;

        exception_lineno = 793;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 793;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_2 = var_fallback;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_compare_right_2 == NULL ))
    {
        tmp_compare_right_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_compare_right_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 794;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_is_1 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if ( tmp_is_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 795;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f67fe1e40143ec3725182e2baf1d7514->m_frame) frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooooo";
    goto frame_exception_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_return_value = var_fallback;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_end_2:;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 791;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f67fe1e40143ec3725182e2baf1d7514->m_frame) frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooooo";
    goto frame_exception_exit_1;
    branch_end_1:;
    // End of try:
    try_end_1:;
    tmp_called_instance_4 = par_self;

    CHECK_OBJECT( tmp_called_instance_4 );
    tmp_args_element_name_5 = par_option;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = 798;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_assign_source_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_optionxform, call_args );
    }

    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 798;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_option;
        assert( old != NULL );
        par_option = tmp_assign_source_5;
        Py_DECREF( old );
    }

    // Tried code:
    tmp_subscribed_name_1 = var_d;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = par_option;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_assign_source_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;
        type_description_1 = "ooooooooo";
        goto try_except_handler_3;
    }
    assert( var_value == NULL );
    var_value = tmp_assign_source_6;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_f67fe1e40143ec3725182e2baf1d7514 );
    if ( exception_keeper_tb_2 == NULL )
    {
        exception_keeper_tb_2 = MAKE_TRACEBACK( frame_f67fe1e40143ec3725182e2baf1d7514, exception_keeper_lineno_2 );
    }
    else if ( exception_keeper_lineno_2 != 0 )
    {
        exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_f67fe1e40143ec3725182e2baf1d7514, exception_keeper_lineno_2 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    tmp_compare_left_3 = PyThreadState_GET()->exc_type;
    tmp_compare_right_3 = PyExc_KeyError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 801;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_compare_left_4 = var_fallback;

    CHECK_OBJECT( tmp_compare_left_4 );
    tmp_compare_right_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_compare_right_4 == NULL ))
    {
        tmp_compare_right_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_compare_right_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 802;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_is_2 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if ( tmp_is_2 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoOptionError );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoOptionError );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoOptionError" );
        exception_tb = NULL;

        exception_lineno = 803;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = par_option;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_args_element_name_7 = par_section;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = 803;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 803;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 803;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooooooo";
    goto frame_exception_exit_1;
    goto branch_end_4;
    branch_no_4:;
    tmp_return_value = var_fallback;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_end_4:;
    goto branch_end_3;
    branch_no_3:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 799;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f67fe1e40143ec3725182e2baf1d7514->m_frame) frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooooo";
    goto frame_exception_exit_1;
    branch_end_3:;
    // End of try:
    try_end_2:;
    tmp_or_left_value_1 = var_raw;

    CHECK_OBJECT( tmp_or_left_value_1 );
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 807;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_compexpr_left_1 = var_value;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_compexpr_right_1 = Py_None;
    tmp_or_right_value_1 = BOOL_FROM( tmp_compexpr_left_1 == tmp_compexpr_right_1 );
    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 807;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_return_value = var_value;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    goto branch_end_5;
    branch_no_5:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__interpolation );
    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 810;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = par_self;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_args_element_name_9 = par_section;

    CHECK_OBJECT( tmp_args_element_name_9 );
    tmp_args_element_name_10 = par_option;

    CHECK_OBJECT( tmp_args_element_name_10 );
    tmp_args_element_name_11 = var_value;

    CHECK_OBJECT( tmp_args_element_name_11 );
    tmp_args_element_name_12 = var_d;

    CHECK_OBJECT( tmp_args_element_name_12 );
    frame_f67fe1e40143ec3725182e2baf1d7514->m_frame.f_lineno = 810;
    {
        PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_return_value = CALL_METHOD_WITH_ARGS5( tmp_called_instance_5, const_str_plain_before_get, call_args );
    }

    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 810;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_end_5:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_f67fe1e40143ec3725182e2baf1d7514 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_f67fe1e40143ec3725182e2baf1d7514 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_f67fe1e40143ec3725182e2baf1d7514 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f67fe1e40143ec3725182e2baf1d7514, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f67fe1e40143ec3725182e2baf1d7514->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f67fe1e40143ec3725182e2baf1d7514, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f67fe1e40143ec3725182e2baf1d7514,
        type_description_1,
        par_self,
        par_section,
        par_option,
        par_kwargs,
        var_raw,
        var_vars,
        var_fallback,
        var_d,
        var_value
    );


    // Release cached frame.
    if ( frame_f67fe1e40143ec3725182e2baf1d7514 == cache_frame_f67fe1e40143ec3725182e2baf1d7514 )
    {
        Py_DECREF( frame_f67fe1e40143ec3725182e2baf1d7514 );
    }
    cache_frame_f67fe1e40143ec3725182e2baf1d7514 = NULL;

    assertFrameObject( frame_f67fe1e40143ec3725182e2baf1d7514 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_39_get );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_raw );
    Py_DECREF( var_raw );
    var_raw = NULL;

    CHECK_OBJECT( (PyObject *)var_vars );
    Py_DECREF( var_vars );
    var_vars = NULL;

    CHECK_OBJECT( (PyObject *)var_fallback );
    Py_DECREF( var_fallback );
    var_fallback = NULL;

    Py_XDECREF( var_d );
    var_d = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_raw );
    var_raw = NULL;

    Py_XDECREF( var_vars );
    var_vars = NULL;

    Py_XDECREF( var_fallback );
    var_fallback = NULL;

    Py_XDECREF( var_d );
    var_d = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_39_get );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_40__get( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_conv = python_pars[ 2 ];
    PyObject *par_option = python_pars[ 3 ];
    PyObject *par_kwargs = python_pars[ 4 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_b5c31df4eae6765cb7096a3dae45ff07 = NULL;

    struct Nuitka_FrameObject *frame_b5c31df4eae6765cb7096a3dae45ff07;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b5c31df4eae6765cb7096a3dae45ff07, codeobj_b5c31df4eae6765cb7096a3dae45ff07, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b5c31df4eae6765cb7096a3dae45ff07 = cache_frame_b5c31df4eae6765cb7096a3dae45ff07;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b5c31df4eae6765cb7096a3dae45ff07 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b5c31df4eae6765cb7096a3dae45ff07 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = par_conv;

    CHECK_OBJECT( tmp_called_name_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 814;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 1, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_args_element_name_1 = impl___internal__$$$function_3_complex_call_helper_pos_star_dict( dir_call_args );
    }
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 814;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_b5c31df4eae6765cb7096a3dae45ff07->m_frame.f_lineno = 814;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 814;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b5c31df4eae6765cb7096a3dae45ff07 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b5c31df4eae6765cb7096a3dae45ff07 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b5c31df4eae6765cb7096a3dae45ff07 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b5c31df4eae6765cb7096a3dae45ff07, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b5c31df4eae6765cb7096a3dae45ff07->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b5c31df4eae6765cb7096a3dae45ff07, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b5c31df4eae6765cb7096a3dae45ff07,
        type_description_1,
        par_self,
        par_section,
        par_conv,
        par_option,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_b5c31df4eae6765cb7096a3dae45ff07 == cache_frame_b5c31df4eae6765cb7096a3dae45ff07 )
    {
        Py_DECREF( frame_b5c31df4eae6765cb7096a3dae45ff07 );
    }
    cache_frame_b5c31df4eae6765cb7096a3dae45ff07 = NULL;

    assertFrameObject( frame_b5c31df4eae6765cb7096a3dae45ff07 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_40__get );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_conv );
    Py_DECREF( par_conv );
    par_conv = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_conv );
    Py_DECREF( par_conv );
    par_conv = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_40__get );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_41__get_conv( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_conv = python_pars[ 3 ];
    PyObject *par_kwargs = python_pars[ 4 ];
    PyObject *var_fallback = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    int tmp_exc_match_exception_match_1;
    bool tmp_is_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_5e419908535ffb567cbe7d7947a53ae3 = NULL;

    struct Nuitka_FrameObject *frame_5e419908535ffb567cbe7d7947a53ae3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5e419908535ffb567cbe7d7947a53ae3, codeobj_5e419908535ffb567cbe7d7947a53ae3, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_5e419908535ffb567cbe7d7947a53ae3 = cache_frame_5e419908535ffb567cbe7d7947a53ae3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5e419908535ffb567cbe7d7947a53ae3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5e419908535ffb567cbe7d7947a53ae3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_5e419908535ffb567cbe7d7947a53ae3->m_frame.f_lineno = 818;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_raw_false_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 818;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_2 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_5e419908535ffb567cbe7d7947a53ae3->m_frame.f_lineno = 819;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_vars_none_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 819;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_1 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_pop );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 820;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_unicode_plain_fallback;
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 820;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    frame_5e419908535ffb567cbe7d7947a53ae3->m_frame.f_lineno = 820;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 820;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_fallback == NULL );
    var_fallback = tmp_assign_source_1;

    // Tried code:
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__get );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_dircall_arg2_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_conv;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 2, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_3_complex_call_helper_pos_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_41__get_conv );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_5e419908535ffb567cbe7d7947a53ae3 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_5e419908535ffb567cbe7d7947a53ae3, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_5e419908535ffb567cbe7d7947a53ae3, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyTuple_New( 2 );
    tmp_tuple_element_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoSectionError );

    if (unlikely( tmp_tuple_element_2 == NULL ))
    {
        tmp_tuple_element_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoSectionError );
    }

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_compare_right_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoSectionError" );
        exception_tb = NULL;

        exception_lineno = 823;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_compare_right_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoOptionError );

    if (unlikely( tmp_tuple_element_2 == NULL ))
    {
        tmp_tuple_element_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoOptionError );
    }

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_compare_right_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoOptionError" );
        exception_tb = NULL;

        exception_lineno = 823;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_compare_right_1, 1, tmp_tuple_element_2 );
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_1 );

        exception_lineno = 823;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_2 = var_fallback;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_compare_right_2 == NULL ))
    {
        tmp_compare_right_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_compare_right_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 824;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_is_1 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if ( tmp_is_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 825;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_5e419908535ffb567cbe7d7947a53ae3->m_frame) frame_5e419908535ffb567cbe7d7947a53ae3->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooo";
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_return_value = var_fallback;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 821;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_5e419908535ffb567cbe7d7947a53ae3->m_frame) frame_5e419908535ffb567cbe7d7947a53ae3->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooo";
    goto frame_exception_exit_1;
    branch_end_1:;
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_5e419908535ffb567cbe7d7947a53ae3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_5e419908535ffb567cbe7d7947a53ae3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_5e419908535ffb567cbe7d7947a53ae3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5e419908535ffb567cbe7d7947a53ae3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5e419908535ffb567cbe7d7947a53ae3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5e419908535ffb567cbe7d7947a53ae3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5e419908535ffb567cbe7d7947a53ae3,
        type_description_1,
        par_self,
        par_section,
        par_option,
        par_conv,
        par_kwargs,
        var_fallback
    );


    // Release cached frame.
    if ( frame_5e419908535ffb567cbe7d7947a53ae3 == cache_frame_5e419908535ffb567cbe7d7947a53ae3 )
    {
        Py_DECREF( frame_5e419908535ffb567cbe7d7947a53ae3 );
    }
    cache_frame_5e419908535ffb567cbe7d7947a53ae3 = NULL;

    assertFrameObject( frame_5e419908535ffb567cbe7d7947a53ae3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_41__get_conv );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_conv );
    Py_DECREF( par_conv );
    par_conv = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_fallback );
    Py_DECREF( var_fallback );
    var_fallback = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_conv );
    Py_DECREF( par_conv );
    par_conv = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_fallback );
    var_fallback = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_41__get_conv );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_42_getint( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_kwargs = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_dc9d3a3a388893342a3bf29832c2b90e = NULL;

    struct Nuitka_FrameObject *frame_dc9d3a3a388893342a3bf29832c2b90e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dc9d3a3a388893342a3bf29832c2b90e, codeobj_dc9d3a3a388893342a3bf29832c2b90e, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_dc9d3a3a388893342a3bf29832c2b90e = cache_frame_dc9d3a3a388893342a3bf29832c2b90e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dc9d3a3a388893342a3bf29832c2b90e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dc9d3a3a388893342a3bf29832c2b90e ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_dc9d3a3a388893342a3bf29832c2b90e->m_frame.f_lineno = 831;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_raw_false_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 831;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_2 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_dc9d3a3a388893342a3bf29832c2b90e->m_frame.f_lineno = 832;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_vars_none_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_1 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_setdefault );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 833;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_unicode_plain_fallback;
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 833;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    frame_dc9d3a3a388893342a3bf29832c2b90e->m_frame.f_lineno = 833;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 833;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__get_conv );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 834;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = (PyObject *)&PyInt_Type;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 2, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_3_complex_call_helper_pos_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 834;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dc9d3a3a388893342a3bf29832c2b90e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_dc9d3a3a388893342a3bf29832c2b90e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dc9d3a3a388893342a3bf29832c2b90e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dc9d3a3a388893342a3bf29832c2b90e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dc9d3a3a388893342a3bf29832c2b90e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dc9d3a3a388893342a3bf29832c2b90e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dc9d3a3a388893342a3bf29832c2b90e,
        type_description_1,
        par_self,
        par_section,
        par_option,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_dc9d3a3a388893342a3bf29832c2b90e == cache_frame_dc9d3a3a388893342a3bf29832c2b90e )
    {
        Py_DECREF( frame_dc9d3a3a388893342a3bf29832c2b90e );
    }
    cache_frame_dc9d3a3a388893342a3bf29832c2b90e = NULL;

    assertFrameObject( frame_dc9d3a3a388893342a3bf29832c2b90e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_42_getint );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_42_getint );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_43_getfloat( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_kwargs = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_feac3581a44afac5b067457ac2606c93 = NULL;

    struct Nuitka_FrameObject *frame_feac3581a44afac5b067457ac2606c93;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_feac3581a44afac5b067457ac2606c93, codeobj_feac3581a44afac5b067457ac2606c93, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_feac3581a44afac5b067457ac2606c93 = cache_frame_feac3581a44afac5b067457ac2606c93;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_feac3581a44afac5b067457ac2606c93 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_feac3581a44afac5b067457ac2606c93 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_feac3581a44afac5b067457ac2606c93->m_frame.f_lineno = 838;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_raw_false_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_2 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_feac3581a44afac5b067457ac2606c93->m_frame.f_lineno = 839;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_vars_none_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 839;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_1 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_setdefault );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 840;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_unicode_plain_fallback;
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 840;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    frame_feac3581a44afac5b067457ac2606c93->m_frame.f_lineno = 840;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 840;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__get_conv );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = (PyObject *)&PyFloat_Type;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 2, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_3_complex_call_helper_pos_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_feac3581a44afac5b067457ac2606c93 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_feac3581a44afac5b067457ac2606c93 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_feac3581a44afac5b067457ac2606c93 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_feac3581a44afac5b067457ac2606c93, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_feac3581a44afac5b067457ac2606c93->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_feac3581a44afac5b067457ac2606c93, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_feac3581a44afac5b067457ac2606c93,
        type_description_1,
        par_self,
        par_section,
        par_option,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_feac3581a44afac5b067457ac2606c93 == cache_frame_feac3581a44afac5b067457ac2606c93 )
    {
        Py_DECREF( frame_feac3581a44afac5b067457ac2606c93 );
    }
    cache_frame_feac3581a44afac5b067457ac2606c93 = NULL;

    assertFrameObject( frame_feac3581a44afac5b067457ac2606c93 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_43_getfloat );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_43_getfloat );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_44_getboolean( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_kwargs = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_3af5314f549e28ccdcc3972a01671d47 = NULL;

    struct Nuitka_FrameObject *frame_3af5314f549e28ccdcc3972a01671d47;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3af5314f549e28ccdcc3972a01671d47, codeobj_3af5314f549e28ccdcc3972a01671d47, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3af5314f549e28ccdcc3972a01671d47 = cache_frame_3af5314f549e28ccdcc3972a01671d47;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3af5314f549e28ccdcc3972a01671d47 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3af5314f549e28ccdcc3972a01671d47 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_3af5314f549e28ccdcc3972a01671d47->m_frame.f_lineno = 845;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_raw_false_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 845;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_2 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_3af5314f549e28ccdcc3972a01671d47->m_frame.f_lineno = 846;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_vars_none_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 846;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_1 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_setdefault );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_unicode_plain_fallback;
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 847;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    frame_3af5314f549e28ccdcc3972a01671d47->m_frame.f_lineno = 847;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__get_conv );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 848;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_section;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 1, tmp_tuple_element_1 );
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__convert_to_boolean );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_dircall_arg1_1 );
        Py_DECREF( tmp_dircall_arg2_1 );

        exception_lineno = 848;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 2, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_3_complex_call_helper_pos_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 848;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3af5314f549e28ccdcc3972a01671d47 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3af5314f549e28ccdcc3972a01671d47 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3af5314f549e28ccdcc3972a01671d47 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3af5314f549e28ccdcc3972a01671d47, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3af5314f549e28ccdcc3972a01671d47->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3af5314f549e28ccdcc3972a01671d47, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3af5314f549e28ccdcc3972a01671d47,
        type_description_1,
        par_self,
        par_section,
        par_option,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_3af5314f549e28ccdcc3972a01671d47 == cache_frame_3af5314f549e28ccdcc3972a01671d47 )
    {
        Py_DECREF( frame_3af5314f549e28ccdcc3972a01671d47 );
    }
    cache_frame_3af5314f549e28ccdcc3972a01671d47 = NULL;

    assertFrameObject( frame_3af5314f549e28ccdcc3972a01671d47 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_44_getboolean );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_44_getboolean );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_45_items( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    struct Nuitka_CellObject *par_section = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *par_raw = python_pars[ 2 ];
    PyObject *par_vars = python_pars[ 3 ];
    struct Nuitka_CellObject *var_d = PyCell_EMPTY();
    PyObject *var_key = NULL;
    PyObject *var_value = NULL;
    PyObject *var_value_getter = NULL;
    PyObject *var_option = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_list_contraction_1__$0 = NULL;
    PyObject *tmp_list_contraction_1__contraction_result = NULL;
    PyObject *tmp_list_contraction_1__iter_value_0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *tmp_append_list_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    int tmp_exc_match_exception_match_1;
    bool tmp_is_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_object_name_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_type_name_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_78a9953e49c06d6508c397cd361923f0 = NULL;

    struct Nuitka_FrameObject *frame_78a9953e49c06d6508c397cd361923f0;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_78a9953e49c06d6508c397cd361923f0, codeobj_78a9953e49c06d6508c397cd361923f0, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_78a9953e49c06d6508c397cd361923f0 = cache_frame_78a9953e49c06d6508c397cd361923f0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_78a9953e49c06d6508c397cd361923f0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_78a9953e49c06d6508c397cd361923f0 ) == 2 ); // Frame stack

    // Framed code:
    if ( par_section == NULL )
    {
        tmp_compare_left_1 = NULL;
    }
    else
    {
        tmp_compare_left_1 = PyCell_GET( par_section );
    }

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "section" );
        exception_tb = NULL;

        exception_lineno = 862;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_compare_right_1 == NULL ))
    {
        tmp_compare_right_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 862;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }

    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_RawConfigParser );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RawConfigParser );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "RawConfigParser" );
        exception_tb = NULL;

        exception_lineno = 863;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }

    if ( par_self == NULL )
    {
        tmp_object_name_1 = NULL;
    }
    else
    {
        tmp_object_name_1 = PyCell_GET( par_self );
    }

    if ( tmp_object_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;

        exception_lineno = 863;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }

    tmp_called_instance_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 863;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    frame_78a9953e49c06d6508c397cd361923f0->m_frame.f_lineno = 863;
    tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_items );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 863;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_1:;
    if ( par_self == NULL )
    {
        tmp_source_name_1 = NULL;
    }
    else
    {
        tmp_source_name_1 = PyCell_GET( par_self );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;

        exception_lineno = 864;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }

    tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__defaults );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 864;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    frame_78a9953e49c06d6508c397cd361923f0->m_frame.f_lineno = 864;
    tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_copy );
    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 864;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = PyCell_GET( var_d );
        PyCell_SET( var_d, tmp_assign_source_1 );
        Py_XDECREF( old );
    }

    // Tried code:
    if ( var_d == NULL )
    {
        tmp_source_name_2 = NULL;
    }
    else
    {
        tmp_source_name_2 = PyCell_GET( var_d );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "d" );
        exception_tb = NULL;

        exception_lineno = 866;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_2;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_update );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 866;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_2;
    }
    if ( par_self == NULL )
    {
        tmp_source_name_3 = NULL;
    }
    else
    {
        tmp_source_name_3 = PyCell_GET( par_self );
    }

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;

        exception_lineno = 866;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_2;
    }

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__sections );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 866;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_2;
    }
    if ( par_section == NULL )
    {
        tmp_subscript_name_1 = NULL;
    }
    else
    {
        tmp_subscript_name_1 = PyCell_GET( par_section );
    }

    if ( tmp_subscript_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "section" );
        exception_tb = NULL;

        exception_lineno = 866;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 866;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_2;
    }
    frame_78a9953e49c06d6508c397cd361923f0->m_frame.f_lineno = 866;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 866;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_78a9953e49c06d6508c397cd361923f0 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_78a9953e49c06d6508c397cd361923f0, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_78a9953e49c06d6508c397cd361923f0, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 867;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    if ( par_section == NULL )
    {
        tmp_compare_left_3 = NULL;
    }
    else
    {
        tmp_compare_left_3 = PyCell_GET( par_section );
    }

    if ( tmp_compare_left_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "section" );
        exception_tb = NULL;

        exception_lineno = 868;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }

    if ( par_self == NULL )
    {
        tmp_source_name_4 = NULL;
    }
    else
    {
        tmp_source_name_4 = PyCell_GET( par_self );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;

        exception_lineno = 868;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }

    tmp_compare_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_default_section );
    if ( tmp_compare_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_3 );

        exception_lineno = 868;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_3 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoSectionError );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoSectionError );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoSectionError" );
        exception_tb = NULL;

        exception_lineno = 869;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }

    if ( par_section == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( par_section );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "section" );
        exception_tb = NULL;

        exception_lineno = 869;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }

    frame_78a9953e49c06d6508c397cd361923f0->m_frame.f_lineno = 869;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 869;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 869;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ccoocoooo";
    goto frame_exception_exit_1;
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 865;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_78a9953e49c06d6508c397cd361923f0->m_frame) frame_78a9953e49c06d6508c397cd361923f0->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ccoocoooo";
    goto frame_exception_exit_1;
    branch_end_2:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_45_items );
    return NULL;
    // End of try:
    try_end_1:;
    tmp_cond_value_1 = par_vars;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 871;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_instance_3 = par_vars;

    CHECK_OBJECT( tmp_called_instance_3 );
    frame_78a9953e49c06d6508c397cd361923f0->m_frame.f_lineno = 872;
    tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_items );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 872;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 872;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ccoocoooo";
            exception_lineno = 872;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 872;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ccoocoooo";
        exception_lineno = 872;
        goto try_except_handler_5;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ccoocoooo";
        exception_lineno = 872;
        goto try_except_handler_5;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ccoocoooo";
                exception_lineno = 872;
                goto try_except_handler_5;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ccoocoooo";
        exception_lineno = 872;
        goto try_except_handler_5;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_4;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_3;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = var_key;
        var_key = tmp_assign_source_7;
        Py_INCREF( var_key );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_8 );
    {
        PyObject *old = var_value;
        var_value = tmp_assign_source_8;
        Py_INCREF( var_value );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_ass_subvalue_1 = var_value;

    CHECK_OBJECT( tmp_ass_subvalue_1 );
    if ( var_d == NULL )
    {
        tmp_ass_subscribed_1 = NULL;
    }
    else
    {
        tmp_ass_subscribed_1 = PyCell_GET( var_d );
    }

    if ( tmp_ass_subscribed_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "d" );
        exception_tb = NULL;

        exception_lineno = 873;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_3;
    }

    if ( par_self == NULL )
    {
        tmp_called_instance_4 = NULL;
    }
    else
    {
        tmp_called_instance_4 = PyCell_GET( par_self );
    }

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;

        exception_lineno = 873;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_3;
    }

    tmp_args_element_name_3 = var_key;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_78a9953e49c06d6508c397cd361923f0->m_frame.f_lineno = 873;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_ass_subscript_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_optionxform, call_args );
    }

    if ( tmp_ass_subscript_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 873;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_3;
    }
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 873;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_3;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 872;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_4:;
    tmp_assign_source_9 = MAKE_FUNCTION_backports$configparser$$$function_45_items$$$function_1_lambda( var_d, par_section, par_self );
    assert( var_value_getter == NULL );
    var_value_getter = tmp_assign_source_9;

    tmp_cond_value_2 = par_raw;

    CHECK_OBJECT( tmp_cond_value_2 );
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 876;
        type_description_1 = "ccoocoooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_10 = MAKE_FUNCTION_backports$configparser$$$function_45_items$$$function_2_lambda( var_d );
    {
        PyObject *old = var_value_getter;
        assert( old != NULL );
        var_value_getter = tmp_assign_source_10;
        Py_DECREF( old );
    }

    branch_no_5:;
    // Tried code:
    if ( var_d == NULL )
    {
        tmp_called_instance_5 = NULL;
    }
    else
    {
        tmp_called_instance_5 = PyCell_GET( var_d );
    }

    if ( tmp_called_instance_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "d" );
        exception_tb = NULL;

        exception_lineno = 878;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_6;
    }

    frame_78a9953e49c06d6508c397cd361923f0->m_frame.f_lineno = 878;
    tmp_iter_arg_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_keys );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 878;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_6;
    }
    tmp_assign_source_11 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 878;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_6;
    }
    assert( tmp_list_contraction_1__$0 == NULL );
    tmp_list_contraction_1__$0 = tmp_assign_source_11;

    tmp_assign_source_12 = PyList_New( 0 );
    assert( tmp_list_contraction_1__contraction_result == NULL );
    tmp_list_contraction_1__contraction_result = tmp_assign_source_12;

    loop_start_2:;
    tmp_next_source_2 = tmp_list_contraction_1__$0;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_13 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ccoocoooo";
            exception_lineno = 878;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_list_contraction_1__iter_value_0;
        tmp_list_contraction_1__iter_value_0 = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    tmp_assign_source_14 = tmp_list_contraction_1__iter_value_0;

    CHECK_OBJECT( tmp_assign_source_14 );
    {
        PyObject *old = var_option;
        var_option = tmp_assign_source_14;
        Py_INCREF( var_option );
        Py_XDECREF( old );
    }

    tmp_append_list_1 = tmp_list_contraction_1__contraction_result;

    CHECK_OBJECT( tmp_append_list_1 );
    tmp_append_value_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_append_value_1, 0, tmp_tuple_element_1 );
    tmp_called_name_3 = var_value_getter;

    CHECK_OBJECT( tmp_called_name_3 );
    tmp_args_element_name_4 = var_option;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_78a9953e49c06d6508c397cd361923f0->m_frame.f_lineno = 878;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_append_value_1 );

        exception_lineno = 878;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_append_value_1, 1, tmp_tuple_element_1 );
    assert( PyList_Check( tmp_append_list_1 ) );
    tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 878;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_6;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 878;
        type_description_1 = "ccoocoooo";
        goto try_except_handler_6;
    }
    goto loop_start_2;
    loop_end_2:;
    tmp_outline_return_value_1 = tmp_list_contraction_1__contraction_result;

    CHECK_OBJECT( tmp_outline_return_value_1 );
    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_6;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_45_items );
    return NULL;
    // Return handler code:
    try_return_handler_6:;
    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__$0 );
    Py_DECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__contraction_result );
    Py_DECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    Py_XDECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_45_items );
    return NULL;
    outline_result_1:;
    tmp_return_value = tmp_outline_return_value_1;
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_78a9953e49c06d6508c397cd361923f0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_78a9953e49c06d6508c397cd361923f0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_78a9953e49c06d6508c397cd361923f0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_78a9953e49c06d6508c397cd361923f0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_78a9953e49c06d6508c397cd361923f0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_78a9953e49c06d6508c397cd361923f0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_78a9953e49c06d6508c397cd361923f0,
        type_description_1,
        par_self,
        par_section,
        par_raw,
        par_vars,
        var_d,
        var_key,
        var_value,
        var_value_getter,
        var_option
    );


    // Release cached frame.
    if ( frame_78a9953e49c06d6508c397cd361923f0 == cache_frame_78a9953e49c06d6508c397cd361923f0 )
    {
        Py_DECREF( frame_78a9953e49c06d6508c397cd361923f0 );
    }
    cache_frame_78a9953e49c06d6508c397cd361923f0 = NULL;

    assertFrameObject( frame_78a9953e49c06d6508c397cd361923f0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_45_items );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_raw );
    Py_DECREF( par_raw );
    par_raw = NULL;

    CHECK_OBJECT( (PyObject *)par_vars );
    Py_DECREF( par_vars );
    par_vars = NULL;

    CHECK_OBJECT( (PyObject *)var_d );
    Py_DECREF( var_d );
    var_d = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_value_getter );
    var_value_getter = NULL;

    Py_XDECREF( var_option );
    var_option = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_raw );
    Py_DECREF( par_raw );
    par_raw = NULL;

    CHECK_OBJECT( (PyObject *)par_vars );
    Py_DECREF( par_vars );
    par_vars = NULL;

    CHECK_OBJECT( (PyObject *)var_d );
    Py_DECREF( var_d );
    var_d = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_value_getter );
    var_value_getter = NULL;

    Py_XDECREF( var_option );
    var_option = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_45_items );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_45_items$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_option = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_3dba0c8888c9537cf6af4d557f33ce7c = NULL;

    struct Nuitka_FrameObject *frame_3dba0c8888c9537cf6af4d557f33ce7c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3dba0c8888c9537cf6af4d557f33ce7c, codeobj_3dba0c8888c9537cf6af4d557f33ce7c, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3dba0c8888c9537cf6af4d557f33ce7c = cache_frame_3dba0c8888c9537cf6af4d557f33ce7c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3dba0c8888c9537cf6af4d557f33ce7c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3dba0c8888c9537cf6af4d557f33ce7c ) == 2 ); // Frame stack

    // Framed code:
    if ( self->m_closure[2] == NULL )
    {
        tmp_source_name_2 = NULL;
    }
    else
    {
        tmp_source_name_2 = PyCell_GET( self->m_closure[2] );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
        exception_tb = NULL;

        exception_lineno = 874;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__interpolation );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 874;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_before_get );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 874;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }
    if ( self->m_closure[2] == NULL )
    {
        tmp_args_element_name_1 = NULL;
    }
    else
    {
        tmp_args_element_name_1 = PyCell_GET( self->m_closure[2] );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
        exception_tb = NULL;

        exception_lineno = 874;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    if ( self->m_closure[1] == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "section" );
        exception_tb = NULL;

        exception_lineno = 875;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = par_option;

    CHECK_OBJECT( tmp_args_element_name_3 );
    if ( self->m_closure[0] == NULL )
    {
        tmp_subscribed_name_1 = NULL;
    }
    else
    {
        tmp_subscribed_name_1 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_subscribed_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "d" );
        exception_tb = NULL;

        exception_lineno = 875;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_1 = par_option;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_args_element_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 875;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }
    if ( self->m_closure[0] == NULL )
    {
        tmp_args_element_name_5 = NULL;
    }
    else
    {
        tmp_args_element_name_5 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "d" );
        exception_tb = NULL;

        exception_lineno = 875;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    frame_3dba0c8888c9537cf6af4d557f33ce7c->m_frame.f_lineno = 874;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 874;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3dba0c8888c9537cf6af4d557f33ce7c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3dba0c8888c9537cf6af4d557f33ce7c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3dba0c8888c9537cf6af4d557f33ce7c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3dba0c8888c9537cf6af4d557f33ce7c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3dba0c8888c9537cf6af4d557f33ce7c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3dba0c8888c9537cf6af4d557f33ce7c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3dba0c8888c9537cf6af4d557f33ce7c,
        type_description_1,
        par_option,
        self->m_closure[2],
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_3dba0c8888c9537cf6af4d557f33ce7c == cache_frame_3dba0c8888c9537cf6af4d557f33ce7c )
    {
        Py_DECREF( frame_3dba0c8888c9537cf6af4d557f33ce7c );
    }
    cache_frame_3dba0c8888c9537cf6af4d557f33ce7c = NULL;

    assertFrameObject( frame_3dba0c8888c9537cf6af4d557f33ce7c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_45_items$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_45_items$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_45_items$$$function_2_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_option = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_b28dd019ed58c09f14d3689247505663 = NULL;

    struct Nuitka_FrameObject *frame_b28dd019ed58c09f14d3689247505663;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b28dd019ed58c09f14d3689247505663, codeobj_b28dd019ed58c09f14d3689247505663, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_b28dd019ed58c09f14d3689247505663 = cache_frame_b28dd019ed58c09f14d3689247505663;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b28dd019ed58c09f14d3689247505663 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b28dd019ed58c09f14d3689247505663 ) == 2 ); // Frame stack

    // Framed code:
    if ( self->m_closure[0] == NULL )
    {
        tmp_subscribed_name_1 = NULL;
    }
    else
    {
        tmp_subscribed_name_1 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "d" );
        exception_tb = NULL;

        exception_lineno = 877;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_1 = par_option;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 877;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b28dd019ed58c09f14d3689247505663 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b28dd019ed58c09f14d3689247505663 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b28dd019ed58c09f14d3689247505663 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b28dd019ed58c09f14d3689247505663, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b28dd019ed58c09f14d3689247505663->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b28dd019ed58c09f14d3689247505663, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b28dd019ed58c09f14d3689247505663,
        type_description_1,
        par_option,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_b28dd019ed58c09f14d3689247505663 == cache_frame_b28dd019ed58c09f14d3689247505663 )
    {
        Py_DECREF( frame_b28dd019ed58c09f14d3689247505663 );
    }
    cache_frame_b28dd019ed58c09f14d3689247505663 = NULL;

    assertFrameObject( frame_b28dd019ed58c09f14d3689247505663 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_45_items$$$function_2_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_45_items$$$function_2_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_46_popitem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_key = NULL;
    PyObject *var_value = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_109729f46230a734099fdc1f60bd4f48 = NULL;

    struct Nuitka_FrameObject *frame_109729f46230a734099fdc1f60bd4f48;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_109729f46230a734099fdc1f60bd4f48, codeobj_109729f46230a734099fdc1f60bd4f48, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_109729f46230a734099fdc1f60bd4f48 = cache_frame_109729f46230a734099fdc1f60bd4f48;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_109729f46230a734099fdc1f60bd4f48 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_109729f46230a734099fdc1f60bd4f48 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_109729f46230a734099fdc1f60bd4f48->m_frame.f_lineno = 887;
    tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_sections );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 887;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 887;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            exception_lineno = 887;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    assert( var_key == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_key = tmp_assign_source_3;

    tmp_subscribed_name_1 = par_self;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = var_key;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_assign_source_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 888;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    assert( var_value == NULL );
    var_value = tmp_assign_source_4;

    tmp_delsubscr_target_1 = par_self;

    CHECK_OBJECT( tmp_delsubscr_target_1 );
    tmp_delsubscr_subscript_1 = var_key;

    CHECK_OBJECT( tmp_delsubscr_subscript_1 );
    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 889;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_key;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_value;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto try_return_handler_2;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 887;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__iter_value );
    Py_DECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_raise_type_1 = PyExc_KeyError;
    exception_type = tmp_raise_type_1;
    Py_INCREF( tmp_raise_type_1 );
    exception_lineno = 891;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_109729f46230a734099fdc1f60bd4f48 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_109729f46230a734099fdc1f60bd4f48 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_109729f46230a734099fdc1f60bd4f48 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_109729f46230a734099fdc1f60bd4f48, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_109729f46230a734099fdc1f60bd4f48->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_109729f46230a734099fdc1f60bd4f48, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_109729f46230a734099fdc1f60bd4f48,
        type_description_1,
        par_self,
        var_key,
        var_value
    );


    // Release cached frame.
    if ( frame_109729f46230a734099fdc1f60bd4f48 == cache_frame_109729f46230a734099fdc1f60bd4f48 )
    {
        Py_DECREF( frame_109729f46230a734099fdc1f60bd4f48 );
    }
    cache_frame_109729f46230a734099fdc1f60bd4f48 = NULL;

    assertFrameObject( frame_109729f46230a734099fdc1f60bd4f48 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_46_popitem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_key );
    Py_DECREF( var_key );
    var_key = NULL;

    CHECK_OBJECT( (PyObject *)var_value );
    Py_DECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_46_popitem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_47_optionxform( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_optionstr = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_4a224452ed067dc5ed6241cca7d548cd = NULL;

    struct Nuitka_FrameObject *frame_4a224452ed067dc5ed6241cca7d548cd;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4a224452ed067dc5ed6241cca7d548cd, codeobj_4a224452ed067dc5ed6241cca7d548cd, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_4a224452ed067dc5ed6241cca7d548cd = cache_frame_4a224452ed067dc5ed6241cca7d548cd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4a224452ed067dc5ed6241cca7d548cd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4a224452ed067dc5ed6241cca7d548cd ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_optionstr;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_4a224452ed067dc5ed6241cca7d548cd->m_frame.f_lineno = 894;
    tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a224452ed067dc5ed6241cca7d548cd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a224452ed067dc5ed6241cca7d548cd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a224452ed067dc5ed6241cca7d548cd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4a224452ed067dc5ed6241cca7d548cd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4a224452ed067dc5ed6241cca7d548cd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4a224452ed067dc5ed6241cca7d548cd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4a224452ed067dc5ed6241cca7d548cd,
        type_description_1,
        par_self,
        par_optionstr
    );


    // Release cached frame.
    if ( frame_4a224452ed067dc5ed6241cca7d548cd == cache_frame_4a224452ed067dc5ed6241cca7d548cd )
    {
        Py_DECREF( frame_4a224452ed067dc5ed6241cca7d548cd );
    }
    cache_frame_4a224452ed067dc5ed6241cca7d548cd = NULL;

    assertFrameObject( frame_4a224452ed067dc5ed6241cca7d548cd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_47_optionxform );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_optionstr );
    Py_DECREF( par_optionstr );
    par_optionstr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_optionstr );
    Py_DECREF( par_optionstr );
    par_optionstr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_47_optionxform );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_48_has_option( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_operand_name_1;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_09f24ec8ef427033a6c980f7171c595d = NULL;

    struct Nuitka_FrameObject *frame_09f24ec8ef427033a6c980f7171c595d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_09f24ec8ef427033a6c980f7171c595d, codeobj_09f24ec8ef427033a6c980f7171c595d, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_09f24ec8ef427033a6c980f7171c595d = cache_frame_09f24ec8ef427033a6c980f7171c595d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_09f24ec8ef427033a6c980f7171c595d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_09f24ec8ef427033a6c980f7171c595d ) == 2 ); // Frame stack

    // Framed code:
    tmp_operand_name_1 = par_section;

    CHECK_OBJECT( tmp_operand_name_1 );
    tmp_or_left_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 900;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 900;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_compexpr_left_1 = par_section;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_default_section );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 900;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_or_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 900;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    Py_INCREF( tmp_or_left_value_1 );
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 900;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_option;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_09f24ec8ef427033a6c980f7171c595d->m_frame.f_lineno = 901;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_optionxform, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 901;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_option;
        assert( old != NULL );
        par_option = tmp_assign_source_1;
        Py_DECREF( old );
    }

    tmp_compexpr_left_2 = par_option;

    CHECK_OBJECT( tmp_compexpr_left_2 );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__defaults );
    if ( tmp_compexpr_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 902;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_right_2 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 902;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_1 = par_section;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__sections );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 903;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_return_value = Py_False;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_called_instance_2 = par_self;

    CHECK_OBJECT( tmp_called_instance_2 );
    tmp_args_element_name_2 = par_option;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_09f24ec8ef427033a6c980f7171c595d->m_frame.f_lineno = 906;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_optionxform, call_args );
    }

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 906;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_option;
        assert( old != NULL );
        par_option = tmp_assign_source_2;
        Py_DECREF( old );
    }

    tmp_compexpr_left_3 = par_option;

    CHECK_OBJECT( tmp_compexpr_left_3 );
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__sections );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 907;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = par_section;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_compexpr_right_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_compexpr_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 907;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_right_3 );
    if ( tmp_or_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 907;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    assert( !(tmp_or_left_truth_2 == -1) );
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    tmp_compexpr_left_4 = par_option;

    CHECK_OBJECT( tmp_compexpr_left_4 );
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_compexpr_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__defaults );
    if ( tmp_compexpr_right_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_or_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_right_4 );
    if ( tmp_or_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_return_value = tmp_or_left_value_2;
    or_end_2:;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_end_2:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_09f24ec8ef427033a6c980f7171c595d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_09f24ec8ef427033a6c980f7171c595d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_09f24ec8ef427033a6c980f7171c595d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_09f24ec8ef427033a6c980f7171c595d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_09f24ec8ef427033a6c980f7171c595d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_09f24ec8ef427033a6c980f7171c595d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_09f24ec8ef427033a6c980f7171c595d,
        type_description_1,
        par_self,
        par_section,
        par_option
    );


    // Release cached frame.
    if ( frame_09f24ec8ef427033a6c980f7171c595d == cache_frame_09f24ec8ef427033a6c980f7171c595d )
    {
        Py_DECREF( frame_09f24ec8ef427033a6c980f7171c595d );
    }
    cache_frame_09f24ec8ef427033a6c980f7171c595d = NULL;

    assertFrameObject( frame_09f24ec8ef427033a6c980f7171c595d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_48_has_option );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_48_has_option );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_49_set( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_value = python_pars[ 3 ];
    PyObject *var_sectdict = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_operand_name_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_fd6b6f72edb252c36d2235a132eb9d28 = NULL;

    struct Nuitka_FrameObject *frame_fd6b6f72edb252c36d2235a132eb9d28;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fd6b6f72edb252c36d2235a132eb9d28, codeobj_fd6b6f72edb252c36d2235a132eb9d28, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_fd6b6f72edb252c36d2235a132eb9d28 = cache_frame_fd6b6f72edb252c36d2235a132eb9d28;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fd6b6f72edb252c36d2235a132eb9d28 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fd6b6f72edb252c36d2235a132eb9d28 ) == 2 ); // Frame stack

    // Framed code:
    tmp_cond_value_1 = par_value;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 912;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__interpolation );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 913;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_section;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_option;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_value;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_fd6b6f72edb252c36d2235a132eb9d28->m_frame.f_lineno = 913;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS4( tmp_called_instance_1, const_str_plain_before_set, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 913;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_value;
        assert( old != NULL );
        par_value = tmp_assign_source_1;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_operand_name_1 = par_section;

    CHECK_OBJECT( tmp_operand_name_1 );
    tmp_or_left_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 915;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 915;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_compexpr_left_1 = par_section;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_default_section );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 915;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 915;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_2 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    Py_INCREF( tmp_or_left_value_1 );
    tmp_cond_value_2 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 915;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__defaults );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 916;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_sectdict == NULL );
    var_sectdict = tmp_assign_source_2;

    goto branch_end_2;
    branch_no_2:;
    // Tried code:
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__sections );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 919;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_subscript_name_1 = par_section;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_assign_source_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 919;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    assert( var_sectdict == NULL );
    var_sectdict = tmp_assign_source_3;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_fd6b6f72edb252c36d2235a132eb9d28 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_fd6b6f72edb252c36d2235a132eb9d28, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_fd6b6f72edb252c36d2235a132eb9d28, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 920;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_from_none );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_from_none );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "from_none" );
        exception_tb = NULL;

        exception_lineno = 921;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoSectionError );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoSectionError );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoSectionError" );
        exception_tb = NULL;

        exception_lineno = 921;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = par_section;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_fd6b6f72edb252c36d2235a132eb9d28->m_frame.f_lineno = 921;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 921;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_fd6b6f72edb252c36d2235a132eb9d28->m_frame.f_lineno = 921;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 921;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 921;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    goto branch_end_3;
    branch_no_3:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 918;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_fd6b6f72edb252c36d2235a132eb9d28->m_frame) frame_fd6b6f72edb252c36d2235a132eb9d28->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_end_3:;
    // End of try:
    try_end_1:;
    branch_end_2:;
    tmp_ass_subvalue_1 = par_value;

    CHECK_OBJECT( tmp_ass_subvalue_1 );
    tmp_ass_subscribed_1 = var_sectdict;

    CHECK_OBJECT( tmp_ass_subscribed_1 );
    tmp_called_instance_2 = par_self;

    CHECK_OBJECT( tmp_called_instance_2 );
    tmp_args_element_name_7 = par_option;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_fd6b6f72edb252c36d2235a132eb9d28->m_frame.f_lineno = 922;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_ass_subscript_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_optionxform, call_args );
    }

    if ( tmp_ass_subscript_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 922;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 922;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

#if 1
    RESTORE_FRAME_EXCEPTION( frame_fd6b6f72edb252c36d2235a132eb9d28 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_fd6b6f72edb252c36d2235a132eb9d28 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fd6b6f72edb252c36d2235a132eb9d28, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fd6b6f72edb252c36d2235a132eb9d28->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fd6b6f72edb252c36d2235a132eb9d28, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fd6b6f72edb252c36d2235a132eb9d28,
        type_description_1,
        par_self,
        par_section,
        par_option,
        par_value,
        var_sectdict
    );


    // Release cached frame.
    if ( frame_fd6b6f72edb252c36d2235a132eb9d28 == cache_frame_fd6b6f72edb252c36d2235a132eb9d28 )
    {
        Py_DECREF( frame_fd6b6f72edb252c36d2235a132eb9d28 );
    }
    cache_frame_fd6b6f72edb252c36d2235a132eb9d28 = NULL;

    assertFrameObject( frame_fd6b6f72edb252c36d2235a132eb9d28 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_49_set );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_sectdict );
    Py_DECREF( var_sectdict );
    var_sectdict = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    Py_XDECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_sectdict );
    var_sectdict = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_49_set );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_50_write( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *par_space_around_delimiters = python_pars[ 2 ];
    PyObject *var_d = NULL;
    PyObject *var_section = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_8aac508308ce783222341b08cc71d0b4 = NULL;

    struct Nuitka_FrameObject *frame_8aac508308ce783222341b08cc71d0b4;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8aac508308ce783222341b08cc71d0b4, codeobj_8aac508308ce783222341b08cc71d0b4, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_8aac508308ce783222341b08cc71d0b4 = cache_frame_8aac508308ce783222341b08cc71d0b4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8aac508308ce783222341b08cc71d0b4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8aac508308ce783222341b08cc71d0b4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_cond_value_1 = par_space_around_delimiters;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 930;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = const_unicode_digest_f84bc8ebfecfda0276b1d26eed2ae3f4;
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_format );
    assert( tmp_called_name_1 != NULL );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__delimiters );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 931;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = const_int_0;
    tmp_args_element_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 931;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_8aac508308ce783222341b08cc71d0b4->m_frame.f_lineno = 931;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 931;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_d == NULL );
    var_d = tmp_assign_source_1;

    goto branch_end_1;
    branch_no_1:;
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__delimiters );
    if ( tmp_subscribed_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 933;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_2 = const_int_0;
    tmp_assign_source_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    Py_DECREF( tmp_subscribed_name_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 933;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_d == NULL );
    var_d = tmp_assign_source_2;

    branch_end_1:;
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_cond_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__defaults );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 934;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 934;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__write_section );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = par_fp;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_6 = par_self;

    CHECK_OBJECT( tmp_source_name_6 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_default_section );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 935;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_7 = par_self;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__defaults );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 936;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_8aac508308ce783222341b08cc71d0b4->m_frame.f_lineno = 936;
    tmp_args_element_name_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_items );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 936;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = var_d;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_8aac508308ce783222341b08cc71d0b4->m_frame.f_lineno = 935;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_2:;
    tmp_source_name_8 = par_self;

    CHECK_OBJECT( tmp_source_name_8 );
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__sections );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 937;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 937;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooo";
            exception_lineno = 937;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_5 );
    {
        PyObject *old = var_section;
        var_section = tmp_assign_source_5;
        Py_INCREF( var_section );
        Py_XDECREF( old );
    }

    tmp_source_name_9 = par_self;

    CHECK_OBJECT( tmp_source_name_9 );
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__write_section );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 938;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_6 = par_fp;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_args_element_name_7 = var_section;

    CHECK_OBJECT( tmp_args_element_name_7 );
    tmp_source_name_10 = par_self;

    CHECK_OBJECT( tmp_source_name_10 );
    tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__sections );
    if ( tmp_subscribed_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 939;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_subscript_name_3 = var_section;

    CHECK_OBJECT( tmp_subscript_name_3 );
    tmp_called_instance_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    Py_DECREF( tmp_subscribed_name_3 );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 939;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    frame_8aac508308ce783222341b08cc71d0b4->m_frame.f_lineno = 939;
    tmp_args_element_name_8 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_items );
    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 939;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_9 = var_d;

    CHECK_OBJECT( tmp_args_element_name_9 );
    frame_8aac508308ce783222341b08cc71d0b4->m_frame.f_lineno = 938;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 938;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 937;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8aac508308ce783222341b08cc71d0b4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8aac508308ce783222341b08cc71d0b4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8aac508308ce783222341b08cc71d0b4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8aac508308ce783222341b08cc71d0b4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8aac508308ce783222341b08cc71d0b4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8aac508308ce783222341b08cc71d0b4,
        type_description_1,
        par_self,
        par_fp,
        par_space_around_delimiters,
        var_d,
        var_section
    );


    // Release cached frame.
    if ( frame_8aac508308ce783222341b08cc71d0b4 == cache_frame_8aac508308ce783222341b08cc71d0b4 )
    {
        Py_DECREF( frame_8aac508308ce783222341b08cc71d0b4 );
    }
    cache_frame_8aac508308ce783222341b08cc71d0b4 = NULL;

    assertFrameObject( frame_8aac508308ce783222341b08cc71d0b4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_50_write );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_space_around_delimiters );
    Py_DECREF( par_space_around_delimiters );
    par_space_around_delimiters = NULL;

    CHECK_OBJECT( (PyObject *)var_d );
    Py_DECREF( var_d );
    var_d = NULL;

    Py_XDECREF( var_section );
    var_section = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_space_around_delimiters );
    Py_DECREF( par_space_around_delimiters );
    par_space_around_delimiters = NULL;

    Py_XDECREF( var_d );
    var_d = NULL;

    Py_XDECREF( var_section );
    var_section = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_50_write );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_51__write_section( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *par_section_name = python_pars[ 2 ];
    PyObject *par_section_items = python_pars[ 3 ];
    PyObject *par_delimiter = python_pars[ 4 ];
    PyObject *var_key = NULL;
    PyObject *var_value = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_operand_name_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_d717256835b597e7be6307bed192a9ab = NULL;

    struct Nuitka_FrameObject *frame_d717256835b597e7be6307bed192a9ab;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d717256835b597e7be6307bed192a9ab, codeobj_d717256835b597e7be6307bed192a9ab, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d717256835b597e7be6307bed192a9ab = cache_frame_d717256835b597e7be6307bed192a9ab;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d717256835b597e7be6307bed192a9ab );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d717256835b597e7be6307bed192a9ab ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_fp;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_write );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 943;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_1 = const_unicode_digest_72bee08aee2a6d2e313877610e96cf3f;
    tmp_args_element_name_2 = par_section_name;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_d717256835b597e7be6307bed192a9ab->m_frame.f_lineno = 943;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_format, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 943;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    frame_d717256835b597e7be6307bed192a9ab->m_frame.f_lineno = 943;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 943;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_iter_arg_1 = par_section_items;

    CHECK_OBJECT( tmp_iter_arg_1 );
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 944;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooo";
            exception_lineno = 944;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 944;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 944;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 944;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooo";
                exception_lineno = 944;
                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooooo";
        exception_lineno = 944;
        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = var_key;
        var_key = tmp_assign_source_6;
        Py_INCREF( var_key );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = var_value;
        var_value = tmp_assign_source_7;
        Py_INCREF( var_value );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__interpolation );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 945;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_3 = par_self;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_section_name;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_args_element_name_5 = var_key;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = var_value;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_d717256835b597e7be6307bed192a9ab->m_frame.f_lineno = 945;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_8 = CALL_METHOD_WITH_ARGS4( tmp_called_instance_2, const_str_plain_before_write, call_args );
    }

    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 945;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_value;
        assert( old != NULL );
        var_value = tmp_assign_source_8;
        Py_DECREF( old );
    }

    tmp_compexpr_left_1 = var_value;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_compexpr_right_1 = Py_None;
    tmp_or_left_value_1 = BOOL_FROM( tmp_compexpr_left_1 != tmp_compexpr_right_1 );
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    assert( !(tmp_or_left_truth_1 == -1) );
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__allow_no_value );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 947;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_or_right_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 947;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 947;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_left_name_1 = par_delimiter;

    CHECK_OBJECT( tmp_left_name_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_str );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "str" );
        exception_tb = NULL;

        exception_lineno = 948;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_7 = var_value;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_d717256835b597e7be6307bed192a9ab->m_frame.f_lineno = 948;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_called_instance_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_called_instance_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    frame_d717256835b597e7be6307bed192a9ab->m_frame.f_lineno = 948;
    tmp_right_name_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_d2d860e4cce3104a4798ae7fa69b2867_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_3 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_9 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_value;
        assert( old != NULL );
        var_value = tmp_assign_source_9;
        Py_DECREF( old );
    }

    goto branch_end_1;
    branch_no_1:;
    tmp_assign_source_10 = const_unicode_empty;
    {
        PyObject *old = var_value;
        assert( old != NULL );
        var_value = tmp_assign_source_10;
        Py_INCREF( var_value );
        Py_DECREF( old );
    }

    branch_end_1:;
    tmp_source_name_4 = par_fp;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 951;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_called_instance_4 = const_unicode_digest_e7d6c92e5f525c42a2b6d9279792135b;
    tmp_args_element_name_9 = var_key;

    CHECK_OBJECT( tmp_args_element_name_9 );
    tmp_args_element_name_10 = var_value;

    CHECK_OBJECT( tmp_args_element_name_10 );
    frame_d717256835b597e7be6307bed192a9ab->m_frame.f_lineno = 951;
    {
        PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10 };
        tmp_args_element_name_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_format, call_args );
    }

    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 951;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    frame_d717256835b597e7be6307bed192a9ab->m_frame.f_lineno = 951;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 951;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 944;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_called_instance_5 = par_fp;

    CHECK_OBJECT( tmp_called_instance_5 );
    frame_d717256835b597e7be6307bed192a9ab->m_frame.f_lineno = 952;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_write, &PyTuple_GET_ITEM( const_tuple_unicode_newline_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d717256835b597e7be6307bed192a9ab );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d717256835b597e7be6307bed192a9ab );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d717256835b597e7be6307bed192a9ab, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d717256835b597e7be6307bed192a9ab->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d717256835b597e7be6307bed192a9ab, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d717256835b597e7be6307bed192a9ab,
        type_description_1,
        par_self,
        par_fp,
        par_section_name,
        par_section_items,
        par_delimiter,
        var_key,
        var_value
    );


    // Release cached frame.
    if ( frame_d717256835b597e7be6307bed192a9ab == cache_frame_d717256835b597e7be6307bed192a9ab )
    {
        Py_DECREF( frame_d717256835b597e7be6307bed192a9ab );
    }
    cache_frame_d717256835b597e7be6307bed192a9ab = NULL;

    assertFrameObject( frame_d717256835b597e7be6307bed192a9ab );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_51__write_section );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_section_name );
    Py_DECREF( par_section_name );
    par_section_name = NULL;

    CHECK_OBJECT( (PyObject *)par_section_items );
    Py_DECREF( par_section_items );
    par_section_items = NULL;

    CHECK_OBJECT( (PyObject *)par_delimiter );
    Py_DECREF( par_delimiter );
    par_delimiter = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_section_name );
    Py_DECREF( par_section_name );
    par_section_name = NULL;

    CHECK_OBJECT( (PyObject *)par_section_items );
    Py_DECREF( par_section_items );
    par_section_items = NULL;

    CHECK_OBJECT( (PyObject *)par_delimiter );
    Py_DECREF( par_delimiter );
    par_delimiter = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_51__write_section );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_52_remove_option( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *var_sectdict = NULL;
    PyObject *var_existed = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_operand_name_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_0a1e04afecd3eca276cd28298ea7771e = NULL;

    struct Nuitka_FrameObject *frame_0a1e04afecd3eca276cd28298ea7771e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0a1e04afecd3eca276cd28298ea7771e, codeobj_0a1e04afecd3eca276cd28298ea7771e, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0a1e04afecd3eca276cd28298ea7771e = cache_frame_0a1e04afecd3eca276cd28298ea7771e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0a1e04afecd3eca276cd28298ea7771e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0a1e04afecd3eca276cd28298ea7771e ) == 2 ); // Frame stack

    // Framed code:
    tmp_operand_name_1 = par_section;

    CHECK_OBJECT( tmp_operand_name_1 );
    tmp_or_left_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_compexpr_left_1 = par_section;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_default_section );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    Py_INCREF( tmp_or_left_value_1 );
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 956;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__defaults );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 957;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_sectdict == NULL );
    var_sectdict = tmp_assign_source_1;

    goto branch_end_1;
    branch_no_1:;
    // Tried code:
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__sections );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 960;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_subscript_name_1 = par_section;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_assign_source_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 960;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    assert( var_sectdict == NULL );
    var_sectdict = tmp_assign_source_2;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_0a1e04afecd3eca276cd28298ea7771e );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_0a1e04afecd3eca276cd28298ea7771e, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_0a1e04afecd3eca276cd28298ea7771e, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_from_none );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_from_none );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "from_none" );
        exception_tb = NULL;

        exception_lineno = 962;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoSectionError );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoSectionError );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoSectionError" );
        exception_tb = NULL;

        exception_lineno = 962;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_section;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_0a1e04afecd3eca276cd28298ea7771e->m_frame.f_lineno = 962;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 962;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_0a1e04afecd3eca276cd28298ea7771e->m_frame.f_lineno = 962;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 962;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 962;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 959;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_0a1e04afecd3eca276cd28298ea7771e->m_frame) frame_0a1e04afecd3eca276cd28298ea7771e->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_end_2:;
    // End of try:
    try_end_1:;
    branch_end_1:;
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_3 = par_option;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_0a1e04afecd3eca276cd28298ea7771e->m_frame.f_lineno = 963;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_optionxform, call_args );
    }

    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 963;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_option;
        assert( old != NULL );
        par_option = tmp_assign_source_3;
        Py_DECREF( old );
    }

    tmp_compexpr_left_2 = par_option;

    CHECK_OBJECT( tmp_compexpr_left_2 );
    tmp_compexpr_right_2 = var_sectdict;

    CHECK_OBJECT( tmp_compexpr_right_2 );
    tmp_assign_source_4 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 964;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_existed == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var_existed = tmp_assign_source_4;

    tmp_cond_value_2 = var_existed;

    CHECK_OBJECT( tmp_cond_value_2 );
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 965;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_delsubscr_target_1 = var_sectdict;

    CHECK_OBJECT( tmp_delsubscr_target_1 );
    tmp_delsubscr_subscript_1 = par_option;

    CHECK_OBJECT( tmp_delsubscr_subscript_1 );
    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 966;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    branch_no_3:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_0a1e04afecd3eca276cd28298ea7771e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_0a1e04afecd3eca276cd28298ea7771e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0a1e04afecd3eca276cd28298ea7771e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0a1e04afecd3eca276cd28298ea7771e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0a1e04afecd3eca276cd28298ea7771e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0a1e04afecd3eca276cd28298ea7771e,
        type_description_1,
        par_self,
        par_section,
        par_option,
        var_sectdict,
        var_existed
    );


    // Release cached frame.
    if ( frame_0a1e04afecd3eca276cd28298ea7771e == cache_frame_0a1e04afecd3eca276cd28298ea7771e )
    {
        Py_DECREF( frame_0a1e04afecd3eca276cd28298ea7771e );
    }
    cache_frame_0a1e04afecd3eca276cd28298ea7771e = NULL;

    assertFrameObject( frame_0a1e04afecd3eca276cd28298ea7771e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_existed;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_52_remove_option );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)var_sectdict );
    Py_DECREF( var_sectdict );
    var_sectdict = NULL;

    CHECK_OBJECT( (PyObject *)var_existed );
    Py_DECREF( var_existed );
    var_existed = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    Py_XDECREF( var_sectdict );
    var_sectdict = NULL;

    Py_XDECREF( var_existed );
    var_existed = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_52_remove_option );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_53_remove_section( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *var_existed = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_subscript_2;
    PyObject *tmp_delsubscr_target_1;
    PyObject *tmp_delsubscr_target_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    static struct Nuitka_FrameObject *cache_frame_87161ff4786bfac1e552670a602c895f = NULL;

    struct Nuitka_FrameObject *frame_87161ff4786bfac1e552670a602c895f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_87161ff4786bfac1e552670a602c895f, codeobj_87161ff4786bfac1e552670a602c895f, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_87161ff4786bfac1e552670a602c895f = cache_frame_87161ff4786bfac1e552670a602c895f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_87161ff4786bfac1e552670a602c895f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_87161ff4786bfac1e552670a602c895f ) == 2 ); // Frame stack

    // Framed code:
    tmp_compexpr_left_1 = par_section;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__sections );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 971;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 971;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_existed == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_existed = tmp_assign_source_1;

    tmp_cond_value_1 = var_existed;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 972;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_delsubscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__sections );
    if ( tmp_delsubscr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 973;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_delsubscr_subscript_1 = par_section;

    CHECK_OBJECT( tmp_delsubscr_subscript_1 );
    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    Py_DECREF( tmp_delsubscr_target_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 973;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_delsubscr_target_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__proxies );
    if ( tmp_delsubscr_target_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 974;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_delsubscr_subscript_2 = par_section;

    CHECK_OBJECT( tmp_delsubscr_subscript_2 );
    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_2, tmp_delsubscr_subscript_2 );
    Py_DECREF( tmp_delsubscr_target_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 974;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_87161ff4786bfac1e552670a602c895f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_87161ff4786bfac1e552670a602c895f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_87161ff4786bfac1e552670a602c895f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_87161ff4786bfac1e552670a602c895f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_87161ff4786bfac1e552670a602c895f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_87161ff4786bfac1e552670a602c895f,
        type_description_1,
        par_self,
        par_section,
        var_existed
    );


    // Release cached frame.
    if ( frame_87161ff4786bfac1e552670a602c895f == cache_frame_87161ff4786bfac1e552670a602c895f )
    {
        Py_DECREF( frame_87161ff4786bfac1e552670a602c895f );
    }
    cache_frame_87161ff4786bfac1e552670a602c895f = NULL;

    assertFrameObject( frame_87161ff4786bfac1e552670a602c895f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_existed;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_53_remove_section );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)var_existed );
    Py_DECREF( var_existed );
    var_existed = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    Py_XDECREF( var_existed );
    var_existed = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_53_remove_section );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_54___getitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_4d9075612c6c82ef69847d9c6971ac19 = NULL;

    struct Nuitka_FrameObject *frame_4d9075612c6c82ef69847d9c6971ac19;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4d9075612c6c82ef69847d9c6971ac19, codeobj_4d9075612c6c82ef69847d9c6971ac19, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_4d9075612c6c82ef69847d9c6971ac19 = cache_frame_4d9075612c6c82ef69847d9c6971ac19;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4d9075612c6c82ef69847d9c6971ac19 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4d9075612c6c82ef69847d9c6971ac19 ) == 2 ); // Frame stack

    // Framed code:
    tmp_compexpr_left_1 = par_key;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_default_section );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 978;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_value_1 = RICH_COMPARE_NE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 978;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 978;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_key;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_4d9075612c6c82ef69847d9c6971ac19->m_frame.f_lineno = 978;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_operand_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_has_section, call_args );
    }

    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 978;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_and_right_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 978;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_and_right_value_1 );
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 978;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = par_key;

    CHECK_OBJECT( tmp_make_exception_arg_1 );
    frame_4d9075612c6c82ef69847d9c6971ac19->m_frame.f_lineno = 979;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_KeyError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 979;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__proxies );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 980;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = par_key;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 980;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4d9075612c6c82ef69847d9c6971ac19 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4d9075612c6c82ef69847d9c6971ac19 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4d9075612c6c82ef69847d9c6971ac19 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4d9075612c6c82ef69847d9c6971ac19, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4d9075612c6c82ef69847d9c6971ac19->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4d9075612c6c82ef69847d9c6971ac19, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4d9075612c6c82ef69847d9c6971ac19,
        type_description_1,
        par_self,
        par_key
    );


    // Release cached frame.
    if ( frame_4d9075612c6c82ef69847d9c6971ac19 == cache_frame_4d9075612c6c82ef69847d9c6971ac19 )
    {
        Py_DECREF( frame_4d9075612c6c82ef69847d9c6971ac19 );
    }
    cache_frame_4d9075612c6c82ef69847d9c6971ac19 = NULL;

    assertFrameObject( frame_4d9075612c6c82ef69847d9c6971ac19 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_54___getitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_54___getitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_55___setitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *par_value = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    int tmp_cmp_Eq_1;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_bc110664060803235e326e00bc1c6e2e = NULL;

    struct Nuitka_FrameObject *frame_bc110664060803235e326e00bc1c6e2e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bc110664060803235e326e00bc1c6e2e, codeobj_bc110664060803235e326e00bc1c6e2e, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_bc110664060803235e326e00bc1c6e2e = cache_frame_bc110664060803235e326e00bc1c6e2e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bc110664060803235e326e00bc1c6e2e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bc110664060803235e326e00bc1c6e2e ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par_key;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_default_section );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_1 );

        exception_lineno = 988;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__defaults );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 989;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_bc110664060803235e326e00bc1c6e2e->m_frame.f_lineno = 989;
    tmp_unused = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_clear );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 989;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_2 = par_key;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_compare_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__sections );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 990;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_2 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__sections );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 991;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = par_key;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_called_instance_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 991;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_bc110664060803235e326e00bc1c6e2e->m_frame.f_lineno = 991;
    tmp_unused = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_clear );
    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 991;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_2:;
    branch_end_1:;
    tmp_called_instance_3 = par_self;

    CHECK_OBJECT( tmp_called_instance_3 );
    tmp_args_element_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_value;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = par_key;

    CHECK_OBJECT( tmp_dict_key_1 );
    tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 992;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_bc110664060803235e326e00bc1c6e2e->m_frame.f_lineno = 992;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_read_dict, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 992;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bc110664060803235e326e00bc1c6e2e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bc110664060803235e326e00bc1c6e2e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bc110664060803235e326e00bc1c6e2e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bc110664060803235e326e00bc1c6e2e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bc110664060803235e326e00bc1c6e2e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bc110664060803235e326e00bc1c6e2e,
        type_description_1,
        par_self,
        par_key,
        par_value
    );


    // Release cached frame.
    if ( frame_bc110664060803235e326e00bc1c6e2e == cache_frame_bc110664060803235e326e00bc1c6e2e )
    {
        Py_DECREF( frame_bc110664060803235e326e00bc1c6e2e );
    }
    cache_frame_bc110664060803235e326e00bc1c6e2e = NULL;

    assertFrameObject( frame_bc110664060803235e326e00bc1c6e2e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_55___setitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_55___setitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_56___delitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_7d72c5a1328b9be182f6506bb7c35c78 = NULL;

    struct Nuitka_FrameObject *frame_7d72c5a1328b9be182f6506bb7c35c78;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7d72c5a1328b9be182f6506bb7c35c78, codeobj_7d72c5a1328b9be182f6506bb7c35c78, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_7d72c5a1328b9be182f6506bb7c35c78 = cache_frame_7d72c5a1328b9be182f6506bb7c35c78;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7d72c5a1328b9be182f6506bb7c35c78 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7d72c5a1328b9be182f6506bb7c35c78 ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par_key;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_default_section );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 995;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_1 );

        exception_lineno = 995;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_unicode_digest_81e2c763ec8c279bf7b5a4323f229e92;
    frame_7d72c5a1328b9be182f6506bb7c35c78->m_frame.f_lineno = 996;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 996;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_key;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_7d72c5a1328b9be182f6506bb7c35c78->m_frame.f_lineno = 997;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_cond_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_has_section, call_args );
    }

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 997;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 997;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_make_exception_arg_2 = par_key;

    CHECK_OBJECT( tmp_make_exception_arg_2 );
    frame_7d72c5a1328b9be182f6506bb7c35c78->m_frame.f_lineno = 998;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_2 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_KeyError, call_args );
    }

    assert( tmp_raise_type_2 != NULL );
    exception_type = tmp_raise_type_2;
    exception_lineno = 998;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_called_instance_2 = par_self;

    CHECK_OBJECT( tmp_called_instance_2 );
    tmp_args_element_name_2 = par_key;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_7d72c5a1328b9be182f6506bb7c35c78->m_frame.f_lineno = 999;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_remove_section, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 999;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7d72c5a1328b9be182f6506bb7c35c78 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7d72c5a1328b9be182f6506bb7c35c78 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7d72c5a1328b9be182f6506bb7c35c78, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7d72c5a1328b9be182f6506bb7c35c78->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7d72c5a1328b9be182f6506bb7c35c78, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7d72c5a1328b9be182f6506bb7c35c78,
        type_description_1,
        par_self,
        par_key
    );


    // Release cached frame.
    if ( frame_7d72c5a1328b9be182f6506bb7c35c78 == cache_frame_7d72c5a1328b9be182f6506bb7c35c78 )
    {
        Py_DECREF( frame_7d72c5a1328b9be182f6506bb7c35c78 );
    }
    cache_frame_7d72c5a1328b9be182f6506bb7c35c78 = NULL;

    assertFrameObject( frame_7d72c5a1328b9be182f6506bb7c35c78 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_56___delitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_56___delitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_57___contains__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_dfe6f968acd0490fca4f335531ef38b3 = NULL;

    struct Nuitka_FrameObject *frame_dfe6f968acd0490fca4f335531ef38b3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dfe6f968acd0490fca4f335531ef38b3, codeobj_dfe6f968acd0490fca4f335531ef38b3, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_dfe6f968acd0490fca4f335531ef38b3 = cache_frame_dfe6f968acd0490fca4f335531ef38b3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dfe6f968acd0490fca4f335531ef38b3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dfe6f968acd0490fca4f335531ef38b3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_compexpr_left_1 = par_key;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_default_section );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1002;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1002;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 1002;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_key;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_dfe6f968acd0490fca4f335531ef38b3->m_frame.f_lineno = 1002;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_or_right_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_has_section, call_args );
    }

    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1002;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_return_value = tmp_or_left_value_1;
    or_end_1:;
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dfe6f968acd0490fca4f335531ef38b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_dfe6f968acd0490fca4f335531ef38b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dfe6f968acd0490fca4f335531ef38b3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dfe6f968acd0490fca4f335531ef38b3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dfe6f968acd0490fca4f335531ef38b3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dfe6f968acd0490fca4f335531ef38b3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dfe6f968acd0490fca4f335531ef38b3,
        type_description_1,
        par_self,
        par_key
    );


    // Release cached frame.
    if ( frame_dfe6f968acd0490fca4f335531ef38b3 == cache_frame_dfe6f968acd0490fca4f335531ef38b3 )
    {
        Py_DECREF( frame_dfe6f968acd0490fca4f335531ef38b3 );
    }
    cache_frame_dfe6f968acd0490fca4f335531ef38b3 = NULL;

    assertFrameObject( frame_dfe6f968acd0490fca4f335531ef38b3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_57___contains__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_57___contains__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_58___len__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_92a69b115ee9417d928eedd215149698 = NULL;

    struct Nuitka_FrameObject *frame_92a69b115ee9417d928eedd215149698;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_92a69b115ee9417d928eedd215149698, codeobj_92a69b115ee9417d928eedd215149698, module_backports$configparser, sizeof(void *) );
    frame_92a69b115ee9417d928eedd215149698 = cache_frame_92a69b115ee9417d928eedd215149698;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_92a69b115ee9417d928eedd215149698 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_92a69b115ee9417d928eedd215149698 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__sections );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1005;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_left_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1005;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = const_int_pos_1;
    tmp_return_value = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1005;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_92a69b115ee9417d928eedd215149698 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_92a69b115ee9417d928eedd215149698 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_92a69b115ee9417d928eedd215149698 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_92a69b115ee9417d928eedd215149698, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_92a69b115ee9417d928eedd215149698->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_92a69b115ee9417d928eedd215149698, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_92a69b115ee9417d928eedd215149698,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_92a69b115ee9417d928eedd215149698 == cache_frame_92a69b115ee9417d928eedd215149698 )
    {
        Py_DECREF( frame_92a69b115ee9417d928eedd215149698 );
    }
    cache_frame_92a69b115ee9417d928eedd215149698 = NULL;

    assertFrameObject( frame_92a69b115ee9417d928eedd215149698 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_58___len__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_58___len__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_59___iter__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_60f3cb39b8eb02ad7baa6e877a6e3907 = NULL;

    struct Nuitka_FrameObject *frame_60f3cb39b8eb02ad7baa6e877a6e3907;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_60f3cb39b8eb02ad7baa6e877a6e3907, codeobj_60f3cb39b8eb02ad7baa6e877a6e3907, module_backports$configparser, sizeof(void *) );
    frame_60f3cb39b8eb02ad7baa6e877a6e3907 = cache_frame_60f3cb39b8eb02ad7baa6e877a6e3907;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_60f3cb39b8eb02ad7baa6e877a6e3907 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_60f3cb39b8eb02ad7baa6e877a6e3907 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_itertools );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "itertools" );
        exception_tb = NULL;

        exception_lineno = 1009;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_chain );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1009;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = PyTuple_New( 1 );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_default_section );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1009;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__sections );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1009;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_60f3cb39b8eb02ad7baa6e877a6e3907->m_frame.f_lineno = 1009;
    tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_keys );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1009;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_60f3cb39b8eb02ad7baa6e877a6e3907->m_frame.f_lineno = 1009;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1009;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_60f3cb39b8eb02ad7baa6e877a6e3907 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_60f3cb39b8eb02ad7baa6e877a6e3907 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_60f3cb39b8eb02ad7baa6e877a6e3907 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_60f3cb39b8eb02ad7baa6e877a6e3907, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_60f3cb39b8eb02ad7baa6e877a6e3907->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_60f3cb39b8eb02ad7baa6e877a6e3907, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_60f3cb39b8eb02ad7baa6e877a6e3907,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_60f3cb39b8eb02ad7baa6e877a6e3907 == cache_frame_60f3cb39b8eb02ad7baa6e877a6e3907 )
    {
        Py_DECREF( frame_60f3cb39b8eb02ad7baa6e877a6e3907 );
    }
    cache_frame_60f3cb39b8eb02ad7baa6e877a6e3907 = NULL;

    assertFrameObject( frame_60f3cb39b8eb02ad7baa6e877a6e3907 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_59___iter__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_59___iter__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_60__read( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *par_fpname = python_pars[ 2 ];
    PyObject *var_elements_added = NULL;
    PyObject *var_cursect = NULL;
    PyObject *var_sectname = NULL;
    PyObject *var_optname = NULL;
    PyObject *var_lineno = NULL;
    PyObject *var_indent_level = NULL;
    PyObject *var_e = NULL;
    PyObject *var_line = NULL;
    PyObject *var_comment_start = NULL;
    PyObject *var_inline_prefixes = NULL;
    PyObject *var_next_prefixes = NULL;
    PyObject *var_prefix = NULL;
    PyObject *var_index = NULL;
    PyObject *var_value = NULL;
    PyObject *var_first_nonspace = NULL;
    PyObject *var_cur_indent_level = NULL;
    PyObject *var_mo = NULL;
    PyObject *var_vi = NULL;
    PyObject *var_optval = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__element_3 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    int tmp_and_left_truth_5;
    int tmp_and_left_truth_6;
    int tmp_and_left_truth_7;
    int tmp_and_left_truth_8;
    int tmp_and_left_truth_9;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_left_value_5;
    PyObject *tmp_and_left_value_6;
    PyObject *tmp_and_left_value_7;
    PyObject *tmp_and_left_value_8;
    PyObject *tmp_and_left_value_9;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_and_right_value_5;
    PyObject *tmp_and_right_value_6;
    PyObject *tmp_and_right_value_7;
    PyObject *tmp_and_right_value_8;
    PyObject *tmp_and_right_value_9;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_name_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscribed_2;
    PyObject *tmp_ass_subscribed_3;
    PyObject *tmp_ass_subscribed_4;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subscript_2;
    PyObject *tmp_ass_subscript_3;
    PyObject *tmp_ass_subscript_4;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_ass_subvalue_2;
    PyObject *tmp_ass_subvalue_3;
    PyObject *tmp_ass_subvalue_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_instance_16;
    PyObject *tmp_called_instance_17;
    PyObject *tmp_called_instance_18;
    PyObject *tmp_called_instance_19;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_left_8;
    PyObject *tmp_compexpr_left_9;
    PyObject *tmp_compexpr_left_10;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    PyObject *tmp_compexpr_right_8;
    PyObject *tmp_compexpr_right_9;
    PyObject *tmp_compexpr_right_10;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_dict_seq_1;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    PyObject *tmp_dictset_value;
    bool tmp_is_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_iterator_name_3;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    PyObject *tmp_unpack_5;
    PyObject *tmp_unpack_6;
    PyObject *tmp_unpack_7;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_ab1c2b3f959bff7c0e4bb051505dc51b = NULL;

    struct Nuitka_FrameObject *frame_ab1c2b3f959bff7c0e4bb051505dc51b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    tmp_assign_source_1 = PySet_New( NULL );
    assert( var_elements_added == NULL );
    var_elements_added = tmp_assign_source_1;

    tmp_assign_source_2 = Py_None;
    assert( var_cursect == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_cursect = tmp_assign_source_2;

    tmp_assign_source_3 = Py_None;
    assert( var_sectname == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_sectname = tmp_assign_source_3;

    tmp_assign_source_4 = Py_None;
    assert( var_optname == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var_optname = tmp_assign_source_4;

    tmp_assign_source_5 = const_int_0;
    assert( var_lineno == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var_lineno = tmp_assign_source_5;

    tmp_assign_source_6 = const_int_0;
    assert( var_indent_level == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_indent_level = tmp_assign_source_6;

    tmp_assign_source_7 = Py_None;
    assert( var_e == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_e = tmp_assign_source_7;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ab1c2b3f959bff7c0e4bb051505dc51b, codeobj_ab1c2b3f959bff7c0e4bb051505dc51b, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b = cache_frame_ab1c2b3f959bff7c0e4bb051505dc51b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ab1c2b3f959bff7c0e4bb051505dc51b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ab1c2b3f959bff7c0e4bb051505dc51b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = (PyObject *)&PyEnum_Type;
    tmp_args_name_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_fp;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_kw_name_1 = PyDict_Copy( const_dict_d86ae6d9cc5bf51b4834b1d52ac321cd );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1035;
    tmp_iter_arg_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1035;
        type_description_1 = "oooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1035;
        type_description_1 = "oooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_8;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooooo";
            exception_lineno = 1035;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1035;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_10;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_11 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1035;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_12 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_12 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1035;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_12;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooooooooooooooo";
                exception_lineno = 1035;
                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1035;
        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_13 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_13 );
    {
        PyObject *old = var_lineno;
        var_lineno = tmp_assign_source_13;
        Py_INCREF( var_lineno );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_14 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_14 );
    {
        PyObject *old = var_line;
        var_line = tmp_assign_source_14;
        Py_INCREF( var_line );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 1036;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_assign_source_15 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_maxsize );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1036;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_comment_start;
        var_comment_start = tmp_assign_source_15;
        Py_XDECREF( old );
    }

    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__inline_comment_prefixes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1039;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1039;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_genexpr_1__$0;
        tmp_genexpr_1__$0 = tmp_assign_source_17;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_outline_return_value_1 = Nuitka_Generator_New(
        backports$configparser$$$function_60__read$$$genexpr_1_genexpr_context,
        module_backports$configparser,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        NULL,
#endif
        codeobj_cdd33381080862e8f2b55ee70f563b54,
        1
    );

    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
    assert( Py_SIZE( tmp_outline_return_value_1 ) >= 1 ); 


    goto try_return_handler_5;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_60__read );
    return NULL;
    // Return handler code:
    try_return_handler_5:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_1;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_60__read );
    return NULL;
    outline_result_1:;
    tmp_dict_seq_1 = tmp_outline_return_value_1;
    tmp_assign_source_16 = TO_DICT( tmp_dict_seq_1, NULL );
    Py_DECREF( tmp_dict_seq_1 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1038;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_inline_prefixes;
        var_inline_prefixes = tmp_assign_source_16;
        Py_XDECREF( old );
    }

    loop_start_2:;
    tmp_compexpr_left_1 = var_comment_start;

    if ( tmp_compexpr_left_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "comment_start" );
        exception_tb = NULL;

        exception_lineno = 1040;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 1040;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_maxsize );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1040;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_and_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1040;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 1040;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_and_right_value_1 = var_inline_prefixes;

    if ( tmp_and_right_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "inline_prefixes" );
        exception_tb = NULL;

        exception_lineno = 1040;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_and_right_value_1 );
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1040;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    goto loop_end_2;
    branch_no_1:;
    tmp_assign_source_18 = PyDict_New();
    {
        PyObject *old = var_next_prefixes;
        var_next_prefixes = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_called_instance_1 = var_inline_prefixes;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "inline_prefixes" );
        exception_tb = NULL;

        exception_lineno = 1042;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1042;
    tmp_iter_arg_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_items );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1042;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1042;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_2__for_iterator;
        tmp_for_loop_2__for_iterator = tmp_assign_source_19;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_3:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_20 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooooo";
            exception_lineno = 1042;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_5 = tmp_for_loop_2__iter_value;

    CHECK_OBJECT( tmp_iter_arg_5 );
    tmp_assign_source_21 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1042;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_7;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter;
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_unpack_3 );
    tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_22 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1042;
        goto try_except_handler_8;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_1;
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_unpack_4 );
    tmp_assign_source_23 = UNPACK_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_23 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1042;
        goto try_except_handler_8;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_2;
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_23;
        Py_XDECREF( old );
    }

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_iterator_name_2 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooooooooooooooo";
                exception_lineno = 1042;
                goto try_except_handler_8;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1042;
        goto try_except_handler_8;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_7;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_6;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    tmp_assign_source_24 = tmp_tuple_unpack_2__element_1;

    CHECK_OBJECT( tmp_assign_source_24 );
    {
        PyObject *old = var_prefix;
        var_prefix = tmp_assign_source_24;
        Py_INCREF( var_prefix );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    tmp_assign_source_25 = tmp_tuple_unpack_2__element_2;

    CHECK_OBJECT( tmp_assign_source_25 );
    {
        PyObject *old = var_index;
        var_index = tmp_assign_source_25;
        Py_INCREF( var_index );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    tmp_source_name_4 = var_line;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_find );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1043;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    tmp_args_element_name_1 = var_prefix;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_left_name_1 = var_index;

    CHECK_OBJECT( tmp_left_name_1 );
    tmp_right_name_1 = const_int_pos_1;
    tmp_args_element_name_2 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 1043;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1043;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1043;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_index;
        assert( old != NULL );
        var_index = tmp_assign_source_26;
        Py_DECREF( old );
    }

    tmp_compare_left_1 = var_index;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = const_int_neg_1;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1044;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    goto loop_start_3;
    branch_no_2:;
    tmp_dictset_value = var_index;

    CHECK_OBJECT( tmp_dictset_value );
    tmp_dictset_dict = var_next_prefixes;

    CHECK_OBJECT( tmp_dictset_dict );
    tmp_dictset_key = var_prefix;

    CHECK_OBJECT( tmp_dictset_key );
    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1046;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    tmp_compexpr_left_2 = var_index;

    CHECK_OBJECT( tmp_compexpr_left_2 );
    tmp_compexpr_right_2 = const_int_0;
    tmp_or_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1047;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 1047;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_compexpr_left_3 = var_index;

    CHECK_OBJECT( tmp_compexpr_left_3 );
    tmp_compexpr_right_3 = const_int_0;
    tmp_and_left_value_2 = RICH_COMPARE_GT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1047;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_2 );

        exception_lineno = 1047;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    Py_DECREF( tmp_and_left_value_2 );
    tmp_subscribed_name_1 = var_line;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_left_name_2 = var_index;

    CHECK_OBJECT( tmp_left_name_2 );
    tmp_right_name_2 = const_int_pos_1;
    tmp_subscript_name_1 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1047;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    tmp_called_instance_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1047;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1047;
    tmp_and_right_value_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_isspace );
    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1047;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    tmp_or_right_value_1 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_or_right_value_1 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_value_2 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_2 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 1047;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_name_3 = LOOKUP_BUILTIN( const_str_plain_min );
    assert( tmp_called_name_3 != NULL );
    tmp_args_element_name_3 = var_comment_start;

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "comment_start" );
        exception_tb = NULL;

        exception_lineno = 1048;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }

    tmp_args_element_name_4 = var_index;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1048;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1048;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_comment_start;
        var_comment_start = tmp_assign_source_27;
        Py_XDECREF( old );
    }

    branch_no_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1042;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_2;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_assign_source_28 = var_next_prefixes;

    CHECK_OBJECT( tmp_assign_source_28 );
    {
        PyObject *old = var_inline_prefixes;
        var_inline_prefixes = tmp_assign_source_28;
        Py_INCREF( var_inline_prefixes );
        Py_XDECREF( old );
    }

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1040;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__comment_prefixes );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1051;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_29 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1051;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_3__for_iterator;
        tmp_for_loop_3__for_iterator = tmp_assign_source_29;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_4:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    CHECK_OBJECT( tmp_next_source_3 );
    tmp_assign_source_30 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_30 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooooo";
            exception_lineno = 1051;
            goto try_except_handler_9;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_30;
        Py_XDECREF( old );
    }

    tmp_assign_source_31 = tmp_for_loop_3__iter_value;

    CHECK_OBJECT( tmp_assign_source_31 );
    {
        PyObject *old = var_prefix;
        var_prefix = tmp_assign_source_31;
        Py_INCREF( var_prefix );
        Py_XDECREF( old );
    }

    tmp_called_instance_4 = var_line;

    CHECK_OBJECT( tmp_called_instance_4 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1052;
    tmp_called_instance_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_strip );
    if ( tmp_called_instance_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1052;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_9;
    }
    tmp_args_element_name_5 = var_prefix;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1052;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_cond_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_startswith, call_args );
    }

    Py_DECREF( tmp_called_instance_3 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1052;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_9;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 1052;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_32 = const_int_0;
    {
        PyObject *old = var_comment_start;
        var_comment_start = tmp_assign_source_32;
        Py_INCREF( var_comment_start );
        Py_XDECREF( old );
    }

    goto loop_end_4;
    branch_no_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1051;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_9;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_2;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_compare_left_2 = var_comment_start;

    if ( tmp_compare_left_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "comment_start" );
        exception_tb = NULL;

        exception_lineno = 1055;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 1055;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_compare_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_maxsize );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1055;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_2 );

        exception_lineno = 1055;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_33 = Py_None;
    {
        PyObject *old = var_comment_start;
        var_comment_start = tmp_assign_source_33;
        Py_INCREF( var_comment_start );
        Py_XDECREF( old );
    }

    branch_no_5:;
    tmp_slice_source_1 = var_line;

    CHECK_OBJECT( tmp_slice_source_1 );
    tmp_slice_upper_1 = var_comment_start;

    if ( tmp_slice_upper_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "comment_start" );
        exception_tb = NULL;

        exception_lineno = 1057;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_called_instance_5 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1057;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1057;
    tmp_assign_source_34 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_strip );
    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1057;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_value;
        var_value = tmp_assign_source_34;
        Py_XDECREF( old );
    }

    tmp_cond_value_4 = var_value;

    CHECK_OBJECT( tmp_cond_value_4 );
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1058;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_no_6;
    }
    else
    {
        goto branch_yes_6;
    }
    branch_yes_6:;
    tmp_source_name_7 = par_self;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_cond_value_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__empty_lines_in_values );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1059;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 1059;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_compexpr_left_4 = var_comment_start;

    if ( tmp_compexpr_left_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "comment_start" );
        exception_tb = NULL;

        exception_lineno = 1062;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_compexpr_right_4 = Py_None;
    tmp_and_left_value_3 = BOOL_FROM( tmp_compexpr_left_4 == tmp_compexpr_right_4 );
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    assert( !(tmp_and_left_truth_3 == -1) );
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    tmp_compexpr_left_5 = var_cursect;

    if ( tmp_compexpr_left_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "cursect" );
        exception_tb = NULL;

        exception_lineno = 1063;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_compexpr_right_5 = Py_None;
    tmp_and_left_value_4 = BOOL_FROM( tmp_compexpr_left_5 != tmp_compexpr_right_5 );
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    assert( !(tmp_and_left_truth_4 == -1) );
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    tmp_and_left_value_5 = var_optname;

    if ( tmp_and_left_value_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "optname" );
        exception_tb = NULL;

        exception_lineno = 1064;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_and_left_truth_5 = CHECK_IF_TRUE( tmp_and_left_value_5 );
    if ( tmp_and_left_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1065;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_5 == 1 )
    {
        goto and_right_5;
    }
    else
    {
        goto and_left_5;
    }
    and_right_5:;
    tmp_subscribed_name_2 = var_cursect;

    if ( tmp_subscribed_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "cursect" );
        exception_tb = NULL;

        exception_lineno = 1065;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_subscript_name_2 = var_optname;

    if ( tmp_subscript_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "optname" );
        exception_tb = NULL;

        exception_lineno = 1065;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_compexpr_left_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_compexpr_left_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1065;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_compexpr_right_6 = Py_None;
    tmp_and_right_value_5 = BOOL_FROM( tmp_compexpr_left_6 != tmp_compexpr_right_6 );
    Py_DECREF( tmp_compexpr_left_6 );
    tmp_and_right_value_4 = tmp_and_right_value_5;
    goto and_end_5;
    and_left_5:;
    tmp_and_right_value_4 = tmp_and_left_value_5;
    and_end_5:;
    tmp_and_right_value_3 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    tmp_and_right_value_3 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_value_6 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_cond_value_6 = tmp_and_left_value_3;
    and_end_3:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1065;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_subscribed_name_3 = var_cursect;

    if ( tmp_subscribed_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "cursect" );
        exception_tb = NULL;

        exception_lineno = 1066;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_subscript_name_3 = var_optname;

    if ( tmp_subscript_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "optname" );
        exception_tb = NULL;

        exception_lineno = 1066;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_called_instance_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_called_instance_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1066;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1066;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_unicode_empty_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1066;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_no_8:;
    goto branch_end_7;
    branch_no_7:;
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 1069;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_assign_source_35 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_maxsize );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1069;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_indent_level;
        var_indent_level = tmp_assign_source_35;
        Py_XDECREF( old );
    }

    branch_end_7:;
    goto loop_start_1;
    branch_no_6:;
    tmp_source_name_9 = par_self;

    CHECK_OBJECT( tmp_source_name_9 );
    tmp_called_instance_7 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_NONSPACECRE );
    if ( tmp_called_instance_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1072;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_6 = var_line;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1072;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_assign_source_36 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_search, call_args );
    }

    Py_DECREF( tmp_called_instance_7 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1072;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_first_nonspace;
        var_first_nonspace = tmp_assign_source_36;
        Py_XDECREF( old );
    }

    tmp_cond_value_7 = var_first_nonspace;

    CHECK_OBJECT( tmp_cond_value_7 );
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1073;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_7 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_called_instance_8 = var_first_nonspace;

    CHECK_OBJECT( tmp_called_instance_8 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1073;
    tmp_assign_source_37 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_start );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1073;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_37 = const_int_0;
    Py_INCREF( tmp_assign_source_37 );
    condexpr_end_1:;
    {
        PyObject *old = var_cur_indent_level;
        var_cur_indent_level = tmp_assign_source_37;
        Py_XDECREF( old );
    }

    tmp_compexpr_left_7 = var_cursect;

    if ( tmp_compexpr_left_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "cursect" );
        exception_tb = NULL;

        exception_lineno = 1074;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_compexpr_right_7 = Py_None;
    tmp_and_left_value_6 = BOOL_FROM( tmp_compexpr_left_7 != tmp_compexpr_right_7 );
    tmp_and_left_truth_6 = CHECK_IF_TRUE( tmp_and_left_value_6 );
    assert( !(tmp_and_left_truth_6 == -1) );
    if ( tmp_and_left_truth_6 == 1 )
    {
        goto and_right_6;
    }
    else
    {
        goto and_left_6;
    }
    and_right_6:;
    tmp_and_left_value_7 = var_optname;

    if ( tmp_and_left_value_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "optname" );
        exception_tb = NULL;

        exception_lineno = 1074;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_and_left_truth_7 = CHECK_IF_TRUE( tmp_and_left_value_7 );
    if ( tmp_and_left_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1075;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_7 == 1 )
    {
        goto and_right_7;
    }
    else
    {
        goto and_left_7;
    }
    and_right_7:;
    tmp_compexpr_left_8 = var_cur_indent_level;

    CHECK_OBJECT( tmp_compexpr_left_8 );
    tmp_compexpr_right_8 = var_indent_level;

    if ( tmp_compexpr_right_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "indent_level" );
        exception_tb = NULL;

        exception_lineno = 1075;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_and_right_value_7 = RICH_COMPARE_GT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
    if ( tmp_and_right_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1075;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_and_right_value_6 = tmp_and_right_value_7;
    goto and_end_7;
    and_left_7:;
    Py_INCREF( tmp_and_left_value_7 );
    tmp_and_right_value_6 = tmp_and_left_value_7;
    and_end_7:;
    tmp_cond_value_8 = tmp_and_right_value_6;
    goto and_end_6;
    and_left_6:;
    Py_INCREF( tmp_and_left_value_6 );
    tmp_cond_value_8 = tmp_and_left_value_6;
    and_end_6:;
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 1075;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_subscribed_name_4 = var_cursect;

    if ( tmp_subscribed_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "cursect" );
        exception_tb = NULL;

        exception_lineno = 1076;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_subscript_name_4 = var_optname;

    if ( tmp_subscript_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "optname" );
        exception_tb = NULL;

        exception_lineno = 1076;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_called_instance_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_called_instance_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1076;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_7 = var_value;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1076;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_append, call_args );
    }

    Py_DECREF( tmp_called_instance_9 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1076;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_9;
    branch_no_9:;
    tmp_assign_source_38 = var_cur_indent_level;

    CHECK_OBJECT( tmp_assign_source_38 );
    {
        PyObject *old = var_indent_level;
        var_indent_level = tmp_assign_source_38;
        Py_INCREF( var_indent_level );
        Py_XDECREF( old );
    }

    tmp_source_name_10 = par_self;

    CHECK_OBJECT( tmp_source_name_10 );
    tmp_called_instance_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_SECTCRE );
    if ( tmp_called_instance_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1081;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_8 = var_value;

    CHECK_OBJECT( tmp_args_element_name_8 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1081;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_assign_source_39 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_match, call_args );
    }

    Py_DECREF( tmp_called_instance_10 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1081;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_mo;
        var_mo = tmp_assign_source_39;
        Py_XDECREF( old );
    }

    tmp_cond_value_9 = var_mo;

    CHECK_OBJECT( tmp_cond_value_9 );
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1082;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_called_instance_11 = var_mo;

    CHECK_OBJECT( tmp_called_instance_11 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1083;
    tmp_assign_source_40 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_group, &PyTuple_GET_ITEM( const_tuple_unicode_plain_header_tuple, 0 ) );

    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1083;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_sectname;
        var_sectname = tmp_assign_source_40;
        Py_XDECREF( old );
    }

    tmp_compare_left_3 = var_sectname;

    CHECK_OBJECT( tmp_compare_left_3 );
    tmp_source_name_11 = par_self;

    CHECK_OBJECT( tmp_source_name_11 );
    tmp_compare_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__sections );
    if ( tmp_compare_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1084;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_3 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_source_name_12 = par_self;

    CHECK_OBJECT( tmp_source_name_12 );
    tmp_and_left_value_8 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__strict );
    if ( tmp_and_left_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1085;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_and_left_truth_8 = CHECK_IF_TRUE( tmp_and_left_value_8 );
    if ( tmp_and_left_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_8 );

        exception_lineno = 1085;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_8 == 1 )
    {
        goto and_right_8;
    }
    else
    {
        goto and_left_8;
    }
    and_right_8:;
    Py_DECREF( tmp_and_left_value_8 );
    tmp_compexpr_left_9 = var_sectname;

    CHECK_OBJECT( tmp_compexpr_left_9 );
    tmp_compexpr_right_9 = var_elements_added;

    CHECK_OBJECT( tmp_compexpr_right_9 );
    tmp_and_right_value_8 = SEQUENCE_CONTAINS( tmp_compexpr_left_9, tmp_compexpr_right_9 );
    if ( tmp_and_right_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1085;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_INCREF( tmp_and_right_value_8 );
    tmp_cond_value_10 = tmp_and_right_value_8;
    goto and_end_8;
    and_left_8:;
    tmp_cond_value_10 = tmp_and_left_value_8;
    and_end_8:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 1085;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DuplicateSectionError );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DuplicateSectionError );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DuplicateSectionError" );
        exception_tb = NULL;

        exception_lineno = 1086;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_9 = var_sectname;

    CHECK_OBJECT( tmp_args_element_name_9 );
    tmp_args_element_name_10 = par_fpname;

    CHECK_OBJECT( tmp_args_element_name_10 );
    tmp_args_element_name_11 = var_lineno;

    CHECK_OBJECT( tmp_args_element_name_11 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1086;
    {
        PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, call_args );
    }

    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1086;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 1086;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooooooooooo";
    goto try_except_handler_2;
    branch_no_12:;
    tmp_source_name_13 = par_self;

    CHECK_OBJECT( tmp_source_name_13 );
    tmp_subscribed_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__sections );
    if ( tmp_subscribed_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1088;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_subscript_name_5 = var_sectname;

    CHECK_OBJECT( tmp_subscript_name_5 );
    tmp_assign_source_41 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    Py_DECREF( tmp_subscribed_name_5 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1088;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_cursect;
        var_cursect = tmp_assign_source_41;
        Py_XDECREF( old );
    }

    tmp_called_instance_12 = var_elements_added;

    CHECK_OBJECT( tmp_called_instance_12 );
    tmp_args_element_name_12 = var_sectname;

    CHECK_OBJECT( tmp_args_element_name_12 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1089;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_add, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1089;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_11;
    branch_no_11:;
    tmp_compare_left_4 = var_sectname;

    CHECK_OBJECT( tmp_compare_left_4 );
    tmp_source_name_14 = par_self;

    CHECK_OBJECT( tmp_source_name_14 );
    tmp_compare_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_default_section );
    if ( tmp_compare_right_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1090;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_4 );

        exception_lineno = 1090;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_right_4 );
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_source_name_15 = par_self;

    CHECK_OBJECT( tmp_source_name_15 );
    tmp_assign_source_42 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__defaults );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1091;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_cursect;
        var_cursect = tmp_assign_source_42;
        Py_XDECREF( old );
    }

    goto branch_end_13;
    branch_no_13:;
    tmp_called_instance_13 = par_self;

    CHECK_OBJECT( tmp_called_instance_13 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1093;
    tmp_assign_source_43 = CALL_METHOD_NO_ARGS( tmp_called_instance_13, const_str_plain__dict );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1093;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_cursect;
        var_cursect = tmp_assign_source_43;
        Py_XDECREF( old );
    }

    tmp_ass_subvalue_1 = var_cursect;

    CHECK_OBJECT( tmp_ass_subvalue_1 );
    tmp_source_name_16 = par_self;

    CHECK_OBJECT( tmp_source_name_16 );
    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__sections );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1094;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_ass_subscript_1 = var_sectname;

    CHECK_OBJECT( tmp_ass_subscript_1 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1094;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_SectionProxy );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SectionProxy );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SectionProxy" );
        exception_tb = NULL;

        exception_lineno = 1095;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_13 = par_self;

    CHECK_OBJECT( tmp_args_element_name_13 );
    tmp_args_element_name_14 = var_sectname;

    CHECK_OBJECT( tmp_args_element_name_14 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1095;
    {
        PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14 };
        tmp_ass_subvalue_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
    }

    if ( tmp_ass_subvalue_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1095;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_source_name_17 = par_self;

    CHECK_OBJECT( tmp_source_name_17 );
    tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain__proxies );
    if ( tmp_ass_subscribed_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subvalue_2 );

        exception_lineno = 1095;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_ass_subscript_2 = var_sectname;

    CHECK_OBJECT( tmp_ass_subscript_2 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
    Py_DECREF( tmp_ass_subscribed_2 );
    Py_DECREF( tmp_ass_subvalue_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1095;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_called_instance_14 = var_elements_added;

    CHECK_OBJECT( tmp_called_instance_14 );
    tmp_args_element_name_15 = var_sectname;

    CHECK_OBJECT( tmp_args_element_name_15 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1096;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_add, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1096;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_end_13:;
    branch_end_11:;
    tmp_assign_source_44 = Py_None;
    {
        PyObject *old = var_optname;
        var_optname = tmp_assign_source_44;
        Py_INCREF( var_optname );
        Py_XDECREF( old );
    }

    goto branch_end_10;
    branch_no_10:;
    tmp_compare_left_5 = var_cursect;

    if ( tmp_compare_left_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "cursect" );
        exception_tb = NULL;

        exception_lineno = 1100;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_compare_right_5 = Py_None;
    tmp_is_1 = ( tmp_compare_left_5 == tmp_compare_right_5 );
    if ( tmp_is_1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MissingSectionHeaderError );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MissingSectionHeaderError );
    }

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MissingSectionHeaderError" );
        exception_tb = NULL;

        exception_lineno = 1101;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_16 = par_fpname;

    CHECK_OBJECT( tmp_args_element_name_16 );
    tmp_args_element_name_17 = var_lineno;

    CHECK_OBJECT( tmp_args_element_name_17 );
    tmp_args_element_name_18 = var_line;

    CHECK_OBJECT( tmp_args_element_name_18 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1101;
    {
        PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
    }

    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1101;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 1101;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooooooooooo";
    goto try_except_handler_2;
    goto branch_end_14;
    branch_no_14:;
    tmp_source_name_18 = par_self;

    CHECK_OBJECT( tmp_source_name_18 );
    tmp_called_instance_15 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain__optcre );
    if ( tmp_called_instance_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1104;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_19 = var_value;

    CHECK_OBJECT( tmp_args_element_name_19 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1104;
    {
        PyObject *call_args[] = { tmp_args_element_name_19 };
        tmp_assign_source_45 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_match, call_args );
    }

    Py_DECREF( tmp_called_instance_15 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1104;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_mo;
        assert( old != NULL );
        var_mo = tmp_assign_source_45;
        Py_DECREF( old );
    }

    tmp_cond_value_11 = var_mo;

    CHECK_OBJECT( tmp_cond_value_11 );
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1105;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    // Tried code:
    tmp_called_instance_16 = var_mo;

    CHECK_OBJECT( tmp_called_instance_16 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1106;
    tmp_iter_arg_7 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_16, const_str_plain_group, &PyTuple_GET_ITEM( const_tuple_unicode_plain_option_unicode_plain_vi_unicode_plain_value_tuple, 0 ) );

    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1106;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_10;
    }
    tmp_assign_source_46 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1106;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_10;
    }
    {
        PyObject *old = tmp_tuple_unpack_3__source_iter;
        tmp_tuple_unpack_3__source_iter = tmp_assign_source_46;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;

    CHECK_OBJECT( tmp_unpack_5 );
    tmp_assign_source_47 = UNPACK_NEXT( tmp_unpack_5, 0 );
    if ( tmp_assign_source_47 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1106;
        goto try_except_handler_11;
    }
    {
        PyObject *old = tmp_tuple_unpack_3__element_1;
        tmp_tuple_unpack_3__element_1 = tmp_assign_source_47;
        Py_XDECREF( old );
    }

    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;

    CHECK_OBJECT( tmp_unpack_6 );
    tmp_assign_source_48 = UNPACK_NEXT( tmp_unpack_6, 1 );
    if ( tmp_assign_source_48 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1106;
        goto try_except_handler_11;
    }
    {
        PyObject *old = tmp_tuple_unpack_3__element_2;
        tmp_tuple_unpack_3__element_2 = tmp_assign_source_48;
        Py_XDECREF( old );
    }

    tmp_unpack_7 = tmp_tuple_unpack_3__source_iter;

    CHECK_OBJECT( tmp_unpack_7 );
    tmp_assign_source_49 = UNPACK_NEXT( tmp_unpack_7, 2 );
    if ( tmp_assign_source_49 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1106;
        goto try_except_handler_11;
    }
    {
        PyObject *old = tmp_tuple_unpack_3__element_3;
        tmp_tuple_unpack_3__element_3 = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;

    CHECK_OBJECT( tmp_iterator_name_3 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooooooooooooooo";
                exception_lineno = 1106;
                goto try_except_handler_11;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooooooooooooooooooooo";
        exception_lineno = 1106;
        goto try_except_handler_11;
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_10;
    // End of try:
    try_end_7:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_3 );
    tmp_tuple_unpack_3__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto try_except_handler_2;
    // End of try:
    try_end_8:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    tmp_assign_source_50 = tmp_tuple_unpack_3__element_1;

    CHECK_OBJECT( tmp_assign_source_50 );
    {
        PyObject *old = var_optname;
        var_optname = tmp_assign_source_50;
        Py_INCREF( var_optname );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    tmp_assign_source_51 = tmp_tuple_unpack_3__element_2;

    CHECK_OBJECT( tmp_assign_source_51 );
    {
        PyObject *old = var_vi;
        var_vi = tmp_assign_source_51;
        Py_INCREF( var_vi );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    tmp_assign_source_52 = tmp_tuple_unpack_3__element_3;

    CHECK_OBJECT( tmp_assign_source_52 );
    {
        PyObject *old = var_optval;
        var_optval = tmp_assign_source_52;
        Py_INCREF( var_optval );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_3__element_3 );
    tmp_tuple_unpack_3__element_3 = NULL;

    tmp_cond_value_12 = var_optname;

    CHECK_OBJECT( tmp_cond_value_12 );
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1107;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_no_16;
    }
    else
    {
        goto branch_yes_16;
    }
    branch_yes_16:;
    tmp_source_name_19 = par_self;

    CHECK_OBJECT( tmp_source_name_19 );
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain__handle_error );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1108;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_20 = var_e;

    if ( tmp_args_element_name_20 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "e" );
        exception_tb = NULL;

        exception_lineno = 1108;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_21 = par_fpname;

    CHECK_OBJECT( tmp_args_element_name_21 );
    tmp_args_element_name_22 = var_lineno;

    CHECK_OBJECT( tmp_args_element_name_22 );
    tmp_args_element_name_23 = var_line;

    CHECK_OBJECT( tmp_args_element_name_23 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1108;
    {
        PyObject *call_args[] = { tmp_args_element_name_20, tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23 };
        tmp_assign_source_53 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1108;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_e;
        var_e = tmp_assign_source_53;
        Py_XDECREF( old );
    }

    branch_no_16:;
    tmp_source_name_20 = par_self;

    CHECK_OBJECT( tmp_source_name_20 );
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_optionxform );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1109;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_called_instance_17 = var_optname;

    CHECK_OBJECT( tmp_called_instance_17 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1109;
    tmp_args_element_name_24 = CALL_METHOD_NO_ARGS( tmp_called_instance_17, const_str_plain_rstrip );
    if ( tmp_args_element_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 1109;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1109;
    {
        PyObject *call_args[] = { tmp_args_element_name_24 };
        tmp_assign_source_54 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_24 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1109;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_optname;
        assert( old != NULL );
        var_optname = tmp_assign_source_54;
        Py_DECREF( old );
    }

    tmp_source_name_21 = par_self;

    CHECK_OBJECT( tmp_source_name_21 );
    tmp_and_left_value_9 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain__strict );
    if ( tmp_and_left_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1110;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_and_left_truth_9 = CHECK_IF_TRUE( tmp_and_left_value_9 );
    if ( tmp_and_left_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_9 );

        exception_lineno = 1111;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_9 == 1 )
    {
        goto and_right_9;
    }
    else
    {
        goto and_left_9;
    }
    and_right_9:;
    Py_DECREF( tmp_and_left_value_9 );
    tmp_compexpr_left_10 = PyTuple_New( 2 );
    tmp_tuple_element_2 = var_sectname;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "sectname" );
        exception_tb = NULL;

        exception_lineno = 1111;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_compexpr_left_10, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = var_optname;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_compexpr_left_10, 1, tmp_tuple_element_2 );
    tmp_compexpr_right_10 = var_elements_added;

    CHECK_OBJECT( tmp_compexpr_right_10 );
    tmp_and_right_value_9 = SEQUENCE_CONTAINS( tmp_compexpr_left_10, tmp_compexpr_right_10 );
    Py_DECREF( tmp_compexpr_left_10 );
    if ( tmp_and_right_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1111;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_INCREF( tmp_and_right_value_9 );
    tmp_cond_value_13 = tmp_and_right_value_9;
    goto and_end_9;
    and_left_9:;
    tmp_cond_value_13 = tmp_and_left_value_9;
    and_end_9:;
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_13 );

        exception_lineno = 1111;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_called_name_9 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DuplicateOptionError );

    if (unlikely( tmp_called_name_9 == NULL ))
    {
        tmp_called_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DuplicateOptionError );
    }

    if ( tmp_called_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DuplicateOptionError" );
        exception_tb = NULL;

        exception_lineno = 1112;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_25 = var_sectname;

    if ( tmp_args_element_name_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "sectname" );
        exception_tb = NULL;

        exception_lineno = 1112;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_26 = var_optname;

    CHECK_OBJECT( tmp_args_element_name_26 );
    tmp_args_element_name_27 = par_fpname;

    CHECK_OBJECT( tmp_args_element_name_27 );
    tmp_args_element_name_28 = var_lineno;

    CHECK_OBJECT( tmp_args_element_name_28 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1112;
    {
        PyObject *call_args[] = { tmp_args_element_name_25, tmp_args_element_name_26, tmp_args_element_name_27, tmp_args_element_name_28 };
        tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_9, call_args );
    }

    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1112;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    exception_type = tmp_raise_type_3;
    exception_lineno = 1112;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooooooooooo";
    goto try_except_handler_2;
    branch_no_17:;
    tmp_source_name_22 = var_elements_added;

    CHECK_OBJECT( tmp_source_name_22 );
    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_add );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1114;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_29 = PyTuple_New( 2 );
    tmp_tuple_element_3 = var_sectname;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_29 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "sectname" );
        exception_tb = NULL;

        exception_lineno = 1114;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_29, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = var_optname;

    CHECK_OBJECT( tmp_tuple_element_3 );
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_29, 1, tmp_tuple_element_3 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1114;
    {
        PyObject *call_args[] = { tmp_args_element_name_29 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1114;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_compare_left_6 = var_optval;

    CHECK_OBJECT( tmp_compare_left_6 );
    tmp_compare_right_6 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_6 != tmp_compare_right_6 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_called_instance_18 = var_optval;

    CHECK_OBJECT( tmp_called_instance_18 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1118;
    tmp_assign_source_55 = CALL_METHOD_NO_ARGS( tmp_called_instance_18, const_str_plain_strip );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1118;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_optval;
        assert( old != NULL );
        var_optval = tmp_assign_source_55;
        Py_DECREF( old );
    }

    tmp_ass_subvalue_3 = PyList_New( 1 );
    tmp_list_element_1 = var_optval;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_ass_subvalue_3, 0, tmp_list_element_1 );
    tmp_ass_subscribed_3 = var_cursect;

    if ( tmp_ass_subscribed_3 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "cursect" );
        exception_tb = NULL;

        exception_lineno = 1119;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_ass_subscript_3 = var_optname;

    CHECK_OBJECT( tmp_ass_subscript_3 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
    Py_DECREF( tmp_ass_subvalue_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1119;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    goto branch_end_18;
    branch_no_18:;
    tmp_ass_subvalue_4 = Py_None;
    tmp_ass_subscribed_4 = var_cursect;

    if ( tmp_ass_subscribed_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "cursect" );
        exception_tb = NULL;

        exception_lineno = 1122;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_ass_subscript_4 = var_optname;

    CHECK_OBJECT( tmp_ass_subscript_4 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1122;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    branch_end_18:;
    goto branch_end_15;
    branch_no_15:;
    tmp_source_name_23 = par_self;

    CHECK_OBJECT( tmp_source_name_23 );
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain__handle_error );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1128;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_30 = var_e;

    if ( tmp_args_element_name_30 == NULL )
    {
        Py_DECREF( tmp_called_name_11 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "e" );
        exception_tb = NULL;

        exception_lineno = 1128;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_31 = par_fpname;

    CHECK_OBJECT( tmp_args_element_name_31 );
    tmp_args_element_name_32 = var_lineno;

    CHECK_OBJECT( tmp_args_element_name_32 );
    tmp_args_element_name_33 = var_line;

    CHECK_OBJECT( tmp_args_element_name_33 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1128;
    {
        PyObject *call_args[] = { tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32, tmp_args_element_name_33 };
        tmp_assign_source_56 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1128;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_e;
        var_e = tmp_assign_source_56;
        Py_XDECREF( old );
    }

    branch_end_15:;
    branch_end_14:;
    branch_end_10:;
    branch_end_9:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1035;
        type_description_1 = "oooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_cond_value_14 = var_e;

    if ( tmp_cond_value_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "e" );
        exception_tb = NULL;

        exception_lineno = 1130;
        type_description_1 = "oooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1130;
        type_description_1 = "oooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_14 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_raise_type_4 = var_e;

    if ( tmp_raise_type_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "e" );
        exception_tb = NULL;

        exception_lineno = 1131;
        type_description_1 = "oooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    exception_type = tmp_raise_type_4;
    Py_INCREF( tmp_raise_type_4 );
    exception_lineno = 1131;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooooooooooooooo";
    goto frame_exception_exit_1;
    branch_no_19:;
    tmp_called_instance_19 = par_self;

    CHECK_OBJECT( tmp_called_instance_19 );
    frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame.f_lineno = 1132;
    tmp_unused = CALL_METHOD_NO_ARGS( tmp_called_instance_19, const_str_plain__join_multiline_values );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1132;
        type_description_1 = "oooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ab1c2b3f959bff7c0e4bb051505dc51b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ab1c2b3f959bff7c0e4bb051505dc51b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ab1c2b3f959bff7c0e4bb051505dc51b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ab1c2b3f959bff7c0e4bb051505dc51b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ab1c2b3f959bff7c0e4bb051505dc51b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ab1c2b3f959bff7c0e4bb051505dc51b,
        type_description_1,
        par_self,
        par_fp,
        par_fpname,
        var_elements_added,
        var_cursect,
        var_sectname,
        var_optname,
        var_lineno,
        var_indent_level,
        var_e,
        var_line,
        var_comment_start,
        var_inline_prefixes,
        var_next_prefixes,
        var_prefix,
        var_index,
        var_value,
        var_first_nonspace,
        var_cur_indent_level,
        var_mo,
        var_vi,
        var_optval
    );


    // Release cached frame.
    if ( frame_ab1c2b3f959bff7c0e4bb051505dc51b == cache_frame_ab1c2b3f959bff7c0e4bb051505dc51b )
    {
        Py_DECREF( frame_ab1c2b3f959bff7c0e4bb051505dc51b );
    }
    cache_frame_ab1c2b3f959bff7c0e4bb051505dc51b = NULL;

    assertFrameObject( frame_ab1c2b3f959bff7c0e4bb051505dc51b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_60__read );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_fpname );
    Py_DECREF( par_fpname );
    par_fpname = NULL;

    CHECK_OBJECT( (PyObject *)var_elements_added );
    Py_DECREF( var_elements_added );
    var_elements_added = NULL;

    Py_XDECREF( var_cursect );
    var_cursect = NULL;

    Py_XDECREF( var_sectname );
    var_sectname = NULL;

    Py_XDECREF( var_optname );
    var_optname = NULL;

    Py_XDECREF( var_lineno );
    var_lineno = NULL;

    Py_XDECREF( var_indent_level );
    var_indent_level = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    Py_XDECREF( var_comment_start );
    var_comment_start = NULL;

    Py_XDECREF( var_inline_prefixes );
    var_inline_prefixes = NULL;

    Py_XDECREF( var_next_prefixes );
    var_next_prefixes = NULL;

    Py_XDECREF( var_prefix );
    var_prefix = NULL;

    Py_XDECREF( var_index );
    var_index = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_first_nonspace );
    var_first_nonspace = NULL;

    Py_XDECREF( var_cur_indent_level );
    var_cur_indent_level = NULL;

    Py_XDECREF( var_mo );
    var_mo = NULL;

    Py_XDECREF( var_vi );
    var_vi = NULL;

    Py_XDECREF( var_optval );
    var_optval = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_fpname );
    Py_DECREF( par_fpname );
    par_fpname = NULL;

    CHECK_OBJECT( (PyObject *)var_elements_added );
    Py_DECREF( var_elements_added );
    var_elements_added = NULL;

    Py_XDECREF( var_cursect );
    var_cursect = NULL;

    Py_XDECREF( var_sectname );
    var_sectname = NULL;

    Py_XDECREF( var_optname );
    var_optname = NULL;

    Py_XDECREF( var_lineno );
    var_lineno = NULL;

    Py_XDECREF( var_indent_level );
    var_indent_level = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    Py_XDECREF( var_comment_start );
    var_comment_start = NULL;

    Py_XDECREF( var_inline_prefixes );
    var_inline_prefixes = NULL;

    Py_XDECREF( var_next_prefixes );
    var_next_prefixes = NULL;

    Py_XDECREF( var_prefix );
    var_prefix = NULL;

    Py_XDECREF( var_index );
    var_index = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_first_nonspace );
    var_first_nonspace = NULL;

    Py_XDECREF( var_cur_indent_level );
    var_cur_indent_level = NULL;

    Py_XDECREF( var_mo );
    var_mo = NULL;

    Py_XDECREF( var_vi );
    var_vi = NULL;

    Py_XDECREF( var_optval );
    var_optval = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_60__read );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct backports$configparser$$$function_60__read$$$genexpr_1_genexpr_locals {
    PyObject *var_p
    PyObject *tmp_iter_value_0
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_tuple_element_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *backports$configparser$$$function_60__read$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void backports$configparser$$$function_60__read$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_p = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_cdd33381080862e8f2b55ee70f563b54, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    if ( generator->m_closure[0] == NULL )
    {
        tmp_next_source_1 = NULL;
    }
    else
    {
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
    }

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "No";
            exception_lineno = 1039;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = var_p;
        var_p = tmp_assign_source_2;
        Py_INCREF( var_p );
        Py_XDECREF( old );
    }

    tmp_expression_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_p;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_expression_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_int_neg_1;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_expression_name_1, 1, tmp_tuple_element_1 );
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1039;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1039;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            NULL,
            var_p
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_p );
    var_p = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_p );
    var_p = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_backports$configparser$$$function_61__join_multiline_values( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_defaults = NULL;
    PyObject *var_all_sections = NULL;
    PyObject *var_section = NULL;
    PyObject *var_options = NULL;
    PyObject *var_name = NULL;
    PyObject *var_val = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    static struct Nuitka_FrameObject *cache_frame_4d7f0c1f5c85bcc025539d616b230c49 = NULL;

    struct Nuitka_FrameObject *frame_4d7f0c1f5c85bcc025539d616b230c49;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4d7f0c1f5c85bcc025539d616b230c49, codeobj_4d7f0c1f5c85bcc025539d616b230c49, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4d7f0c1f5c85bcc025539d616b230c49 = cache_frame_4d7f0c1f5c85bcc025539d616b230c49;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4d7f0c1f5c85bcc025539d616b230c49 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4d7f0c1f5c85bcc025539d616b230c49 ) == 2 ); // Frame stack

    // Framed code:
    tmp_assign_source_1 = PyTuple_New( 2 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_default_section );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_1 );

        exception_lineno = 1135;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_assign_source_1, 0, tmp_tuple_element_1 );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__defaults );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_1 );

        exception_lineno = 1135;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_assign_source_1, 1, tmp_tuple_element_1 );
    assert( var_defaults == NULL );
    var_defaults = tmp_assign_source_1;

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_itertools );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "itertools" );
        exception_tb = NULL;

        exception_lineno = 1136;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_chain );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1136;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = PyTuple_New( 1 );
    tmp_tuple_element_2 = var_defaults;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_2 );
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__sections );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1137;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    frame_4d7f0c1f5c85bcc025539d616b230c49->m_frame.f_lineno = 1137;
    tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_items );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1137;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    frame_4d7f0c1f5c85bcc025539d616b230c49->m_frame.f_lineno = 1136;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1136;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_all_sections == NULL );
    var_all_sections = tmp_assign_source_2;

    tmp_iter_arg_1 = var_all_sections;

    CHECK_OBJECT( tmp_iter_arg_1 );
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1138;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooo";
            exception_lineno = 1138;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_5 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1138;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 1138;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 1138;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooo";
                exception_lineno = 1138;
                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooooo";
        exception_lineno = 1138;
        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_8 );
    {
        PyObject *old = var_section;
        var_section = tmp_assign_source_8;
        Py_INCREF( var_section );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_9 );
    {
        PyObject *old = var_options;
        var_options = tmp_assign_source_9;
        Py_INCREF( var_options );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_called_instance_2 = var_options;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_4d7f0c1f5c85bcc025539d616b230c49->m_frame.f_lineno = 1139;
    tmp_iter_arg_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_items );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1139;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1139;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_2__for_iterator;
        tmp_for_loop_2__for_iterator = tmp_assign_source_10;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooo";
            exception_lineno = 1139;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_4 = tmp_for_loop_2__iter_value;

    CHECK_OBJECT( tmp_iter_arg_4 );
    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_4 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1139;
        type_description_1 = "ooooooo";
        goto try_except_handler_6;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter;
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_12;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_unpack_3 );
    tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_3, 0 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 1139;
        goto try_except_handler_7;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_1;
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_unpack_4 );
    tmp_assign_source_14 = UNPACK_NEXT( tmp_unpack_4, 1 );
    if ( tmp_assign_source_14 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 1139;
        goto try_except_handler_7;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_2;
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_14;
        Py_XDECREF( old );
    }

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_iterator_name_2 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooo";
                exception_lineno = 1139;
                goto try_except_handler_7;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooooo";
        exception_lineno = 1139;
        goto try_except_handler_7;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_6;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_5;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    tmp_assign_source_15 = tmp_tuple_unpack_2__element_1;

    CHECK_OBJECT( tmp_assign_source_15 );
    {
        PyObject *old = var_name;
        var_name = tmp_assign_source_15;
        Py_INCREF( var_name );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    tmp_assign_source_16 = tmp_tuple_unpack_2__element_2;

    CHECK_OBJECT( tmp_assign_source_16 );
    {
        PyObject *old = var_val;
        var_val = tmp_assign_source_16;
        Py_INCREF( var_val );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    tmp_isinstance_inst_1 = var_val;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = (PyObject *)&PyList_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1140;
        type_description_1 = "ooooooo";
        goto try_except_handler_5;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_instance_4 = const_unicode_newline;
    tmp_args_element_name_3 = var_val;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_4d7f0c1f5c85bcc025539d616b230c49->m_frame.f_lineno = 1141;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_called_instance_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_join, call_args );
    }

    if ( tmp_called_instance_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1141;
        type_description_1 = "ooooooo";
        goto try_except_handler_5;
    }
    frame_4d7f0c1f5c85bcc025539d616b230c49->m_frame.f_lineno = 1141;
    tmp_assign_source_17 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_rstrip );
    Py_DECREF( tmp_called_instance_3 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1141;
        type_description_1 = "ooooooo";
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_val;
        assert( old != NULL );
        var_val = tmp_assign_source_17;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__interpolation );
    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1142;
        type_description_1 = "ooooooo";
        goto try_except_handler_5;
    }
    tmp_args_element_name_4 = par_self;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_args_element_name_5 = var_section;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = var_name;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_args_element_name_7 = var_val;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_4d7f0c1f5c85bcc025539d616b230c49->m_frame.f_lineno = 1142;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_ass_subvalue_1 = CALL_METHOD_WITH_ARGS4( tmp_called_instance_5, const_str_plain_before_read, call_args );
    }

    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1142;
        type_description_1 = "ooooooo";
        goto try_except_handler_5;
    }
    tmp_ass_subscribed_1 = var_options;

    CHECK_OBJECT( tmp_ass_subscribed_1 );
    tmp_ass_subscript_1 = var_name;

    CHECK_OBJECT( tmp_ass_subscript_1 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1142;
        type_description_1 = "ooooooo";
        goto try_except_handler_5;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1139;
        type_description_1 = "ooooooo";
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_2;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1138;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4d7f0c1f5c85bcc025539d616b230c49 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4d7f0c1f5c85bcc025539d616b230c49 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4d7f0c1f5c85bcc025539d616b230c49, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4d7f0c1f5c85bcc025539d616b230c49->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4d7f0c1f5c85bcc025539d616b230c49, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4d7f0c1f5c85bcc025539d616b230c49,
        type_description_1,
        par_self,
        var_defaults,
        var_all_sections,
        var_section,
        var_options,
        var_name,
        var_val
    );


    // Release cached frame.
    if ( frame_4d7f0c1f5c85bcc025539d616b230c49 == cache_frame_4d7f0c1f5c85bcc025539d616b230c49 )
    {
        Py_DECREF( frame_4d7f0c1f5c85bcc025539d616b230c49 );
    }
    cache_frame_4d7f0c1f5c85bcc025539d616b230c49 = NULL;

    assertFrameObject( frame_4d7f0c1f5c85bcc025539d616b230c49 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_61__join_multiline_values );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_defaults );
    Py_DECREF( var_defaults );
    var_defaults = NULL;

    CHECK_OBJECT( (PyObject *)var_all_sections );
    Py_DECREF( var_all_sections );
    var_all_sections = NULL;

    Py_XDECREF( var_section );
    var_section = NULL;

    Py_XDECREF( var_options );
    var_options = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_defaults );
    var_defaults = NULL;

    Py_XDECREF( var_all_sections );
    var_all_sections = NULL;

    Py_XDECREF( var_section );
    var_section = NULL;

    Py_XDECREF( var_options );
    var_options = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_61__join_multiline_values );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_62__handle_error( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_exc = python_pars[ 1 ];
    PyObject *par_fpname = python_pars[ 2 ];
    PyObject *par_lineno = python_pars[ 3 ];
    PyObject *par_line = python_pars[ 4 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_852592d0099987bfb5608bfa0794908e = NULL;

    struct Nuitka_FrameObject *frame_852592d0099987bfb5608bfa0794908e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_852592d0099987bfb5608bfa0794908e, codeobj_852592d0099987bfb5608bfa0794908e, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_852592d0099987bfb5608bfa0794908e = cache_frame_852592d0099987bfb5608bfa0794908e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_852592d0099987bfb5608bfa0794908e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_852592d0099987bfb5608bfa0794908e ) == 2 ); // Frame stack

    // Framed code:
    tmp_cond_value_1 = par_exc;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1147;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ParsingError );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ParsingError );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ParsingError" );
        exception_tb = NULL;

        exception_lineno = 1148;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_fpname;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_852592d0099987bfb5608bfa0794908e->m_frame.f_lineno = 1148;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1148;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_exc;
        assert( old != NULL );
        par_exc = tmp_assign_source_1;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_source_name_1 = par_exc;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1149;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = par_lineno;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_operand_name_1 = par_line;

    CHECK_OBJECT( tmp_operand_name_1 );
    tmp_args_element_name_3 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_1 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 1149;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_852592d0099987bfb5608bfa0794908e->m_frame.f_lineno = 1149;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1149;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_852592d0099987bfb5608bfa0794908e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_852592d0099987bfb5608bfa0794908e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_852592d0099987bfb5608bfa0794908e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_852592d0099987bfb5608bfa0794908e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_852592d0099987bfb5608bfa0794908e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_852592d0099987bfb5608bfa0794908e,
        type_description_1,
        par_self,
        par_exc,
        par_fpname,
        par_lineno,
        par_line
    );


    // Release cached frame.
    if ( frame_852592d0099987bfb5608bfa0794908e == cache_frame_852592d0099987bfb5608bfa0794908e )
    {
        Py_DECREF( frame_852592d0099987bfb5608bfa0794908e );
    }
    cache_frame_852592d0099987bfb5608bfa0794908e = NULL;

    assertFrameObject( frame_852592d0099987bfb5608bfa0794908e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_exc;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_62__handle_error );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exc );
    Py_DECREF( par_exc );
    par_exc = NULL;

    CHECK_OBJECT( (PyObject *)par_fpname );
    Py_DECREF( par_fpname );
    par_fpname = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    CHECK_OBJECT( (PyObject *)par_line );
    Py_DECREF( par_line );
    par_line = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_exc );
    par_exc = NULL;

    CHECK_OBJECT( (PyObject *)par_fpname );
    Py_DECREF( par_fpname );
    par_fpname = NULL;

    CHECK_OBJECT( (PyObject *)par_lineno );
    Py_DECREF( par_lineno );
    par_lineno = NULL;

    CHECK_OBJECT( (PyObject *)par_line );
    Py_DECREF( par_line );
    par_line = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_62__handle_error );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_63__unify_values( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_vars = python_pars[ 2 ];
    PyObject *var_sectiondict = NULL;
    PyObject *var_vardict = NULL;
    PyObject *var_key = NULL;
    PyObject *var_value = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    PyObject *tmp_dictset_value;
    int tmp_exc_match_exception_match_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    static struct Nuitka_FrameObject *cache_frame_6f97561e54b0e66dda4246d4acff942c = NULL;

    struct Nuitka_FrameObject *frame_6f97561e54b0e66dda4246d4acff942c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = PyDict_New();
    assert( var_sectiondict == NULL );
    var_sectiondict = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6f97561e54b0e66dda4246d4acff942c, codeobj_6f97561e54b0e66dda4246d4acff942c, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6f97561e54b0e66dda4246d4acff942c = cache_frame_6f97561e54b0e66dda4246d4acff942c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6f97561e54b0e66dda4246d4acff942c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6f97561e54b0e66dda4246d4acff942c ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__sections );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1159;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_subscript_name_1 = par_section;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_assign_source_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1159;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_sectiondict;
        assert( old != NULL );
        var_sectiondict = tmp_assign_source_2;
        Py_DECREF( old );
    }

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_6f97561e54b0e66dda4246d4acff942c );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_6f97561e54b0e66dda4246d4acff942c, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_6f97561e54b0e66dda4246d4acff942c, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1160;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_2 = par_section;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_compare_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_default_section );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1161;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_2 );

        exception_lineno = 1161;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_right_2 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoSectionError );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NoSectionError );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NoSectionError" );
        exception_tb = NULL;

        exception_lineno = 1162;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_section;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_6f97561e54b0e66dda4246d4acff942c->m_frame.f_lineno = 1162;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1162;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 1162;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooooo";
    goto frame_exception_exit_1;
    branch_no_2:;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1158;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_6f97561e54b0e66dda4246d4acff942c->m_frame) frame_6f97561e54b0e66dda4246d4acff942c->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooo";
    goto frame_exception_exit_1;
    branch_end_1:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_63__unify_values );
    return NULL;
    // End of try:
    try_end_1:;
    tmp_assign_source_3 = PyDict_New();
    assert( var_vardict == NULL );
    var_vardict = tmp_assign_source_3;

    tmp_cond_value_1 = par_vars;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1165;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_instance_1 = par_vars;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_6f97561e54b0e66dda4246d4acff942c->m_frame.f_lineno = 1166;
    tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_items );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1166;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1166;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_4;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooo";
            exception_lineno = 1166;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1166;
        type_description_1 = "ooooooo";
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 1166;
        goto try_except_handler_5;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 1166;
        goto try_except_handler_5;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooo";
                exception_lineno = 1166;
                goto try_except_handler_5;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooooo";
        exception_lineno = 1166;
        goto try_except_handler_5;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_4;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_3;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_9 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_9 );
    {
        PyObject *old = var_key;
        var_key = tmp_assign_source_9;
        Py_INCREF( var_key );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_10 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_10 );
    {
        PyObject *old = var_value;
        var_value = tmp_assign_source_10;
        Py_INCREF( var_value );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_compare_left_3 = var_value;

    CHECK_OBJECT( tmp_compare_left_3 );
    tmp_compare_right_3 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_3 != tmp_compare_right_3 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_str );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "str" );
        exception_tb = NULL;

        exception_lineno = 1168;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }

    tmp_args_element_name_2 = var_value;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_6f97561e54b0e66dda4246d4acff942c->m_frame.f_lineno = 1168;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1168;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_value;
        assert( old != NULL );
        var_value = tmp_assign_source_11;
        Py_DECREF( old );
    }

    branch_no_4:;
    tmp_dictset_value = var_value;

    CHECK_OBJECT( tmp_dictset_value );
    tmp_dictset_dict = var_vardict;

    CHECK_OBJECT( tmp_dictset_dict );
    tmp_called_instance_2 = par_self;

    CHECK_OBJECT( tmp_called_instance_2 );
    tmp_args_element_name_3 = var_key;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_6f97561e54b0e66dda4246d4acff942c->m_frame.f_lineno = 1169;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_dictset_key = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_optionxform, call_args );
    }

    if ( tmp_dictset_key == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1169;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
    Py_DECREF( tmp_dictset_key );
    if ( tmp_res != 0 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1169;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1166;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_3:;
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__ChainMap );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__ChainMap );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_ChainMap" );
        exception_tb = NULL;

        exception_lineno = 1170;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = var_vardict;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_args_element_name_5 = var_sectiondict;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__defaults );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1170;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    frame_6f97561e54b0e66dda4246d4acff942c->m_frame.f_lineno = 1170;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1170;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_6f97561e54b0e66dda4246d4acff942c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_6f97561e54b0e66dda4246d4acff942c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_6f97561e54b0e66dda4246d4acff942c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6f97561e54b0e66dda4246d4acff942c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6f97561e54b0e66dda4246d4acff942c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6f97561e54b0e66dda4246d4acff942c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6f97561e54b0e66dda4246d4acff942c,
        type_description_1,
        par_self,
        par_section,
        par_vars,
        var_sectiondict,
        var_vardict,
        var_key,
        var_value
    );


    // Release cached frame.
    if ( frame_6f97561e54b0e66dda4246d4acff942c == cache_frame_6f97561e54b0e66dda4246d4acff942c )
    {
        Py_DECREF( frame_6f97561e54b0e66dda4246d4acff942c );
    }
    cache_frame_6f97561e54b0e66dda4246d4acff942c = NULL;

    assertFrameObject( frame_6f97561e54b0e66dda4246d4acff942c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_63__unify_values );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_vars );
    Py_DECREF( par_vars );
    par_vars = NULL;

    CHECK_OBJECT( (PyObject *)var_sectiondict );
    Py_DECREF( var_sectiondict );
    var_sectiondict = NULL;

    CHECK_OBJECT( (PyObject *)var_vardict );
    Py_DECREF( var_vardict );
    var_vardict = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_vars );
    Py_DECREF( par_vars );
    par_vars = NULL;

    Py_XDECREF( var_sectiondict );
    var_sectiondict = NULL;

    Py_XDECREF( var_vardict );
    var_vardict = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_63__unify_values );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_64__convert_to_boolean( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_0795b625ce78321c74d98095e411cdd2 = NULL;

    struct Nuitka_FrameObject *frame_0795b625ce78321c74d98095e411cdd2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0795b625ce78321c74d98095e411cdd2, codeobj_0795b625ce78321c74d98095e411cdd2, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_0795b625ce78321c74d98095e411cdd2 = cache_frame_0795b625ce78321c74d98095e411cdd2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0795b625ce78321c74d98095e411cdd2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0795b625ce78321c74d98095e411cdd2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_value;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_0795b625ce78321c74d98095e411cdd2->m_frame.f_lineno = 1175;
    tmp_compare_left_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1175;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_BOOLEAN_STATES );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 1175;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_left_1 );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_left_name_1 = const_unicode_digest_60be27da7e87e378758d9b87560fd1dc;
    tmp_right_name_1 = par_value;

    CHECK_OBJECT( tmp_right_name_1 );
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1176;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_0795b625ce78321c74d98095e411cdd2->m_frame.f_lineno = 1176;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 1176;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_BOOLEAN_STATES );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1177;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_2 = par_value;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_0795b625ce78321c74d98095e411cdd2->m_frame.f_lineno = 1177;
    tmp_subscript_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_lower );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_subscribed_name_1 );

        exception_lineno = 1177;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1177;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0795b625ce78321c74d98095e411cdd2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0795b625ce78321c74d98095e411cdd2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0795b625ce78321c74d98095e411cdd2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0795b625ce78321c74d98095e411cdd2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0795b625ce78321c74d98095e411cdd2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0795b625ce78321c74d98095e411cdd2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0795b625ce78321c74d98095e411cdd2,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_0795b625ce78321c74d98095e411cdd2 == cache_frame_0795b625ce78321c74d98095e411cdd2 )
    {
        Py_DECREF( frame_0795b625ce78321c74d98095e411cdd2 );
    }
    cache_frame_0795b625ce78321c74d98095e411cdd2 = NULL;

    assertFrameObject( frame_0795b625ce78321c74d98095e411cdd2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_64__convert_to_boolean );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_64__convert_to_boolean );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_65__validate_value_types( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_kwargs = python_pars[ 1 ];
    PyObject *var_section = NULL;
    PyObject *var_option = NULL;
    PyObject *var_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_cls_4;
    PyObject *tmp_isinstance_cls_5;
    PyObject *tmp_isinstance_cls_6;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_isinstance_inst_4;
    PyObject *tmp_isinstance_inst_5;
    PyObject *tmp_isinstance_inst_6;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_operand_name_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_type_arg_2;
    PyObject *tmp_type_arg_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_71f2c142bbe82ea466be0ab6ea3535ac = NULL;

    struct Nuitka_FrameObject *frame_71f2c142bbe82ea466be0ab6ea3535ac;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_71f2c142bbe82ea466be0ab6ea3535ac, codeobj_71f2c142bbe82ea466be0ab6ea3535ac, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_71f2c142bbe82ea466be0ab6ea3535ac = cache_frame_71f2c142bbe82ea466be0ab6ea3535ac;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_71f2c142bbe82ea466be0ab6ea3535ac );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_71f2c142bbe82ea466be0ab6ea3535ac ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1193;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_unicode_plain_section_unicode_empty_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1193;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_section == NULL );
    var_section = tmp_assign_source_1;

    tmp_called_instance_2 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1194;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_unicode_plain_option_unicode_empty_tuple, 0 ) );

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1194;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_option == NULL );
    var_option = tmp_assign_source_2;

    tmp_called_instance_3 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_3 );
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1195;
    tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_unicode_plain_value_unicode_empty_tuple, 0 ) );

    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1195;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_value == NULL );
    var_value = tmp_assign_source_3;

    tmp_and_left_value_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_PY2 );

    if (unlikely( tmp_and_left_value_1 == NULL ))
    {
        tmp_and_left_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY2 );
    }

    if ( tmp_and_left_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "PY2" );
        exception_tb = NULL;

        exception_lineno = 1197;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1197;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_compexpr_left_1 = (PyObject *)&PyString_Type;
    tmp_compexpr_right_1 = PyTuple_New( 3 );
    tmp_type_arg_1 = var_section;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_tuple_element_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_tuple_element_1 != NULL );
    PyTuple_SET_ITEM( tmp_compexpr_right_1, 0, tmp_tuple_element_1 );
    tmp_type_arg_2 = var_option;

    CHECK_OBJECT( tmp_type_arg_2 );
    tmp_tuple_element_1 = BUILTIN_TYPE1( tmp_type_arg_2 );
    assert( tmp_tuple_element_1 != NULL );
    PyTuple_SET_ITEM( tmp_compexpr_right_1, 1, tmp_tuple_element_1 );
    tmp_type_arg_3 = var_value;

    CHECK_OBJECT( tmp_type_arg_3 );
    tmp_tuple_element_1 = BUILTIN_TYPE1( tmp_type_arg_3 );
    assert( tmp_tuple_element_1 != NULL );
    PyTuple_SET_ITEM( tmp_compexpr_right_1, 2, tmp_tuple_element_1 );
    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1197;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1197;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "warnings" );
        exception_tb = NULL;

        exception_lineno = 1201;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1201;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_2 = const_unicode_digest_79957acb7d23243c4cd1c73608e63b60;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

    if (unlikely( tmp_tuple_element_2 == NULL ))
    {
        tmp_tuple_element_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
    }

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DeprecationWarning" );
        exception_tb = NULL;

        exception_lineno = 1205;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_2 );
    tmp_kw_name_1 = PyDict_Copy( const_dict_f154c9a58c9419d7e391901d7b7fe49e );
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1201;
    tmp_unused = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1201;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_isinstance_inst_1 = var_section;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = (PyObject *)&PyString_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1208;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_instance_4 = var_section;

    CHECK_OBJECT( tmp_called_instance_4 );
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1209;
    tmp_assign_source_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_unicode_plain_utf8_tuple, 0 ) );

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1209;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_section;
        assert( old != NULL );
        var_section = tmp_assign_source_4;
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_isinstance_inst_2 = var_option;

    CHECK_OBJECT( tmp_isinstance_inst_2 );
    tmp_isinstance_cls_2 = (PyObject *)&PyString_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1210;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_instance_5 = var_option;

    CHECK_OBJECT( tmp_called_instance_5 );
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1211;
    tmp_assign_source_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_unicode_plain_utf8_tuple, 0 ) );

    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1211;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_option;
        assert( old != NULL );
        var_option = tmp_assign_source_5;
        Py_DECREF( old );
    }

    branch_no_3:;
    tmp_isinstance_inst_3 = var_value;

    CHECK_OBJECT( tmp_isinstance_inst_3 );
    tmp_isinstance_cls_3 = (PyObject *)&PyString_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1212;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_instance_6 = var_value;

    CHECK_OBJECT( tmp_called_instance_6 );
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1213;
    tmp_assign_source_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_unicode_plain_utf8_tuple, 0 ) );

    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1213;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_value;
        assert( old != NULL );
        var_value = tmp_assign_source_6;
        Py_DECREF( old );
    }

    branch_no_4:;
    branch_no_1:;
    tmp_isinstance_inst_4 = var_section;

    if ( tmp_isinstance_inst_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "section" );
        exception_tb = NULL;

        exception_lineno = 1215;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str );

    if (unlikely( tmp_isinstance_cls_4 == NULL ))
    {
        tmp_isinstance_cls_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_str );
    }

    if ( tmp_isinstance_cls_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "str" );
        exception_tb = NULL;

        exception_lineno = 1215;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1215;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_5;
    }
    else
    {
        goto branch_yes_5;
    }
    branch_yes_5:;
    tmp_make_exception_arg_1 = const_unicode_digest_a580203ae2f51c2fe9e7c0fe709b2d9f;
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1216;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 1216;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_no_5:;
    tmp_isinstance_inst_5 = var_option;

    if ( tmp_isinstance_inst_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "option" );
        exception_tb = NULL;

        exception_lineno = 1217;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_5 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str );

    if (unlikely( tmp_isinstance_cls_5 == NULL ))
    {
        tmp_isinstance_cls_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_str );
    }

    if ( tmp_isinstance_cls_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "str" );
        exception_tb = NULL;

        exception_lineno = 1217;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1217;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_6;
    }
    else
    {
        goto branch_yes_6;
    }
    branch_yes_6:;
    tmp_make_exception_arg_2 = const_unicode_digest_9f6ca6adc5a1daa353fb07ed2ede3cad;
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1218;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_2 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_2 != NULL );
    exception_type = tmp_raise_type_2;
    exception_lineno = 1218;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_no_6:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__allow_no_value );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1219;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1219;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1219;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_or_right_value_1 = var_value;

    if ( tmp_or_right_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;

        exception_lineno = 1219;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_value_2 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_2 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1219;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_isinstance_inst_6 = var_value;

    if ( tmp_isinstance_inst_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;

        exception_lineno = 1220;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_6 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str );

    if (unlikely( tmp_isinstance_cls_6 == NULL ))
    {
        tmp_isinstance_cls_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_str );
    }

    if ( tmp_isinstance_cls_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "str" );
        exception_tb = NULL;

        exception_lineno = 1220;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_6, tmp_isinstance_cls_6 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1220;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_8;
    }
    else
    {
        goto branch_yes_8;
    }
    branch_yes_8:;
    tmp_make_exception_arg_3 = const_unicode_digest_679c6565b3f0cccac66b5c85045c378a;
    frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame.f_lineno = 1221;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_3 };
        tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_3 != NULL );
    exception_type = tmp_raise_type_3;
    exception_lineno = 1221;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_no_8:;
    branch_no_7:;
    tmp_return_value = PyTuple_New( 3 );
    tmp_tuple_element_3 = var_section;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "section" );
        exception_tb = NULL;

        exception_lineno = 1223;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = var_option;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "option" );
        exception_tb = NULL;

        exception_lineno = 1223;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_3 );
    tmp_tuple_element_3 = var_value;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;

        exception_lineno = 1223;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_3 );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_71f2c142bbe82ea466be0ab6ea3535ac );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_71f2c142bbe82ea466be0ab6ea3535ac );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_71f2c142bbe82ea466be0ab6ea3535ac );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_71f2c142bbe82ea466be0ab6ea3535ac, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_71f2c142bbe82ea466be0ab6ea3535ac->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_71f2c142bbe82ea466be0ab6ea3535ac, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_71f2c142bbe82ea466be0ab6ea3535ac,
        type_description_1,
        par_self,
        par_kwargs,
        var_section,
        var_option,
        var_value
    );


    // Release cached frame.
    if ( frame_71f2c142bbe82ea466be0ab6ea3535ac == cache_frame_71f2c142bbe82ea466be0ab6ea3535ac )
    {
        Py_DECREF( frame_71f2c142bbe82ea466be0ab6ea3535ac );
    }
    cache_frame_71f2c142bbe82ea466be0ab6ea3535ac = NULL;

    assertFrameObject( frame_71f2c142bbe82ea466be0ab6ea3535ac );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_65__validate_value_types );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_section );
    var_section = NULL;

    Py_XDECREF( var_option );
    var_option = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_section );
    var_section = NULL;

    Py_XDECREF( var_option );
    var_option = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_65__validate_value_types );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_66_converters( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_2c223045dc62113b154f3510d62c8681 = NULL;

    struct Nuitka_FrameObject *frame_2c223045dc62113b154f3510d62c8681;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2c223045dc62113b154f3510d62c8681, codeobj_2c223045dc62113b154f3510d62c8681, module_backports$configparser, sizeof(void *) );
    frame_2c223045dc62113b154f3510d62c8681 = cache_frame_2c223045dc62113b154f3510d62c8681;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2c223045dc62113b154f3510d62c8681 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2c223045dc62113b154f3510d62c8681 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__converters );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1227;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2c223045dc62113b154f3510d62c8681 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2c223045dc62113b154f3510d62c8681 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2c223045dc62113b154f3510d62c8681 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2c223045dc62113b154f3510d62c8681, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2c223045dc62113b154f3510d62c8681->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2c223045dc62113b154f3510d62c8681, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2c223045dc62113b154f3510d62c8681,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_2c223045dc62113b154f3510d62c8681 == cache_frame_2c223045dc62113b154f3510d62c8681 )
    {
        Py_DECREF( frame_2c223045dc62113b154f3510d62c8681 );
    }
    cache_frame_2c223045dc62113b154f3510d62c8681 = NULL;

    assertFrameObject( frame_2c223045dc62113b154f3510d62c8681 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_66_converters );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_66_converters );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_67_set( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *par_option = python_pars[ 2 ];
    PyObject *par_value = python_pars[ 3 ];
    PyObject *var__ = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_object_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_name_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_e2a80832cee711c223f390fab4d7a96d = NULL;

    struct Nuitka_FrameObject *frame_e2a80832cee711c223f390fab4d7a96d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e2a80832cee711c223f390fab4d7a96d, codeobj_e2a80832cee711c223f390fab4d7a96d, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e2a80832cee711c223f390fab4d7a96d = cache_frame_e2a80832cee711c223f390fab4d7a96d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e2a80832cee711c223f390fab4d7a96d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e2a80832cee711c223f390fab4d7a96d ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__validate_value_types );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1238;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_value_1 = par_option;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_option;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = par_value;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain_value;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_e2a80832cee711c223f390fab4d7a96d->m_frame.f_lineno = 1238;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1238;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1238;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooo";
        exception_lineno = 1238;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooo";
        exception_lineno = 1238;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;

    tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_3 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_3, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooo";
        exception_lineno = 1238;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_3 == NULL );
    tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooo";
                exception_lineno = 1238;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooo";
        exception_lineno = 1238;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_5 );
    assert( var__ == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__ = tmp_assign_source_5;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = par_option;
        assert( old != NULL );
        par_option = tmp_assign_source_6;
        Py_INCREF( par_option );
        Py_DECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_3;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = par_value;
        assert( old != NULL );
        par_value = tmp_assign_source_7;
        Py_INCREF( par_value );
        Py_DECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ConfigParser );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ConfigParser );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ConfigParser" );
        exception_tb = NULL;

        exception_lineno = 1239;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    CHECK_OBJECT( tmp_object_name_1 );
    tmp_called_instance_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1239;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_section;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_option;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_value;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_e2a80832cee711c223f390fab4d7a96d->m_frame.f_lineno = 1239;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_unused = CALL_METHOD_WITH_ARGS3( tmp_called_instance_1, const_str_plain_set, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1239;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e2a80832cee711c223f390fab4d7a96d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e2a80832cee711c223f390fab4d7a96d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e2a80832cee711c223f390fab4d7a96d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e2a80832cee711c223f390fab4d7a96d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e2a80832cee711c223f390fab4d7a96d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e2a80832cee711c223f390fab4d7a96d,
        type_description_1,
        par_self,
        par_section,
        par_option,
        par_value,
        var__
    );


    // Release cached frame.
    if ( frame_e2a80832cee711c223f390fab4d7a96d == cache_frame_e2a80832cee711c223f390fab4d7a96d )
    {
        Py_DECREF( frame_e2a80832cee711c223f390fab4d7a96d );
    }
    cache_frame_e2a80832cee711c223f390fab4d7a96d = NULL;

    assertFrameObject( frame_e2a80832cee711c223f390fab4d7a96d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_67_set );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var__ );
    Py_DECREF( var__ );
    var__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var__ );
    var__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_67_set );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_68_add_section( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_section = python_pars[ 1 ];
    PyObject *var__ = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_object_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_name_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_abed26e223c52a3234ad5e8dc70db996 = NULL;

    struct Nuitka_FrameObject *frame_abed26e223c52a3234ad5e8dc70db996;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_abed26e223c52a3234ad5e8dc70db996, codeobj_abed26e223c52a3234ad5e8dc70db996, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_abed26e223c52a3234ad5e8dc70db996 = cache_frame_abed26e223c52a3234ad5e8dc70db996;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_abed26e223c52a3234ad5e8dc70db996 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_abed26e223c52a3234ad5e8dc70db996 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__validate_value_types );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1245;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_section;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_section;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_abed26e223c52a3234ad5e8dc70db996->m_frame.f_lineno = 1245;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1245;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1245;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooo";
        exception_lineno = 1245;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooo";
        exception_lineno = 1245;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;

    tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_3 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_3, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooo";
        exception_lineno = 1245;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_3 == NULL );
    tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooo";
                exception_lineno = 1245;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooo";
        exception_lineno = 1245;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_5 );
    {
        PyObject *old = par_section;
        assert( old != NULL );
        par_section = tmp_assign_source_5;
        Py_INCREF( par_section );
        Py_DECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_6 );
    assert( var__ == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__ = tmp_assign_source_6;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_3;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = var__;
        assert( old != NULL );
        var__ = tmp_assign_source_7;
        Py_INCREF( var__ );
        Py_DECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ConfigParser );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ConfigParser );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ConfigParser" );
        exception_tb = NULL;

        exception_lineno = 1246;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    CHECK_OBJECT( tmp_object_name_1 );
    tmp_called_instance_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1246;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_section;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_abed26e223c52a3234ad5e8dc70db996->m_frame.f_lineno = 1246;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_add_section, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1246;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_abed26e223c52a3234ad5e8dc70db996 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_abed26e223c52a3234ad5e8dc70db996 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_abed26e223c52a3234ad5e8dc70db996, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_abed26e223c52a3234ad5e8dc70db996->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_abed26e223c52a3234ad5e8dc70db996, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_abed26e223c52a3234ad5e8dc70db996,
        type_description_1,
        par_self,
        par_section,
        var__
    );


    // Release cached frame.
    if ( frame_abed26e223c52a3234ad5e8dc70db996 == cache_frame_abed26e223c52a3234ad5e8dc70db996 )
    {
        Py_DECREF( frame_abed26e223c52a3234ad5e8dc70db996 );
    }
    cache_frame_abed26e223c52a3234ad5e8dc70db996 = NULL;

    assertFrameObject( frame_abed26e223c52a3234ad5e8dc70db996 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_68_add_section );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    CHECK_OBJECT( (PyObject *)var__ );
    Py_DECREF( var__ );
    var__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_section );
    Py_DECREF( par_section );
    par_section = NULL;

    Py_XDECREF( var__ );
    var__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_68_add_section );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_69___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_object_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_type_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_c5e80410636f7f6436eb99c1c306172c = NULL;

    struct Nuitka_FrameObject *frame_c5e80410636f7f6436eb99c1c306172c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c5e80410636f7f6436eb99c1c306172c, codeobj_c5e80410636f7f6436eb99c1c306172c, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_c5e80410636f7f6436eb99c1c306172c = cache_frame_c5e80410636f7f6436eb99c1c306172c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c5e80410636f7f6436eb99c1c306172c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c5e80410636f7f6436eb99c1c306172c ) == 2 ); // Frame stack

    // Framed code:
    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_SafeConfigParser );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SafeConfigParser );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SafeConfigParser" );
        exception_tb = NULL;

        exception_lineno = 1253;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    CHECK_OBJECT( tmp_object_name_1 );
    tmp_source_name_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1253;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1253;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_unused = impl___internal__$$$function_1_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1253;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_warnings );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "warnings" );
        exception_tb = NULL;

        exception_lineno = 1254;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_warn );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1254;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = const_unicode_digest_2056f54f51dda70a2e666ca792d6d9e2;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DeprecationWarning" );
        exception_tb = NULL;

        exception_lineno = 1258;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = PyDict_Copy( const_dict_f154c9a58c9419d7e391901d7b7fe49e );
    frame_c5e80410636f7f6436eb99c1c306172c->m_frame.f_lineno = 1254;
    tmp_unused = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1254;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c5e80410636f7f6436eb99c1c306172c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c5e80410636f7f6436eb99c1c306172c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c5e80410636f7f6436eb99c1c306172c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c5e80410636f7f6436eb99c1c306172c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c5e80410636f7f6436eb99c1c306172c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c5e80410636f7f6436eb99c1c306172c,
        type_description_1,
        par_self,
        par_args,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_c5e80410636f7f6436eb99c1c306172c == cache_frame_c5e80410636f7f6436eb99c1c306172c )
    {
        Py_DECREF( frame_c5e80410636f7f6436eb99c1c306172c );
    }
    cache_frame_c5e80410636f7f6436eb99c1c306172c = NULL;

    assertFrameObject( frame_c5e80410636f7f6436eb99c1c306172c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_69___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_69___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_70___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *par_name = python_pars[ 2 ];
    PyObject *var_conv = NULL;
    PyObject *var_key = NULL;
    PyObject *var_getter = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_next_source_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_a5420b73d4db59845097e06f1d827349 = NULL;

    struct Nuitka_FrameObject *frame_a5420b73d4db59845097e06f1d827349;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a5420b73d4db59845097e06f1d827349, codeobj_a5420b73d4db59845097e06f1d827349, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a5420b73d4db59845097e06f1d827349 = cache_frame_a5420b73d4db59845097e06f1d827349;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a5420b73d4db59845097e06f1d827349 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a5420b73d4db59845097e06f1d827349 ) == 2 ); // Frame stack

    // Framed code:
    tmp_assattr_name_1 = par_parser;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__parser, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1267;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = par_name;

    CHECK_OBJECT( tmp_assattr_name_2 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__name, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1268;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = par_parser;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_converters );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1269;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1269;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooo";
            exception_lineno = 1269;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_conv;
        var_conv = tmp_assign_source_3;
        Py_INCREF( var_conv );
        Py_XDECREF( old );
    }

    tmp_left_name_1 = const_unicode_plain_get;
    tmp_right_name_1 = var_conv;

    CHECK_OBJECT( tmp_right_name_1 );
    tmp_assign_source_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1270;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_key;
        var_key = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 1271;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_partial );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1271;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 1 );
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_get );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );

        exception_lineno = 1271;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_getattr_target_1 = par_parser;

    CHECK_OBJECT( tmp_getattr_target_1 );
    tmp_getattr_attr_1 = var_key;

    CHECK_OBJECT( tmp_getattr_attr_1 );
    tmp_dict_value_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 1271;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_dict_key_1 = const_str_plain__impl;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_a5420b73d4db59845097e06f1d827349->m_frame.f_lineno = 1271;
    tmp_assign_source_5 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1271;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_getter;
        var_getter = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_setattr_target_1 = par_self;

    CHECK_OBJECT( tmp_setattr_target_1 );
    tmp_setattr_attr_1 = var_key;

    CHECK_OBJECT( tmp_setattr_attr_1 );
    tmp_setattr_value_1 = var_getter;

    CHECK_OBJECT( tmp_setattr_value_1 );
    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1272;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1269;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a5420b73d4db59845097e06f1d827349 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a5420b73d4db59845097e06f1d827349 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a5420b73d4db59845097e06f1d827349, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a5420b73d4db59845097e06f1d827349->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a5420b73d4db59845097e06f1d827349, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a5420b73d4db59845097e06f1d827349,
        type_description_1,
        par_self,
        par_parser,
        par_name,
        var_conv,
        var_key,
        var_getter
    );


    // Release cached frame.
    if ( frame_a5420b73d4db59845097e06f1d827349 == cache_frame_a5420b73d4db59845097e06f1d827349 )
    {
        Py_DECREF( frame_a5420b73d4db59845097e06f1d827349 );
    }
    cache_frame_a5420b73d4db59845097e06f1d827349 = NULL;

    assertFrameObject( frame_a5420b73d4db59845097e06f1d827349 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_70___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    Py_XDECREF( var_conv );
    var_conv = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_getter );
    var_getter = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    Py_XDECREF( var_conv );
    var_conv = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_getter );
    var_getter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_70___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_71___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_c9a0eb1d420f6fb05ca5f0971b53a48f = NULL;

    struct Nuitka_FrameObject *frame_c9a0eb1d420f6fb05ca5f0971b53a48f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c9a0eb1d420f6fb05ca5f0971b53a48f, codeobj_c9a0eb1d420f6fb05ca5f0971b53a48f, module_backports$configparser, sizeof(void *) );
    frame_c9a0eb1d420f6fb05ca5f0971b53a48f = cache_frame_c9a0eb1d420f6fb05ca5f0971b53a48f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c9a0eb1d420f6fb05ca5f0971b53a48f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c9a0eb1d420f6fb05ca5f0971b53a48f ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = const_unicode_digest_8deb2a0fb571306186896008c4c5fd89;
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_format );
    assert( tmp_called_name_1 != NULL );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__name );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1275;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_c9a0eb1d420f6fb05ca5f0971b53a48f->m_frame.f_lineno = 1275;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1275;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c9a0eb1d420f6fb05ca5f0971b53a48f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c9a0eb1d420f6fb05ca5f0971b53a48f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c9a0eb1d420f6fb05ca5f0971b53a48f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c9a0eb1d420f6fb05ca5f0971b53a48f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c9a0eb1d420f6fb05ca5f0971b53a48f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c9a0eb1d420f6fb05ca5f0971b53a48f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c9a0eb1d420f6fb05ca5f0971b53a48f,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_c9a0eb1d420f6fb05ca5f0971b53a48f == cache_frame_c9a0eb1d420f6fb05ca5f0971b53a48f )
    {
        Py_DECREF( frame_c9a0eb1d420f6fb05ca5f0971b53a48f );
    }
    cache_frame_c9a0eb1d420f6fb05ca5f0971b53a48f = NULL;

    assertFrameObject( frame_c9a0eb1d420f6fb05ca5f0971b53a48f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_71___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_71___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_72___getitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    static struct Nuitka_FrameObject *cache_frame_fc2c024fb30f3793c71e27c33495cbc5 = NULL;

    struct Nuitka_FrameObject *frame_fc2c024fb30f3793c71e27c33495cbc5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fc2c024fb30f3793c71e27c33495cbc5, codeobj_fc2c024fb30f3793c71e27c33495cbc5, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_fc2c024fb30f3793c71e27c33495cbc5 = cache_frame_fc2c024fb30f3793c71e27c33495cbc5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fc2c024fb30f3793c71e27c33495cbc5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fc2c024fb30f3793c71e27c33495cbc5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__parser );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1278;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_has_option );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1278;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__name );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1278;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = par_key;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_fc2c024fb30f3793c71e27c33495cbc5->m_frame.f_lineno = 1278;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1278;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1278;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = par_key;

    CHECK_OBJECT( tmp_make_exception_arg_1 );
    frame_fc2c024fb30f3793c71e27c33495cbc5->m_frame.f_lineno = 1279;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_KeyError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 1279;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__parser );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1280;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_get );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1280;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = par_self;

    CHECK_OBJECT( tmp_source_name_6 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__name );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 1280;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_key;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_fc2c024fb30f3793c71e27c33495cbc5->m_frame.f_lineno = 1280;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1280;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fc2c024fb30f3793c71e27c33495cbc5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fc2c024fb30f3793c71e27c33495cbc5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fc2c024fb30f3793c71e27c33495cbc5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fc2c024fb30f3793c71e27c33495cbc5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fc2c024fb30f3793c71e27c33495cbc5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fc2c024fb30f3793c71e27c33495cbc5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fc2c024fb30f3793c71e27c33495cbc5,
        type_description_1,
        par_self,
        par_key
    );


    // Release cached frame.
    if ( frame_fc2c024fb30f3793c71e27c33495cbc5 == cache_frame_fc2c024fb30f3793c71e27c33495cbc5 )
    {
        Py_DECREF( frame_fc2c024fb30f3793c71e27c33495cbc5 );
    }
    cache_frame_fc2c024fb30f3793c71e27c33495cbc5 = NULL;

    assertFrameObject( frame_fc2c024fb30f3793c71e27c33495cbc5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_72___getitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_72___getitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_73___setitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *par_value = python_pars[ 2 ];
    PyObject *var__ = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    static struct Nuitka_FrameObject *cache_frame_b9550e7d02bfa7b3b8c535599a03f2ec = NULL;

    struct Nuitka_FrameObject *frame_b9550e7d02bfa7b3b8c535599a03f2ec;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b9550e7d02bfa7b3b8c535599a03f2ec, codeobj_b9550e7d02bfa7b3b8c535599a03f2ec, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b9550e7d02bfa7b3b8c535599a03f2ec = cache_frame_b9550e7d02bfa7b3b8c535599a03f2ec;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b9550e7d02bfa7b3b8c535599a03f2ec );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b9550e7d02bfa7b3b8c535599a03f2ec ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__parser );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1283;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__validate_value_types );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1283;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_value_1 = par_key;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_option;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = par_value;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain_value;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_b9550e7d02bfa7b3b8c535599a03f2ec->m_frame.f_lineno = 1283;
    tmp_iter_arg_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1283;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1283;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooo";
        exception_lineno = 1283;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooo";
        exception_lineno = 1283;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;

    tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_3 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_3, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooo";
        exception_lineno = 1283;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_3 == NULL );
    tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooo";
                exception_lineno = 1283;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooo";
        exception_lineno = 1283;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_5 );
    assert( var__ == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__ = tmp_assign_source_5;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = par_key;
        assert( old != NULL );
        par_key = tmp_assign_source_6;
        Py_INCREF( par_key );
        Py_DECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_3;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = par_value;
        assert( old != NULL );
        par_value = tmp_assign_source_7;
        Py_INCREF( par_value );
        Py_DECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__parser );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1284;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_set );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1284;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__name );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 1284;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = par_key;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_value;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_b9550e7d02bfa7b3b8c535599a03f2ec->m_frame.f_lineno = 1284;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1284;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b9550e7d02bfa7b3b8c535599a03f2ec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b9550e7d02bfa7b3b8c535599a03f2ec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b9550e7d02bfa7b3b8c535599a03f2ec );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b9550e7d02bfa7b3b8c535599a03f2ec, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b9550e7d02bfa7b3b8c535599a03f2ec->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b9550e7d02bfa7b3b8c535599a03f2ec, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b9550e7d02bfa7b3b8c535599a03f2ec,
        type_description_1,
        par_self,
        par_key,
        par_value,
        var__
    );


    // Release cached frame.
    if ( frame_b9550e7d02bfa7b3b8c535599a03f2ec == cache_frame_b9550e7d02bfa7b3b8c535599a03f2ec )
    {
        Py_DECREF( frame_b9550e7d02bfa7b3b8c535599a03f2ec );
    }
    cache_frame_b9550e7d02bfa7b3b8c535599a03f2ec = NULL;

    assertFrameObject( frame_b9550e7d02bfa7b3b8c535599a03f2ec );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_73___setitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var__ );
    Py_DECREF( var__ );
    var__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var__ );
    var__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_73___setitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_74___delitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    static struct Nuitka_FrameObject *cache_frame_c2f58cd04c5b6411726e80ed1d337a7a = NULL;

    struct Nuitka_FrameObject *frame_c2f58cd04c5b6411726e80ed1d337a7a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c2f58cd04c5b6411726e80ed1d337a7a, codeobj_c2f58cd04c5b6411726e80ed1d337a7a, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_c2f58cd04c5b6411726e80ed1d337a7a = cache_frame_c2f58cd04c5b6411726e80ed1d337a7a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c2f58cd04c5b6411726e80ed1d337a7a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c2f58cd04c5b6411726e80ed1d337a7a ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__parser );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1287;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_has_option );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1287;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__name );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1287;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = par_key;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_c2f58cd04c5b6411726e80ed1d337a7a->m_frame.f_lineno = 1287;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_and_left_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1287;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 1288;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__parser );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_remove_option );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = par_self;

    CHECK_OBJECT( tmp_source_name_6 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__name );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 1288;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_key;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_c2f58cd04c5b6411726e80ed1d337a7a->m_frame.f_lineno = 1288;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_and_right_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1288;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = par_key;

    CHECK_OBJECT( tmp_make_exception_arg_1 );
    frame_c2f58cd04c5b6411726e80ed1d337a7a->m_frame.f_lineno = 1289;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_KeyError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 1289;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c2f58cd04c5b6411726e80ed1d337a7a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c2f58cd04c5b6411726e80ed1d337a7a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c2f58cd04c5b6411726e80ed1d337a7a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c2f58cd04c5b6411726e80ed1d337a7a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c2f58cd04c5b6411726e80ed1d337a7a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c2f58cd04c5b6411726e80ed1d337a7a,
        type_description_1,
        par_self,
        par_key
    );


    // Release cached frame.
    if ( frame_c2f58cd04c5b6411726e80ed1d337a7a == cache_frame_c2f58cd04c5b6411726e80ed1d337a7a )
    {
        Py_DECREF( frame_c2f58cd04c5b6411726e80ed1d337a7a );
    }
    cache_frame_c2f58cd04c5b6411726e80ed1d337a7a = NULL;

    assertFrameObject( frame_c2f58cd04c5b6411726e80ed1d337a7a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_74___delitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_74___delitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_75___contains__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    static struct Nuitka_FrameObject *cache_frame_38e2293536a89ccaf97ca62208348368 = NULL;

    struct Nuitka_FrameObject *frame_38e2293536a89ccaf97ca62208348368;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_38e2293536a89ccaf97ca62208348368, codeobj_38e2293536a89ccaf97ca62208348368, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_38e2293536a89ccaf97ca62208348368 = cache_frame_38e2293536a89ccaf97ca62208348368;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_38e2293536a89ccaf97ca62208348368 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_38e2293536a89ccaf97ca62208348368 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__parser );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1292;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_has_option );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1292;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__name );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1292;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = par_key;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_38e2293536a89ccaf97ca62208348368->m_frame.f_lineno = 1292;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1292;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_38e2293536a89ccaf97ca62208348368 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_38e2293536a89ccaf97ca62208348368 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_38e2293536a89ccaf97ca62208348368 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_38e2293536a89ccaf97ca62208348368, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_38e2293536a89ccaf97ca62208348368->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_38e2293536a89ccaf97ca62208348368, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_38e2293536a89ccaf97ca62208348368,
        type_description_1,
        par_self,
        par_key
    );


    // Release cached frame.
    if ( frame_38e2293536a89ccaf97ca62208348368 == cache_frame_38e2293536a89ccaf97ca62208348368 )
    {
        Py_DECREF( frame_38e2293536a89ccaf97ca62208348368 );
    }
    cache_frame_38e2293536a89ccaf97ca62208348368 = NULL;

    assertFrameObject( frame_38e2293536a89ccaf97ca62208348368 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_75___contains__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_75___contains__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_76___len__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_0b0031f5d0e5da44e03bcd50a2d36fce = NULL;

    struct Nuitka_FrameObject *frame_0b0031f5d0e5da44e03bcd50a2d36fce;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0b0031f5d0e5da44e03bcd50a2d36fce, codeobj_0b0031f5d0e5da44e03bcd50a2d36fce, module_backports$configparser, sizeof(void *) );
    frame_0b0031f5d0e5da44e03bcd50a2d36fce = cache_frame_0b0031f5d0e5da44e03bcd50a2d36fce;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0b0031f5d0e5da44e03bcd50a2d36fce );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0b0031f5d0e5da44e03bcd50a2d36fce ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_0b0031f5d0e5da44e03bcd50a2d36fce->m_frame.f_lineno = 1295;
    tmp_len_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__options );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1295;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1295;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b0031f5d0e5da44e03bcd50a2d36fce );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b0031f5d0e5da44e03bcd50a2d36fce );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b0031f5d0e5da44e03bcd50a2d36fce );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0b0031f5d0e5da44e03bcd50a2d36fce, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0b0031f5d0e5da44e03bcd50a2d36fce->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0b0031f5d0e5da44e03bcd50a2d36fce, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0b0031f5d0e5da44e03bcd50a2d36fce,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_0b0031f5d0e5da44e03bcd50a2d36fce == cache_frame_0b0031f5d0e5da44e03bcd50a2d36fce )
    {
        Py_DECREF( frame_0b0031f5d0e5da44e03bcd50a2d36fce );
    }
    cache_frame_0b0031f5d0e5da44e03bcd50a2d36fce = NULL;

    assertFrameObject( frame_0b0031f5d0e5da44e03bcd50a2d36fce );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_76___len__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_76___len__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_77___iter__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_2878d167ce214c4e3716ab16ab5e7e3a = NULL;

    struct Nuitka_FrameObject *frame_2878d167ce214c4e3716ab16ab5e7e3a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2878d167ce214c4e3716ab16ab5e7e3a, codeobj_2878d167ce214c4e3716ab16ab5e7e3a, module_backports$configparser, sizeof(void *) );
    frame_2878d167ce214c4e3716ab16ab5e7e3a = cache_frame_2878d167ce214c4e3716ab16ab5e7e3a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2878d167ce214c4e3716ab16ab5e7e3a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2878d167ce214c4e3716ab16ab5e7e3a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_2 = par_self;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_2878d167ce214c4e3716ab16ab5e7e3a->m_frame.f_lineno = 1298;
    tmp_called_instance_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain__options );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1298;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_2878d167ce214c4e3716ab16ab5e7e3a->m_frame.f_lineno = 1298;
    tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain___iter__ );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1298;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2878d167ce214c4e3716ab16ab5e7e3a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2878d167ce214c4e3716ab16ab5e7e3a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2878d167ce214c4e3716ab16ab5e7e3a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2878d167ce214c4e3716ab16ab5e7e3a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2878d167ce214c4e3716ab16ab5e7e3a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2878d167ce214c4e3716ab16ab5e7e3a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2878d167ce214c4e3716ab16ab5e7e3a,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_2878d167ce214c4e3716ab16ab5e7e3a == cache_frame_2878d167ce214c4e3716ab16ab5e7e3a )
    {
        Py_DECREF( frame_2878d167ce214c4e3716ab16ab5e7e3a );
    }
    cache_frame_2878d167ce214c4e3716ab16ab5e7e3a = NULL;

    assertFrameObject( frame_2878d167ce214c4e3716ab16ab5e7e3a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_77___iter__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_77___iter__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_78__options( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    static struct Nuitka_FrameObject *cache_frame_f3e570871a913f5c3184102077875453 = NULL;

    struct Nuitka_FrameObject *frame_f3e570871a913f5c3184102077875453;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f3e570871a913f5c3184102077875453, codeobj_f3e570871a913f5c3184102077875453, module_backports$configparser, sizeof(void *) );
    frame_f3e570871a913f5c3184102077875453 = cache_frame_f3e570871a913f5c3184102077875453;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f3e570871a913f5c3184102077875453 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f3e570871a913f5c3184102077875453 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__name );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1301;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__parser );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 1301;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_default_section );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 1301;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );
        Py_DECREF( tmp_compare_right_1 );

        exception_lineno = 1301;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__parser );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1302;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_options );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1302;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = par_self;

    CHECK_OBJECT( tmp_source_name_6 );
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__name );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1302;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_f3e570871a913f5c3184102077875453->m_frame.f_lineno = 1302;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1302;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_source_name_7 = par_self;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__parser );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1304;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_f3e570871a913f5c3184102077875453->m_frame.f_lineno = 1304;
    tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_defaults );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1304;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f3e570871a913f5c3184102077875453 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f3e570871a913f5c3184102077875453 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f3e570871a913f5c3184102077875453 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f3e570871a913f5c3184102077875453, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f3e570871a913f5c3184102077875453->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f3e570871a913f5c3184102077875453, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f3e570871a913f5c3184102077875453,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_f3e570871a913f5c3184102077875453 == cache_frame_f3e570871a913f5c3184102077875453 )
    {
        Py_DECREF( frame_f3e570871a913f5c3184102077875453 );
    }
    cache_frame_f3e570871a913f5c3184102077875453 = NULL;

    assertFrameObject( frame_f3e570871a913f5c3184102077875453 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_78__options );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_78__options );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_79_parser( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_cc0296cfc97e1e26991bcfd44b93b1d1 = NULL;

    struct Nuitka_FrameObject *frame_cc0296cfc97e1e26991bcfd44b93b1d1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cc0296cfc97e1e26991bcfd44b93b1d1, codeobj_cc0296cfc97e1e26991bcfd44b93b1d1, module_backports$configparser, sizeof(void *) );
    frame_cc0296cfc97e1e26991bcfd44b93b1d1 = cache_frame_cc0296cfc97e1e26991bcfd44b93b1d1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cc0296cfc97e1e26991bcfd44b93b1d1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cc0296cfc97e1e26991bcfd44b93b1d1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__parser );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1309;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cc0296cfc97e1e26991bcfd44b93b1d1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_cc0296cfc97e1e26991bcfd44b93b1d1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cc0296cfc97e1e26991bcfd44b93b1d1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cc0296cfc97e1e26991bcfd44b93b1d1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cc0296cfc97e1e26991bcfd44b93b1d1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cc0296cfc97e1e26991bcfd44b93b1d1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cc0296cfc97e1e26991bcfd44b93b1d1,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_cc0296cfc97e1e26991bcfd44b93b1d1 == cache_frame_cc0296cfc97e1e26991bcfd44b93b1d1 )
    {
        Py_DECREF( frame_cc0296cfc97e1e26991bcfd44b93b1d1 );
    }
    cache_frame_cc0296cfc97e1e26991bcfd44b93b1d1 = NULL;

    assertFrameObject( frame_cc0296cfc97e1e26991bcfd44b93b1d1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_79_parser );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_79_parser );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_80_name( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_6968cb8f25a83f309b79c19cdaa12478 = NULL;

    struct Nuitka_FrameObject *frame_6968cb8f25a83f309b79c19cdaa12478;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6968cb8f25a83f309b79c19cdaa12478, codeobj_6968cb8f25a83f309b79c19cdaa12478, module_backports$configparser, sizeof(void *) );
    frame_6968cb8f25a83f309b79c19cdaa12478 = cache_frame_6968cb8f25a83f309b79c19cdaa12478;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6968cb8f25a83f309b79c19cdaa12478 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6968cb8f25a83f309b79c19cdaa12478 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__name );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1314;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6968cb8f25a83f309b79c19cdaa12478 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6968cb8f25a83f309b79c19cdaa12478 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6968cb8f25a83f309b79c19cdaa12478 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6968cb8f25a83f309b79c19cdaa12478, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6968cb8f25a83f309b79c19cdaa12478->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6968cb8f25a83f309b79c19cdaa12478, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6968cb8f25a83f309b79c19cdaa12478,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_6968cb8f25a83f309b79c19cdaa12478 == cache_frame_6968cb8f25a83f309b79c19cdaa12478 )
    {
        Py_DECREF( frame_6968cb8f25a83f309b79c19cdaa12478 );
    }
    cache_frame_6968cb8f25a83f309b79c19cdaa12478 = NULL;

    assertFrameObject( frame_6968cb8f25a83f309b79c19cdaa12478 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_80_name );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_80_name );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_81_get( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_option = python_pars[ 1 ];
    PyObject *par_fallback = python_pars[ 2 ];
    PyObject *par_kwargs = python_pars[ 3 ];
    PyObject *var__impl = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_dircall_arg4_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_b061b1c70bd82a85c4b47597d5e5ce51 = NULL;

    struct Nuitka_FrameObject *frame_b061b1c70bd82a85c4b47597d5e5ce51;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b061b1c70bd82a85c4b47597d5e5ce51, codeobj_b061b1c70bd82a85c4b47597d5e5ce51, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b061b1c70bd82a85c4b47597d5e5ce51 = cache_frame_b061b1c70bd82a85c4b47597d5e5ce51;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b061b1c70bd82a85c4b47597d5e5ce51 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b061b1c70bd82a85c4b47597d5e5ce51 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_b061b1c70bd82a85c4b47597d5e5ce51->m_frame.f_lineno = 1324;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_raw_false_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1324;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_2 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_b061b1c70bd82a85c4b47597d5e5ce51->m_frame.f_lineno = 1325;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_unicode_plain_vars_none_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_3 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_3 );
    frame_b061b1c70bd82a85c4b47597d5e5ce51->m_frame.f_lineno = 1326;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_unicode_plain__impl_none_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1326;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var__impl == NULL );
    var__impl = tmp_assign_source_1;

    tmp_cond_value_1 = var__impl;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1329;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__parser );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1330;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1330;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var__impl;
        assert( old != NULL );
        var__impl = tmp_assign_source_2;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_dircall_arg1_1 = var__impl;

    CHECK_OBJECT( tmp_dircall_arg1_1 );
    tmp_dircall_arg2_1 = PyTuple_New( 2 );
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__name );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_dircall_arg2_1 );

        exception_lineno = 1331;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_option;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_dircall_arg2_1, 1, tmp_tuple_element_1 );
    tmp_dircall_arg3_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_fallback;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_fallback;
    tmp_res = PyDict_SetItem( tmp_dircall_arg3_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dircall_arg4_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg4_1 );
    Py_INCREF( tmp_dircall_arg1_1 );
    Py_INCREF( tmp_dircall_arg4_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1, tmp_dircall_arg4_1};
        tmp_return_value = impl___internal__$$$function_4_complex_call_helper_pos_keywords_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1331;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b061b1c70bd82a85c4b47597d5e5ce51 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b061b1c70bd82a85c4b47597d5e5ce51 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b061b1c70bd82a85c4b47597d5e5ce51 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b061b1c70bd82a85c4b47597d5e5ce51, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b061b1c70bd82a85c4b47597d5e5ce51->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b061b1c70bd82a85c4b47597d5e5ce51, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b061b1c70bd82a85c4b47597d5e5ce51,
        type_description_1,
        par_self,
        par_option,
        par_fallback,
        par_kwargs,
        var__impl
    );


    // Release cached frame.
    if ( frame_b061b1c70bd82a85c4b47597d5e5ce51 == cache_frame_b061b1c70bd82a85c4b47597d5e5ce51 )
    {
        Py_DECREF( frame_b061b1c70bd82a85c4b47597d5e5ce51 );
    }
    cache_frame_b061b1c70bd82a85c4b47597d5e5ce51 = NULL;

    assertFrameObject( frame_b061b1c70bd82a85c4b47597d5e5ce51 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_81_get );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_fallback );
    Py_DECREF( par_fallback );
    par_fallback = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var__impl );
    Py_DECREF( var__impl );
    var__impl = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_fallback );
    Py_DECREF( par_fallback );
    par_fallback = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var__impl );
    var__impl = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_81_get );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_82___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_parser = python_pars[ 1 ];
    PyObject *var_getter = NULL;
    PyObject *var_m = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dir_arg_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    static struct Nuitka_FrameObject *cache_frame_d95705f71f4e270c93e5dd5f7ddba45b = NULL;

    struct Nuitka_FrameObject *frame_d95705f71f4e270c93e5dd5f7ddba45b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d95705f71f4e270c93e5dd5f7ddba45b, codeobj_d95705f71f4e270c93e5dd5f7ddba45b, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d95705f71f4e270c93e5dd5f7ddba45b = cache_frame_d95705f71f4e270c93e5dd5f7ddba45b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d95705f71f4e270c93e5dd5f7ddba45b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d95705f71f4e270c93e5dd5f7ddba45b ) == 2 ); // Frame stack

    // Framed code:
    tmp_assattr_name_1 = par_parser;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__parser, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1345;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = PyDict_New();
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__data, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 1346;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dir_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__parser );
    if ( tmp_dir_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1347;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = PyObject_Dir( tmp_dir_arg_1 );
    Py_DECREF( tmp_dir_arg_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1347;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1347;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooo";
            exception_lineno = 1347;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_getter;
        var_getter = tmp_assign_source_3;
        Py_INCREF( var_getter );
        Py_XDECREF( old );
    }

    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_GETTERCRE );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1348;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = var_getter;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_d95705f71f4e270c93e5dd5f7ddba45b->m_frame.f_lineno = 1348;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_match, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1348;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_m;
        var_m = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_operand_name_1 = var_m;

    CHECK_OBJECT( tmp_operand_name_1 );
    tmp_or_left_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1349;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1349;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_callable );
    assert( tmp_called_name_1 != NULL );
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_getattr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__parser );
    if ( tmp_getattr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1349;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_getattr_attr_1 = var_getter;

    CHECK_OBJECT( tmp_getattr_attr_1 );
    tmp_args_element_name_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    Py_DECREF( tmp_getattr_target_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1349;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    frame_d95705f71f4e270c93e5dd5f7ddba45b->m_frame.f_lineno = 1349;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_operand_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1349;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_or_right_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1349;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1349;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    goto loop_start_1;
    branch_no_1:;
    tmp_ass_subvalue_1 = Py_None;
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__data );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1351;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_called_instance_2 = var_m;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_d95705f71f4e270c93e5dd5f7ddba45b->m_frame.f_lineno = 1351;
    tmp_ass_subscript_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_group, &PyTuple_GET_ITEM( const_tuple_unicode_plain_name_tuple, 0 ) );

    if ( tmp_ass_subscript_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        exception_lineno = 1351;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    Py_DECREF( tmp_ass_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1351;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1347;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d95705f71f4e270c93e5dd5f7ddba45b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d95705f71f4e270c93e5dd5f7ddba45b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d95705f71f4e270c93e5dd5f7ddba45b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d95705f71f4e270c93e5dd5f7ddba45b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d95705f71f4e270c93e5dd5f7ddba45b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d95705f71f4e270c93e5dd5f7ddba45b,
        type_description_1,
        par_self,
        par_parser,
        var_getter,
        var_m
    );


    // Release cached frame.
    if ( frame_d95705f71f4e270c93e5dd5f7ddba45b == cache_frame_d95705f71f4e270c93e5dd5f7ddba45b )
    {
        Py_DECREF( frame_d95705f71f4e270c93e5dd5f7ddba45b );
    }
    cache_frame_d95705f71f4e270c93e5dd5f7ddba45b = NULL;

    assertFrameObject( frame_d95705f71f4e270c93e5dd5f7ddba45b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_82___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    Py_XDECREF( var_getter );
    var_getter = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_parser );
    Py_DECREF( par_parser );
    par_parser = NULL;

    Py_XDECREF( var_getter );
    var_getter = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_82___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_83___getitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_0e6f76a75cf39b59a5693dec2a8d022e = NULL;

    struct Nuitka_FrameObject *frame_0e6f76a75cf39b59a5693dec2a8d022e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0e6f76a75cf39b59a5693dec2a8d022e, codeobj_0e6f76a75cf39b59a5693dec2a8d022e, module_backports$configparser, sizeof(void *)+sizeof(void *) );
    frame_0e6f76a75cf39b59a5693dec2a8d022e = cache_frame_0e6f76a75cf39b59a5693dec2a8d022e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0e6f76a75cf39b59a5693dec2a8d022e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0e6f76a75cf39b59a5693dec2a8d022e ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__data );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1354;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = par_key;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1354;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0e6f76a75cf39b59a5693dec2a8d022e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0e6f76a75cf39b59a5693dec2a8d022e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0e6f76a75cf39b59a5693dec2a8d022e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0e6f76a75cf39b59a5693dec2a8d022e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0e6f76a75cf39b59a5693dec2a8d022e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0e6f76a75cf39b59a5693dec2a8d022e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0e6f76a75cf39b59a5693dec2a8d022e,
        type_description_1,
        par_self,
        par_key
    );


    // Release cached frame.
    if ( frame_0e6f76a75cf39b59a5693dec2a8d022e == cache_frame_0e6f76a75cf39b59a5693dec2a8d022e )
    {
        Py_DECREF( frame_0e6f76a75cf39b59a5693dec2a8d022e );
    }
    cache_frame_0e6f76a75cf39b59a5693dec2a8d022e = NULL;

    assertFrameObject( frame_0e6f76a75cf39b59a5693dec2a8d022e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_83___getitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_83___getitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_84___setitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *par_value = python_pars[ 2 ];
    PyObject *var_k = NULL;
    PyObject *var_func = NULL;
    PyObject *var_proxy = NULL;
    PyObject *var_getter = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_attr_2;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_target_2;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_setattr_value_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_type_arg_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_744f15a6dacd05be21a5ae8b69a5630c = NULL;

    struct Nuitka_FrameObject *frame_744f15a6dacd05be21a5ae8b69a5630c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_744f15a6dacd05be21a5ae8b69a5630c, codeobj_744f15a6dacd05be21a5ae8b69a5630c, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_744f15a6dacd05be21a5ae8b69a5630c = cache_frame_744f15a6dacd05be21a5ae8b69a5630c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_744f15a6dacd05be21a5ae8b69a5630c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_744f15a6dacd05be21a5ae8b69a5630c ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_left_name_1 = const_unicode_plain_get;
    tmp_right_name_1 = par_key;

    CHECK_OBJECT( tmp_right_name_1 );
    tmp_assign_source_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1358;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    assert( var_k == NULL );
    var_k = tmp_assign_source_1;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_744f15a6dacd05be21a5ae8b69a5630c );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_744f15a6dacd05be21a5ae8b69a5630c, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_744f15a6dacd05be21a5ae8b69a5630c, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_TypeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1359;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_instance_1 = const_unicode_digest_ea09ec4e8700c977766a0e16c21a30a1;
    tmp_args_element_name_1 = par_key;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_type_arg_1 = par_key;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_args_element_name_2 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_args_element_name_2 != NULL );
    frame_744f15a6dacd05be21a5ae8b69a5630c->m_frame.f_lineno = 1360;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_make_exception_arg_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_format, call_args );
    }

    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1360;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    frame_744f15a6dacd05be21a5ae8b69a5630c->m_frame.f_lineno = 1360;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 1360;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooooo";
    goto frame_exception_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1357;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_744f15a6dacd05be21a5ae8b69a5630c->m_frame) frame_744f15a6dacd05be21a5ae8b69a5630c->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooo";
    goto frame_exception_exit_1;
    branch_end_1:;
    // End of try:
    try_end_1:;
    tmp_compare_left_2 = var_k;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = const_unicode_plain_get;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1362;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_make_exception_arg_2 = const_unicode_digest_ea6cba6daff355ced485663c0798a1b3;
    frame_744f15a6dacd05be21a5ae8b69a5630c->m_frame.f_lineno = 1363;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_2 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    assert( tmp_raise_type_2 != NULL );
    exception_type = tmp_raise_type_2;
    exception_lineno = 1363;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooooo";
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_ass_subvalue_1 = par_value;

    CHECK_OBJECT( tmp_ass_subvalue_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__data );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1364;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_ass_subscript_1 = par_key;

    CHECK_OBJECT( tmp_ass_subscript_1 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1364;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 1365;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_partial );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1365;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 1 );
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__parser );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );

        exception_lineno = 1365;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__get_conv );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );

        exception_lineno = 1365;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_value;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_conv;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_744f15a6dacd05be21a5ae8b69a5630c->m_frame.f_lineno = 1365;
    tmp_assign_source_2 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1365;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_func == NULL );
    var_func = tmp_assign_source_2;

    tmp_assattr_name_1 = par_value;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = var_func;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_converter, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1366;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = par_self;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_setattr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__parser );
    if ( tmp_setattr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1367;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_setattr_attr_1 = var_k;

    CHECK_OBJECT( tmp_setattr_attr_1 );
    tmp_setattr_value_1 = var_func;

    CHECK_OBJECT( tmp_setattr_value_1 );
    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_target_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1367;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = par_self;

    CHECK_OBJECT( tmp_source_name_6 );
    tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__parser );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1368;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    frame_744f15a6dacd05be21a5ae8b69a5630c->m_frame.f_lineno = 1368;
    tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_values );
    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1368;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1368;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooo";
            exception_lineno = 1368;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_5 );
    {
        PyObject *old = var_proxy;
        var_proxy = tmp_assign_source_5;
        Py_INCREF( var_proxy );
        Py_XDECREF( old );
    }

    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 1369;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_partial );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1369;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    tmp_args_name_2 = PyTuple_New( 1 );
    tmp_source_name_8 = var_proxy;

    CHECK_OBJECT( tmp_source_name_8 );
    tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_get );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_2 );

        exception_lineno = 1369;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_2 = var_func;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain__impl;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_744f15a6dacd05be21a5ae8b69a5630c->m_frame.f_lineno = 1369;
    tmp_assign_source_6 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1369;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_getter;
        var_getter = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_setattr_target_2 = var_proxy;

    CHECK_OBJECT( tmp_setattr_target_2 );
    tmp_setattr_attr_2 = var_k;

    CHECK_OBJECT( tmp_setattr_attr_2 );
    tmp_setattr_value_2 = var_getter;

    CHECK_OBJECT( tmp_setattr_value_2 );
    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_2, tmp_setattr_attr_2, tmp_setattr_value_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1370;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1368;
        type_description_1 = "ooooooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_744f15a6dacd05be21a5ae8b69a5630c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_744f15a6dacd05be21a5ae8b69a5630c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_744f15a6dacd05be21a5ae8b69a5630c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_744f15a6dacd05be21a5ae8b69a5630c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_744f15a6dacd05be21a5ae8b69a5630c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_744f15a6dacd05be21a5ae8b69a5630c,
        type_description_1,
        par_self,
        par_key,
        par_value,
        var_k,
        var_func,
        var_proxy,
        var_getter
    );


    // Release cached frame.
    if ( frame_744f15a6dacd05be21a5ae8b69a5630c == cache_frame_744f15a6dacd05be21a5ae8b69a5630c )
    {
        Py_DECREF( frame_744f15a6dacd05be21a5ae8b69a5630c );
    }
    cache_frame_744f15a6dacd05be21a5ae8b69a5630c = NULL;

    assertFrameObject( frame_744f15a6dacd05be21a5ae8b69a5630c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_84___setitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_k );
    Py_DECREF( var_k );
    var_k = NULL;

    CHECK_OBJECT( (PyObject *)var_func );
    Py_DECREF( var_func );
    var_func = NULL;

    Py_XDECREF( var_proxy );
    var_proxy = NULL;

    Py_XDECREF( var_getter );
    var_getter = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_func );
    var_func = NULL;

    Py_XDECREF( var_proxy );
    var_proxy = NULL;

    Py_XDECREF( var_getter );
    var_getter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_84___setitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_85___delitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_key = python_pars[ 1 ];
    PyObject *var_k = NULL;
    PyObject *var_inst = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_next_source_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_47ab76a39786d271d4004f9bcd2caf05 = NULL;

    struct Nuitka_FrameObject *frame_47ab76a39786d271d4004f9bcd2caf05;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_47ab76a39786d271d4004f9bcd2caf05, codeobj_47ab76a39786d271d4004f9bcd2caf05, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_47ab76a39786d271d4004f9bcd2caf05 = cache_frame_47ab76a39786d271d4004f9bcd2caf05;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_47ab76a39786d271d4004f9bcd2caf05 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_47ab76a39786d271d4004f9bcd2caf05 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_left_name_1 = const_unicode_plain_get;
    tmp_or_left_value_1 = par_key;

    CHECK_OBJECT( tmp_or_left_value_1 );
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1374;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_or_right_value_1 = Py_None;
    tmp_right_name_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_right_name_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_assign_source_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1374;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    assert( var_k == NULL );
    var_k = tmp_assign_source_1;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_47ab76a39786d271d4004f9bcd2caf05 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_47ab76a39786d271d4004f9bcd2caf05, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_47ab76a39786d271d4004f9bcd2caf05, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_TypeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1375;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = par_key;

    CHECK_OBJECT( tmp_make_exception_arg_1 );
    frame_47ab76a39786d271d4004f9bcd2caf05->m_frame.f_lineno = 1376;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_KeyError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 1376;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooo";
    goto frame_exception_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1373;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_47ab76a39786d271d4004f9bcd2caf05->m_frame) frame_47ab76a39786d271d4004f9bcd2caf05->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooo";
    goto frame_exception_exit_1;
    branch_end_1:;
    // End of try:
    try_end_1:;
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_delsubscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__data );
    if ( tmp_delsubscr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1377;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_delsubscr_subscript_1 = par_key;

    CHECK_OBJECT( tmp_delsubscr_subscript_1 );
    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    Py_DECREF( tmp_delsubscr_target_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1377;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_itertools );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "itertools" );
        exception_tb = NULL;

        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_chain );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = PyTuple_New( 1 );
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__parser );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
    tmp_source_name_4 = par_self;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__parser );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_47ab76a39786d271d4004f9bcd2caf05->m_frame.f_lineno = 1378;
    tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_values );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_47ab76a39786d271d4004f9bcd2caf05->m_frame.f_lineno = 1378;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooo";
            exception_lineno = 1378;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_4 );
    {
        PyObject *old = var_inst;
        var_inst = tmp_assign_source_4;
        Py_INCREF( var_inst );
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_called_name_2 = LOOKUP_BUILTIN( const_str_plain_delattr );
    assert( tmp_called_name_2 != NULL );
    tmp_args_element_name_3 = var_inst;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = var_k;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_47ab76a39786d271d4004f9bcd2caf05->m_frame.f_lineno = 1380;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1380;
        type_description_1 = "oooo";
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_unused );
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_47ab76a39786d271d4004f9bcd2caf05 );
    if ( exception_keeper_tb_2 == NULL )
    {
        exception_keeper_tb_2 = MAKE_TRACEBACK( frame_47ab76a39786d271d4004f9bcd2caf05, exception_keeper_lineno_2 );
    }
    else if ( exception_keeper_lineno_2 != 0 )
    {
        exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_47ab76a39786d271d4004f9bcd2caf05, exception_keeper_lineno_2 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_AttributeError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1381;
        type_description_1 = "oooo";
        goto try_except_handler_3;
    }
    if ( tmp_exc_match_exception_match_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    goto loop_start_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1379;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_47ab76a39786d271d4004f9bcd2caf05->m_frame) frame_47ab76a39786d271d4004f9bcd2caf05->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooo";
    goto try_except_handler_3;
    branch_end_2:;
    // End of try:
    try_end_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_47ab76a39786d271d4004f9bcd2caf05 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_47ab76a39786d271d4004f9bcd2caf05 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_47ab76a39786d271d4004f9bcd2caf05, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_47ab76a39786d271d4004f9bcd2caf05->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_47ab76a39786d271d4004f9bcd2caf05, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_47ab76a39786d271d4004f9bcd2caf05,
        type_description_1,
        par_self,
        par_key,
        var_k,
        var_inst
    );


    // Release cached frame.
    if ( frame_47ab76a39786d271d4004f9bcd2caf05 == cache_frame_47ab76a39786d271d4004f9bcd2caf05 )
    {
        Py_DECREF( frame_47ab76a39786d271d4004f9bcd2caf05 );
    }
    cache_frame_47ab76a39786d271d4004f9bcd2caf05 = NULL;

    assertFrameObject( frame_47ab76a39786d271d4004f9bcd2caf05 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_85___delitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    CHECK_OBJECT( (PyObject *)var_k );
    Py_DECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_inst );
    var_inst = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_inst );
    var_inst = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_85___delitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_86___iter__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_3d63a738ba45c810806c6b5d18a27e17 = NULL;

    struct Nuitka_FrameObject *frame_3d63a738ba45c810806c6b5d18a27e17;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3d63a738ba45c810806c6b5d18a27e17, codeobj_3d63a738ba45c810806c6b5d18a27e17, module_backports$configparser, sizeof(void *) );
    frame_3d63a738ba45c810806c6b5d18a27e17 = cache_frame_3d63a738ba45c810806c6b5d18a27e17;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3d63a738ba45c810806c6b5d18a27e17 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3d63a738ba45c810806c6b5d18a27e17 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__data );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1387;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1387;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3d63a738ba45c810806c6b5d18a27e17 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3d63a738ba45c810806c6b5d18a27e17 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3d63a738ba45c810806c6b5d18a27e17 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3d63a738ba45c810806c6b5d18a27e17, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3d63a738ba45c810806c6b5d18a27e17->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3d63a738ba45c810806c6b5d18a27e17, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3d63a738ba45c810806c6b5d18a27e17,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_3d63a738ba45c810806c6b5d18a27e17 == cache_frame_3d63a738ba45c810806c6b5d18a27e17 )
    {
        Py_DECREF( frame_3d63a738ba45c810806c6b5d18a27e17 );
    }
    cache_frame_3d63a738ba45c810806c6b5d18a27e17 = NULL;

    assertFrameObject( frame_3d63a738ba45c810806c6b5d18a27e17 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_86___iter__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_86___iter__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_backports$configparser$$$function_87___len__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_78951cd80c8ae318b1b1e563c8f65e5b = NULL;

    struct Nuitka_FrameObject *frame_78951cd80c8ae318b1b1e563c8f65e5b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_78951cd80c8ae318b1b1e563c8f65e5b, codeobj_78951cd80c8ae318b1b1e563c8f65e5b, module_backports$configparser, sizeof(void *) );
    frame_78951cd80c8ae318b1b1e563c8f65e5b = cache_frame_78951cd80c8ae318b1b1e563c8f65e5b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_78951cd80c8ae318b1b1e563c8f65e5b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_78951cd80c8ae318b1b1e563c8f65e5b ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__data );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1390;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1390;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_78951cd80c8ae318b1b1e563c8f65e5b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_78951cd80c8ae318b1b1e563c8f65e5b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_78951cd80c8ae318b1b1e563c8f65e5b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_78951cd80c8ae318b1b1e563c8f65e5b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_78951cd80c8ae318b1b1e563c8f65e5b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_78951cd80c8ae318b1b1e563c8f65e5b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_78951cd80c8ae318b1b1e563c8f65e5b,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_78951cd80c8ae318b1b1e563c8f65e5b == cache_frame_78951cd80c8ae318b1b1e563c8f65e5b )
    {
        Py_DECREF( frame_78951cd80c8ae318b1b1e563c8f65e5b );
    }
    cache_frame_78951cd80c8ae318b1b1e563c8f65e5b = NULL;

    assertFrameObject( frame_78951cd80c8ae318b1b1e563c8f65e5b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_87___len__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser$$$function_87___len__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_10___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_10___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d7c59a1e0605ca9b4014603d0f36cf10,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_11_filename(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_11_filename,
        const_str_plain_filename,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_503092ca0c346f01e6adeeb3bd535d10,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_d116969f3678a49de4788256651f4ba8,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_12_filename(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_12_filename,
        const_str_plain_filename,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e2c98e119976a26715ef97014c3668ae,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_cb8953f72b664bec33773b24759057f2,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_13_append(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_13_append,
        const_str_plain_append,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_80653693d1f70a7a77e31361385ed7aa,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_14___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_14___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ae840599afa6dc32ea4c9ee4e8dd87e2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_15_before_get(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_15_before_get,
        const_str_plain_before_get,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6e912e3ea1bbc83deaadbfb7d3822c32,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_16_before_set(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_16_before_set,
        const_str_plain_before_set,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_baeb827ef30a15138dc40640f0ad1f16,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_17_before_read(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_17_before_read,
        const_str_plain_before_read,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ab55c2b179c81cb40e21314823bb83f0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_18_before_write(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_18_before_write,
        const_str_plain_before_write,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6618e93e2d1bceb08c93139c77e98a4a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_19_before_get(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_19_before_get,
        const_str_plain_before_get,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_51cc3dc844562a78290fe7eda25da1c2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_1___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_beb8cf217168786cbfc0cffa934f6dcf,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_20_before_set(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_20_before_set,
        const_str_plain_before_set,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ba94be6d76e470aaad260bd3038c6148,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_21__interpolate_some(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_21__interpolate_some,
        const_str_plain__interpolate_some,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1cb4ee8f849e6ed15b3d3cccb81790b3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_22_before_get(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_22_before_get,
        const_str_plain_before_get,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7cfa546ecb06a850c3e5d3844990f666,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_23_before_set(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_23_before_set,
        const_str_plain_before_set,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6bdef8e962197536356cf8d3fd9c934f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_24__interpolate_some(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_24__interpolate_some,
        const_str_plain__interpolate_some,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a9d056abfb66efd51ab0ad66d53b7228,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_25_before_get(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_25_before_get,
        const_str_plain_before_get,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_23a563440601bc013ec73f2f4d54f600,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_26_before_set(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_26_before_set,
        const_str_plain_before_set,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_291f42a14f58b536292a20c599bac6f5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_27__interpolation_replace(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_27__interpolation_replace,
        const_str_plain__interpolation_replace,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4019ba08b58ba7d30d5741fe684fea6e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_28___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_28___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d2b77459cd226d739fe11c413ebe5386,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_29_defaults(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_29_defaults,
        const_str_plain_defaults,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9e0f9d0dc02a6e2954af5c6c2bc553d8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_2___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_2___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6bad5d6328cf7eb9ea5b382bc11ab46e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_30_sections(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_30_sections,
        const_str_plain_sections,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b0c3aba41106fb9db0b937d9a8930ab9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_5b1239f5c0fafdafe0da77042401314f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_31_add_section(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_31_add_section,
        const_str_plain_add_section,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_25b1e4ac38b8dd4e768369c3920f267a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_103ef0436fca070da42cade6efad0c30,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_32_has_section(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_32_has_section,
        const_str_plain_has_section,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7c73b6073210442193c92c29ca2b700b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_1f92d9ab67c11fc46d9c44149d230a67,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_33_options(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_33_options,
        const_str_plain_options,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9e488e3e6b003bd4988650021f9a8896,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_196f7ecd368dc258e71cf76594c5dbd9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_34_read( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_34_read,
        const_str_plain_read,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f8f4c647f95a11b72eadacb3437e5e7a,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_2b17af6512f94b422e2cdf46d7a2cd05,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_35_read_file( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_35_read_file,
        const_str_plain_read_file,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7a2c4ef3755c467efd14b718fade8dba,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_26f263beb79cc8e1a96654e83a2c718b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_36_read_string( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_36_read_string,
        const_str_plain_read_string,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a2aaf48369809ea7f18bcf4f26799bec,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_f12c4656a51d1e626cbcead58b6119d2,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_37_read_dict( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_37_read_dict,
        const_str_plain_read_dict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_62c3d8e16848ef7854278f3bc5ceb404,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_1b9555de4b3c305c71ba07924825cf5a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_38_readfp( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_38_readfp,
        const_str_plain_readfp,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d8eab99f266489c382c69bb3041e835e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_42b0ab13226a892a08ecc9034177b2cb,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_39_get(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_39_get,
        const_str_plain_get,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f67fe1e40143ec3725182e2baf1d7514,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_f82f3044a826ec8f37ea1989caff8a4e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_3___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_3___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c2668d862c6148091184820ea0e3e43d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_40__get(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_40__get,
        const_str_plain__get,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b5c31df4eae6765cb7096a3dae45ff07,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_41__get_conv(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_41__get_conv,
        const_str_plain__get_conv,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5e419908535ffb567cbe7d7947a53ae3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_42_getint(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_42_getint,
        const_str_plain_getint,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_dc9d3a3a388893342a3bf29832c2b90e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_43_getfloat(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_43_getfloat,
        const_str_plain_getfloat,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_feac3581a44afac5b067457ac2606c93,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_44_getboolean(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_44_getboolean,
        const_str_plain_getboolean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3af5314f549e28ccdcc3972a01671d47,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_45_items( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_45_items,
        const_str_plain_items,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_78a9953e49c06d6508c397cd361923f0,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_a323efdbe45e9fbbc3671543a313d2cf,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_45_items$$$function_1_lambda( struct Nuitka_CellObject *closure_d, struct Nuitka_CellObject *closure_section, struct Nuitka_CellObject *closure_self )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_45_items$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3dba0c8888c9537cf6af4d557f33ce7c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        3
    );

result->m_closure[0] = closure_d;
Py_INCREF( result->m_closure[0] );
result->m_closure[1] = closure_section;
Py_INCREF( result->m_closure[1] );
result->m_closure[2] = closure_self;
Py_INCREF( result->m_closure[2] );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_45_items$$$function_2_lambda( struct Nuitka_CellObject *closure_d )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_45_items$$$function_2_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b28dd019ed58c09f14d3689247505663,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        1
    );

result->m_closure[0] = closure_d;
Py_INCREF( result->m_closure[0] );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_46_popitem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_46_popitem,
        const_str_plain_popitem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_109729f46230a734099fdc1f60bd4f48,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_92620cfc7f97a4f02f72f4c332258a0d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_47_optionxform(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_47_optionxform,
        const_str_plain_optionxform,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4a224452ed067dc5ed6241cca7d548cd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_48_has_option(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_48_has_option,
        const_str_plain_has_option,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_09f24ec8ef427033a6c980f7171c595d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_9dda3b347f4490a721713de320c4939e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_49_set( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_49_set,
        const_str_plain_set,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fd6b6f72edb252c36d2235a132eb9d28,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_c924cb63340003048350ea06e3ba3ef4,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_4___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_4___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2b7353245759a55d688c9c933b7327cd,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_50_write( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_50_write,
        const_str_plain_write,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8aac508308ce783222341b08cc71d0b4,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_d9bfe4bacf6eccce4ccb97839cac728a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_51__write_section(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_51__write_section,
        const_str_plain__write_section,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d717256835b597e7be6307bed192a9ab,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_dae4a0e89d49141cd5a78a833b7df4e0,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_52_remove_option(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_52_remove_option,
        const_str_plain_remove_option,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0a1e04afecd3eca276cd28298ea7771e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_7b3bca760f870946ea0048947045fdbf,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_53_remove_section(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_53_remove_section,
        const_str_plain_remove_section,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_87161ff4786bfac1e552670a602c895f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_7b121adedd001c67062f1cdedf86549d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_54___getitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_54___getitem__,
        const_str_plain___getitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4d9075612c6c82ef69847d9c6971ac19,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_55___setitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_55___setitem__,
        const_str_plain___setitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bc110664060803235e326e00bc1c6e2e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_56___delitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_56___delitem__,
        const_str_plain___delitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7d72c5a1328b9be182f6506bb7c35c78,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_57___contains__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_57___contains__,
        const_str_plain___contains__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_dfe6f968acd0490fca4f335531ef38b3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_58___len__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_58___len__,
        const_str_plain___len__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_92a69b115ee9417d928eedd215149698,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_59___iter__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_59___iter__,
        const_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_60f3cb39b8eb02ad7baa6e877a6e3907,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_5___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_5___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3e3e08daeba1f2f41acf3dd74311fed1,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_60__read(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_60__read,
        const_str_plain__read,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ab1c2b3f959bff7c0e4bb051505dc51b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_595de77368bf8b4f1a509a3782848544,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_61__join_multiline_values(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_61__join_multiline_values,
        const_str_plain__join_multiline_values,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4d7f0c1f5c85bcc025539d616b230c49,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_62__handle_error(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_62__handle_error,
        const_str_plain__handle_error,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_852592d0099987bfb5608bfa0794908e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_63__unify_values(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_63__unify_values,
        const_str_plain__unify_values,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6f97561e54b0e66dda4246d4acff942c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_f3da1e8b37fff523f27655056557d16f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_64__convert_to_boolean(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_64__convert_to_boolean,
        const_str_plain__convert_to_boolean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0795b625ce78321c74d98095e411cdd2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_aa6e002a5624aef8ede10ac56676c30b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_65__validate_value_types(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_65__validate_value_types,
        const_str_plain__validate_value_types,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_71f2c142bbe82ea466be0ab6ea3535ac,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_d11f6e3c207689d9d4133ffcf5b86765,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_66_converters(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_66_converters,
        const_str_plain_converters,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2c223045dc62113b154f3510d62c8681,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_67_set( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_67_set,
        const_str_plain_set,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e2a80832cee711c223f390fab4d7a96d,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_ea4d823bdfb88b939de467d57614ceb3,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_68_add_section(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_68_add_section,
        const_str_plain_add_section,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_abed26e223c52a3234ad5e8dc70db996,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_9f20f6717c1f5b6d818952a8db8ef7c1,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_69___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_69___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c5e80410636f7f6436eb99c1c306172c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_6___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_6___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c2e2c04352c53777ade891322f9a784d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_70___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_70___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a5420b73d4db59845097e06f1d827349,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_c3f2c8fd00d902a8a5910f161be13f89,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_71___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_71___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c9a0eb1d420f6fb05ca5f0971b53a48f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_72___getitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_72___getitem__,
        const_str_plain___getitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fc2c024fb30f3793c71e27c33495cbc5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_73___setitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_73___setitem__,
        const_str_plain___setitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b9550e7d02bfa7b3b8c535599a03f2ec,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_74___delitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_74___delitem__,
        const_str_plain___delitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c2f58cd04c5b6411726e80ed1d337a7a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_75___contains__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_75___contains__,
        const_str_plain___contains__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_38e2293536a89ccaf97ca62208348368,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_76___len__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_76___len__,
        const_str_plain___len__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0b0031f5d0e5da44e03bcd50a2d36fce,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_77___iter__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_77___iter__,
        const_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2878d167ce214c4e3716ab16ab5e7e3a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_78__options(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_78__options,
        const_str_plain__options,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f3e570871a913f5c3184102077875453,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_79_parser(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_79_parser,
        const_str_plain_parser,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_cc0296cfc97e1e26991bcfd44b93b1d1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_7___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_7___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f74f9293c5e7b1731951d53d79a519ec,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_80_name(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_80_name,
        const_str_plain_name,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6968cb8f25a83f309b79c19cdaa12478,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_81_get( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_81_get,
        const_str_plain_get,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b061b1c70bd82a85c4b47597d5e5ce51,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        const_unicode_digest_a9245b0df173463d2e91b24cc86ec6f9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_82___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_82___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d95705f71f4e270c93e5dd5f7ddba45b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_83___getitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_83___getitem__,
        const_str_plain___getitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0e6f76a75cf39b59a5693dec2a8d022e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_84___setitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_84___setitem__,
        const_str_plain___setitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_744f15a6dacd05be21a5ae8b69a5630c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_85___delitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_85___delitem__,
        const_str_plain___delitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_47ab76a39786d271d4004f9bcd2caf05,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_86___iter__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_86___iter__,
        const_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3d63a738ba45c810806c6b5d18a27e17,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_87___len__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_87___len__,
        const_str_plain___len__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_78951cd80c8ae318b1b1e563c8f65e5b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_8___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_8___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3015836a0b6402b78dd439182ba7e585,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_backports$configparser$$$function_9___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_backports$configparser$$$function_9___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e4f10a5bc7af73a97b01812bc8f651b3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_backports$configparser,
        Py_None,
        0
    );


    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_backports$configparser =
{
    PyModuleDef_HEAD_INIT,
    "backports.configparser",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#if PYTHON_VERSION >= 300
extern PyObject *metapath_based_loader;
#endif
#if PYTHON_VERSION >= 330
extern PyObject *const_str_plain___loader__;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( backports$configparser )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_backports$configparser );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("backports.configparser: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("backports.configparser: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initbackports$configparser" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_backports$configparser = Py_InitModule4(
        "backports.configparser",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_backports$configparser = PyModule_Create( &mdef_backports$configparser );
#endif

    moduledict_backports$configparser = MODULE_DICT( module_backports$configparser );

    CHECK_OBJECT( module_backports$configparser );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_031a36d9e219a028fd504d88b7a8c068, module_backports$configparser );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 330
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain___loader__, metapath_based_loader );
#endif

    // Temp variables if any
    PyObject *outline_0_var___module__ = NULL;
    PyObject *outline_0_var___doc__ = NULL;
    PyObject *outline_0_var___init__ = NULL;
    PyObject *outline_0_var___repr__ = NULL;
    PyObject *outline_0_var___str__ = NULL;
    PyObject *outline_1_var___module__ = NULL;
    PyObject *outline_1_var___doc__ = NULL;
    PyObject *outline_1_var___init__ = NULL;
    PyObject *outline_2_var___module__ = NULL;
    PyObject *outline_2_var___doc__ = NULL;
    PyObject *outline_2_var___init__ = NULL;
    PyObject *outline_3_var___module__ = NULL;
    PyObject *outline_3_var___doc__ = NULL;
    PyObject *outline_3_var___init__ = NULL;
    PyObject *outline_4_var___module__ = NULL;
    PyObject *outline_4_var___doc__ = NULL;
    PyObject *outline_4_var___init__ = NULL;
    PyObject *outline_5_var___module__ = NULL;
    PyObject *outline_5_var___doc__ = NULL;
    PyObject *outline_5_var___init__ = NULL;
    PyObject *outline_6_var___module__ = NULL;
    PyObject *outline_6_var___doc__ = NULL;
    PyObject *outline_6_var___init__ = NULL;
    PyObject *outline_7_var___module__ = NULL;
    PyObject *outline_7_var___doc__ = NULL;
    PyObject *outline_8_var___module__ = NULL;
    PyObject *outline_8_var___doc__ = NULL;
    PyObject *outline_8_var___init__ = NULL;
    PyObject *outline_9_var___module__ = NULL;
    PyObject *outline_9_var___doc__ = NULL;
    PyObject *outline_9_var___init__ = NULL;
    PyObject *outline_9_var_filename = NULL;
    PyObject *outline_9_var_append = NULL;
    PyObject *outline_10_var___module__ = NULL;
    PyObject *outline_10_var___doc__ = NULL;
    PyObject *outline_10_var___init__ = NULL;
    PyObject *outline_11_var___module__ = NULL;
    PyObject *outline_11_var___doc__ = NULL;
    PyObject *outline_11_var_before_get = NULL;
    PyObject *outline_11_var_before_set = NULL;
    PyObject *outline_11_var_before_read = NULL;
    PyObject *outline_11_var_before_write = NULL;
    PyObject *outline_12_var___module__ = NULL;
    PyObject *outline_12_var___doc__ = NULL;
    PyObject *outline_12_var__KEYCRE = NULL;
    PyObject *outline_12_var_before_get = NULL;
    PyObject *outline_12_var_before_set = NULL;
    PyObject *outline_12_var__interpolate_some = NULL;
    PyObject *outline_13_var___module__ = NULL;
    PyObject *outline_13_var___doc__ = NULL;
    PyObject *outline_13_var__KEYCRE = NULL;
    PyObject *outline_13_var_before_get = NULL;
    PyObject *outline_13_var_before_set = NULL;
    PyObject *outline_13_var__interpolate_some = NULL;
    PyObject *outline_14_var___module__ = NULL;
    PyObject *outline_14_var___doc__ = NULL;
    PyObject *outline_14_var__KEYCRE = NULL;
    PyObject *outline_14_var_before_get = NULL;
    PyObject *outline_14_var_before_set = NULL;
    PyObject *outline_14_var__interpolation_replace = NULL;
    PyObject *outline_15_var___module__ = NULL;
    PyObject *outline_15_var___doc__ = NULL;
    PyObject *outline_15_var__SECT_TMPL = NULL;
    PyObject *outline_15_var__OPT_TMPL = NULL;
    PyObject *outline_15_var__OPT_NV_TMPL = NULL;
    PyObject *outline_15_var__DEFAULT_INTERPOLATION = NULL;
    PyObject *outline_15_var_SECTCRE = NULL;
    PyObject *outline_15_var_OPTCRE = NULL;
    PyObject *outline_15_var_OPTCRE_NV = NULL;
    PyObject *outline_15_var_NONSPACECRE = NULL;
    PyObject *outline_15_var_BOOLEAN_STATES = NULL;
    PyObject *outline_15_var___init__ = NULL;
    PyObject *outline_15_var_defaults = NULL;
    PyObject *outline_15_var_sections = NULL;
    PyObject *outline_15_var_add_section = NULL;
    PyObject *outline_15_var_has_section = NULL;
    PyObject *outline_15_var_options = NULL;
    PyObject *outline_15_var_read = NULL;
    PyObject *outline_15_var_read_file = NULL;
    PyObject *outline_15_var_read_string = NULL;
    PyObject *outline_15_var_read_dict = NULL;
    PyObject *outline_15_var_readfp = NULL;
    PyObject *outline_15_var_get = NULL;
    PyObject *outline_15_var__get = NULL;
    PyObject *outline_15_var__get_conv = NULL;
    PyObject *outline_15_var_getint = NULL;
    PyObject *outline_15_var_getfloat = NULL;
    PyObject *outline_15_var_getboolean = NULL;
    PyObject *outline_15_var_items = NULL;
    PyObject *outline_15_var_popitem = NULL;
    PyObject *outline_15_var_optionxform = NULL;
    PyObject *outline_15_var_has_option = NULL;
    PyObject *outline_15_var_set = NULL;
    PyObject *outline_15_var_write = NULL;
    PyObject *outline_15_var__write_section = NULL;
    PyObject *outline_15_var_remove_option = NULL;
    PyObject *outline_15_var_remove_section = NULL;
    PyObject *outline_15_var___getitem__ = NULL;
    PyObject *outline_15_var___setitem__ = NULL;
    PyObject *outline_15_var___delitem__ = NULL;
    PyObject *outline_15_var___contains__ = NULL;
    PyObject *outline_15_var___len__ = NULL;
    PyObject *outline_15_var___iter__ = NULL;
    PyObject *outline_15_var__read = NULL;
    PyObject *outline_15_var__join_multiline_values = NULL;
    PyObject *outline_15_var__handle_error = NULL;
    PyObject *outline_15_var__unify_values = NULL;
    PyObject *outline_15_var__convert_to_boolean = NULL;
    PyObject *outline_15_var__validate_value_types = NULL;
    PyObject *outline_15_var_converters = NULL;
    PyObject *outline_16_var___module__ = NULL;
    PyObject *outline_16_var___doc__ = NULL;
    PyObject *outline_16_var__DEFAULT_INTERPOLATION = NULL;
    PyObject *outline_16_var_set = NULL;
    PyObject *outline_16_var_add_section = NULL;
    PyObject *outline_17_var___module__ = NULL;
    PyObject *outline_17_var___doc__ = NULL;
    PyObject *outline_17_var___init__ = NULL;
    PyObject *outline_18_var___module__ = NULL;
    PyObject *outline_18_var___doc__ = NULL;
    PyObject *outline_18_var___init__ = NULL;
    PyObject *outline_18_var___repr__ = NULL;
    PyObject *outline_18_var___getitem__ = NULL;
    PyObject *outline_18_var___setitem__ = NULL;
    PyObject *outline_18_var___delitem__ = NULL;
    PyObject *outline_18_var___contains__ = NULL;
    PyObject *outline_18_var___len__ = NULL;
    PyObject *outline_18_var___iter__ = NULL;
    PyObject *outline_18_var__options = NULL;
    PyObject *outline_18_var_parser = NULL;
    PyObject *outline_18_var_name = NULL;
    PyObject *outline_18_var_get = NULL;
    PyObject *outline_19_var___module__ = NULL;
    PyObject *outline_19_var___doc__ = NULL;
    PyObject *outline_19_var_GETTERCRE = NULL;
    PyObject *outline_19_var___init__ = NULL;
    PyObject *outline_19_var___getitem__ = NULL;
    PyObject *outline_19_var___setitem__ = NULL;
    PyObject *outline_19_var___delitem__ = NULL;
    PyObject *outline_19_var___iter__ = NULL;
    PyObject *outline_19_var___len__ = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__class = NULL;
    PyObject *tmp_class_creation_10__class_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__class = NULL;
    PyObject *tmp_class_creation_11__class_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_12__class = NULL;
    PyObject *tmp_class_creation_12__class_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__class = NULL;
    PyObject *tmp_class_creation_13__class_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__class = NULL;
    PyObject *tmp_class_creation_14__class_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__class = NULL;
    PyObject *tmp_class_creation_15__class_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__class = NULL;
    PyObject *tmp_class_creation_16__class_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__class = NULL;
    PyObject *tmp_class_creation_17__class_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__class = NULL;
    PyObject *tmp_class_creation_18__class_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__class = NULL;
    PyObject *tmp_class_creation_19__class_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__class = NULL;
    PyObject *tmp_class_creation_20__class_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class = NULL;
    PyObject *tmp_class_creation_2__class_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class = NULL;
    PyObject *tmp_class_creation_3__class_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__class = NULL;
    PyObject *tmp_class_creation_4__class_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class = NULL;
    PyObject *tmp_class_creation_5__class_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__class = NULL;
    PyObject *tmp_class_creation_6__class_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__class = NULL;
    PyObject *tmp_class_creation_7__class_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__class = NULL;
    PyObject *tmp_class_creation_8__class_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__class = NULL;
    PyObject *tmp_class_creation_9__class_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_select_metaclass_10__base = NULL;
    PyObject *tmp_select_metaclass_11__base = NULL;
    PyObject *tmp_select_metaclass_13__base = NULL;
    PyObject *tmp_select_metaclass_14__base = NULL;
    PyObject *tmp_select_metaclass_15__base = NULL;
    PyObject *tmp_select_metaclass_16__base = NULL;
    PyObject *tmp_select_metaclass_17__base = NULL;
    PyObject *tmp_select_metaclass_18__base = NULL;
    PyObject *tmp_select_metaclass_19__base = NULL;
    PyObject *tmp_select_metaclass_1__base = NULL;
    PyObject *tmp_select_metaclass_20__base = NULL;
    PyObject *tmp_select_metaclass_2__base = NULL;
    PyObject *tmp_select_metaclass_3__base = NULL;
    PyObject *tmp_select_metaclass_4__base = NULL;
    PyObject *tmp_select_metaclass_5__base = NULL;
    PyObject *tmp_select_metaclass_6__base = NULL;
    PyObject *tmp_select_metaclass_7__base = NULL;
    PyObject *tmp_select_metaclass_8__base = NULL;
    PyObject *tmp_select_metaclass_9__base = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_element_name_61;
    PyObject *tmp_args_element_name_62;
    PyObject *tmp_args_element_name_63;
    PyObject *tmp_args_element_name_64;
    PyObject *tmp_args_element_name_65;
    PyObject *tmp_args_element_name_66;
    PyObject *tmp_args_element_name_67;
    PyObject *tmp_args_element_name_68;
    PyObject *tmp_args_element_name_69;
    PyObject *tmp_args_element_name_70;
    PyObject *tmp_args_element_name_71;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_assign_source_150;
    PyObject *tmp_assign_source_151;
    PyObject *tmp_assign_source_152;
    PyObject *tmp_assign_source_153;
    PyObject *tmp_assign_source_154;
    PyObject *tmp_assign_source_155;
    PyObject *tmp_assign_source_156;
    PyObject *tmp_assign_source_157;
    PyObject *tmp_assign_source_158;
    PyObject *tmp_assign_source_159;
    PyObject *tmp_assign_source_160;
    PyObject *tmp_assign_source_161;
    PyObject *tmp_assign_source_162;
    PyObject *tmp_assign_source_163;
    PyObject *tmp_assign_source_164;
    PyObject *tmp_assign_source_165;
    PyObject *tmp_assign_source_166;
    PyObject *tmp_assign_source_167;
    PyObject *tmp_assign_source_168;
    PyObject *tmp_assign_source_169;
    PyObject *tmp_assign_source_170;
    PyObject *tmp_assign_source_171;
    PyObject *tmp_assign_source_172;
    PyObject *tmp_assign_source_173;
    PyObject *tmp_assign_source_174;
    PyObject *tmp_assign_source_175;
    PyObject *tmp_assign_source_176;
    PyObject *tmp_assign_source_177;
    PyObject *tmp_assign_source_178;
    PyObject *tmp_assign_source_179;
    PyObject *tmp_assign_source_180;
    PyObject *tmp_assign_source_181;
    PyObject *tmp_assign_source_182;
    PyObject *tmp_assign_source_183;
    PyObject *tmp_assign_source_184;
    PyObject *tmp_assign_source_185;
    PyObject *tmp_assign_source_186;
    PyObject *tmp_assign_source_187;
    PyObject *tmp_assign_source_188;
    PyObject *tmp_assign_source_189;
    PyObject *tmp_assign_source_190;
    PyObject *tmp_assign_source_191;
    PyObject *tmp_assign_source_192;
    PyObject *tmp_assign_source_193;
    PyObject *tmp_assign_source_194;
    PyObject *tmp_assign_source_195;
    PyObject *tmp_assign_source_196;
    PyObject *tmp_assign_source_197;
    PyObject *tmp_assign_source_198;
    PyObject *tmp_assign_source_199;
    PyObject *tmp_assign_source_200;
    PyObject *tmp_assign_source_201;
    PyObject *tmp_assign_source_202;
    PyObject *tmp_assign_source_203;
    PyObject *tmp_assign_source_204;
    PyObject *tmp_assign_source_205;
    PyObject *tmp_assign_source_206;
    PyObject *tmp_assign_source_207;
    PyObject *tmp_assign_source_208;
    PyObject *tmp_assign_source_209;
    PyObject *tmp_assign_source_210;
    PyObject *tmp_assign_source_211;
    PyObject *tmp_assign_source_212;
    PyObject *tmp_assign_source_213;
    PyObject *tmp_assign_source_214;
    PyObject *tmp_assign_source_215;
    PyObject *tmp_assign_source_216;
    PyObject *tmp_assign_source_217;
    PyObject *tmp_assign_source_218;
    PyObject *tmp_assign_source_219;
    PyObject *tmp_assign_source_220;
    PyObject *tmp_assign_source_221;
    PyObject *tmp_assign_source_222;
    PyObject *tmp_assign_source_223;
    PyObject *tmp_assign_source_224;
    PyObject *tmp_assign_source_225;
    PyObject *tmp_assign_source_226;
    PyObject *tmp_assign_source_227;
    PyObject *tmp_assign_source_228;
    PyObject *tmp_assign_source_229;
    PyObject *tmp_assign_source_230;
    PyObject *tmp_assign_source_231;
    PyObject *tmp_assign_source_232;
    PyObject *tmp_assign_source_233;
    PyObject *tmp_assign_source_234;
    PyObject *tmp_assign_source_235;
    PyObject *tmp_assign_source_236;
    PyObject *tmp_assign_source_237;
    PyObject *tmp_assign_source_238;
    PyObject *tmp_assign_source_239;
    PyObject *tmp_assign_source_240;
    PyObject *tmp_assign_source_241;
    PyObject *tmp_assign_source_242;
    PyObject *tmp_assign_source_243;
    PyObject *tmp_assign_source_244;
    PyObject *tmp_assign_source_245;
    PyObject *tmp_assign_source_246;
    PyObject *tmp_assign_source_247;
    PyObject *tmp_assign_source_248;
    PyObject *tmp_assign_source_249;
    PyObject *tmp_assign_source_250;
    PyObject *tmp_assign_source_251;
    PyObject *tmp_assign_source_252;
    PyObject *tmp_assign_source_253;
    PyObject *tmp_assign_source_254;
    PyObject *tmp_assign_source_255;
    PyObject *tmp_assign_source_256;
    PyObject *tmp_assign_source_257;
    PyObject *tmp_assign_source_258;
    PyObject *tmp_assign_source_259;
    PyObject *tmp_assign_source_260;
    PyObject *tmp_assign_source_261;
    PyObject *tmp_assign_source_262;
    PyObject *tmp_assign_source_263;
    PyObject *tmp_assign_source_264;
    PyObject *tmp_assign_source_265;
    PyObject *tmp_assign_source_266;
    PyObject *tmp_assign_source_267;
    PyObject *tmp_assign_source_268;
    PyObject *tmp_assign_source_269;
    PyObject *tmp_assign_source_270;
    PyObject *tmp_assign_source_271;
    PyObject *tmp_assign_source_272;
    PyObject *tmp_assign_source_273;
    PyObject *tmp_assign_source_274;
    PyObject *tmp_assign_source_275;
    PyObject *tmp_assign_source_276;
    PyObject *tmp_assign_source_277;
    PyObject *tmp_assign_source_278;
    PyObject *tmp_assign_source_279;
    PyObject *tmp_assign_source_280;
    PyObject *tmp_assign_source_281;
    PyObject *tmp_assign_source_282;
    PyObject *tmp_assign_source_283;
    PyObject *tmp_assign_source_284;
    PyObject *tmp_assign_source_285;
    PyObject *tmp_assign_source_286;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_In_15;
    int tmp_cmp_In_16;
    int tmp_cmp_In_17;
    int tmp_cmp_In_18;
    int tmp_cmp_In_19;
    int tmp_cmp_In_20;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_defaults_3;
    PyObject *tmp_defaults_4;
    PyObject *tmp_defaults_5;
    PyObject *tmp_defaults_6;
    PyObject *tmp_defaults_7;
    PyObject *tmp_defaults_8;
    PyObject *tmp_defaults_9;
    PyObject *tmp_defaults_10;
    PyObject *tmp_defaults_11;
    PyObject *tmp_defaults_12;
    PyObject *tmp_defaults_13;
    PyObject *tmp_defaults_14;
    PyObject *tmp_defaults_15;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_key_14;
    PyObject *tmp_dict_key_15;
    PyObject *tmp_dict_key_16;
    PyObject *tmp_dict_key_17;
    PyObject *tmp_dict_key_18;
    PyObject *tmp_dict_key_19;
    PyObject *tmp_dict_key_20;
    PyObject *tmp_dict_key_21;
    PyObject *tmp_dict_key_22;
    PyObject *tmp_dict_key_23;
    PyObject *tmp_dict_key_24;
    PyObject *tmp_dict_key_25;
    PyObject *tmp_dict_key_26;
    PyObject *tmp_dict_key_27;
    PyObject *tmp_dict_key_28;
    PyObject *tmp_dict_key_29;
    PyObject *tmp_dict_key_30;
    PyObject *tmp_dict_key_31;
    PyObject *tmp_dict_key_32;
    PyObject *tmp_dict_key_33;
    PyObject *tmp_dict_key_34;
    PyObject *tmp_dict_key_35;
    PyObject *tmp_dict_key_36;
    PyObject *tmp_dict_key_37;
    PyObject *tmp_dict_key_38;
    PyObject *tmp_dict_key_39;
    PyObject *tmp_dict_key_40;
    PyObject *tmp_dict_key_41;
    PyObject *tmp_dict_key_42;
    PyObject *tmp_dict_key_43;
    PyObject *tmp_dict_key_44;
    PyObject *tmp_dict_key_45;
    PyObject *tmp_dict_key_46;
    PyObject *tmp_dict_key_47;
    PyObject *tmp_dict_key_48;
    PyObject *tmp_dict_key_49;
    PyObject *tmp_dict_key_50;
    PyObject *tmp_dict_key_51;
    PyObject *tmp_dict_key_52;
    PyObject *tmp_dict_key_53;
    PyObject *tmp_dict_key_54;
    PyObject *tmp_dict_key_55;
    PyObject *tmp_dict_key_56;
    PyObject *tmp_dict_key_57;
    PyObject *tmp_dict_key_58;
    PyObject *tmp_dict_key_59;
    PyObject *tmp_dict_key_60;
    PyObject *tmp_dict_key_61;
    PyObject *tmp_dict_key_62;
    PyObject *tmp_dict_key_63;
    PyObject *tmp_dict_key_64;
    PyObject *tmp_dict_key_65;
    PyObject *tmp_dict_key_66;
    PyObject *tmp_dict_key_67;
    PyObject *tmp_dict_key_68;
    PyObject *tmp_dict_key_69;
    PyObject *tmp_dict_key_70;
    PyObject *tmp_dict_key_71;
    PyObject *tmp_dict_key_72;
    PyObject *tmp_dict_key_73;
    PyObject *tmp_dict_key_74;
    PyObject *tmp_dict_key_75;
    PyObject *tmp_dict_key_76;
    PyObject *tmp_dict_key_77;
    PyObject *tmp_dict_key_78;
    PyObject *tmp_dict_key_79;
    PyObject *tmp_dict_key_80;
    PyObject *tmp_dict_key_81;
    PyObject *tmp_dict_key_82;
    PyObject *tmp_dict_key_83;
    PyObject *tmp_dict_key_84;
    PyObject *tmp_dict_key_85;
    PyObject *tmp_dict_key_86;
    PyObject *tmp_dict_key_87;
    PyObject *tmp_dict_key_88;
    PyObject *tmp_dict_key_89;
    PyObject *tmp_dict_key_90;
    PyObject *tmp_dict_key_91;
    PyObject *tmp_dict_key_92;
    PyObject *tmp_dict_key_93;
    PyObject *tmp_dict_key_94;
    PyObject *tmp_dict_key_95;
    PyObject *tmp_dict_key_96;
    PyObject *tmp_dict_key_97;
    PyObject *tmp_dict_key_98;
    PyObject *tmp_dict_key_99;
    PyObject *tmp_dict_key_100;
    PyObject *tmp_dict_key_101;
    PyObject *tmp_dict_key_102;
    PyObject *tmp_dict_key_103;
    PyObject *tmp_dict_key_104;
    PyObject *tmp_dict_key_105;
    PyObject *tmp_dict_key_106;
    PyObject *tmp_dict_key_107;
    PyObject *tmp_dict_key_108;
    PyObject *tmp_dict_key_109;
    PyObject *tmp_dict_key_110;
    PyObject *tmp_dict_key_111;
    PyObject *tmp_dict_key_112;
    PyObject *tmp_dict_key_113;
    PyObject *tmp_dict_key_114;
    PyObject *tmp_dict_key_115;
    PyObject *tmp_dict_key_116;
    PyObject *tmp_dict_key_117;
    PyObject *tmp_dict_key_118;
    PyObject *tmp_dict_key_119;
    PyObject *tmp_dict_key_120;
    PyObject *tmp_dict_key_121;
    PyObject *tmp_dict_key_122;
    PyObject *tmp_dict_key_123;
    PyObject *tmp_dict_key_124;
    PyObject *tmp_dict_key_125;
    PyObject *tmp_dict_key_126;
    PyObject *tmp_dict_key_127;
    PyObject *tmp_dict_key_128;
    PyObject *tmp_dict_key_129;
    PyObject *tmp_dict_key_130;
    PyObject *tmp_dict_key_131;
    PyObject *tmp_dict_key_132;
    PyObject *tmp_dict_key_133;
    PyObject *tmp_dict_key_134;
    PyObject *tmp_dict_key_135;
    PyObject *tmp_dict_key_136;
    PyObject *tmp_dict_key_137;
    PyObject *tmp_dict_key_138;
    PyObject *tmp_dict_key_139;
    PyObject *tmp_dict_key_140;
    PyObject *tmp_dict_key_141;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_name_2;
    PyObject *tmp_dict_name_3;
    PyObject *tmp_dict_name_4;
    PyObject *tmp_dict_name_5;
    PyObject *tmp_dict_name_6;
    PyObject *tmp_dict_name_7;
    PyObject *tmp_dict_name_8;
    PyObject *tmp_dict_name_9;
    PyObject *tmp_dict_name_10;
    PyObject *tmp_dict_name_11;
    PyObject *tmp_dict_name_12;
    PyObject *tmp_dict_name_13;
    PyObject *tmp_dict_name_14;
    PyObject *tmp_dict_name_15;
    PyObject *tmp_dict_name_16;
    PyObject *tmp_dict_name_17;
    PyObject *tmp_dict_name_18;
    PyObject *tmp_dict_name_19;
    PyObject *tmp_dict_name_20;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_dict_value_14;
    PyObject *tmp_dict_value_15;
    PyObject *tmp_dict_value_16;
    PyObject *tmp_dict_value_17;
    PyObject *tmp_dict_value_18;
    PyObject *tmp_dict_value_19;
    PyObject *tmp_dict_value_20;
    PyObject *tmp_dict_value_21;
    PyObject *tmp_dict_value_22;
    PyObject *tmp_dict_value_23;
    PyObject *tmp_dict_value_24;
    PyObject *tmp_dict_value_25;
    PyObject *tmp_dict_value_26;
    PyObject *tmp_dict_value_27;
    PyObject *tmp_dict_value_28;
    PyObject *tmp_dict_value_29;
    PyObject *tmp_dict_value_30;
    PyObject *tmp_dict_value_31;
    PyObject *tmp_dict_value_32;
    PyObject *tmp_dict_value_33;
    PyObject *tmp_dict_value_34;
    PyObject *tmp_dict_value_35;
    PyObject *tmp_dict_value_36;
    PyObject *tmp_dict_value_37;
    PyObject *tmp_dict_value_38;
    PyObject *tmp_dict_value_39;
    PyObject *tmp_dict_value_40;
    PyObject *tmp_dict_value_41;
    PyObject *tmp_dict_value_42;
    PyObject *tmp_dict_value_43;
    PyObject *tmp_dict_value_44;
    PyObject *tmp_dict_value_45;
    PyObject *tmp_dict_value_46;
    PyObject *tmp_dict_value_47;
    PyObject *tmp_dict_value_48;
    PyObject *tmp_dict_value_49;
    PyObject *tmp_dict_value_50;
    PyObject *tmp_dict_value_51;
    PyObject *tmp_dict_value_52;
    PyObject *tmp_dict_value_53;
    PyObject *tmp_dict_value_54;
    PyObject *tmp_dict_value_55;
    PyObject *tmp_dict_value_56;
    PyObject *tmp_dict_value_57;
    PyObject *tmp_dict_value_58;
    PyObject *tmp_dict_value_59;
    PyObject *tmp_dict_value_60;
    PyObject *tmp_dict_value_61;
    PyObject *tmp_dict_value_62;
    PyObject *tmp_dict_value_63;
    PyObject *tmp_dict_value_64;
    PyObject *tmp_dict_value_65;
    PyObject *tmp_dict_value_66;
    PyObject *tmp_dict_value_67;
    PyObject *tmp_dict_value_68;
    PyObject *tmp_dict_value_69;
    PyObject *tmp_dict_value_70;
    PyObject *tmp_dict_value_71;
    PyObject *tmp_dict_value_72;
    PyObject *tmp_dict_value_73;
    PyObject *tmp_dict_value_74;
    PyObject *tmp_dict_value_75;
    PyObject *tmp_dict_value_76;
    PyObject *tmp_dict_value_77;
    PyObject *tmp_dict_value_78;
    PyObject *tmp_dict_value_79;
    PyObject *tmp_dict_value_80;
    PyObject *tmp_dict_value_81;
    PyObject *tmp_dict_value_82;
    PyObject *tmp_dict_value_83;
    PyObject *tmp_dict_value_84;
    PyObject *tmp_dict_value_85;
    PyObject *tmp_dict_value_86;
    PyObject *tmp_dict_value_87;
    PyObject *tmp_dict_value_88;
    PyObject *tmp_dict_value_89;
    PyObject *tmp_dict_value_90;
    PyObject *tmp_dict_value_91;
    PyObject *tmp_dict_value_92;
    PyObject *tmp_dict_value_93;
    PyObject *tmp_dict_value_94;
    PyObject *tmp_dict_value_95;
    PyObject *tmp_dict_value_96;
    PyObject *tmp_dict_value_97;
    PyObject *tmp_dict_value_98;
    PyObject *tmp_dict_value_99;
    PyObject *tmp_dict_value_100;
    PyObject *tmp_dict_value_101;
    PyObject *tmp_dict_value_102;
    PyObject *tmp_dict_value_103;
    PyObject *tmp_dict_value_104;
    PyObject *tmp_dict_value_105;
    PyObject *tmp_dict_value_106;
    PyObject *tmp_dict_value_107;
    PyObject *tmp_dict_value_108;
    PyObject *tmp_dict_value_109;
    PyObject *tmp_dict_value_110;
    PyObject *tmp_dict_value_111;
    PyObject *tmp_dict_value_112;
    PyObject *tmp_dict_value_113;
    PyObject *tmp_dict_value_114;
    PyObject *tmp_dict_value_115;
    PyObject *tmp_dict_value_116;
    PyObject *tmp_dict_value_117;
    PyObject *tmp_dict_value_118;
    PyObject *tmp_dict_value_119;
    PyObject *tmp_dict_value_120;
    PyObject *tmp_dict_value_121;
    PyObject *tmp_dict_value_122;
    PyObject *tmp_dict_value_123;
    PyObject *tmp_dict_value_124;
    PyObject *tmp_dict_value_125;
    PyObject *tmp_dict_value_126;
    PyObject *tmp_dict_value_127;
    PyObject *tmp_dict_value_128;
    PyObject *tmp_dict_value_129;
    PyObject *tmp_dict_value_130;
    PyObject *tmp_dict_value_131;
    PyObject *tmp_dict_value_132;
    PyObject *tmp_dict_value_133;
    PyObject *tmp_dict_value_134;
    PyObject *tmp_dict_value_135;
    PyObject *tmp_dict_value_136;
    PyObject *tmp_dict_value_137;
    PyObject *tmp_dict_value_138;
    PyObject *tmp_dict_value_139;
    PyObject *tmp_dict_value_140;
    PyObject *tmp_dict_value_141;
    PyObject *tmp_fromlist_name_1;
    PyObject *tmp_fromlist_name_2;
    PyObject *tmp_fromlist_name_3;
    PyObject *tmp_fromlist_name_4;
    PyObject *tmp_fromlist_name_5;
    PyObject *tmp_fromlist_name_6;
    PyObject *tmp_fromlist_name_7;
    PyObject *tmp_fromlist_name_8;
    PyObject *tmp_fromlist_name_9;
    PyObject *tmp_fromlist_name_10;
    PyObject *tmp_globals_name_1;
    PyObject *tmp_globals_name_2;
    PyObject *tmp_globals_name_3;
    PyObject *tmp_globals_name_4;
    PyObject *tmp_globals_name_5;
    PyObject *tmp_globals_name_6;
    PyObject *tmp_globals_name_7;
    PyObject *tmp_globals_name_8;
    PyObject *tmp_globals_name_9;
    PyObject *tmp_globals_name_10;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_import_name_from_8;
    PyObject *tmp_import_name_from_9;
    PyObject *tmp_import_name_from_10;
    PyObject *tmp_import_name_from_11;
    PyObject *tmp_key_name_1;
    PyObject *tmp_key_name_2;
    PyObject *tmp_key_name_3;
    PyObject *tmp_key_name_4;
    PyObject *tmp_key_name_5;
    PyObject *tmp_key_name_6;
    PyObject *tmp_key_name_7;
    PyObject *tmp_key_name_8;
    PyObject *tmp_key_name_9;
    PyObject *tmp_key_name_10;
    PyObject *tmp_key_name_11;
    PyObject *tmp_key_name_12;
    PyObject *tmp_key_name_13;
    PyObject *tmp_key_name_14;
    PyObject *tmp_key_name_15;
    PyObject *tmp_key_name_16;
    PyObject *tmp_key_name_17;
    PyObject *tmp_key_name_18;
    PyObject *tmp_key_name_19;
    PyObject *tmp_key_name_20;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_level_name_1;
    PyObject *tmp_level_name_2;
    PyObject *tmp_level_name_3;
    PyObject *tmp_level_name_4;
    PyObject *tmp_level_name_5;
    PyObject *tmp_level_name_6;
    PyObject *tmp_level_name_7;
    PyObject *tmp_level_name_8;
    PyObject *tmp_level_name_9;
    PyObject *tmp_level_name_10;
    PyObject *tmp_locals_name_1;
    PyObject *tmp_locals_name_2;
    PyObject *tmp_locals_name_3;
    PyObject *tmp_locals_name_4;
    PyObject *tmp_locals_name_5;
    PyObject *tmp_locals_name_6;
    PyObject *tmp_locals_name_7;
    PyObject *tmp_locals_name_8;
    PyObject *tmp_locals_name_9;
    PyObject *tmp_locals_name_10;
    PyObject *tmp_name_name_1;
    PyObject *tmp_name_name_2;
    PyObject *tmp_name_name_3;
    PyObject *tmp_name_name_4;
    PyObject *tmp_name_name_5;
    PyObject *tmp_name_name_6;
    PyObject *tmp_name_name_7;
    PyObject *tmp_name_name_8;
    PyObject *tmp_name_name_9;
    PyObject *tmp_name_name_10;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_outline_return_value_2;
    PyObject *tmp_outline_return_value_3;
    PyObject *tmp_outline_return_value_4;
    PyObject *tmp_outline_return_value_5;
    PyObject *tmp_outline_return_value_6;
    PyObject *tmp_outline_return_value_7;
    PyObject *tmp_outline_return_value_8;
    PyObject *tmp_outline_return_value_9;
    PyObject *tmp_outline_return_value_10;
    PyObject *tmp_outline_return_value_11;
    PyObject *tmp_outline_return_value_12;
    PyObject *tmp_outline_return_value_13;
    PyObject *tmp_outline_return_value_14;
    PyObject *tmp_outline_return_value_15;
    PyObject *tmp_outline_return_value_16;
    PyObject *tmp_outline_return_value_17;
    PyObject *tmp_outline_return_value_18;
    PyObject *tmp_outline_return_value_19;
    PyObject *tmp_outline_return_value_20;
    PyObject *tmp_outline_return_value_21;
    PyObject *tmp_outline_return_value_22;
    PyObject *tmp_outline_return_value_23;
    PyObject *tmp_outline_return_value_24;
    PyObject *tmp_outline_return_value_25;
    PyObject *tmp_outline_return_value_26;
    PyObject *tmp_outline_return_value_27;
    PyObject *tmp_outline_return_value_28;
    PyObject *tmp_outline_return_value_29;
    PyObject *tmp_outline_return_value_30;
    PyObject *tmp_outline_return_value_31;
    PyObject *tmp_outline_return_value_32;
    PyObject *tmp_outline_return_value_33;
    PyObject *tmp_outline_return_value_34;
    PyObject *tmp_outline_return_value_35;
    PyObject *tmp_outline_return_value_36;
    PyObject *tmp_outline_return_value_37;
    PyObject *tmp_outline_return_value_38;
    PyObject *tmp_outline_return_value_39;
    int tmp_res;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_staticmethod_arg_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscribed_name_14;
    PyObject *tmp_subscribed_name_15;
    PyObject *tmp_subscribed_name_16;
    PyObject *tmp_subscribed_name_17;
    PyObject *tmp_subscribed_name_18;
    PyObject *tmp_subscribed_name_19;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_subscript_name_14;
    PyObject *tmp_subscript_name_15;
    PyObject *tmp_subscript_name_16;
    PyObject *tmp_subscript_name_17;
    PyObject *tmp_subscript_name_18;
    PyObject *tmp_subscript_name_19;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_tuple_element_21;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_type_arg_2;
    PyObject *tmp_type_arg_3;
    PyObject *tmp_type_arg_4;
    PyObject *tmp_type_arg_5;
    PyObject *tmp_type_arg_6;
    PyObject *tmp_type_arg_7;
    PyObject *tmp_type_arg_8;
    PyObject *tmp_type_arg_9;
    PyObject *tmp_type_arg_10;
    PyObject *tmp_type_arg_11;
    PyObject *tmp_type_arg_12;
    PyObject *tmp_type_arg_13;
    PyObject *tmp_type_arg_14;
    PyObject *tmp_type_arg_15;
    PyObject *tmp_type_arg_16;
    PyObject *tmp_type_arg_17;
    PyObject *tmp_type_arg_18;
    PyObject *tmp_type_arg_19;
    static struct Nuitka_FrameObject *cache_frame_1c597e76e6430bdcfa15394ab38ca898_2 = NULL;

    struct Nuitka_FrameObject *frame_1c597e76e6430bdcfa15394ab38ca898_2;

    static struct Nuitka_FrameObject *cache_frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 = NULL;

    struct Nuitka_FrameObject *frame_a24361983ffe6b51e65bf3b0f1bf29f3_3;

    static struct Nuitka_FrameObject *cache_frame_920dac7f37e06f5f6ce355b6cf15424d_4 = NULL;

    struct Nuitka_FrameObject *frame_920dac7f37e06f5f6ce355b6cf15424d_4;

    static struct Nuitka_FrameObject *cache_frame_87408f1f826db72313e4fc65b40ab565_5 = NULL;

    struct Nuitka_FrameObject *frame_87408f1f826db72313e4fc65b40ab565_5;

    static struct Nuitka_FrameObject *cache_frame_9815049f917ba554f86a83cfecf75243_6 = NULL;

    struct Nuitka_FrameObject *frame_9815049f917ba554f86a83cfecf75243_6;

    static struct Nuitka_FrameObject *cache_frame_1d483adeff710e212cffa37f5abd1161_7 = NULL;

    struct Nuitka_FrameObject *frame_1d483adeff710e212cffa37f5abd1161_7;

    static struct Nuitka_FrameObject *cache_frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 = NULL;

    struct Nuitka_FrameObject *frame_f39f8e2fa34d8c992a5aaf1d624dc002_8;

    static struct Nuitka_FrameObject *cache_frame_7801595be13afb8720eaf8e586651659_9 = NULL;

    struct Nuitka_FrameObject *frame_7801595be13afb8720eaf8e586651659_9;

    struct Nuitka_FrameObject *frame_7697ffe4ae7754475e380588f515f957;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    tmp_outline_return_value_1 = NULL;
    tmp_outline_return_value_2 = NULL;
    tmp_outline_return_value_3 = NULL;
    tmp_outline_return_value_4 = NULL;
    tmp_outline_return_value_5 = NULL;
    tmp_outline_return_value_6 = NULL;
    tmp_outline_return_value_7 = NULL;
    tmp_outline_return_value_8 = NULL;
    tmp_outline_return_value_9 = NULL;
    tmp_outline_return_value_10 = NULL;
    tmp_outline_return_value_11 = NULL;
    tmp_outline_return_value_12 = NULL;
    tmp_outline_return_value_13 = NULL;
    tmp_outline_return_value_14 = NULL;
    tmp_outline_return_value_15 = NULL;
    tmp_outline_return_value_16 = NULL;
    tmp_outline_return_value_17 = NULL;
    tmp_outline_return_value_18 = NULL;
    tmp_outline_return_value_19 = NULL;
    tmp_outline_return_value_20 = NULL;
    tmp_outline_return_value_21 = NULL;
    tmp_outline_return_value_22 = NULL;
    tmp_outline_return_value_23 = NULL;
    tmp_outline_return_value_24 = NULL;
    tmp_outline_return_value_25 = NULL;
    tmp_outline_return_value_26 = NULL;
    tmp_outline_return_value_27 = NULL;
    tmp_outline_return_value_28 = NULL;
    tmp_outline_return_value_29 = NULL;
    tmp_outline_return_value_30 = NULL;
    tmp_outline_return_value_31 = NULL;
    tmp_outline_return_value_32 = NULL;
    tmp_outline_return_value_33 = NULL;
    tmp_outline_return_value_34 = NULL;
    tmp_outline_return_value_35 = NULL;
    tmp_outline_return_value_36 = NULL;
    tmp_outline_return_value_37 = NULL;
    tmp_outline_return_value_38 = NULL;
    tmp_outline_return_value_39 = NULL;

    // Module code.
    tmp_assign_source_1 = const_unicode_digest_982e13bc4959251905723e01bd1cf8ff;
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_7cfcf4e3ecceb0a971b6d9a37c2398d0;
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    tmp_assign_source_3 = LIST_COPY( const_list_str_digest_ee02b24011111ba04dcb95fb5408b70c_list );
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain___path__, tmp_assign_source_3 );
    tmp_assign_source_4 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_4 );
    // Frame without reuse.
    frame_7697ffe4ae7754475e380588f515f957 = MAKE_MODULE_FRAME( codeobj_7697ffe4ae7754475e380588f515f957, module_backports$configparser );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_7697ffe4ae7754475e380588f515f957 );
    assert( Py_REFCNT( frame_7697ffe4ae7754475e380588f515f957 ) == 2 );

    // Framed code:
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 125;
    tmp_import_name_from_1 = PyImport_ImportModule("__future__");
    assert( tmp_import_name_from_1 != NULL );
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_absolute_import );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 125;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_absolute_import, tmp_assign_source_5 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 126;
    tmp_import_name_from_2 = PyImport_ImportModule("__future__");
    assert( tmp_import_name_from_2 != NULL );
    tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_division );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 126;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_division, tmp_assign_source_6 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 127;
    tmp_import_name_from_3 = PyImport_ImportModule("__future__");
    assert( tmp_import_name_from_3 != NULL );
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_print_function );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 127;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_print_function, tmp_assign_source_7 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 128;
    tmp_import_name_from_4 = PyImport_ImportModule("__future__");
    assert( tmp_import_name_from_4 != NULL );
    tmp_assign_source_8 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_unicode_literals );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 128;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_unicode_literals, tmp_assign_source_8 );
    tmp_name_name_1 = const_str_plain_collections;
    tmp_globals_name_1 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_1 = Py_None;
    tmp_fromlist_name_1 = const_tuple_str_plain_MutableMapping_tuple;
    tmp_level_name_1 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 130;
    tmp_import_name_from_5 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
    if ( tmp_import_name_from_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 130;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_MutableMapping );
    Py_DECREF( tmp_import_name_from_5 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 130;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MutableMapping, tmp_assign_source_9 );
    tmp_name_name_2 = const_str_plain_functools;
    tmp_globals_name_2 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_2 = Py_None;
    tmp_fromlist_name_2 = Py_None;
    tmp_level_name_2 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 131;
    tmp_assign_source_10 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_functools, tmp_assign_source_10 );
    tmp_name_name_3 = const_str_plain_io;
    tmp_globals_name_3 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_3 = Py_None;
    tmp_fromlist_name_3 = Py_None;
    tmp_level_name_3 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 132;
    tmp_assign_source_11 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_io, tmp_assign_source_11 );
    tmp_name_name_4 = const_str_plain_itertools;
    tmp_globals_name_4 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_4 = Py_None;
    tmp_fromlist_name_4 = Py_None;
    tmp_level_name_4 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 133;
    tmp_assign_source_12 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
    assert( tmp_assign_source_12 != NULL );
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_itertools, tmp_assign_source_12 );
    tmp_name_name_5 = const_str_plain_re;
    tmp_globals_name_5 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_5 = Py_None;
    tmp_fromlist_name_5 = Py_None;
    tmp_level_name_5 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 134;
    tmp_assign_source_13 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 134;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re, tmp_assign_source_13 );
    tmp_name_name_6 = const_str_plain_sys;
    tmp_globals_name_6 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_6 = Py_None;
    tmp_fromlist_name_6 = Py_None;
    tmp_level_name_6 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 135;
    tmp_assign_source_14 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6 );
    assert( tmp_assign_source_14 != NULL );
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_14 );
    tmp_name_name_7 = const_str_plain_warnings;
    tmp_globals_name_7 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_7 = Py_None;
    tmp_fromlist_name_7 = Py_None;
    tmp_level_name_7 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 136;
    tmp_assign_source_15 = IMPORT_MODULE5( tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_7 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 136;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_warnings, tmp_assign_source_15 );
    tmp_name_name_8 = const_str_digest_94f16859294f8d1bd1bc0ce9d8b35802;
    tmp_globals_name_8 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_8 = Py_None;
    tmp_fromlist_name_8 = const_tuple_str_plain_OrderedDict_tuple;
    tmp_level_name_8 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 138;
    tmp_import_name_from_6 = IMPORT_MODULE5( tmp_name_name_8, tmp_globals_name_8, tmp_locals_name_8, tmp_fromlist_name_8, tmp_level_name_8 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 138;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_OrderedDict );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 138;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__default_dict, tmp_assign_source_16 );
    tmp_name_name_9 = const_str_digest_94f16859294f8d1bd1bc0ce9d8b35802;
    tmp_globals_name_9 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_9 = Py_None;
    tmp_fromlist_name_9 = const_tuple_str_plain_ChainMap_tuple;
    tmp_level_name_9 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 139;
    tmp_import_name_from_7 = IMPORT_MODULE5( tmp_name_name_9, tmp_globals_name_9, tmp_locals_name_9, tmp_fromlist_name_9, tmp_level_name_9 );
    if ( tmp_import_name_from_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_ChainMap );
    Py_DECREF( tmp_import_name_from_7 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__ChainMap, tmp_assign_source_17 );
    tmp_name_name_10 = const_str_digest_94f16859294f8d1bd1bc0ce9d8b35802;
    tmp_globals_name_10 = (PyObject *)moduledict_backports$configparser;
    tmp_locals_name_10 = Py_None;
    tmp_fromlist_name_10 = const_tuple_1fbcd1fa7b15ec1fe200bc618ff93d5d_tuple;
    tmp_level_name_10 = const_int_0;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 140;
    tmp_assign_source_18 = IMPORT_MODULE5( tmp_name_name_10, tmp_globals_name_10, tmp_locals_name_10, tmp_fromlist_name_10, tmp_level_name_10 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;

        goto frame_exception_exit_1;
    }
    assert( tmp_import_from_1__module == NULL );
    tmp_import_from_1__module = tmp_assign_source_18;

    // Tried code:
    tmp_import_name_from_8 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_8 );
    tmp_assign_source_19 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_from_none );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_from_none, tmp_assign_source_19 );
    tmp_import_name_from_9 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_9 );
    tmp_assign_source_20 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_open );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_open, tmp_assign_source_20 );
    tmp_import_name_from_10 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_10 );
    tmp_assign_source_21 = IMPORT_NAME( tmp_import_name_from_10, const_str_plain_str );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_str, tmp_assign_source_21 );
    tmp_import_name_from_11 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_11 );
    tmp_assign_source_22 = IMPORT_NAME( tmp_import_name_from_11, const_str_plain_PY2 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_PY2, tmp_assign_source_22 );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    tmp_assign_source_23 = LIST_COPY( const_list_7559f37a4d4a089c4373f758af56e97a_list );
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain___all__, tmp_assign_source_23 );
    tmp_assign_source_24 = const_unicode_plain_DEFAULT;
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DEFAULTSECT, tmp_assign_source_24 );
    tmp_assign_source_25 = const_int_pos_10;
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MAX_INTERPOLATION_DEPTH, tmp_assign_source_25 );
    tmp_assign_source_26 = PyTuple_New( 1 );
    tmp_tuple_element_1 = PyExc_Exception;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_26, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases == NULL );
    tmp_class_creation_1__bases = tmp_assign_source_26;

    tmp_assign_source_28 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_0_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_28 );
    outline_0_var___module__ = tmp_assign_source_28;

    tmp_assign_source_29 = const_unicode_digest_44aeb5afdb3eeeb7cb6c82f3ada09f3c;
    assert( outline_0_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_29 );
    outline_0_var___doc__ = tmp_assign_source_29;

    tmp_defaults_1 = const_tuple_unicode_empty_tuple;
    Py_INCREF( tmp_defaults_1 );
    tmp_assign_source_30 = MAKE_FUNCTION_backports$configparser$$$function_1___init__( tmp_defaults_1 );
    assert( outline_0_var___init__ == NULL );
    outline_0_var___init__ = tmp_assign_source_30;

    tmp_assign_source_31 = MAKE_FUNCTION_backports$configparser$$$function_2___repr__(  );
    assert( outline_0_var___repr__ == NULL );
    outline_0_var___repr__ = tmp_assign_source_31;

    tmp_assign_source_32 = outline_0_var___repr__;

    CHECK_OBJECT( tmp_assign_source_32 );
    assert( outline_0_var___str__ == NULL );
    Py_INCREF( tmp_assign_source_32 );
    outline_0_var___str__ = tmp_assign_source_32;

    // Tried code:
    tmp_outline_return_value_1 = _PyDict_NewPresized( 5 );
    tmp_dict_value_1 = outline_0_var___module__;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = outline_0_var___doc__;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_3 = outline_0_var___init__;

    CHECK_OBJECT( tmp_dict_value_3 );
    tmp_dict_key_3 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_4 = outline_0_var___repr__;

    CHECK_OBJECT( tmp_dict_value_4 );
    tmp_dict_key_4 = const_str_plain___repr__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_5 = outline_0_var___str__;

    CHECK_OBJECT( tmp_dict_value_5 );
    tmp_dict_key_5 = const_str_plain___str__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)outline_0_var___module__ );
    Py_DECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___doc__ );
    Py_DECREF( outline_0_var___doc__ );
    outline_0_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___init__ );
    Py_DECREF( outline_0_var___init__ );
    outline_0_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___repr__ );
    Py_DECREF( outline_0_var___repr__ );
    outline_0_var___repr__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___str__ );
    Py_DECREF( outline_0_var___str__ );
    outline_0_var___str__ = NULL;

    goto outline_result_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_1:;
    tmp_assign_source_27 = tmp_outline_return_value_1;
    assert( tmp_class_creation_1__class_dict == NULL );
    tmp_class_creation_1__class_dict = tmp_assign_source_27;

    // Tried code:
    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_compare_right_1 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_dict_name_1 );
    tmp_key_name_1 = const_str_plain___metaclass__;
    tmp_assign_source_33 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 157;

        goto try_except_handler_3;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_subscribed_name_1 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = const_int_0;
    tmp_assign_source_34 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 157;

        goto try_except_handler_3;
    }
    assert( tmp_select_metaclass_1__base == NULL );
    tmp_select_metaclass_1__base = tmp_assign_source_34;

    // Tried code:
    // Tried code:
    tmp_source_name_1 = tmp_select_metaclass_1__base;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_outline_return_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_1 );
    if ( tmp_outline_return_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 157;

        goto try_except_handler_5;
    }
    goto try_return_handler_4;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_2 );
    Py_XDECREF( exception_keeper_value_2 );
    Py_XDECREF( exception_keeper_tb_2 );
    tmp_type_arg_1 = tmp_select_metaclass_1__base;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_outline_return_value_2 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_outline_return_value_2 != NULL );
    goto try_return_handler_4;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_4:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_1__base );
    Py_DECREF( tmp_select_metaclass_1__base );
    tmp_select_metaclass_1__base = NULL;

    goto outline_result_2;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_1__base );
    Py_DECREF( tmp_select_metaclass_1__base );
    tmp_select_metaclass_1__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_2:;
    tmp_assign_source_33 = tmp_outline_return_value_2;
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_33;

    tmp_called_name_1 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_called_name_1 );
    tmp_args_element_name_1 = const_str_plain_Error;
    tmp_args_element_name_2 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 157;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_assign_source_35 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 157;

        goto try_except_handler_3;
    }
    assert( tmp_class_creation_1__class == NULL );
    tmp_class_creation_1__class = tmp_assign_source_35;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    tmp_assign_source_36 = tmp_class_creation_1__class;

    CHECK_OBJECT( tmp_assign_source_36 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error, tmp_assign_source_36 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class );
    Py_DECREF( tmp_class_creation_1__class );
    tmp_class_creation_1__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Tried code:
    tmp_assign_source_37 = PyTuple_New( 1 );
    tmp_tuple_element_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_tuple_element_2 == NULL ))
    {
        tmp_tuple_element_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_assign_source_37 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 170;

        goto try_except_handler_6;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assign_source_37, 0, tmp_tuple_element_2 );
    assert( tmp_class_creation_2__bases == NULL );
    tmp_class_creation_2__bases = tmp_assign_source_37;

    tmp_assign_source_39 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_1_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_39 );
    outline_1_var___module__ = tmp_assign_source_39;

    tmp_assign_source_40 = const_unicode_digest_3d6d15600c2f11e9754459914e332bbf;
    assert( outline_1_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_40 );
    outline_1_var___doc__ = tmp_assign_source_40;

    tmp_assign_source_41 = MAKE_FUNCTION_backports$configparser$$$function_3___init__(  );
    assert( outline_1_var___init__ == NULL );
    outline_1_var___init__ = tmp_assign_source_41;

    // Tried code:
    tmp_outline_return_value_3 = _PyDict_NewPresized( 3 );
    tmp_dict_value_6 = outline_1_var___module__;

    CHECK_OBJECT( tmp_dict_value_6 );
    tmp_dict_key_6 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_3, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_7 = outline_1_var___doc__;

    CHECK_OBJECT( tmp_dict_value_7 );
    tmp_dict_key_7 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_3, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_8 = outline_1_var___init__;

    CHECK_OBJECT( tmp_dict_value_8 );
    tmp_dict_key_8 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_3, tmp_dict_key_8, tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_7;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_7:;
    CHECK_OBJECT( (PyObject *)outline_1_var___module__ );
    Py_DECREF( outline_1_var___module__ );
    outline_1_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_1_var___doc__ );
    Py_DECREF( outline_1_var___doc__ );
    outline_1_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_1_var___init__ );
    Py_DECREF( outline_1_var___init__ );
    outline_1_var___init__ = NULL;

    goto outline_result_3;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_1_var___module__ );
    Py_DECREF( outline_1_var___module__ );
    outline_1_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_1_var___doc__ );
    Py_DECREF( outline_1_var___doc__ );
    outline_1_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_1_var___init__ );
    Py_DECREF( outline_1_var___init__ );
    outline_1_var___init__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_3:;
    tmp_assign_source_38 = tmp_outline_return_value_3;
    assert( tmp_class_creation_2__class_dict == NULL );
    tmp_class_creation_2__class_dict = tmp_assign_source_38;

    tmp_compare_left_2 = const_str_plain___metaclass__;
    tmp_compare_right_2 = tmp_class_creation_2__class_dict;

    CHECK_OBJECT( tmp_compare_right_2 );
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_dict_name_2 = tmp_class_creation_2__class_dict;

    CHECK_OBJECT( tmp_dict_name_2 );
    tmp_key_name_2 = const_str_plain___metaclass__;
    tmp_assign_source_42 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 170;

        goto try_except_handler_6;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_subscribed_name_2 = tmp_class_creation_2__bases;

    CHECK_OBJECT( tmp_subscribed_name_2 );
    tmp_subscript_name_2 = const_int_0;
    tmp_assign_source_43 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 170;

        goto try_except_handler_6;
    }
    assert( tmp_select_metaclass_2__base == NULL );
    tmp_select_metaclass_2__base = tmp_assign_source_43;

    // Tried code:
    // Tried code:
    tmp_source_name_2 = tmp_select_metaclass_2__base;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_outline_return_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
    if ( tmp_outline_return_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 170;

        goto try_except_handler_9;
    }
    goto try_return_handler_8;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_4 );
    Py_XDECREF( exception_keeper_value_4 );
    Py_XDECREF( exception_keeper_tb_4 );
    tmp_type_arg_2 = tmp_select_metaclass_2__base;

    CHECK_OBJECT( tmp_type_arg_2 );
    tmp_outline_return_value_4 = BUILTIN_TYPE1( tmp_type_arg_2 );
    assert( tmp_outline_return_value_4 != NULL );
    goto try_return_handler_8;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_8:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_2__base );
    Py_DECREF( tmp_select_metaclass_2__base );
    tmp_select_metaclass_2__base = NULL;

    goto outline_result_4;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_2__base );
    Py_DECREF( tmp_select_metaclass_2__base );
    tmp_select_metaclass_2__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_4:;
    tmp_assign_source_42 = tmp_outline_return_value_4;
    condexpr_end_2:;
    assert( tmp_class_creation_2__metaclass == NULL );
    tmp_class_creation_2__metaclass = tmp_assign_source_42;

    tmp_called_name_2 = tmp_class_creation_2__metaclass;

    CHECK_OBJECT( tmp_called_name_2 );
    tmp_args_element_name_4 = const_str_plain_NoSectionError;
    tmp_args_element_name_5 = tmp_class_creation_2__bases;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = tmp_class_creation_2__class_dict;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 170;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_44 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 170;

        goto try_except_handler_6;
    }
    assert( tmp_class_creation_2__class == NULL );
    tmp_class_creation_2__class = tmp_assign_source_44;

    goto try_end_3;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    tmp_assign_source_45 = tmp_class_creation_2__class;

    CHECK_OBJECT( tmp_assign_source_45 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoSectionError, tmp_assign_source_45 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class );
    Py_DECREF( tmp_class_creation_2__class );
    tmp_class_creation_2__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases );
    Py_DECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_dict );
    Py_DECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    // Tried code:
    tmp_assign_source_46 = PyTuple_New( 1 );
    tmp_tuple_element_3 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_tuple_element_3 == NULL ))
    {
        tmp_tuple_element_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 179;

        goto try_except_handler_10;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_assign_source_46, 0, tmp_tuple_element_3 );
    assert( tmp_class_creation_3__bases == NULL );
    tmp_class_creation_3__bases = tmp_assign_source_46;

    tmp_assign_source_48 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_2_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_48 );
    outline_2_var___module__ = tmp_assign_source_48;

    tmp_assign_source_49 = const_unicode_digest_3ba0dd0c6928643e6077d299d4239035;
    assert( outline_2_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_49 );
    outline_2_var___doc__ = tmp_assign_source_49;

    tmp_defaults_2 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_2 );
    tmp_assign_source_50 = MAKE_FUNCTION_backports$configparser$$$function_4___init__( tmp_defaults_2 );
    assert( outline_2_var___init__ == NULL );
    outline_2_var___init__ = tmp_assign_source_50;

    // Tried code:
    tmp_outline_return_value_5 = _PyDict_NewPresized( 3 );
    tmp_dict_value_9 = outline_2_var___module__;

    CHECK_OBJECT( tmp_dict_value_9 );
    tmp_dict_key_9 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_5, tmp_dict_key_9, tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_10 = outline_2_var___doc__;

    CHECK_OBJECT( tmp_dict_value_10 );
    tmp_dict_key_10 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_5, tmp_dict_key_10, tmp_dict_value_10 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_11 = outline_2_var___init__;

    CHECK_OBJECT( tmp_dict_value_11 );
    tmp_dict_key_11 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_5, tmp_dict_key_11, tmp_dict_value_11 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_11;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_11:;
    CHECK_OBJECT( (PyObject *)outline_2_var___module__ );
    Py_DECREF( outline_2_var___module__ );
    outline_2_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_2_var___doc__ );
    Py_DECREF( outline_2_var___doc__ );
    outline_2_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_2_var___init__ );
    Py_DECREF( outline_2_var___init__ );
    outline_2_var___init__ = NULL;

    goto outline_result_5;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_5:;
    tmp_assign_source_47 = tmp_outline_return_value_5;
    assert( tmp_class_creation_3__class_dict == NULL );
    tmp_class_creation_3__class_dict = tmp_assign_source_47;

    tmp_compare_left_3 = const_str_plain___metaclass__;
    tmp_compare_right_3 = tmp_class_creation_3__class_dict;

    CHECK_OBJECT( tmp_compare_right_3 );
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_dict_name_3 = tmp_class_creation_3__class_dict;

    CHECK_OBJECT( tmp_dict_name_3 );
    tmp_key_name_3 = const_str_plain___metaclass__;
    tmp_assign_source_51 = DICT_GET_ITEM( tmp_dict_name_3, tmp_key_name_3 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;

        goto try_except_handler_10;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_subscribed_name_3 = tmp_class_creation_3__bases;

    CHECK_OBJECT( tmp_subscribed_name_3 );
    tmp_subscript_name_3 = const_int_0;
    tmp_assign_source_52 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;

        goto try_except_handler_10;
    }
    assert( tmp_select_metaclass_3__base == NULL );
    tmp_select_metaclass_3__base = tmp_assign_source_52;

    // Tried code:
    // Tried code:
    tmp_source_name_3 = tmp_select_metaclass_3__base;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_outline_return_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_3 );
    if ( tmp_outline_return_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;

        goto try_except_handler_13;
    }
    goto try_return_handler_12;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_6 );
    Py_XDECREF( exception_keeper_value_6 );
    Py_XDECREF( exception_keeper_tb_6 );
    tmp_type_arg_3 = tmp_select_metaclass_3__base;

    CHECK_OBJECT( tmp_type_arg_3 );
    tmp_outline_return_value_6 = BUILTIN_TYPE1( tmp_type_arg_3 );
    assert( tmp_outline_return_value_6 != NULL );
    goto try_return_handler_12;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_12:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_3__base );
    Py_DECREF( tmp_select_metaclass_3__base );
    tmp_select_metaclass_3__base = NULL;

    goto outline_result_6;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_3__base );
    Py_DECREF( tmp_select_metaclass_3__base );
    tmp_select_metaclass_3__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_6:;
    tmp_assign_source_51 = tmp_outline_return_value_6;
    condexpr_end_3:;
    assert( tmp_class_creation_3__metaclass == NULL );
    tmp_class_creation_3__metaclass = tmp_assign_source_51;

    tmp_called_name_3 = tmp_class_creation_3__metaclass;

    CHECK_OBJECT( tmp_called_name_3 );
    tmp_args_element_name_7 = const_str_plain_DuplicateSectionError;
    tmp_args_element_name_8 = tmp_class_creation_3__bases;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_args_element_name_9 = tmp_class_creation_3__class_dict;

    CHECK_OBJECT( tmp_args_element_name_9 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 179;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_assign_source_53 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, call_args );
    }

    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;

        goto try_except_handler_10;
    }
    assert( tmp_class_creation_3__class == NULL );
    tmp_class_creation_3__class = tmp_assign_source_53;

    goto try_end_4;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    tmp_assign_source_54 = tmp_class_creation_3__class;

    CHECK_OBJECT( tmp_assign_source_54 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DuplicateSectionError, tmp_assign_source_54 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class );
    Py_DECREF( tmp_class_creation_3__class );
    tmp_class_creation_3__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases );
    Py_DECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_dict );
    Py_DECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    // Tried code:
    tmp_assign_source_55 = PyTuple_New( 1 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_55 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 205;

        goto try_except_handler_14;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_assign_source_55, 0, tmp_tuple_element_4 );
    assert( tmp_class_creation_4__bases == NULL );
    tmp_class_creation_4__bases = tmp_assign_source_55;

    tmp_assign_source_57 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_3_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_57 );
    outline_3_var___module__ = tmp_assign_source_57;

    tmp_assign_source_58 = const_unicode_digest_a312722c82c64d3d8d90846f8090973a;
    assert( outline_3_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_58 );
    outline_3_var___doc__ = tmp_assign_source_58;

    tmp_defaults_3 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_3 );
    tmp_assign_source_59 = MAKE_FUNCTION_backports$configparser$$$function_5___init__( tmp_defaults_3 );
    assert( outline_3_var___init__ == NULL );
    outline_3_var___init__ = tmp_assign_source_59;

    // Tried code:
    tmp_outline_return_value_7 = _PyDict_NewPresized( 3 );
    tmp_dict_value_12 = outline_3_var___module__;

    CHECK_OBJECT( tmp_dict_value_12 );
    tmp_dict_key_12 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_7, tmp_dict_key_12, tmp_dict_value_12 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_13 = outline_3_var___doc__;

    CHECK_OBJECT( tmp_dict_value_13 );
    tmp_dict_key_13 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_7, tmp_dict_key_13, tmp_dict_value_13 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_14 = outline_3_var___init__;

    CHECK_OBJECT( tmp_dict_value_14 );
    tmp_dict_key_14 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_7, tmp_dict_key_14, tmp_dict_value_14 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_15;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_15:;
    CHECK_OBJECT( (PyObject *)outline_3_var___module__ );
    Py_DECREF( outline_3_var___module__ );
    outline_3_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_3_var___doc__ );
    Py_DECREF( outline_3_var___doc__ );
    outline_3_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_3_var___init__ );
    Py_DECREF( outline_3_var___init__ );
    outline_3_var___init__ = NULL;

    goto outline_result_7;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_7:;
    tmp_assign_source_56 = tmp_outline_return_value_7;
    assert( tmp_class_creation_4__class_dict == NULL );
    tmp_class_creation_4__class_dict = tmp_assign_source_56;

    tmp_compare_left_4 = const_str_plain___metaclass__;
    tmp_compare_right_4 = tmp_class_creation_4__class_dict;

    CHECK_OBJECT( tmp_compare_right_4 );
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_dict_name_4 = tmp_class_creation_4__class_dict;

    CHECK_OBJECT( tmp_dict_name_4 );
    tmp_key_name_4 = const_str_plain___metaclass__;
    tmp_assign_source_60 = DICT_GET_ITEM( tmp_dict_name_4, tmp_key_name_4 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 205;

        goto try_except_handler_14;
    }
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_subscribed_name_4 = tmp_class_creation_4__bases;

    CHECK_OBJECT( tmp_subscribed_name_4 );
    tmp_subscript_name_4 = const_int_0;
    tmp_assign_source_61 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 205;

        goto try_except_handler_14;
    }
    assert( tmp_select_metaclass_4__base == NULL );
    tmp_select_metaclass_4__base = tmp_assign_source_61;

    // Tried code:
    // Tried code:
    tmp_source_name_4 = tmp_select_metaclass_4__base;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_outline_return_value_8 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_4 );
    if ( tmp_outline_return_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 205;

        goto try_except_handler_17;
    }
    goto try_return_handler_16;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_8 );
    Py_XDECREF( exception_keeper_value_8 );
    Py_XDECREF( exception_keeper_tb_8 );
    tmp_type_arg_4 = tmp_select_metaclass_4__base;

    CHECK_OBJECT( tmp_type_arg_4 );
    tmp_outline_return_value_8 = BUILTIN_TYPE1( tmp_type_arg_4 );
    assert( tmp_outline_return_value_8 != NULL );
    goto try_return_handler_16;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_16:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_4__base );
    Py_DECREF( tmp_select_metaclass_4__base );
    tmp_select_metaclass_4__base = NULL;

    goto outline_result_8;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_4__base );
    Py_DECREF( tmp_select_metaclass_4__base );
    tmp_select_metaclass_4__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_8:;
    tmp_assign_source_60 = tmp_outline_return_value_8;
    condexpr_end_4:;
    assert( tmp_class_creation_4__metaclass == NULL );
    tmp_class_creation_4__metaclass = tmp_assign_source_60;

    tmp_called_name_4 = tmp_class_creation_4__metaclass;

    CHECK_OBJECT( tmp_called_name_4 );
    tmp_args_element_name_10 = const_str_plain_DuplicateOptionError;
    tmp_args_element_name_11 = tmp_class_creation_4__bases;

    CHECK_OBJECT( tmp_args_element_name_11 );
    tmp_args_element_name_12 = tmp_class_creation_4__class_dict;

    CHECK_OBJECT( tmp_args_element_name_12 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 205;
    {
        PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_assign_source_62 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, call_args );
    }

    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 205;

        goto try_except_handler_14;
    }
    assert( tmp_class_creation_4__class == NULL );
    tmp_class_creation_4__class = tmp_assign_source_62;

    goto try_end_5;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    tmp_assign_source_63 = tmp_class_creation_4__class;

    CHECK_OBJECT( tmp_assign_source_63 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_DuplicateOptionError, tmp_assign_source_63 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class );
    Py_DECREF( tmp_class_creation_4__class );
    tmp_class_creation_4__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases );
    Py_DECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_dict );
    Py_DECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__metaclass );
    Py_DECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    // Tried code:
    tmp_assign_source_64 = PyTuple_New( 1 );
    tmp_tuple_element_5 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_tuple_element_5 == NULL ))
    {
        tmp_tuple_element_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_64 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 232;

        goto try_except_handler_18;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_64, 0, tmp_tuple_element_5 );
    assert( tmp_class_creation_5__bases == NULL );
    tmp_class_creation_5__bases = tmp_assign_source_64;

    tmp_assign_source_66 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_4_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_66 );
    outline_4_var___module__ = tmp_assign_source_66;

    tmp_assign_source_67 = const_unicode_digest_8fd76be66ef1f9e1525a445a9fe2ae66;
    assert( outline_4_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_67 );
    outline_4_var___doc__ = tmp_assign_source_67;

    tmp_assign_source_68 = MAKE_FUNCTION_backports$configparser$$$function_6___init__(  );
    assert( outline_4_var___init__ == NULL );
    outline_4_var___init__ = tmp_assign_source_68;

    // Tried code:
    tmp_outline_return_value_9 = _PyDict_NewPresized( 3 );
    tmp_dict_value_15 = outline_4_var___module__;

    CHECK_OBJECT( tmp_dict_value_15 );
    tmp_dict_key_15 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_15, tmp_dict_value_15 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_16 = outline_4_var___doc__;

    CHECK_OBJECT( tmp_dict_value_16 );
    tmp_dict_key_16 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_16, tmp_dict_value_16 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_17 = outline_4_var___init__;

    CHECK_OBJECT( tmp_dict_value_17 );
    tmp_dict_key_17 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_17, tmp_dict_value_17 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_19;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_19:;
    CHECK_OBJECT( (PyObject *)outline_4_var___module__ );
    Py_DECREF( outline_4_var___module__ );
    outline_4_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_4_var___doc__ );
    Py_DECREF( outline_4_var___doc__ );
    outline_4_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_4_var___init__ );
    Py_DECREF( outline_4_var___init__ );
    outline_4_var___init__ = NULL;

    goto outline_result_9;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_4_var___module__ );
    Py_DECREF( outline_4_var___module__ );
    outline_4_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_4_var___doc__ );
    Py_DECREF( outline_4_var___doc__ );
    outline_4_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_4_var___init__ );
    Py_DECREF( outline_4_var___init__ );
    outline_4_var___init__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_9:;
    tmp_assign_source_65 = tmp_outline_return_value_9;
    assert( tmp_class_creation_5__class_dict == NULL );
    tmp_class_creation_5__class_dict = tmp_assign_source_65;

    tmp_compare_left_5 = const_str_plain___metaclass__;
    tmp_compare_right_5 = tmp_class_creation_5__class_dict;

    CHECK_OBJECT( tmp_compare_right_5 );
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_dict_name_5 = tmp_class_creation_5__class_dict;

    CHECK_OBJECT( tmp_dict_name_5 );
    tmp_key_name_5 = const_str_plain___metaclass__;
    tmp_assign_source_69 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 232;

        goto try_except_handler_18;
    }
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_subscribed_name_5 = tmp_class_creation_5__bases;

    CHECK_OBJECT( tmp_subscribed_name_5 );
    tmp_subscript_name_5 = const_int_0;
    tmp_assign_source_70 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 232;

        goto try_except_handler_18;
    }
    assert( tmp_select_metaclass_5__base == NULL );
    tmp_select_metaclass_5__base = tmp_assign_source_70;

    // Tried code:
    // Tried code:
    tmp_source_name_5 = tmp_select_metaclass_5__base;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_outline_return_value_10 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_5 );
    if ( tmp_outline_return_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 232;

        goto try_except_handler_21;
    }
    goto try_return_handler_20;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_10 );
    Py_XDECREF( exception_keeper_value_10 );
    Py_XDECREF( exception_keeper_tb_10 );
    tmp_type_arg_5 = tmp_select_metaclass_5__base;

    CHECK_OBJECT( tmp_type_arg_5 );
    tmp_outline_return_value_10 = BUILTIN_TYPE1( tmp_type_arg_5 );
    assert( tmp_outline_return_value_10 != NULL );
    goto try_return_handler_20;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_20:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_5__base );
    Py_DECREF( tmp_select_metaclass_5__base );
    tmp_select_metaclass_5__base = NULL;

    goto outline_result_10;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_5__base );
    Py_DECREF( tmp_select_metaclass_5__base );
    tmp_select_metaclass_5__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_10:;
    tmp_assign_source_69 = tmp_outline_return_value_10;
    condexpr_end_5:;
    assert( tmp_class_creation_5__metaclass == NULL );
    tmp_class_creation_5__metaclass = tmp_assign_source_69;

    tmp_called_name_5 = tmp_class_creation_5__metaclass;

    CHECK_OBJECT( tmp_called_name_5 );
    tmp_args_element_name_13 = const_str_plain_NoOptionError;
    tmp_args_element_name_14 = tmp_class_creation_5__bases;

    CHECK_OBJECT( tmp_args_element_name_14 );
    tmp_args_element_name_15 = tmp_class_creation_5__class_dict;

    CHECK_OBJECT( tmp_args_element_name_15 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 232;
    {
        PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_assign_source_71 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
    }

    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 232;

        goto try_except_handler_18;
    }
    assert( tmp_class_creation_5__class == NULL );
    tmp_class_creation_5__class = tmp_assign_source_71;

    goto try_end_6;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    tmp_assign_source_72 = tmp_class_creation_5__class;

    CHECK_OBJECT( tmp_assign_source_72 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_NoOptionError, tmp_assign_source_72 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class );
    Py_DECREF( tmp_class_creation_5__class );
    tmp_class_creation_5__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__bases );
    Py_DECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_dict );
    Py_DECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__metaclass );
    Py_DECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    // Tried code:
    tmp_assign_source_73 = PyTuple_New( 1 );
    tmp_tuple_element_6 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_tuple_element_6 == NULL ))
    {
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_assign_source_73 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 243;

        goto try_except_handler_22;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_assign_source_73, 0, tmp_tuple_element_6 );
    assert( tmp_class_creation_6__bases == NULL );
    tmp_class_creation_6__bases = tmp_assign_source_73;

    tmp_assign_source_75 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_5_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_75 );
    outline_5_var___module__ = tmp_assign_source_75;

    tmp_assign_source_76 = const_unicode_digest_f8a9214f74c6e3de16fd714be673fbbe;
    assert( outline_5_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_76 );
    outline_5_var___doc__ = tmp_assign_source_76;

    tmp_assign_source_77 = MAKE_FUNCTION_backports$configparser$$$function_7___init__(  );
    assert( outline_5_var___init__ == NULL );
    outline_5_var___init__ = tmp_assign_source_77;

    // Tried code:
    tmp_outline_return_value_11 = _PyDict_NewPresized( 3 );
    tmp_dict_value_18 = outline_5_var___module__;

    CHECK_OBJECT( tmp_dict_value_18 );
    tmp_dict_key_18 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_11, tmp_dict_key_18, tmp_dict_value_18 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_19 = outline_5_var___doc__;

    CHECK_OBJECT( tmp_dict_value_19 );
    tmp_dict_key_19 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_11, tmp_dict_key_19, tmp_dict_value_19 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_20 = outline_5_var___init__;

    CHECK_OBJECT( tmp_dict_value_20 );
    tmp_dict_key_20 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_11, tmp_dict_key_20, tmp_dict_value_20 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_23;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_23:;
    CHECK_OBJECT( (PyObject *)outline_5_var___module__ );
    Py_DECREF( outline_5_var___module__ );
    outline_5_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var___doc__ );
    Py_DECREF( outline_5_var___doc__ );
    outline_5_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var___init__ );
    Py_DECREF( outline_5_var___init__ );
    outline_5_var___init__ = NULL;

    goto outline_result_11;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_5_var___module__ );
    Py_DECREF( outline_5_var___module__ );
    outline_5_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var___doc__ );
    Py_DECREF( outline_5_var___doc__ );
    outline_5_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var___init__ );
    Py_DECREF( outline_5_var___init__ );
    outline_5_var___init__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_11:;
    tmp_assign_source_74 = tmp_outline_return_value_11;
    assert( tmp_class_creation_6__class_dict == NULL );
    tmp_class_creation_6__class_dict = tmp_assign_source_74;

    tmp_compare_left_6 = const_str_plain___metaclass__;
    tmp_compare_right_6 = tmp_class_creation_6__class_dict;

    CHECK_OBJECT( tmp_compare_right_6 );
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_dict_name_6 = tmp_class_creation_6__class_dict;

    CHECK_OBJECT( tmp_dict_name_6 );
    tmp_key_name_6 = const_str_plain___metaclass__;
    tmp_assign_source_78 = DICT_GET_ITEM( tmp_dict_name_6, tmp_key_name_6 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 243;

        goto try_except_handler_22;
    }
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_subscribed_name_6 = tmp_class_creation_6__bases;

    CHECK_OBJECT( tmp_subscribed_name_6 );
    tmp_subscript_name_6 = const_int_0;
    tmp_assign_source_79 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 243;

        goto try_except_handler_22;
    }
    assert( tmp_select_metaclass_6__base == NULL );
    tmp_select_metaclass_6__base = tmp_assign_source_79;

    // Tried code:
    // Tried code:
    tmp_source_name_6 = tmp_select_metaclass_6__base;

    CHECK_OBJECT( tmp_source_name_6 );
    tmp_outline_return_value_12 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_6 );
    if ( tmp_outline_return_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 243;

        goto try_except_handler_25;
    }
    goto try_return_handler_24;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_12 );
    Py_XDECREF( exception_keeper_value_12 );
    Py_XDECREF( exception_keeper_tb_12 );
    tmp_type_arg_6 = tmp_select_metaclass_6__base;

    CHECK_OBJECT( tmp_type_arg_6 );
    tmp_outline_return_value_12 = BUILTIN_TYPE1( tmp_type_arg_6 );
    assert( tmp_outline_return_value_12 != NULL );
    goto try_return_handler_24;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_24:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_6__base );
    Py_DECREF( tmp_select_metaclass_6__base );
    tmp_select_metaclass_6__base = NULL;

    goto outline_result_12;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_6__base );
    Py_DECREF( tmp_select_metaclass_6__base );
    tmp_select_metaclass_6__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_12:;
    tmp_assign_source_78 = tmp_outline_return_value_12;
    condexpr_end_6:;
    assert( tmp_class_creation_6__metaclass == NULL );
    tmp_class_creation_6__metaclass = tmp_assign_source_78;

    tmp_called_name_6 = tmp_class_creation_6__metaclass;

    CHECK_OBJECT( tmp_called_name_6 );
    tmp_args_element_name_16 = const_str_plain_InterpolationError;
    tmp_args_element_name_17 = tmp_class_creation_6__bases;

    CHECK_OBJECT( tmp_args_element_name_17 );
    tmp_args_element_name_18 = tmp_class_creation_6__class_dict;

    CHECK_OBJECT( tmp_args_element_name_18 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 243;
    {
        PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 };
        tmp_assign_source_80 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
    }

    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 243;

        goto try_except_handler_22;
    }
    assert( tmp_class_creation_6__class == NULL );
    tmp_class_creation_6__class = tmp_assign_source_80;

    goto try_end_7;
    // Exception handler code:
    try_except_handler_22:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    Py_XDECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    tmp_assign_source_81 = tmp_class_creation_6__class;

    CHECK_OBJECT( tmp_assign_source_81 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationError, tmp_assign_source_81 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class );
    Py_DECREF( tmp_class_creation_6__class );
    tmp_class_creation_6__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__bases );
    Py_DECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_dict );
    Py_DECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__metaclass );
    Py_DECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    // Tried code:
    tmp_assign_source_82 = PyTuple_New( 1 );
    tmp_tuple_element_7 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationError );

    if (unlikely( tmp_tuple_element_7 == NULL ))
    {
        tmp_tuple_element_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationError );
    }

    if ( tmp_tuple_element_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_82 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "InterpolationError" );
        exception_tb = NULL;

        exception_lineno = 253;

        goto try_except_handler_26;
    }

    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_assign_source_82, 0, tmp_tuple_element_7 );
    assert( tmp_class_creation_7__bases == NULL );
    tmp_class_creation_7__bases = tmp_assign_source_82;

    tmp_assign_source_84 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_6_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_84 );
    outline_6_var___module__ = tmp_assign_source_84;

    tmp_assign_source_85 = const_unicode_digest_8eeb96261c7bdfcc231650fb4bf54f49;
    assert( outline_6_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_85 );
    outline_6_var___doc__ = tmp_assign_source_85;

    tmp_assign_source_86 = MAKE_FUNCTION_backports$configparser$$$function_8___init__(  );
    assert( outline_6_var___init__ == NULL );
    outline_6_var___init__ = tmp_assign_source_86;

    // Tried code:
    tmp_outline_return_value_13 = _PyDict_NewPresized( 3 );
    tmp_dict_value_21 = outline_6_var___module__;

    CHECK_OBJECT( tmp_dict_value_21 );
    tmp_dict_key_21 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_13, tmp_dict_key_21, tmp_dict_value_21 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_22 = outline_6_var___doc__;

    CHECK_OBJECT( tmp_dict_value_22 );
    tmp_dict_key_22 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_13, tmp_dict_key_22, tmp_dict_value_22 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_23 = outline_6_var___init__;

    CHECK_OBJECT( tmp_dict_value_23 );
    tmp_dict_key_23 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_13, tmp_dict_key_23, tmp_dict_value_23 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_27;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_27:;
    CHECK_OBJECT( (PyObject *)outline_6_var___module__ );
    Py_DECREF( outline_6_var___module__ );
    outline_6_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_6_var___doc__ );
    Py_DECREF( outline_6_var___doc__ );
    outline_6_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_6_var___init__ );
    Py_DECREF( outline_6_var___init__ );
    outline_6_var___init__ = NULL;

    goto outline_result_13;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_6_var___module__ );
    Py_DECREF( outline_6_var___module__ );
    outline_6_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_6_var___doc__ );
    Py_DECREF( outline_6_var___doc__ );
    outline_6_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_6_var___init__ );
    Py_DECREF( outline_6_var___init__ );
    outline_6_var___init__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_13:;
    tmp_assign_source_83 = tmp_outline_return_value_13;
    assert( tmp_class_creation_7__class_dict == NULL );
    tmp_class_creation_7__class_dict = tmp_assign_source_83;

    tmp_compare_left_7 = const_str_plain___metaclass__;
    tmp_compare_right_7 = tmp_class_creation_7__class_dict;

    CHECK_OBJECT( tmp_compare_right_7 );
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_dict_name_7 = tmp_class_creation_7__class_dict;

    CHECK_OBJECT( tmp_dict_name_7 );
    tmp_key_name_7 = const_str_plain___metaclass__;
    tmp_assign_source_87 = DICT_GET_ITEM( tmp_dict_name_7, tmp_key_name_7 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 253;

        goto try_except_handler_26;
    }
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_subscribed_name_7 = tmp_class_creation_7__bases;

    CHECK_OBJECT( tmp_subscribed_name_7 );
    tmp_subscript_name_7 = const_int_0;
    tmp_assign_source_88 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 253;

        goto try_except_handler_26;
    }
    assert( tmp_select_metaclass_7__base == NULL );
    tmp_select_metaclass_7__base = tmp_assign_source_88;

    // Tried code:
    // Tried code:
    tmp_source_name_7 = tmp_select_metaclass_7__base;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_outline_return_value_14 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_7 );
    if ( tmp_outline_return_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 253;

        goto try_except_handler_29;
    }
    goto try_return_handler_28;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_29:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_14 );
    Py_XDECREF( exception_keeper_value_14 );
    Py_XDECREF( exception_keeper_tb_14 );
    tmp_type_arg_7 = tmp_select_metaclass_7__base;

    CHECK_OBJECT( tmp_type_arg_7 );
    tmp_outline_return_value_14 = BUILTIN_TYPE1( tmp_type_arg_7 );
    assert( tmp_outline_return_value_14 != NULL );
    goto try_return_handler_28;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_28:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_7__base );
    Py_DECREF( tmp_select_metaclass_7__base );
    tmp_select_metaclass_7__base = NULL;

    goto outline_result_14;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_7__base );
    Py_DECREF( tmp_select_metaclass_7__base );
    tmp_select_metaclass_7__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_14:;
    tmp_assign_source_87 = tmp_outline_return_value_14;
    condexpr_end_7:;
    assert( tmp_class_creation_7__metaclass == NULL );
    tmp_class_creation_7__metaclass = tmp_assign_source_87;

    tmp_called_name_7 = tmp_class_creation_7__metaclass;

    CHECK_OBJECT( tmp_called_name_7 );
    tmp_args_element_name_19 = const_str_plain_InterpolationMissingOptionError;
    tmp_args_element_name_20 = tmp_class_creation_7__bases;

    CHECK_OBJECT( tmp_args_element_name_20 );
    tmp_args_element_name_21 = tmp_class_creation_7__class_dict;

    CHECK_OBJECT( tmp_args_element_name_21 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 253;
    {
        PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21 };
        tmp_assign_source_89 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, call_args );
    }

    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 253;

        goto try_except_handler_26;
    }
    assert( tmp_class_creation_7__class == NULL );
    tmp_class_creation_7__class = tmp_assign_source_89;

    goto try_end_8;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    tmp_assign_source_90 = tmp_class_creation_7__class;

    CHECK_OBJECT( tmp_assign_source_90 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationMissingOptionError, tmp_assign_source_90 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class );
    Py_DECREF( tmp_class_creation_7__class );
    tmp_class_creation_7__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__bases );
    Py_DECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class_dict );
    Py_DECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__metaclass );
    Py_DECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    // Tried code:
    tmp_assign_source_91 = PyTuple_New( 1 );
    tmp_tuple_element_8 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationError );

    if (unlikely( tmp_tuple_element_8 == NULL ))
    {
        tmp_tuple_element_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationError );
    }

    if ( tmp_tuple_element_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_91 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "InterpolationError" );
        exception_tb = NULL;

        exception_lineno = 265;

        goto try_except_handler_30;
    }

    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_assign_source_91, 0, tmp_tuple_element_8 );
    assert( tmp_class_creation_8__bases == NULL );
    tmp_class_creation_8__bases = tmp_assign_source_91;

    tmp_assign_source_93 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_7_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_93 );
    outline_7_var___module__ = tmp_assign_source_93;

    tmp_assign_source_94 = const_unicode_digest_75d9aaf6a4859af17b4d875e9812cc2a;
    assert( outline_7_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_94 );
    outline_7_var___doc__ = tmp_assign_source_94;

    // Tried code:
    tmp_outline_return_value_15 = _PyDict_NewPresized( 2 );
    tmp_dict_value_24 = outline_7_var___module__;

    CHECK_OBJECT( tmp_dict_value_24 );
    tmp_dict_key_24 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_15, tmp_dict_key_24, tmp_dict_value_24 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_25 = outline_7_var___doc__;

    CHECK_OBJECT( tmp_dict_value_25 );
    tmp_dict_key_25 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_15, tmp_dict_key_25, tmp_dict_value_25 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_31;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_31:;
    CHECK_OBJECT( (PyObject *)outline_7_var___module__ );
    Py_DECREF( outline_7_var___module__ );
    outline_7_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_7_var___doc__ );
    Py_DECREF( outline_7_var___doc__ );
    outline_7_var___doc__ = NULL;

    goto outline_result_15;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_7_var___module__ );
    Py_DECREF( outline_7_var___module__ );
    outline_7_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_7_var___doc__ );
    Py_DECREF( outline_7_var___doc__ );
    outline_7_var___doc__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_15:;
    tmp_assign_source_92 = tmp_outline_return_value_15;
    assert( tmp_class_creation_8__class_dict == NULL );
    tmp_class_creation_8__class_dict = tmp_assign_source_92;

    tmp_compare_left_8 = const_str_plain___metaclass__;
    tmp_compare_right_8 = tmp_class_creation_8__class_dict;

    CHECK_OBJECT( tmp_compare_right_8 );
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_dict_name_8 = tmp_class_creation_8__class_dict;

    CHECK_OBJECT( tmp_dict_name_8 );
    tmp_key_name_8 = const_str_plain___metaclass__;
    tmp_assign_source_95 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
    if ( tmp_assign_source_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 265;

        goto try_except_handler_30;
    }
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_subscribed_name_8 = tmp_class_creation_8__bases;

    CHECK_OBJECT( tmp_subscribed_name_8 );
    tmp_subscript_name_8 = const_int_0;
    tmp_assign_source_96 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    if ( tmp_assign_source_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 265;

        goto try_except_handler_30;
    }
    assert( tmp_select_metaclass_8__base == NULL );
    tmp_select_metaclass_8__base = tmp_assign_source_96;

    // Tried code:
    // Tried code:
    tmp_source_name_8 = tmp_select_metaclass_8__base;

    CHECK_OBJECT( tmp_source_name_8 );
    tmp_outline_return_value_16 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_8 );
    if ( tmp_outline_return_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 265;

        goto try_except_handler_33;
    }
    goto try_return_handler_32;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_33:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_16 );
    Py_XDECREF( exception_keeper_value_16 );
    Py_XDECREF( exception_keeper_tb_16 );
    tmp_type_arg_8 = tmp_select_metaclass_8__base;

    CHECK_OBJECT( tmp_type_arg_8 );
    tmp_outline_return_value_16 = BUILTIN_TYPE1( tmp_type_arg_8 );
    assert( tmp_outline_return_value_16 != NULL );
    goto try_return_handler_32;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_32:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_8__base );
    Py_DECREF( tmp_select_metaclass_8__base );
    tmp_select_metaclass_8__base = NULL;

    goto outline_result_16;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_8__base );
    Py_DECREF( tmp_select_metaclass_8__base );
    tmp_select_metaclass_8__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_16:;
    tmp_assign_source_95 = tmp_outline_return_value_16;
    condexpr_end_8:;
    assert( tmp_class_creation_8__metaclass == NULL );
    tmp_class_creation_8__metaclass = tmp_assign_source_95;

    tmp_called_name_8 = tmp_class_creation_8__metaclass;

    CHECK_OBJECT( tmp_called_name_8 );
    tmp_args_element_name_22 = const_str_plain_InterpolationSyntaxError;
    tmp_args_element_name_23 = tmp_class_creation_8__bases;

    CHECK_OBJECT( tmp_args_element_name_23 );
    tmp_args_element_name_24 = tmp_class_creation_8__class_dict;

    CHECK_OBJECT( tmp_args_element_name_24 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 265;
    {
        PyObject *call_args[] = { tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24 };
        tmp_assign_source_97 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, call_args );
    }

    if ( tmp_assign_source_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 265;

        goto try_except_handler_30;
    }
    assert( tmp_class_creation_8__class == NULL );
    tmp_class_creation_8__class = tmp_assign_source_97;

    goto try_end_9;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    tmp_assign_source_98 = tmp_class_creation_8__class;

    CHECK_OBJECT( tmp_assign_source_98 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationSyntaxError, tmp_assign_source_98 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class );
    Py_DECREF( tmp_class_creation_8__class );
    tmp_class_creation_8__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__bases );
    Py_DECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class_dict );
    Py_DECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__metaclass );
    Py_DECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    // Tried code:
    tmp_assign_source_99 = PyTuple_New( 1 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationError );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InterpolationError );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_99 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "InterpolationError" );
        exception_tb = NULL;

        exception_lineno = 273;

        goto try_except_handler_34;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_assign_source_99, 0, tmp_tuple_element_9 );
    assert( tmp_class_creation_9__bases == NULL );
    tmp_class_creation_9__bases = tmp_assign_source_99;

    tmp_assign_source_101 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_8_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_101 );
    outline_8_var___module__ = tmp_assign_source_101;

    tmp_assign_source_102 = const_unicode_digest_4a13f22bb229ffc0dd18e499d29bb520;
    assert( outline_8_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_102 );
    outline_8_var___doc__ = tmp_assign_source_102;

    tmp_assign_source_103 = MAKE_FUNCTION_backports$configparser$$$function_9___init__(  );
    assert( outline_8_var___init__ == NULL );
    outline_8_var___init__ = tmp_assign_source_103;

    // Tried code:
    tmp_outline_return_value_17 = _PyDict_NewPresized( 3 );
    tmp_dict_value_26 = outline_8_var___module__;

    CHECK_OBJECT( tmp_dict_value_26 );
    tmp_dict_key_26 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_17, tmp_dict_key_26, tmp_dict_value_26 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_27 = outline_8_var___doc__;

    CHECK_OBJECT( tmp_dict_value_27 );
    tmp_dict_key_27 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_17, tmp_dict_key_27, tmp_dict_value_27 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_28 = outline_8_var___init__;

    CHECK_OBJECT( tmp_dict_value_28 );
    tmp_dict_key_28 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_17, tmp_dict_key_28, tmp_dict_value_28 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_35;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_35:;
    CHECK_OBJECT( (PyObject *)outline_8_var___module__ );
    Py_DECREF( outline_8_var___module__ );
    outline_8_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_8_var___doc__ );
    Py_DECREF( outline_8_var___doc__ );
    outline_8_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_8_var___init__ );
    Py_DECREF( outline_8_var___init__ );
    outline_8_var___init__ = NULL;

    goto outline_result_17;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_8_var___module__ );
    Py_DECREF( outline_8_var___module__ );
    outline_8_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_8_var___doc__ );
    Py_DECREF( outline_8_var___doc__ );
    outline_8_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_8_var___init__ );
    Py_DECREF( outline_8_var___init__ );
    outline_8_var___init__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_17:;
    tmp_assign_source_100 = tmp_outline_return_value_17;
    assert( tmp_class_creation_9__class_dict == NULL );
    tmp_class_creation_9__class_dict = tmp_assign_source_100;

    tmp_compare_left_9 = const_str_plain___metaclass__;
    tmp_compare_right_9 = tmp_class_creation_9__class_dict;

    CHECK_OBJECT( tmp_compare_right_9 );
    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_dict_name_9 = tmp_class_creation_9__class_dict;

    CHECK_OBJECT( tmp_dict_name_9 );
    tmp_key_name_9 = const_str_plain___metaclass__;
    tmp_assign_source_104 = DICT_GET_ITEM( tmp_dict_name_9, tmp_key_name_9 );
    if ( tmp_assign_source_104 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 273;

        goto try_except_handler_34;
    }
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_subscribed_name_9 = tmp_class_creation_9__bases;

    CHECK_OBJECT( tmp_subscribed_name_9 );
    tmp_subscript_name_9 = const_int_0;
    tmp_assign_source_105 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
    if ( tmp_assign_source_105 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 273;

        goto try_except_handler_34;
    }
    assert( tmp_select_metaclass_9__base == NULL );
    tmp_select_metaclass_9__base = tmp_assign_source_105;

    // Tried code:
    // Tried code:
    tmp_source_name_9 = tmp_select_metaclass_9__base;

    CHECK_OBJECT( tmp_source_name_9 );
    tmp_outline_return_value_18 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_9 );
    if ( tmp_outline_return_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 273;

        goto try_except_handler_37;
    }
    goto try_return_handler_36;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_37:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_18 );
    Py_XDECREF( exception_keeper_value_18 );
    Py_XDECREF( exception_keeper_tb_18 );
    tmp_type_arg_9 = tmp_select_metaclass_9__base;

    CHECK_OBJECT( tmp_type_arg_9 );
    tmp_outline_return_value_18 = BUILTIN_TYPE1( tmp_type_arg_9 );
    assert( tmp_outline_return_value_18 != NULL );
    goto try_return_handler_36;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_36:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_9__base );
    Py_DECREF( tmp_select_metaclass_9__base );
    tmp_select_metaclass_9__base = NULL;

    goto outline_result_18;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_9__base );
    Py_DECREF( tmp_select_metaclass_9__base );
    tmp_select_metaclass_9__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_18:;
    tmp_assign_source_104 = tmp_outline_return_value_18;
    condexpr_end_9:;
    assert( tmp_class_creation_9__metaclass == NULL );
    tmp_class_creation_9__metaclass = tmp_assign_source_104;

    tmp_called_name_9 = tmp_class_creation_9__metaclass;

    CHECK_OBJECT( tmp_called_name_9 );
    tmp_args_element_name_25 = const_str_plain_InterpolationDepthError;
    tmp_args_element_name_26 = tmp_class_creation_9__bases;

    CHECK_OBJECT( tmp_args_element_name_26 );
    tmp_args_element_name_27 = tmp_class_creation_9__class_dict;

    CHECK_OBJECT( tmp_args_element_name_27 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 273;
    {
        PyObject *call_args[] = { tmp_args_element_name_25, tmp_args_element_name_26, tmp_args_element_name_27 };
        tmp_assign_source_106 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, call_args );
    }

    if ( tmp_assign_source_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 273;

        goto try_except_handler_34;
    }
    assert( tmp_class_creation_9__class == NULL );
    tmp_class_creation_9__class = tmp_assign_source_106;

    goto try_end_10;
    // Exception handler code:
    try_except_handler_34:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    tmp_assign_source_107 = tmp_class_creation_9__class;

    CHECK_OBJECT( tmp_assign_source_107 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_InterpolationDepthError, tmp_assign_source_107 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class );
    Py_DECREF( tmp_class_creation_9__class );
    tmp_class_creation_9__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__bases );
    Py_DECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class_dict );
    Py_DECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__metaclass );
    Py_DECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    // Tried code:
    tmp_assign_source_108 = PyTuple_New( 1 );
    tmp_tuple_element_10 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Error );

    if (unlikely( tmp_tuple_element_10 == NULL ))
    {
        tmp_tuple_element_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Error );
    }

    if ( tmp_tuple_element_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_108 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Error" );
        exception_tb = NULL;

        exception_lineno = 286;

        goto try_except_handler_38;
    }

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_assign_source_108, 0, tmp_tuple_element_10 );
    assert( tmp_class_creation_10__bases == NULL );
    tmp_class_creation_10__bases = tmp_assign_source_108;

    tmp_assign_source_110 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_9_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_110 );
    outline_9_var___module__ = tmp_assign_source_110;

    tmp_assign_source_111 = const_unicode_digest_b0ecf39a2c510a4ac4c302165dbbfc85;
    assert( outline_9_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_111 );
    outline_9_var___doc__ = tmp_assign_source_111;

    tmp_defaults_4 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_4 );
    tmp_assign_source_112 = MAKE_FUNCTION_backports$configparser$$$function_10___init__( tmp_defaults_4 );
    assert( outline_9_var___init__ == NULL );
    outline_9_var___init__ = tmp_assign_source_112;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1c597e76e6430bdcfa15394ab38ca898_2, codeobj_1c597e76e6430bdcfa15394ab38ca898, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1c597e76e6430bdcfa15394ab38ca898_2 = cache_frame_1c597e76e6430bdcfa15394ab38ca898_2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1c597e76e6430bdcfa15394ab38ca898_2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1c597e76e6430bdcfa15394ab38ca898_2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_10 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_28 = MAKE_FUNCTION_backports$configparser$$$function_11_filename(  );
    frame_1c597e76e6430bdcfa15394ab38ca898_2->m_frame.f_lineno = 304;
    {
        PyObject *call_args[] = { tmp_args_element_name_28 };
        tmp_assign_source_113 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_args_element_name_28 );
    if ( tmp_assign_source_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;
        type_description_2 = "oooNN";
        goto frame_exception_exit_2;
    }
    assert( outline_9_var_filename == NULL );
    outline_9_var_filename = tmp_assign_source_113;

    tmp_called_instance_1 = outline_9_var_filename;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_29 = MAKE_FUNCTION_backports$configparser$$$function_12_filename(  );
    frame_1c597e76e6430bdcfa15394ab38ca898_2->m_frame.f_lineno = 314;
    {
        PyObject *call_args[] = { tmp_args_element_name_29 };
        tmp_assign_source_114 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_setter, call_args );
    }

    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_assign_source_114 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;
        type_description_2 = "ooooN";
        goto frame_exception_exit_2;
    }
    {
        PyObject *old = outline_9_var_filename;
        assert( old != NULL );
        outline_9_var_filename = tmp_assign_source_114;
        Py_DECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_1c597e76e6430bdcfa15394ab38ca898_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1c597e76e6430bdcfa15394ab38ca898_2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1c597e76e6430bdcfa15394ab38ca898_2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1c597e76e6430bdcfa15394ab38ca898_2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1c597e76e6430bdcfa15394ab38ca898_2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1c597e76e6430bdcfa15394ab38ca898_2,
        type_description_2,
        outline_9_var___module__,
        outline_9_var___doc__,
        outline_9_var___init__,
        outline_9_var_filename,
        NULL
    );


    // Release cached frame.
    if ( frame_1c597e76e6430bdcfa15394ab38ca898_2 == cache_frame_1c597e76e6430bdcfa15394ab38ca898_2 )
    {
        Py_DECREF( frame_1c597e76e6430bdcfa15394ab38ca898_2 );
    }
    cache_frame_1c597e76e6430bdcfa15394ab38ca898_2 = NULL;

    assertFrameObject( frame_1c597e76e6430bdcfa15394ab38ca898_2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_1;

    frame_no_exception_1:;

    goto skip_nested_handling_1;
    nested_frame_exit_1:;

    goto try_except_handler_39;
    skip_nested_handling_1:;
    tmp_assign_source_115 = MAKE_FUNCTION_backports$configparser$$$function_13_append(  );
    assert( outline_9_var_append == NULL );
    outline_9_var_append = tmp_assign_source_115;

    tmp_outline_return_value_19 = _PyDict_NewPresized( 5 );
    tmp_dict_value_29 = outline_9_var___module__;

    CHECK_OBJECT( tmp_dict_value_29 );
    tmp_dict_key_29 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_19, tmp_dict_key_29, tmp_dict_value_29 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_30 = outline_9_var___doc__;

    CHECK_OBJECT( tmp_dict_value_30 );
    tmp_dict_key_30 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_19, tmp_dict_key_30, tmp_dict_value_30 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_31 = outline_9_var___init__;

    CHECK_OBJECT( tmp_dict_value_31 );
    tmp_dict_key_31 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_19, tmp_dict_key_31, tmp_dict_value_31 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_32 = outline_9_var_filename;

    CHECK_OBJECT( tmp_dict_value_32 );
    tmp_dict_key_32 = const_str_plain_filename;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_19, tmp_dict_key_32, tmp_dict_value_32 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_33 = outline_9_var_append;

    CHECK_OBJECT( tmp_dict_value_33 );
    tmp_dict_key_33 = const_str_plain_append;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_19, tmp_dict_key_33, tmp_dict_value_33 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_39;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_39:;
    CHECK_OBJECT( (PyObject *)outline_9_var___module__ );
    Py_DECREF( outline_9_var___module__ );
    outline_9_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_9_var___doc__ );
    Py_DECREF( outline_9_var___doc__ );
    outline_9_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_9_var___init__ );
    Py_DECREF( outline_9_var___init__ );
    outline_9_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_9_var_filename );
    Py_DECREF( outline_9_var_filename );
    outline_9_var_filename = NULL;

    CHECK_OBJECT( (PyObject *)outline_9_var_append );
    Py_DECREF( outline_9_var_append );
    outline_9_var_append = NULL;

    goto outline_result_19;
    // Exception handler code:
    try_except_handler_39:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_9_var___module__ );
    Py_DECREF( outline_9_var___module__ );
    outline_9_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_9_var___doc__ );
    Py_DECREF( outline_9_var___doc__ );
    outline_9_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_9_var___init__ );
    Py_DECREF( outline_9_var___init__ );
    outline_9_var___init__ = NULL;

    Py_XDECREF( outline_9_var_filename );
    outline_9_var_filename = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto outline_exception_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_1:;
    exception_lineno = 286;
    goto try_except_handler_38;
    outline_result_19:;
    tmp_assign_source_109 = tmp_outline_return_value_19;
    assert( tmp_class_creation_10__class_dict == NULL );
    tmp_class_creation_10__class_dict = tmp_assign_source_109;

    tmp_compare_left_10 = const_str_plain___metaclass__;
    tmp_compare_right_10 = tmp_class_creation_10__class_dict;

    CHECK_OBJECT( tmp_compare_right_10 );
    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_10 == -1) );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_dict_name_10 = tmp_class_creation_10__class_dict;

    CHECK_OBJECT( tmp_dict_name_10 );
    tmp_key_name_10 = const_str_plain___metaclass__;
    tmp_assign_source_116 = DICT_GET_ITEM( tmp_dict_name_10, tmp_key_name_10 );
    if ( tmp_assign_source_116 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;

        goto try_except_handler_38;
    }
    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_subscribed_name_10 = tmp_class_creation_10__bases;

    CHECK_OBJECT( tmp_subscribed_name_10 );
    tmp_subscript_name_10 = const_int_0;
    tmp_assign_source_117 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    if ( tmp_assign_source_117 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;

        goto try_except_handler_38;
    }
    assert( tmp_select_metaclass_10__base == NULL );
    tmp_select_metaclass_10__base = tmp_assign_source_117;

    // Tried code:
    // Tried code:
    tmp_source_name_10 = tmp_select_metaclass_10__base;

    CHECK_OBJECT( tmp_source_name_10 );
    tmp_outline_return_value_20 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_10 );
    if ( tmp_outline_return_value_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;

        goto try_except_handler_41;
    }
    goto try_return_handler_40;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_41:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_21 );
    Py_XDECREF( exception_keeper_value_21 );
    Py_XDECREF( exception_keeper_tb_21 );
    tmp_type_arg_10 = tmp_select_metaclass_10__base;

    CHECK_OBJECT( tmp_type_arg_10 );
    tmp_outline_return_value_20 = BUILTIN_TYPE1( tmp_type_arg_10 );
    assert( tmp_outline_return_value_20 != NULL );
    goto try_return_handler_40;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_40:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_10__base );
    Py_DECREF( tmp_select_metaclass_10__base );
    tmp_select_metaclass_10__base = NULL;

    goto outline_result_20;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_10__base );
    Py_DECREF( tmp_select_metaclass_10__base );
    tmp_select_metaclass_10__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_20:;
    tmp_assign_source_116 = tmp_outline_return_value_20;
    condexpr_end_10:;
    assert( tmp_class_creation_10__metaclass == NULL );
    tmp_class_creation_10__metaclass = tmp_assign_source_116;

    tmp_called_name_11 = tmp_class_creation_10__metaclass;

    CHECK_OBJECT( tmp_called_name_11 );
    tmp_args_element_name_30 = const_str_plain_ParsingError;
    tmp_args_element_name_31 = tmp_class_creation_10__bases;

    CHECK_OBJECT( tmp_args_element_name_31 );
    tmp_args_element_name_32 = tmp_class_creation_10__class_dict;

    CHECK_OBJECT( tmp_args_element_name_32 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 286;
    {
        PyObject *call_args[] = { tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32 };
        tmp_assign_source_118 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, call_args );
    }

    if ( tmp_assign_source_118 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;

        goto try_except_handler_38;
    }
    assert( tmp_class_creation_10__class == NULL );
    tmp_class_creation_10__class = tmp_assign_source_118;

    goto try_end_11;
    // Exception handler code:
    try_except_handler_38:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_22;
    exception_value = exception_keeper_value_22;
    exception_tb = exception_keeper_tb_22;
    exception_lineno = exception_keeper_lineno_22;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    tmp_assign_source_119 = tmp_class_creation_10__class;

    CHECK_OBJECT( tmp_assign_source_119 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ParsingError, tmp_assign_source_119 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class );
    Py_DECREF( tmp_class_creation_10__class );
    tmp_class_creation_10__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__bases );
    Py_DECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class_dict );
    Py_DECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__metaclass );
    Py_DECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    // Tried code:
    tmp_assign_source_120 = PyTuple_New( 1 );
    tmp_tuple_element_11 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ParsingError );

    if (unlikely( tmp_tuple_element_11 == NULL ))
    {
        tmp_tuple_element_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ParsingError );
    }

    if ( tmp_tuple_element_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_120 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ParsingError" );
        exception_tb = NULL;

        exception_lineno = 329;

        goto try_except_handler_42;
    }

    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_assign_source_120, 0, tmp_tuple_element_11 );
    assert( tmp_class_creation_11__bases == NULL );
    tmp_class_creation_11__bases = tmp_assign_source_120;

    tmp_assign_source_122 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_10_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_122 );
    outline_10_var___module__ = tmp_assign_source_122;

    tmp_assign_source_123 = const_unicode_digest_5932e42aea3b879960f95809efa5dc41;
    assert( outline_10_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_123 );
    outline_10_var___doc__ = tmp_assign_source_123;

    tmp_assign_source_124 = MAKE_FUNCTION_backports$configparser$$$function_14___init__(  );
    assert( outline_10_var___init__ == NULL );
    outline_10_var___init__ = tmp_assign_source_124;

    // Tried code:
    tmp_outline_return_value_21 = _PyDict_NewPresized( 3 );
    tmp_dict_value_34 = outline_10_var___module__;

    CHECK_OBJECT( tmp_dict_value_34 );
    tmp_dict_key_34 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_21, tmp_dict_key_34, tmp_dict_value_34 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_35 = outline_10_var___doc__;

    CHECK_OBJECT( tmp_dict_value_35 );
    tmp_dict_key_35 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_21, tmp_dict_key_35, tmp_dict_value_35 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_36 = outline_10_var___init__;

    CHECK_OBJECT( tmp_dict_value_36 );
    tmp_dict_key_36 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_21, tmp_dict_key_36, tmp_dict_value_36 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_43;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_43:;
    CHECK_OBJECT( (PyObject *)outline_10_var___module__ );
    Py_DECREF( outline_10_var___module__ );
    outline_10_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_10_var___doc__ );
    Py_DECREF( outline_10_var___doc__ );
    outline_10_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_10_var___init__ );
    Py_DECREF( outline_10_var___init__ );
    outline_10_var___init__ = NULL;

    goto outline_result_21;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_10_var___module__ );
    Py_DECREF( outline_10_var___module__ );
    outline_10_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_10_var___doc__ );
    Py_DECREF( outline_10_var___doc__ );
    outline_10_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_10_var___init__ );
    Py_DECREF( outline_10_var___init__ );
    outline_10_var___init__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_21:;
    tmp_assign_source_121 = tmp_outline_return_value_21;
    assert( tmp_class_creation_11__class_dict == NULL );
    tmp_class_creation_11__class_dict = tmp_assign_source_121;

    tmp_compare_left_11 = const_str_plain___metaclass__;
    tmp_compare_right_11 = tmp_class_creation_11__class_dict;

    CHECK_OBJECT( tmp_compare_right_11 );
    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_11 == -1) );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto condexpr_true_11;
    }
    else
    {
        goto condexpr_false_11;
    }
    condexpr_true_11:;
    tmp_dict_name_11 = tmp_class_creation_11__class_dict;

    CHECK_OBJECT( tmp_dict_name_11 );
    tmp_key_name_11 = const_str_plain___metaclass__;
    tmp_assign_source_125 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
    if ( tmp_assign_source_125 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 329;

        goto try_except_handler_42;
    }
    goto condexpr_end_11;
    condexpr_false_11:;
    tmp_subscribed_name_11 = tmp_class_creation_11__bases;

    CHECK_OBJECT( tmp_subscribed_name_11 );
    tmp_subscript_name_11 = const_int_0;
    tmp_assign_source_126 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    if ( tmp_assign_source_126 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 329;

        goto try_except_handler_42;
    }
    assert( tmp_select_metaclass_11__base == NULL );
    tmp_select_metaclass_11__base = tmp_assign_source_126;

    // Tried code:
    // Tried code:
    tmp_source_name_11 = tmp_select_metaclass_11__base;

    CHECK_OBJECT( tmp_source_name_11 );
    tmp_outline_return_value_22 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_11 );
    if ( tmp_outline_return_value_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 329;

        goto try_except_handler_45;
    }
    goto try_return_handler_44;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_45:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_23 );
    Py_XDECREF( exception_keeper_value_23 );
    Py_XDECREF( exception_keeper_tb_23 );
    tmp_type_arg_11 = tmp_select_metaclass_11__base;

    CHECK_OBJECT( tmp_type_arg_11 );
    tmp_outline_return_value_22 = BUILTIN_TYPE1( tmp_type_arg_11 );
    assert( tmp_outline_return_value_22 != NULL );
    goto try_return_handler_44;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_44:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_11__base );
    Py_DECREF( tmp_select_metaclass_11__base );
    tmp_select_metaclass_11__base = NULL;

    goto outline_result_22;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_11__base );
    Py_DECREF( tmp_select_metaclass_11__base );
    tmp_select_metaclass_11__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_22:;
    tmp_assign_source_125 = tmp_outline_return_value_22;
    condexpr_end_11:;
    assert( tmp_class_creation_11__metaclass == NULL );
    tmp_class_creation_11__metaclass = tmp_assign_source_125;

    tmp_called_name_12 = tmp_class_creation_11__metaclass;

    CHECK_OBJECT( tmp_called_name_12 );
    tmp_args_element_name_33 = const_str_plain_MissingSectionHeaderError;
    tmp_args_element_name_34 = tmp_class_creation_11__bases;

    CHECK_OBJECT( tmp_args_element_name_34 );
    tmp_args_element_name_35 = tmp_class_creation_11__class_dict;

    CHECK_OBJECT( tmp_args_element_name_35 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 329;
    {
        PyObject *call_args[] = { tmp_args_element_name_33, tmp_args_element_name_34, tmp_args_element_name_35 };
        tmp_assign_source_127 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_12, call_args );
    }

    if ( tmp_assign_source_127 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 329;

        goto try_except_handler_42;
    }
    assert( tmp_class_creation_11__class == NULL );
    tmp_class_creation_11__class = tmp_assign_source_127;

    goto try_end_12;
    // Exception handler code:
    try_except_handler_42:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    tmp_assign_source_128 = tmp_class_creation_11__class;

    CHECK_OBJECT( tmp_assign_source_128 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MissingSectionHeaderError, tmp_assign_source_128 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class );
    Py_DECREF( tmp_class_creation_11__class );
    tmp_class_creation_11__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__bases );
    Py_DECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class_dict );
    Py_DECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__metaclass );
    Py_DECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    tmp_called_name_13 = (PyObject *)&PyBaseObject_Type;
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 346;
    tmp_assign_source_129 = CALL_FUNCTION_NO_ARGS( tmp_called_name_13 );
    if ( tmp_assign_source_129 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 346;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET, tmp_assign_source_129 );
    tmp_assign_source_131 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_11_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_131 );
    outline_11_var___module__ = tmp_assign_source_131;

    tmp_assign_source_132 = const_unicode_digest_d932a45b6a9f6aa7080d2b26fbc636e4;
    assert( outline_11_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_132 );
    outline_11_var___doc__ = tmp_assign_source_132;

    tmp_assign_source_133 = MAKE_FUNCTION_backports$configparser$$$function_15_before_get(  );
    assert( outline_11_var_before_get == NULL );
    outline_11_var_before_get = tmp_assign_source_133;

    tmp_assign_source_134 = MAKE_FUNCTION_backports$configparser$$$function_16_before_set(  );
    assert( outline_11_var_before_set == NULL );
    outline_11_var_before_set = tmp_assign_source_134;

    tmp_assign_source_135 = MAKE_FUNCTION_backports$configparser$$$function_17_before_read(  );
    assert( outline_11_var_before_read == NULL );
    outline_11_var_before_read = tmp_assign_source_135;

    tmp_assign_source_136 = MAKE_FUNCTION_backports$configparser$$$function_18_before_write(  );
    assert( outline_11_var_before_write == NULL );
    outline_11_var_before_write = tmp_assign_source_136;

    // Tried code:
    tmp_outline_return_value_23 = _PyDict_NewPresized( 6 );
    tmp_dict_value_37 = outline_11_var___module__;

    CHECK_OBJECT( tmp_dict_value_37 );
    tmp_dict_key_37 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_23, tmp_dict_key_37, tmp_dict_value_37 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_38 = outline_11_var___doc__;

    CHECK_OBJECT( tmp_dict_value_38 );
    tmp_dict_key_38 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_23, tmp_dict_key_38, tmp_dict_value_38 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_39 = outline_11_var_before_get;

    CHECK_OBJECT( tmp_dict_value_39 );
    tmp_dict_key_39 = const_str_plain_before_get;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_23, tmp_dict_key_39, tmp_dict_value_39 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_40 = outline_11_var_before_set;

    CHECK_OBJECT( tmp_dict_value_40 );
    tmp_dict_key_40 = const_str_plain_before_set;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_23, tmp_dict_key_40, tmp_dict_value_40 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_41 = outline_11_var_before_read;

    CHECK_OBJECT( tmp_dict_value_41 );
    tmp_dict_key_41 = const_str_plain_before_read;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_23, tmp_dict_key_41, tmp_dict_value_41 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_42 = outline_11_var_before_write;

    CHECK_OBJECT( tmp_dict_value_42 );
    tmp_dict_key_42 = const_str_plain_before_write;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_23, tmp_dict_key_42, tmp_dict_value_42 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_46;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_46:;
    CHECK_OBJECT( (PyObject *)outline_11_var___module__ );
    Py_DECREF( outline_11_var___module__ );
    outline_11_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var___doc__ );
    Py_DECREF( outline_11_var___doc__ );
    outline_11_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var_before_get );
    Py_DECREF( outline_11_var_before_get );
    outline_11_var_before_get = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var_before_set );
    Py_DECREF( outline_11_var_before_set );
    outline_11_var_before_set = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var_before_read );
    Py_DECREF( outline_11_var_before_read );
    outline_11_var_before_read = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var_before_write );
    Py_DECREF( outline_11_var_before_write );
    outline_11_var_before_write = NULL;

    goto outline_result_23;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_11_var___module__ );
    Py_DECREF( outline_11_var___module__ );
    outline_11_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var___doc__ );
    Py_DECREF( outline_11_var___doc__ );
    outline_11_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var_before_get );
    Py_DECREF( outline_11_var_before_get );
    outline_11_var_before_get = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var_before_set );
    Py_DECREF( outline_11_var_before_set );
    outline_11_var_before_set = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var_before_read );
    Py_DECREF( outline_11_var_before_read );
    outline_11_var_before_read = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var_before_write );
    Py_DECREF( outline_11_var_before_write );
    outline_11_var_before_write = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_23:;
    tmp_assign_source_130 = tmp_outline_return_value_23;
    assert( tmp_class_creation_12__class_dict == NULL );
    tmp_class_creation_12__class_dict = tmp_assign_source_130;

    // Tried code:
    tmp_compare_left_12 = const_str_plain___metaclass__;
    tmp_compare_right_12 = tmp_class_creation_12__class_dict;

    CHECK_OBJECT( tmp_compare_right_12 );
    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_12 == -1) );
    if ( tmp_cmp_In_12 == 1 )
    {
        goto condexpr_true_12;
    }
    else
    {
        goto condexpr_false_12;
    }
    condexpr_true_12:;
    tmp_dict_name_12 = tmp_class_creation_12__class_dict;

    CHECK_OBJECT( tmp_dict_name_12 );
    tmp_key_name_12 = const_str_plain___metaclass__;
    tmp_assign_source_137 = DICT_GET_ITEM( tmp_dict_name_12, tmp_key_name_12 );
    if ( tmp_assign_source_137 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_47;
    }
    goto condexpr_end_12;
    condexpr_false_12:;
    tmp_assign_source_137 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_assign_source_137 );
    condexpr_end_12:;
    assert( tmp_class_creation_12__metaclass == NULL );
    tmp_class_creation_12__metaclass = tmp_assign_source_137;

    tmp_called_name_14 = tmp_class_creation_12__metaclass;

    CHECK_OBJECT( tmp_called_name_14 );
    tmp_args_element_name_36 = const_str_plain_Interpolation;
    tmp_args_element_name_37 = const_tuple_type_object_tuple;
    tmp_args_element_name_38 = tmp_class_creation_12__class_dict;

    CHECK_OBJECT( tmp_args_element_name_38 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 349;
    {
        PyObject *call_args[] = { tmp_args_element_name_36, tmp_args_element_name_37, tmp_args_element_name_38 };
        tmp_assign_source_138 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_14, call_args );
    }

    if ( tmp_assign_source_138 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_47;
    }
    assert( tmp_class_creation_12__class == NULL );
    tmp_class_creation_12__class = tmp_assign_source_138;

    goto try_end_13;
    // Exception handler code:
    try_except_handler_47:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class_dict );
    Py_DECREF( tmp_class_creation_12__class_dict );
    tmp_class_creation_12__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    tmp_assign_source_139 = tmp_class_creation_12__class;

    CHECK_OBJECT( tmp_assign_source_139 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Interpolation, tmp_assign_source_139 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class );
    Py_DECREF( tmp_class_creation_12__class );
    tmp_class_creation_12__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class_dict );
    Py_DECREF( tmp_class_creation_12__class_dict );
    tmp_class_creation_12__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__metaclass );
    Py_DECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    // Tried code:
    tmp_assign_source_140 = PyTuple_New( 1 );
    tmp_tuple_element_12 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Interpolation );

    if (unlikely( tmp_tuple_element_12 == NULL ))
    {
        tmp_tuple_element_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Interpolation );
    }

    if ( tmp_tuple_element_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_140 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Interpolation" );
        exception_tb = NULL;

        exception_lineno = 365;

        goto try_except_handler_48;
    }

    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_assign_source_140, 0, tmp_tuple_element_12 );
    assert( tmp_class_creation_13__bases == NULL );
    tmp_class_creation_13__bases = tmp_assign_source_140;

    tmp_assign_source_142 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_12_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_142 );
    outline_12_var___module__ = tmp_assign_source_142;

    tmp_assign_source_143 = const_unicode_digest_c79929ceb2ff30004e20959691df1cfe;
    assert( outline_12_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_143 );
    outline_12_var___doc__ = tmp_assign_source_143;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a24361983ffe6b51e65bf3b0f1bf29f3_3, codeobj_a24361983ffe6b51e65bf3b0f1bf29f3, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 = cache_frame_a24361983ffe6b51e65bf3b0f1bf29f3_3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 380;
        type_description_2 = "ooNNNN";
        goto frame_exception_exit_3;
    }

    frame_a24361983ffe6b51e65bf3b0f1bf29f3_3->m_frame.f_lineno = 380;
    tmp_assign_source_144 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_unicode_digest_7ff059010e9310f13d6c5d4ea2f008dc_tuple, 0 ) );

    if ( tmp_assign_source_144 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 380;
        type_description_2 = "ooNNNN";
        goto frame_exception_exit_3;
    }
    assert( outline_12_var__KEYCRE == NULL );
    outline_12_var__KEYCRE = tmp_assign_source_144;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a24361983ffe6b51e65bf3b0f1bf29f3_3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a24361983ffe6b51e65bf3b0f1bf29f3_3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a24361983ffe6b51e65bf3b0f1bf29f3_3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a24361983ffe6b51e65bf3b0f1bf29f3_3,
        type_description_2,
        outline_12_var___module__,
        outline_12_var___doc__,
        outline_12_var__KEYCRE,
        NULL,
        NULL,
        NULL
    );


    // Release cached frame.
    if ( frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 == cache_frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 )
    {
        Py_DECREF( frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 );
    }
    cache_frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 = NULL;

    assertFrameObject( frame_a24361983ffe6b51e65bf3b0f1bf29f3_3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_2;

    frame_no_exception_2:;

    goto skip_nested_handling_2;
    nested_frame_exit_2:;

    goto try_except_handler_49;
    skip_nested_handling_2:;
    tmp_assign_source_145 = MAKE_FUNCTION_backports$configparser$$$function_19_before_get(  );
    assert( outline_12_var_before_get == NULL );
    outline_12_var_before_get = tmp_assign_source_145;

    tmp_assign_source_146 = MAKE_FUNCTION_backports$configparser$$$function_20_before_set(  );
    assert( outline_12_var_before_set == NULL );
    outline_12_var_before_set = tmp_assign_source_146;

    tmp_assign_source_147 = MAKE_FUNCTION_backports$configparser$$$function_21__interpolate_some(  );
    assert( outline_12_var__interpolate_some == NULL );
    outline_12_var__interpolate_some = tmp_assign_source_147;

    tmp_outline_return_value_24 = _PyDict_NewPresized( 6 );
    tmp_dict_value_43 = outline_12_var___module__;

    CHECK_OBJECT( tmp_dict_value_43 );
    tmp_dict_key_43 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_24, tmp_dict_key_43, tmp_dict_value_43 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_44 = outline_12_var___doc__;

    CHECK_OBJECT( tmp_dict_value_44 );
    tmp_dict_key_44 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_24, tmp_dict_key_44, tmp_dict_value_44 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_45 = outline_12_var__KEYCRE;

    CHECK_OBJECT( tmp_dict_value_45 );
    tmp_dict_key_45 = const_str_plain__KEYCRE;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_24, tmp_dict_key_45, tmp_dict_value_45 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_46 = outline_12_var_before_get;

    CHECK_OBJECT( tmp_dict_value_46 );
    tmp_dict_key_46 = const_str_plain_before_get;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_24, tmp_dict_key_46, tmp_dict_value_46 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_47 = outline_12_var_before_set;

    CHECK_OBJECT( tmp_dict_value_47 );
    tmp_dict_key_47 = const_str_plain_before_set;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_24, tmp_dict_key_47, tmp_dict_value_47 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_48 = outline_12_var__interpolate_some;

    CHECK_OBJECT( tmp_dict_value_48 );
    tmp_dict_key_48 = const_str_plain__interpolate_some;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_24, tmp_dict_key_48, tmp_dict_value_48 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_49;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_49:;
    CHECK_OBJECT( (PyObject *)outline_12_var___module__ );
    Py_DECREF( outline_12_var___module__ );
    outline_12_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var___doc__ );
    Py_DECREF( outline_12_var___doc__ );
    outline_12_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var__KEYCRE );
    Py_DECREF( outline_12_var__KEYCRE );
    outline_12_var__KEYCRE = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var_before_get );
    Py_DECREF( outline_12_var_before_get );
    outline_12_var_before_get = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var_before_set );
    Py_DECREF( outline_12_var_before_set );
    outline_12_var_before_set = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var__interpolate_some );
    Py_DECREF( outline_12_var__interpolate_some );
    outline_12_var__interpolate_some = NULL;

    goto outline_result_24;
    // Exception handler code:
    try_except_handler_49:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_12_var___module__ );
    Py_DECREF( outline_12_var___module__ );
    outline_12_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var___doc__ );
    Py_DECREF( outline_12_var___doc__ );
    outline_12_var___doc__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto outline_exception_2;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_2:;
    exception_lineno = 365;
    goto try_except_handler_48;
    outline_result_24:;
    tmp_assign_source_141 = tmp_outline_return_value_24;
    assert( tmp_class_creation_13__class_dict == NULL );
    tmp_class_creation_13__class_dict = tmp_assign_source_141;

    tmp_compare_left_13 = const_str_plain___metaclass__;
    tmp_compare_right_13 = tmp_class_creation_13__class_dict;

    CHECK_OBJECT( tmp_compare_right_13 );
    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    assert( !(tmp_cmp_In_13 == -1) );
    if ( tmp_cmp_In_13 == 1 )
    {
        goto condexpr_true_13;
    }
    else
    {
        goto condexpr_false_13;
    }
    condexpr_true_13:;
    tmp_dict_name_13 = tmp_class_creation_13__class_dict;

    CHECK_OBJECT( tmp_dict_name_13 );
    tmp_key_name_13 = const_str_plain___metaclass__;
    tmp_assign_source_148 = DICT_GET_ITEM( tmp_dict_name_13, tmp_key_name_13 );
    if ( tmp_assign_source_148 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 365;

        goto try_except_handler_48;
    }
    goto condexpr_end_13;
    condexpr_false_13:;
    tmp_subscribed_name_12 = tmp_class_creation_13__bases;

    CHECK_OBJECT( tmp_subscribed_name_12 );
    tmp_subscript_name_12 = const_int_0;
    tmp_assign_source_149 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    if ( tmp_assign_source_149 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 365;

        goto try_except_handler_48;
    }
    assert( tmp_select_metaclass_13__base == NULL );
    tmp_select_metaclass_13__base = tmp_assign_source_149;

    // Tried code:
    // Tried code:
    tmp_source_name_12 = tmp_select_metaclass_13__base;

    CHECK_OBJECT( tmp_source_name_12 );
    tmp_outline_return_value_25 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_12 );
    if ( tmp_outline_return_value_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 365;

        goto try_except_handler_51;
    }
    goto try_return_handler_50;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_51:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_27 );
    Py_XDECREF( exception_keeper_value_27 );
    Py_XDECREF( exception_keeper_tb_27 );
    tmp_type_arg_12 = tmp_select_metaclass_13__base;

    CHECK_OBJECT( tmp_type_arg_12 );
    tmp_outline_return_value_25 = BUILTIN_TYPE1( tmp_type_arg_12 );
    assert( tmp_outline_return_value_25 != NULL );
    goto try_return_handler_50;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_50:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_13__base );
    Py_DECREF( tmp_select_metaclass_13__base );
    tmp_select_metaclass_13__base = NULL;

    goto outline_result_25;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_13__base );
    Py_DECREF( tmp_select_metaclass_13__base );
    tmp_select_metaclass_13__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_25:;
    tmp_assign_source_148 = tmp_outline_return_value_25;
    condexpr_end_13:;
    assert( tmp_class_creation_13__metaclass == NULL );
    tmp_class_creation_13__metaclass = tmp_assign_source_148;

    tmp_called_name_15 = tmp_class_creation_13__metaclass;

    CHECK_OBJECT( tmp_called_name_15 );
    tmp_args_element_name_39 = const_str_plain_BasicInterpolation;
    tmp_args_element_name_40 = tmp_class_creation_13__bases;

    CHECK_OBJECT( tmp_args_element_name_40 );
    tmp_args_element_name_41 = tmp_class_creation_13__class_dict;

    CHECK_OBJECT( tmp_args_element_name_41 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 365;
    {
        PyObject *call_args[] = { tmp_args_element_name_39, tmp_args_element_name_40, tmp_args_element_name_41 };
        tmp_assign_source_150 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_15, call_args );
    }

    if ( tmp_assign_source_150 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 365;

        goto try_except_handler_48;
    }
    assert( tmp_class_creation_13__class == NULL );
    tmp_class_creation_13__class = tmp_assign_source_150;

    goto try_end_14;
    // Exception handler code:
    try_except_handler_48:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_keeper_lineno_28 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    Py_XDECREF( tmp_class_creation_13__class_dict );
    tmp_class_creation_13__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_28;
    exception_value = exception_keeper_value_28;
    exception_tb = exception_keeper_tb_28;
    exception_lineno = exception_keeper_lineno_28;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    tmp_assign_source_151 = tmp_class_creation_13__class;

    CHECK_OBJECT( tmp_assign_source_151 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_BasicInterpolation, tmp_assign_source_151 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__class );
    Py_DECREF( tmp_class_creation_13__class );
    tmp_class_creation_13__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__bases );
    Py_DECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__class_dict );
    Py_DECREF( tmp_class_creation_13__class_dict );
    tmp_class_creation_13__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__metaclass );
    Py_DECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    // Tried code:
    tmp_assign_source_152 = PyTuple_New( 1 );
    tmp_tuple_element_13 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Interpolation );

    if (unlikely( tmp_tuple_element_13 == NULL ))
    {
        tmp_tuple_element_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Interpolation );
    }

    if ( tmp_tuple_element_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_152 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Interpolation" );
        exception_tb = NULL;

        exception_lineno = 437;

        goto try_except_handler_52;
    }

    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_assign_source_152, 0, tmp_tuple_element_13 );
    assert( tmp_class_creation_14__bases == NULL );
    tmp_class_creation_14__bases = tmp_assign_source_152;

    tmp_assign_source_154 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_13_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_154 );
    outline_13_var___module__ = tmp_assign_source_154;

    tmp_assign_source_155 = const_unicode_digest_4db7c54d6619a457f6080d2f26ecb116;
    assert( outline_13_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_155 );
    outline_13_var___doc__ = tmp_assign_source_155;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_920dac7f37e06f5f6ce355b6cf15424d_4, codeobj_920dac7f37e06f5f6ce355b6cf15424d, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_920dac7f37e06f5f6ce355b6cf15424d_4 = cache_frame_920dac7f37e06f5f6ce355b6cf15424d_4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_920dac7f37e06f5f6ce355b6cf15424d_4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_920dac7f37e06f5f6ce355b6cf15424d_4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_3 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_called_instance_3 == NULL ))
    {
        tmp_called_instance_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 441;
        type_description_2 = "ooNNNN";
        goto frame_exception_exit_4;
    }

    frame_920dac7f37e06f5f6ce355b6cf15424d_4->m_frame.f_lineno = 441;
    tmp_assign_source_156 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_unicode_digest_4ec1e2f352e46451c0a24f6ac1b5bf0d_tuple, 0 ) );

    if ( tmp_assign_source_156 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 441;
        type_description_2 = "ooNNNN";
        goto frame_exception_exit_4;
    }
    assert( outline_13_var__KEYCRE == NULL );
    outline_13_var__KEYCRE = tmp_assign_source_156;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_920dac7f37e06f5f6ce355b6cf15424d_4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_3;

    frame_exception_exit_4:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_920dac7f37e06f5f6ce355b6cf15424d_4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_920dac7f37e06f5f6ce355b6cf15424d_4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_920dac7f37e06f5f6ce355b6cf15424d_4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_920dac7f37e06f5f6ce355b6cf15424d_4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_920dac7f37e06f5f6ce355b6cf15424d_4,
        type_description_2,
        outline_13_var___module__,
        outline_13_var___doc__,
        outline_13_var__KEYCRE,
        NULL,
        NULL,
        NULL
    );


    // Release cached frame.
    if ( frame_920dac7f37e06f5f6ce355b6cf15424d_4 == cache_frame_920dac7f37e06f5f6ce355b6cf15424d_4 )
    {
        Py_DECREF( frame_920dac7f37e06f5f6ce355b6cf15424d_4 );
    }
    cache_frame_920dac7f37e06f5f6ce355b6cf15424d_4 = NULL;

    assertFrameObject( frame_920dac7f37e06f5f6ce355b6cf15424d_4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_3;

    frame_no_exception_3:;

    goto skip_nested_handling_3;
    nested_frame_exit_3:;

    goto try_except_handler_53;
    skip_nested_handling_3:;
    tmp_assign_source_157 = MAKE_FUNCTION_backports$configparser$$$function_22_before_get(  );
    assert( outline_13_var_before_get == NULL );
    outline_13_var_before_get = tmp_assign_source_157;

    tmp_assign_source_158 = MAKE_FUNCTION_backports$configparser$$$function_23_before_set(  );
    assert( outline_13_var_before_set == NULL );
    outline_13_var_before_set = tmp_assign_source_158;

    tmp_assign_source_159 = MAKE_FUNCTION_backports$configparser$$$function_24__interpolate_some(  );
    assert( outline_13_var__interpolate_some == NULL );
    outline_13_var__interpolate_some = tmp_assign_source_159;

    tmp_outline_return_value_26 = _PyDict_NewPresized( 6 );
    tmp_dict_value_49 = outline_13_var___module__;

    CHECK_OBJECT( tmp_dict_value_49 );
    tmp_dict_key_49 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_26, tmp_dict_key_49, tmp_dict_value_49 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_50 = outline_13_var___doc__;

    CHECK_OBJECT( tmp_dict_value_50 );
    tmp_dict_key_50 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_26, tmp_dict_key_50, tmp_dict_value_50 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_51 = outline_13_var__KEYCRE;

    CHECK_OBJECT( tmp_dict_value_51 );
    tmp_dict_key_51 = const_str_plain__KEYCRE;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_26, tmp_dict_key_51, tmp_dict_value_51 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_52 = outline_13_var_before_get;

    CHECK_OBJECT( tmp_dict_value_52 );
    tmp_dict_key_52 = const_str_plain_before_get;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_26, tmp_dict_key_52, tmp_dict_value_52 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_53 = outline_13_var_before_set;

    CHECK_OBJECT( tmp_dict_value_53 );
    tmp_dict_key_53 = const_str_plain_before_set;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_26, tmp_dict_key_53, tmp_dict_value_53 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_54 = outline_13_var__interpolate_some;

    CHECK_OBJECT( tmp_dict_value_54 );
    tmp_dict_key_54 = const_str_plain__interpolate_some;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_26, tmp_dict_key_54, tmp_dict_value_54 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_53;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_53:;
    CHECK_OBJECT( (PyObject *)outline_13_var___module__ );
    Py_DECREF( outline_13_var___module__ );
    outline_13_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_13_var___doc__ );
    Py_DECREF( outline_13_var___doc__ );
    outline_13_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_13_var__KEYCRE );
    Py_DECREF( outline_13_var__KEYCRE );
    outline_13_var__KEYCRE = NULL;

    CHECK_OBJECT( (PyObject *)outline_13_var_before_get );
    Py_DECREF( outline_13_var_before_get );
    outline_13_var_before_get = NULL;

    CHECK_OBJECT( (PyObject *)outline_13_var_before_set );
    Py_DECREF( outline_13_var_before_set );
    outline_13_var_before_set = NULL;

    CHECK_OBJECT( (PyObject *)outline_13_var__interpolate_some );
    Py_DECREF( outline_13_var__interpolate_some );
    outline_13_var__interpolate_some = NULL;

    goto outline_result_26;
    // Exception handler code:
    try_except_handler_53:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_13_var___module__ );
    Py_DECREF( outline_13_var___module__ );
    outline_13_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_13_var___doc__ );
    Py_DECREF( outline_13_var___doc__ );
    outline_13_var___doc__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_29;
    exception_value = exception_keeper_value_29;
    exception_tb = exception_keeper_tb_29;
    exception_lineno = exception_keeper_lineno_29;

    goto outline_exception_3;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_3:;
    exception_lineno = 437;
    goto try_except_handler_52;
    outline_result_26:;
    tmp_assign_source_153 = tmp_outline_return_value_26;
    assert( tmp_class_creation_14__class_dict == NULL );
    tmp_class_creation_14__class_dict = tmp_assign_source_153;

    tmp_compare_left_14 = const_str_plain___metaclass__;
    tmp_compare_right_14 = tmp_class_creation_14__class_dict;

    CHECK_OBJECT( tmp_compare_right_14 );
    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    assert( !(tmp_cmp_In_14 == -1) );
    if ( tmp_cmp_In_14 == 1 )
    {
        goto condexpr_true_14;
    }
    else
    {
        goto condexpr_false_14;
    }
    condexpr_true_14:;
    tmp_dict_name_14 = tmp_class_creation_14__class_dict;

    CHECK_OBJECT( tmp_dict_name_14 );
    tmp_key_name_14 = const_str_plain___metaclass__;
    tmp_assign_source_160 = DICT_GET_ITEM( tmp_dict_name_14, tmp_key_name_14 );
    if ( tmp_assign_source_160 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 437;

        goto try_except_handler_52;
    }
    goto condexpr_end_14;
    condexpr_false_14:;
    tmp_subscribed_name_13 = tmp_class_creation_14__bases;

    CHECK_OBJECT( tmp_subscribed_name_13 );
    tmp_subscript_name_13 = const_int_0;
    tmp_assign_source_161 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    if ( tmp_assign_source_161 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 437;

        goto try_except_handler_52;
    }
    assert( tmp_select_metaclass_14__base == NULL );
    tmp_select_metaclass_14__base = tmp_assign_source_161;

    // Tried code:
    // Tried code:
    tmp_source_name_13 = tmp_select_metaclass_14__base;

    CHECK_OBJECT( tmp_source_name_13 );
    tmp_outline_return_value_27 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_13 );
    if ( tmp_outline_return_value_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 437;

        goto try_except_handler_55;
    }
    goto try_return_handler_54;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_55:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_30 );
    Py_XDECREF( exception_keeper_value_30 );
    Py_XDECREF( exception_keeper_tb_30 );
    tmp_type_arg_13 = tmp_select_metaclass_14__base;

    CHECK_OBJECT( tmp_type_arg_13 );
    tmp_outline_return_value_27 = BUILTIN_TYPE1( tmp_type_arg_13 );
    assert( tmp_outline_return_value_27 != NULL );
    goto try_return_handler_54;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_54:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_14__base );
    Py_DECREF( tmp_select_metaclass_14__base );
    tmp_select_metaclass_14__base = NULL;

    goto outline_result_27;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_14__base );
    Py_DECREF( tmp_select_metaclass_14__base );
    tmp_select_metaclass_14__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_27:;
    tmp_assign_source_160 = tmp_outline_return_value_27;
    condexpr_end_14:;
    assert( tmp_class_creation_14__metaclass == NULL );
    tmp_class_creation_14__metaclass = tmp_assign_source_160;

    tmp_called_name_16 = tmp_class_creation_14__metaclass;

    CHECK_OBJECT( tmp_called_name_16 );
    tmp_args_element_name_42 = const_str_plain_ExtendedInterpolation;
    tmp_args_element_name_43 = tmp_class_creation_14__bases;

    CHECK_OBJECT( tmp_args_element_name_43 );
    tmp_args_element_name_44 = tmp_class_creation_14__class_dict;

    CHECK_OBJECT( tmp_args_element_name_44 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 437;
    {
        PyObject *call_args[] = { tmp_args_element_name_42, tmp_args_element_name_43, tmp_args_element_name_44 };
        tmp_assign_source_162 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_16, call_args );
    }

    if ( tmp_assign_source_162 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 437;

        goto try_except_handler_52;
    }
    assert( tmp_class_creation_14__class == NULL );
    tmp_class_creation_14__class = tmp_assign_source_162;

    goto try_end_15;
    // Exception handler code:
    try_except_handler_52:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_keeper_lineno_31 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    Py_XDECREF( tmp_class_creation_14__class_dict );
    tmp_class_creation_14__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_31;
    exception_value = exception_keeper_value_31;
    exception_tb = exception_keeper_tb_31;
    exception_lineno = exception_keeper_lineno_31;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    tmp_assign_source_163 = tmp_class_creation_14__class;

    CHECK_OBJECT( tmp_assign_source_163 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ExtendedInterpolation, tmp_assign_source_163 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class );
    Py_DECREF( tmp_class_creation_14__class );
    tmp_class_creation_14__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__bases );
    Py_DECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class_dict );
    Py_DECREF( tmp_class_creation_14__class_dict );
    tmp_class_creation_14__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__metaclass );
    Py_DECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    // Tried code:
    tmp_assign_source_164 = PyTuple_New( 1 );
    tmp_tuple_element_14 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Interpolation );

    if (unlikely( tmp_tuple_element_14 == NULL ))
    {
        tmp_tuple_element_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Interpolation );
    }

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_164 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Interpolation" );
        exception_tb = NULL;

        exception_lineno = 511;

        goto try_except_handler_56;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_assign_source_164, 0, tmp_tuple_element_14 );
    assert( tmp_class_creation_15__bases == NULL );
    tmp_class_creation_15__bases = tmp_assign_source_164;

    tmp_assign_source_166 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_14_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_166 );
    outline_14_var___module__ = tmp_assign_source_166;

    tmp_assign_source_167 = const_unicode_digest_4c5d0a2590b13e3eb225faca93cf1ccc;
    assert( outline_14_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_167 );
    outline_14_var___doc__ = tmp_assign_source_167;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_87408f1f826db72313e4fc65b40ab565_5, codeobj_87408f1f826db72313e4fc65b40ab565, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_87408f1f826db72313e4fc65b40ab565_5 = cache_frame_87408f1f826db72313e4fc65b40ab565_5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_87408f1f826db72313e4fc65b40ab565_5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_87408f1f826db72313e4fc65b40ab565_5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_4 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_called_instance_4 == NULL ))
    {
        tmp_called_instance_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 515;
        type_description_2 = "ooNNNN";
        goto frame_exception_exit_5;
    }

    frame_87408f1f826db72313e4fc65b40ab565_5->m_frame.f_lineno = 515;
    tmp_assign_source_168 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_unicode_digest_aa623b64bfb5399ec1f50c86b7d261e5_tuple, 0 ) );

    if ( tmp_assign_source_168 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;
        type_description_2 = "ooNNNN";
        goto frame_exception_exit_5;
    }
    assert( outline_14_var__KEYCRE == NULL );
    outline_14_var__KEYCRE = tmp_assign_source_168;

    tmp_assign_source_169 = MAKE_FUNCTION_backports$configparser$$$function_25_before_get(  );
    assert( outline_14_var_before_get == NULL );
    outline_14_var_before_get = tmp_assign_source_169;

    tmp_assign_source_170 = MAKE_FUNCTION_backports$configparser$$$function_26_before_set(  );
    assert( outline_14_var_before_set == NULL );
    outline_14_var_before_set = tmp_assign_source_170;

    tmp_staticmethod_arg_1 = MAKE_FUNCTION_backports$configparser$$$function_27__interpolation_replace(  );
    tmp_assign_source_171 = BUILTIN_STATICMETHOD( tmp_staticmethod_arg_1 );
    Py_DECREF( tmp_staticmethod_arg_1 );
    if ( tmp_assign_source_171 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 540;
        type_description_2 = "oooooN";
        goto frame_exception_exit_5;
    }
    assert( outline_14_var__interpolation_replace == NULL );
    outline_14_var__interpolation_replace = tmp_assign_source_171;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_87408f1f826db72313e4fc65b40ab565_5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_4;

    frame_exception_exit_5:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_87408f1f826db72313e4fc65b40ab565_5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_87408f1f826db72313e4fc65b40ab565_5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_87408f1f826db72313e4fc65b40ab565_5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_87408f1f826db72313e4fc65b40ab565_5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_87408f1f826db72313e4fc65b40ab565_5,
        type_description_2,
        outline_14_var___module__,
        outline_14_var___doc__,
        outline_14_var__KEYCRE,
        outline_14_var_before_get,
        outline_14_var_before_set,
        outline_14_var__interpolation_replace
    );


    // Release cached frame.
    if ( frame_87408f1f826db72313e4fc65b40ab565_5 == cache_frame_87408f1f826db72313e4fc65b40ab565_5 )
    {
        Py_DECREF( frame_87408f1f826db72313e4fc65b40ab565_5 );
    }
    cache_frame_87408f1f826db72313e4fc65b40ab565_5 = NULL;

    assertFrameObject( frame_87408f1f826db72313e4fc65b40ab565_5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_4;

    frame_no_exception_4:;

    goto skip_nested_handling_4;
    nested_frame_exit_4:;

    goto try_except_handler_57;
    skip_nested_handling_4:;
    tmp_outline_return_value_28 = _PyDict_NewPresized( 6 );
    tmp_dict_value_55 = outline_14_var___module__;

    CHECK_OBJECT( tmp_dict_value_55 );
    tmp_dict_key_55 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_28, tmp_dict_key_55, tmp_dict_value_55 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_56 = outline_14_var___doc__;

    CHECK_OBJECT( tmp_dict_value_56 );
    tmp_dict_key_56 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_28, tmp_dict_key_56, tmp_dict_value_56 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_57 = outline_14_var__KEYCRE;

    CHECK_OBJECT( tmp_dict_value_57 );
    tmp_dict_key_57 = const_str_plain__KEYCRE;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_28, tmp_dict_key_57, tmp_dict_value_57 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_58 = outline_14_var_before_get;

    CHECK_OBJECT( tmp_dict_value_58 );
    tmp_dict_key_58 = const_str_plain_before_get;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_28, tmp_dict_key_58, tmp_dict_value_58 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_59 = outline_14_var_before_set;

    CHECK_OBJECT( tmp_dict_value_59 );
    tmp_dict_key_59 = const_str_plain_before_set;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_28, tmp_dict_key_59, tmp_dict_value_59 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_60 = outline_14_var__interpolation_replace;

    CHECK_OBJECT( tmp_dict_value_60 );
    tmp_dict_key_60 = const_str_plain__interpolation_replace;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_28, tmp_dict_key_60, tmp_dict_value_60 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_57;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_57:;
    CHECK_OBJECT( (PyObject *)outline_14_var___module__ );
    Py_DECREF( outline_14_var___module__ );
    outline_14_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_14_var___doc__ );
    Py_DECREF( outline_14_var___doc__ );
    outline_14_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_14_var__KEYCRE );
    Py_DECREF( outline_14_var__KEYCRE );
    outline_14_var__KEYCRE = NULL;

    CHECK_OBJECT( (PyObject *)outline_14_var_before_get );
    Py_DECREF( outline_14_var_before_get );
    outline_14_var_before_get = NULL;

    CHECK_OBJECT( (PyObject *)outline_14_var_before_set );
    Py_DECREF( outline_14_var_before_set );
    outline_14_var_before_set = NULL;

    CHECK_OBJECT( (PyObject *)outline_14_var__interpolation_replace );
    Py_DECREF( outline_14_var__interpolation_replace );
    outline_14_var__interpolation_replace = NULL;

    goto outline_result_28;
    // Exception handler code:
    try_except_handler_57:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_keeper_lineno_32 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_14_var___module__ );
    Py_DECREF( outline_14_var___module__ );
    outline_14_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_14_var___doc__ );
    Py_DECREF( outline_14_var___doc__ );
    outline_14_var___doc__ = NULL;

    Py_XDECREF( outline_14_var__KEYCRE );
    outline_14_var__KEYCRE = NULL;

    Py_XDECREF( outline_14_var_before_get );
    outline_14_var_before_get = NULL;

    Py_XDECREF( outline_14_var_before_set );
    outline_14_var_before_set = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_32;
    exception_value = exception_keeper_value_32;
    exception_tb = exception_keeper_tb_32;
    exception_lineno = exception_keeper_lineno_32;

    goto outline_exception_4;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_4:;
    exception_lineno = 511;
    goto try_except_handler_56;
    outline_result_28:;
    tmp_assign_source_165 = tmp_outline_return_value_28;
    assert( tmp_class_creation_15__class_dict == NULL );
    tmp_class_creation_15__class_dict = tmp_assign_source_165;

    tmp_compare_left_15 = const_str_plain___metaclass__;
    tmp_compare_right_15 = tmp_class_creation_15__class_dict;

    CHECK_OBJECT( tmp_compare_right_15 );
    tmp_cmp_In_15 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    assert( !(tmp_cmp_In_15 == -1) );
    if ( tmp_cmp_In_15 == 1 )
    {
        goto condexpr_true_15;
    }
    else
    {
        goto condexpr_false_15;
    }
    condexpr_true_15:;
    tmp_dict_name_15 = tmp_class_creation_15__class_dict;

    CHECK_OBJECT( tmp_dict_name_15 );
    tmp_key_name_15 = const_str_plain___metaclass__;
    tmp_assign_source_172 = DICT_GET_ITEM( tmp_dict_name_15, tmp_key_name_15 );
    if ( tmp_assign_source_172 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 511;

        goto try_except_handler_56;
    }
    goto condexpr_end_15;
    condexpr_false_15:;
    tmp_subscribed_name_14 = tmp_class_creation_15__bases;

    CHECK_OBJECT( tmp_subscribed_name_14 );
    tmp_subscript_name_14 = const_int_0;
    tmp_assign_source_173 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
    if ( tmp_assign_source_173 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 511;

        goto try_except_handler_56;
    }
    assert( tmp_select_metaclass_15__base == NULL );
    tmp_select_metaclass_15__base = tmp_assign_source_173;

    // Tried code:
    // Tried code:
    tmp_source_name_14 = tmp_select_metaclass_15__base;

    CHECK_OBJECT( tmp_source_name_14 );
    tmp_outline_return_value_29 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_14 );
    if ( tmp_outline_return_value_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 511;

        goto try_except_handler_59;
    }
    goto try_return_handler_58;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_59:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_keeper_lineno_33 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_33 );
    Py_XDECREF( exception_keeper_value_33 );
    Py_XDECREF( exception_keeper_tb_33 );
    tmp_type_arg_14 = tmp_select_metaclass_15__base;

    CHECK_OBJECT( tmp_type_arg_14 );
    tmp_outline_return_value_29 = BUILTIN_TYPE1( tmp_type_arg_14 );
    assert( tmp_outline_return_value_29 != NULL );
    goto try_return_handler_58;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_58:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_15__base );
    Py_DECREF( tmp_select_metaclass_15__base );
    tmp_select_metaclass_15__base = NULL;

    goto outline_result_29;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_15__base );
    Py_DECREF( tmp_select_metaclass_15__base );
    tmp_select_metaclass_15__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_29:;
    tmp_assign_source_172 = tmp_outline_return_value_29;
    condexpr_end_15:;
    assert( tmp_class_creation_15__metaclass == NULL );
    tmp_class_creation_15__metaclass = tmp_assign_source_172;

    tmp_called_name_17 = tmp_class_creation_15__metaclass;

    CHECK_OBJECT( tmp_called_name_17 );
    tmp_args_element_name_45 = const_str_plain_LegacyInterpolation;
    tmp_args_element_name_46 = tmp_class_creation_15__bases;

    CHECK_OBJECT( tmp_args_element_name_46 );
    tmp_args_element_name_47 = tmp_class_creation_15__class_dict;

    CHECK_OBJECT( tmp_args_element_name_47 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 511;
    {
        PyObject *call_args[] = { tmp_args_element_name_45, tmp_args_element_name_46, tmp_args_element_name_47 };
        tmp_assign_source_174 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_17, call_args );
    }

    if ( tmp_assign_source_174 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 511;

        goto try_except_handler_56;
    }
    assert( tmp_class_creation_15__class == NULL );
    tmp_class_creation_15__class = tmp_assign_source_174;

    goto try_end_16;
    // Exception handler code:
    try_except_handler_56:;
    exception_keeper_type_34 = exception_type;
    exception_keeper_value_34 = exception_value;
    exception_keeper_tb_34 = exception_tb;
    exception_keeper_lineno_34 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_15__bases );
    tmp_class_creation_15__bases = NULL;

    Py_XDECREF( tmp_class_creation_15__class_dict );
    tmp_class_creation_15__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_15__metaclass );
    tmp_class_creation_15__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_34;
    exception_value = exception_keeper_value_34;
    exception_tb = exception_keeper_tb_34;
    exception_lineno = exception_keeper_lineno_34;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    tmp_assign_source_175 = tmp_class_creation_15__class;

    CHECK_OBJECT( tmp_assign_source_175 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_LegacyInterpolation, tmp_assign_source_175 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__class );
    Py_DECREF( tmp_class_creation_15__class );
    tmp_class_creation_15__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__bases );
    Py_DECREF( tmp_class_creation_15__bases );
    tmp_class_creation_15__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__class_dict );
    Py_DECREF( tmp_class_creation_15__class_dict );
    tmp_class_creation_15__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__metaclass );
    Py_DECREF( tmp_class_creation_15__metaclass );
    tmp_class_creation_15__metaclass = NULL;

    // Tried code:
    tmp_assign_source_176 = PyTuple_New( 1 );
    tmp_tuple_element_15 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MutableMapping );

    if (unlikely( tmp_tuple_element_15 == NULL ))
    {
        tmp_tuple_element_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MutableMapping );
    }

    if ( tmp_tuple_element_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_176 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MutableMapping" );
        exception_tb = NULL;

        exception_lineno = 549;

        goto try_except_handler_60;
    }

    Py_INCREF( tmp_tuple_element_15 );
    PyTuple_SET_ITEM( tmp_assign_source_176, 0, tmp_tuple_element_15 );
    assert( tmp_class_creation_16__bases == NULL );
    tmp_class_creation_16__bases = tmp_assign_source_176;

    tmp_assign_source_178 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_15_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_178 );
    outline_15_var___module__ = tmp_assign_source_178;

    tmp_assign_source_179 = const_unicode_digest_c10a3c13ccfc02e12f49b700e84e610a;
    assert( outline_15_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_179 );
    outline_15_var___doc__ = tmp_assign_source_179;

    tmp_assign_source_180 = const_unicode_digest_876651e3baa8b4da865b7f2efeaddcf4;
    assert( outline_15_var__SECT_TMPL == NULL );
    Py_INCREF( tmp_assign_source_180 );
    outline_15_var__SECT_TMPL = tmp_assign_source_180;

    tmp_assign_source_181 = const_unicode_digest_54e7c558f1589423ec2e67698d109215;
    assert( outline_15_var__OPT_TMPL == NULL );
    Py_INCREF( tmp_assign_source_181 );
    outline_15_var__OPT_TMPL = tmp_assign_source_181;

    tmp_assign_source_182 = const_unicode_digest_9c0422138b231ab00ef3752351c8a02b;
    assert( outline_15_var__OPT_NV_TMPL == NULL );
    Py_INCREF( tmp_assign_source_182 );
    outline_15_var__OPT_NV_TMPL = tmp_assign_source_182;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9815049f917ba554f86a83cfecf75243_6, codeobj_9815049f917ba554f86a83cfecf75243, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_9815049f917ba554f86a83cfecf75243_6 = cache_frame_9815049f917ba554f86a83cfecf75243_6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9815049f917ba554f86a83cfecf75243_6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9815049f917ba554f86a83cfecf75243_6 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_Interpolation );

    if (unlikely( tmp_called_name_18 == NULL ))
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Interpolation );
    }

    if ( tmp_called_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Interpolation" );
        exception_tb = NULL;

        exception_lineno = 576;
        type_description_2 = "oooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    frame_9815049f917ba554f86a83cfecf75243_6->m_frame.f_lineno = 576;
    tmp_assign_source_183 = CALL_FUNCTION_NO_ARGS( tmp_called_name_18 );
    if ( tmp_assign_source_183 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 576;
        type_description_2 = "oooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    assert( outline_15_var__DEFAULT_INTERPOLATION == NULL );
    outline_15_var__DEFAULT_INTERPOLATION = tmp_assign_source_183;

    tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_15 == NULL ))
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 578;
        type_description_2 = "ooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_compile );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        type_description_2 = "ooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    tmp_args_element_name_48 = outline_15_var__SECT_TMPL;

    CHECK_OBJECT( tmp_args_element_name_48 );
    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_16 == NULL )
    {
        Py_DECREF( tmp_called_name_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 578;
        type_description_2 = "ooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    tmp_args_element_name_49 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_VERBOSE );
    if ( tmp_args_element_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 578;
        type_description_2 = "ooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    frame_9815049f917ba554f86a83cfecf75243_6->m_frame.f_lineno = 578;
    {
        PyObject *call_args[] = { tmp_args_element_name_48, tmp_args_element_name_49 };
        tmp_assign_source_184 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_19, call_args );
    }

    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_49 );
    if ( tmp_assign_source_184 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        type_description_2 = "ooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    assert( outline_15_var_SECTCRE == NULL );
    outline_15_var_SECTCRE = tmp_assign_source_184;

    tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_17 == NULL ))
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_17 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 580;
        type_description_2 = "oooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_compile );
    if ( tmp_called_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 580;
        type_description_2 = "oooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    tmp_source_name_18 = outline_15_var__OPT_TMPL;

    CHECK_OBJECT( tmp_source_name_18 );
    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_format );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 580;
        type_description_2 = "oooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    tmp_kw_name_1 = PyDict_Copy( const_dict_232d830ea747452602b3fbf1a87fe962 );
    frame_9815049f917ba554f86a83cfecf75243_6->m_frame.f_lineno = 580;
    tmp_args_element_name_50 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_21, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_21 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_args_element_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_20 );

        exception_lineno = 580;
        type_description_2 = "oooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_19 == NULL ))
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_19 == NULL )
    {
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_args_element_name_50 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 580;
        type_description_2 = "oooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    tmp_args_element_name_51 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_VERBOSE );
    if ( tmp_args_element_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_args_element_name_50 );

        exception_lineno = 580;
        type_description_2 = "oooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    frame_9815049f917ba554f86a83cfecf75243_6->m_frame.f_lineno = 580;
    {
        PyObject *call_args[] = { tmp_args_element_name_50, tmp_args_element_name_51 };
        tmp_assign_source_185 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_20, call_args );
    }

    Py_DECREF( tmp_called_name_20 );
    Py_DECREF( tmp_args_element_name_50 );
    Py_DECREF( tmp_args_element_name_51 );
    if ( tmp_assign_source_185 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 580;
        type_description_2 = "oooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    assert( outline_15_var_OPTCRE == NULL );
    outline_15_var_OPTCRE = tmp_assign_source_185;

    tmp_source_name_20 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_20 == NULL ))
    {
        tmp_source_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 583;
        type_description_2 = "ooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_compile );
    if ( tmp_called_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 583;
        type_description_2 = "ooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    tmp_source_name_21 = outline_15_var__OPT_NV_TMPL;

    CHECK_OBJECT( tmp_source_name_21 );
    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_format );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_22 );

        exception_lineno = 583;
        type_description_2 = "ooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    tmp_kw_name_2 = PyDict_Copy( const_dict_232d830ea747452602b3fbf1a87fe962 );
    frame_9815049f917ba554f86a83cfecf75243_6->m_frame.f_lineno = 583;
    tmp_args_element_name_52 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_23, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_args_element_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_22 );

        exception_lineno = 583;
        type_description_2 = "ooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_source_name_22 == NULL ))
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_source_name_22 == NULL )
    {
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_element_name_52 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 583;
        type_description_2 = "ooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    tmp_args_element_name_53 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_VERBOSE );
    if ( tmp_args_element_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_element_name_52 );

        exception_lineno = 583;
        type_description_2 = "ooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    frame_9815049f917ba554f86a83cfecf75243_6->m_frame.f_lineno = 583;
    {
        PyObject *call_args[] = { tmp_args_element_name_52, tmp_args_element_name_53 };
        tmp_assign_source_186 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_22, call_args );
    }

    Py_DECREF( tmp_called_name_22 );
    Py_DECREF( tmp_args_element_name_52 );
    Py_DECREF( tmp_args_element_name_53 );
    if ( tmp_assign_source_186 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 583;
        type_description_2 = "ooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    assert( outline_15_var_OPTCRE_NV == NULL );
    outline_15_var_OPTCRE_NV = tmp_assign_source_186;

    tmp_called_instance_5 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_called_instance_5 == NULL ))
    {
        tmp_called_instance_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_called_instance_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 585;
        type_description_2 = "oooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    frame_9815049f917ba554f86a83cfecf75243_6->m_frame.f_lineno = 585;
    tmp_assign_source_187 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_unicode_digest_62c889c67fbc8a8f6cf60127214f5229_tuple, 0 ) );

    if ( tmp_assign_source_187 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 585;
        type_description_2 = "oooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }
    assert( outline_15_var_NONSPACECRE == NULL );
    outline_15_var_NONSPACECRE = tmp_assign_source_187;

    tmp_assign_source_188 = PyDict_Copy( const_dict_af01fef0f5b348ee65397647dd94bd96 );
    assert( outline_15_var_BOOLEAN_STATES == NULL );
    outline_15_var_BOOLEAN_STATES = tmp_assign_source_188;

    tmp_defaults_5 = PyTuple_New( 3 );
    tmp_tuple_element_16 = Py_None;
    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_defaults_5, 0, tmp_tuple_element_16 );
    tmp_tuple_element_16 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__default_dict );

    if (unlikely( tmp_tuple_element_16 == NULL ))
    {
        tmp_tuple_element_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__default_dict );
    }

    if ( tmp_tuple_element_16 == NULL )
    {
        Py_DECREF( tmp_defaults_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_default_dict" );
        exception_tb = NULL;

        exception_lineno = 590;
        type_description_2 = "oooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_defaults_5, 1, tmp_tuple_element_16 );
    tmp_tuple_element_16 = Py_False;
    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_defaults_5, 2, tmp_tuple_element_16 );
    tmp_assign_source_189 = MAKE_FUNCTION_backports$configparser$$$function_28___init__( tmp_defaults_5 );
    assert( outline_15_var___init__ == NULL );
    outline_15_var___init__ = tmp_assign_source_189;

    tmp_assign_source_190 = MAKE_FUNCTION_backports$configparser$$$function_29_defaults(  );
    assert( outline_15_var_defaults == NULL );
    outline_15_var_defaults = tmp_assign_source_190;

    tmp_assign_source_191 = MAKE_FUNCTION_backports$configparser$$$function_30_sections(  );
    assert( outline_15_var_sections == NULL );
    outline_15_var_sections = tmp_assign_source_191;

    tmp_assign_source_192 = MAKE_FUNCTION_backports$configparser$$$function_31_add_section(  );
    assert( outline_15_var_add_section == NULL );
    outline_15_var_add_section = tmp_assign_source_192;

    tmp_assign_source_193 = MAKE_FUNCTION_backports$configparser$$$function_32_has_section(  );
    assert( outline_15_var_has_section == NULL );
    outline_15_var_has_section = tmp_assign_source_193;

    tmp_assign_source_194 = MAKE_FUNCTION_backports$configparser$$$function_33_options(  );
    assert( outline_15_var_options == NULL );
    outline_15_var_options = tmp_assign_source_194;

    tmp_defaults_6 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_6 );
    tmp_assign_source_195 = MAKE_FUNCTION_backports$configparser$$$function_34_read( tmp_defaults_6 );
    assert( outline_15_var_read == NULL );
    outline_15_var_read = tmp_assign_source_195;

    tmp_defaults_7 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_7 );
    tmp_assign_source_196 = MAKE_FUNCTION_backports$configparser$$$function_35_read_file( tmp_defaults_7 );
    assert( outline_15_var_read_file == NULL );
    outline_15_var_read_file = tmp_assign_source_196;

    tmp_defaults_8 = const_tuple_unicode_angle_string_tuple;
    Py_INCREF( tmp_defaults_8 );
    tmp_assign_source_197 = MAKE_FUNCTION_backports$configparser$$$function_36_read_string( tmp_defaults_8 );
    assert( outline_15_var_read_string == NULL );
    outline_15_var_read_string = tmp_assign_source_197;

    tmp_defaults_9 = const_tuple_unicode_angle_dict_tuple;
    Py_INCREF( tmp_defaults_9 );
    tmp_assign_source_198 = MAKE_FUNCTION_backports$configparser$$$function_37_read_dict( tmp_defaults_9 );
    assert( outline_15_var_read_dict == NULL );
    outline_15_var_read_dict = tmp_assign_source_198;

    tmp_defaults_10 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_10 );
    tmp_assign_source_199 = MAKE_FUNCTION_backports$configparser$$$function_38_readfp( tmp_defaults_10 );
    assert( outline_15_var_readfp == NULL );
    outline_15_var_readfp = tmp_assign_source_199;

    tmp_assign_source_200 = MAKE_FUNCTION_backports$configparser$$$function_39_get(  );
    assert( outline_15_var_get == NULL );
    outline_15_var_get = tmp_assign_source_200;

    tmp_assign_source_201 = MAKE_FUNCTION_backports$configparser$$$function_40__get(  );
    assert( outline_15_var__get == NULL );
    outline_15_var__get = tmp_assign_source_201;

    tmp_assign_source_202 = MAKE_FUNCTION_backports$configparser$$$function_41__get_conv(  );
    assert( outline_15_var__get_conv == NULL );
    outline_15_var__get_conv = tmp_assign_source_202;

    tmp_assign_source_203 = MAKE_FUNCTION_backports$configparser$$$function_42_getint(  );
    assert( outline_15_var_getint == NULL );
    outline_15_var_getint = tmp_assign_source_203;

    tmp_assign_source_204 = MAKE_FUNCTION_backports$configparser$$$function_43_getfloat(  );
    assert( outline_15_var_getfloat == NULL );
    outline_15_var_getfloat = tmp_assign_source_204;

    tmp_assign_source_205 = MAKE_FUNCTION_backports$configparser$$$function_44_getboolean(  );
    assert( outline_15_var_getboolean == NULL );
    outline_15_var_getboolean = tmp_assign_source_205;

    tmp_defaults_11 = PyTuple_New( 3 );
    tmp_tuple_element_17 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain__UNSET );

    if (unlikely( tmp_tuple_element_17 == NULL ))
    {
        tmp_tuple_element_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNSET );
    }

    if ( tmp_tuple_element_17 == NULL )
    {
        Py_DECREF( tmp_defaults_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_UNSET" );
        exception_tb = NULL;

        exception_lineno = 851;
        type_description_2 = "ooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_6;
    }

    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_defaults_11, 0, tmp_tuple_element_17 );
    tmp_tuple_element_17 = Py_False;
    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_defaults_11, 1, tmp_tuple_element_17 );
    tmp_tuple_element_17 = Py_None;
    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_defaults_11, 2, tmp_tuple_element_17 );
    tmp_assign_source_206 = MAKE_FUNCTION_backports$configparser$$$function_45_items( tmp_defaults_11 );
    assert( outline_15_var_items == NULL );
    outline_15_var_items = tmp_assign_source_206;

    tmp_assign_source_207 = MAKE_FUNCTION_backports$configparser$$$function_46_popitem(  );
    assert( outline_15_var_popitem == NULL );
    outline_15_var_popitem = tmp_assign_source_207;

    tmp_assign_source_208 = MAKE_FUNCTION_backports$configparser$$$function_47_optionxform(  );
    assert( outline_15_var_optionxform == NULL );
    outline_15_var_optionxform = tmp_assign_source_208;

    tmp_assign_source_209 = MAKE_FUNCTION_backports$configparser$$$function_48_has_option(  );
    assert( outline_15_var_has_option == NULL );
    outline_15_var_has_option = tmp_assign_source_209;

    tmp_defaults_12 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_12 );
    tmp_assign_source_210 = MAKE_FUNCTION_backports$configparser$$$function_49_set( tmp_defaults_12 );
    assert( outline_15_var_set == NULL );
    outline_15_var_set = tmp_assign_source_210;

    tmp_defaults_13 = const_tuple_true_tuple;
    Py_INCREF( tmp_defaults_13 );
    tmp_assign_source_211 = MAKE_FUNCTION_backports$configparser$$$function_50_write( tmp_defaults_13 );
    assert( outline_15_var_write == NULL );
    outline_15_var_write = tmp_assign_source_211;

    tmp_assign_source_212 = MAKE_FUNCTION_backports$configparser$$$function_51__write_section(  );
    assert( outline_15_var__write_section == NULL );
    outline_15_var__write_section = tmp_assign_source_212;

    tmp_assign_source_213 = MAKE_FUNCTION_backports$configparser$$$function_52_remove_option(  );
    assert( outline_15_var_remove_option == NULL );
    outline_15_var_remove_option = tmp_assign_source_213;

    tmp_assign_source_214 = MAKE_FUNCTION_backports$configparser$$$function_53_remove_section(  );
    assert( outline_15_var_remove_section == NULL );
    outline_15_var_remove_section = tmp_assign_source_214;

    tmp_assign_source_215 = MAKE_FUNCTION_backports$configparser$$$function_54___getitem__(  );
    assert( outline_15_var___getitem__ == NULL );
    outline_15_var___getitem__ = tmp_assign_source_215;

    tmp_assign_source_216 = MAKE_FUNCTION_backports$configparser$$$function_55___setitem__(  );
    assert( outline_15_var___setitem__ == NULL );
    outline_15_var___setitem__ = tmp_assign_source_216;

    tmp_assign_source_217 = MAKE_FUNCTION_backports$configparser$$$function_56___delitem__(  );
    assert( outline_15_var___delitem__ == NULL );
    outline_15_var___delitem__ = tmp_assign_source_217;

    tmp_assign_source_218 = MAKE_FUNCTION_backports$configparser$$$function_57___contains__(  );
    assert( outline_15_var___contains__ == NULL );
    outline_15_var___contains__ = tmp_assign_source_218;

    tmp_assign_source_219 = MAKE_FUNCTION_backports$configparser$$$function_58___len__(  );
    assert( outline_15_var___len__ == NULL );
    outline_15_var___len__ = tmp_assign_source_219;

    tmp_assign_source_220 = MAKE_FUNCTION_backports$configparser$$$function_59___iter__(  );
    assert( outline_15_var___iter__ == NULL );
    outline_15_var___iter__ = tmp_assign_source_220;

    tmp_assign_source_221 = MAKE_FUNCTION_backports$configparser$$$function_60__read(  );
    assert( outline_15_var__read == NULL );
    outline_15_var__read = tmp_assign_source_221;

    tmp_assign_source_222 = MAKE_FUNCTION_backports$configparser$$$function_61__join_multiline_values(  );
    assert( outline_15_var__join_multiline_values == NULL );
    outline_15_var__join_multiline_values = tmp_assign_source_222;

    tmp_assign_source_223 = MAKE_FUNCTION_backports$configparser$$$function_62__handle_error(  );
    assert( outline_15_var__handle_error == NULL );
    outline_15_var__handle_error = tmp_assign_source_223;

    tmp_assign_source_224 = MAKE_FUNCTION_backports$configparser$$$function_63__unify_values(  );
    assert( outline_15_var__unify_values == NULL );
    outline_15_var__unify_values = tmp_assign_source_224;

    tmp_assign_source_225 = MAKE_FUNCTION_backports$configparser$$$function_64__convert_to_boolean(  );
    assert( outline_15_var__convert_to_boolean == NULL );
    outline_15_var__convert_to_boolean = tmp_assign_source_225;

    tmp_assign_source_226 = MAKE_FUNCTION_backports$configparser$$$function_65__validate_value_types(  );
    assert( outline_15_var__validate_value_types == NULL );
    outline_15_var__validate_value_types = tmp_assign_source_226;

    tmp_called_name_24 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_54 = MAKE_FUNCTION_backports$configparser$$$function_66_converters(  );
    frame_9815049f917ba554f86a83cfecf75243_6->m_frame.f_lineno = 1225;
    {
        PyObject *call_args[] = { tmp_args_element_name_54 };
        tmp_assign_source_227 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_24, call_args );
    }

    Py_DECREF( tmp_args_element_name_54 );
    if ( tmp_assign_source_227 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1225;
        type_description_2 = "oooooooooooooooooooooooooooooooooooooooooooooooooN";
        goto frame_exception_exit_6;
    }
    assert( outline_15_var_converters == NULL );
    outline_15_var_converters = tmp_assign_source_227;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_9815049f917ba554f86a83cfecf75243_6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_5;

    frame_exception_exit_6:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9815049f917ba554f86a83cfecf75243_6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9815049f917ba554f86a83cfecf75243_6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9815049f917ba554f86a83cfecf75243_6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9815049f917ba554f86a83cfecf75243_6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9815049f917ba554f86a83cfecf75243_6,
        type_description_2,
        outline_15_var___module__,
        outline_15_var___doc__,
        outline_15_var__SECT_TMPL,
        outline_15_var__OPT_TMPL,
        outline_15_var__OPT_NV_TMPL,
        outline_15_var__DEFAULT_INTERPOLATION,
        outline_15_var_SECTCRE,
        outline_15_var_OPTCRE,
        outline_15_var_OPTCRE_NV,
        outline_15_var_NONSPACECRE,
        outline_15_var_BOOLEAN_STATES,
        outline_15_var___init__,
        outline_15_var_defaults,
        outline_15_var_sections,
        outline_15_var_add_section,
        outline_15_var_has_section,
        outline_15_var_options,
        outline_15_var_read,
        outline_15_var_read_file,
        outline_15_var_read_string,
        outline_15_var_read_dict,
        outline_15_var_readfp,
        outline_15_var_get,
        outline_15_var__get,
        outline_15_var__get_conv,
        outline_15_var_getint,
        outline_15_var_getfloat,
        outline_15_var_getboolean,
        outline_15_var_items,
        outline_15_var_popitem,
        outline_15_var_optionxform,
        outline_15_var_has_option,
        outline_15_var_set,
        outline_15_var_write,
        outline_15_var__write_section,
        outline_15_var_remove_option,
        outline_15_var_remove_section,
        outline_15_var___getitem__,
        outline_15_var___setitem__,
        outline_15_var___delitem__,
        outline_15_var___contains__,
        outline_15_var___len__,
        outline_15_var___iter__,
        outline_15_var__read,
        outline_15_var__join_multiline_values,
        outline_15_var__handle_error,
        outline_15_var__unify_values,
        outline_15_var__convert_to_boolean,
        outline_15_var__validate_value_types,
        outline_15_var_converters
    );


    // Release cached frame.
    if ( frame_9815049f917ba554f86a83cfecf75243_6 == cache_frame_9815049f917ba554f86a83cfecf75243_6 )
    {
        Py_DECREF( frame_9815049f917ba554f86a83cfecf75243_6 );
    }
    cache_frame_9815049f917ba554f86a83cfecf75243_6 = NULL;

    assertFrameObject( frame_9815049f917ba554f86a83cfecf75243_6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_5;

    frame_no_exception_5:;

    goto skip_nested_handling_5;
    nested_frame_exit_5:;

    goto try_except_handler_61;
    skip_nested_handling_5:;
    tmp_outline_return_value_30 = _PyDict_NewPresized( 50 );
    tmp_dict_value_61 = outline_15_var___module__;

    CHECK_OBJECT( tmp_dict_value_61 );
    tmp_dict_key_61 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_61, tmp_dict_value_61 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_62 = outline_15_var___doc__;

    CHECK_OBJECT( tmp_dict_value_62 );
    tmp_dict_key_62 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_62, tmp_dict_value_62 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_63 = outline_15_var__SECT_TMPL;

    CHECK_OBJECT( tmp_dict_value_63 );
    tmp_dict_key_63 = const_str_plain__SECT_TMPL;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_63, tmp_dict_value_63 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_64 = outline_15_var__OPT_TMPL;

    CHECK_OBJECT( tmp_dict_value_64 );
    tmp_dict_key_64 = const_str_plain__OPT_TMPL;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_64, tmp_dict_value_64 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_65 = outline_15_var__OPT_NV_TMPL;

    CHECK_OBJECT( tmp_dict_value_65 );
    tmp_dict_key_65 = const_str_plain__OPT_NV_TMPL;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_65, tmp_dict_value_65 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_66 = outline_15_var__DEFAULT_INTERPOLATION;

    CHECK_OBJECT( tmp_dict_value_66 );
    tmp_dict_key_66 = const_str_plain__DEFAULT_INTERPOLATION;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_66, tmp_dict_value_66 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_67 = outline_15_var_SECTCRE;

    CHECK_OBJECT( tmp_dict_value_67 );
    tmp_dict_key_67 = const_str_plain_SECTCRE;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_67, tmp_dict_value_67 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_68 = outline_15_var_OPTCRE;

    CHECK_OBJECT( tmp_dict_value_68 );
    tmp_dict_key_68 = const_str_plain_OPTCRE;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_68, tmp_dict_value_68 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_69 = outline_15_var_OPTCRE_NV;

    CHECK_OBJECT( tmp_dict_value_69 );
    tmp_dict_key_69 = const_str_plain_OPTCRE_NV;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_69, tmp_dict_value_69 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_70 = outline_15_var_NONSPACECRE;

    CHECK_OBJECT( tmp_dict_value_70 );
    tmp_dict_key_70 = const_str_plain_NONSPACECRE;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_70, tmp_dict_value_70 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_71 = outline_15_var_BOOLEAN_STATES;

    CHECK_OBJECT( tmp_dict_value_71 );
    tmp_dict_key_71 = const_str_plain_BOOLEAN_STATES;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_71, tmp_dict_value_71 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_72 = outline_15_var___init__;

    CHECK_OBJECT( tmp_dict_value_72 );
    tmp_dict_key_72 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_72, tmp_dict_value_72 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_73 = outline_15_var_defaults;

    CHECK_OBJECT( tmp_dict_value_73 );
    tmp_dict_key_73 = const_str_plain_defaults;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_73, tmp_dict_value_73 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_74 = outline_15_var_sections;

    CHECK_OBJECT( tmp_dict_value_74 );
    tmp_dict_key_74 = const_str_plain_sections;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_74, tmp_dict_value_74 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_75 = outline_15_var_add_section;

    CHECK_OBJECT( tmp_dict_value_75 );
    tmp_dict_key_75 = const_str_plain_add_section;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_75, tmp_dict_value_75 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_76 = outline_15_var_has_section;

    CHECK_OBJECT( tmp_dict_value_76 );
    tmp_dict_key_76 = const_str_plain_has_section;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_76, tmp_dict_value_76 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_77 = outline_15_var_options;

    CHECK_OBJECT( tmp_dict_value_77 );
    tmp_dict_key_77 = const_str_plain_options;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_77, tmp_dict_value_77 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_78 = outline_15_var_read;

    CHECK_OBJECT( tmp_dict_value_78 );
    tmp_dict_key_78 = const_str_plain_read;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_78, tmp_dict_value_78 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_79 = outline_15_var_read_file;

    CHECK_OBJECT( tmp_dict_value_79 );
    tmp_dict_key_79 = const_str_plain_read_file;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_79, tmp_dict_value_79 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_80 = outline_15_var_read_string;

    CHECK_OBJECT( tmp_dict_value_80 );
    tmp_dict_key_80 = const_str_plain_read_string;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_80, tmp_dict_value_80 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_81 = outline_15_var_read_dict;

    CHECK_OBJECT( tmp_dict_value_81 );
    tmp_dict_key_81 = const_str_plain_read_dict;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_81, tmp_dict_value_81 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_82 = outline_15_var_readfp;

    CHECK_OBJECT( tmp_dict_value_82 );
    tmp_dict_key_82 = const_str_plain_readfp;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_82, tmp_dict_value_82 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_83 = outline_15_var_get;

    CHECK_OBJECT( tmp_dict_value_83 );
    tmp_dict_key_83 = const_str_plain_get;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_83, tmp_dict_value_83 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_84 = outline_15_var__get;

    CHECK_OBJECT( tmp_dict_value_84 );
    tmp_dict_key_84 = const_str_plain__get;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_84, tmp_dict_value_84 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_85 = outline_15_var__get_conv;

    CHECK_OBJECT( tmp_dict_value_85 );
    tmp_dict_key_85 = const_str_plain__get_conv;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_85, tmp_dict_value_85 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_86 = outline_15_var_getint;

    CHECK_OBJECT( tmp_dict_value_86 );
    tmp_dict_key_86 = const_str_plain_getint;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_86, tmp_dict_value_86 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_87 = outline_15_var_getfloat;

    CHECK_OBJECT( tmp_dict_value_87 );
    tmp_dict_key_87 = const_str_plain_getfloat;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_87, tmp_dict_value_87 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_88 = outline_15_var_getboolean;

    CHECK_OBJECT( tmp_dict_value_88 );
    tmp_dict_key_88 = const_str_plain_getboolean;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_88, tmp_dict_value_88 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_89 = outline_15_var_items;

    CHECK_OBJECT( tmp_dict_value_89 );
    tmp_dict_key_89 = const_str_plain_items;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_89, tmp_dict_value_89 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_90 = outline_15_var_popitem;

    CHECK_OBJECT( tmp_dict_value_90 );
    tmp_dict_key_90 = const_str_plain_popitem;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_90, tmp_dict_value_90 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_91 = outline_15_var_optionxform;

    CHECK_OBJECT( tmp_dict_value_91 );
    tmp_dict_key_91 = const_str_plain_optionxform;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_91, tmp_dict_value_91 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_92 = outline_15_var_has_option;

    CHECK_OBJECT( tmp_dict_value_92 );
    tmp_dict_key_92 = const_str_plain_has_option;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_92, tmp_dict_value_92 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_93 = outline_15_var_set;

    CHECK_OBJECT( tmp_dict_value_93 );
    tmp_dict_key_93 = const_str_plain_set;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_93, tmp_dict_value_93 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_94 = outline_15_var_write;

    CHECK_OBJECT( tmp_dict_value_94 );
    tmp_dict_key_94 = const_str_plain_write;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_94, tmp_dict_value_94 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_95 = outline_15_var__write_section;

    CHECK_OBJECT( tmp_dict_value_95 );
    tmp_dict_key_95 = const_str_plain__write_section;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_95, tmp_dict_value_95 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_96 = outline_15_var_remove_option;

    CHECK_OBJECT( tmp_dict_value_96 );
    tmp_dict_key_96 = const_str_plain_remove_option;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_96, tmp_dict_value_96 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_97 = outline_15_var_remove_section;

    CHECK_OBJECT( tmp_dict_value_97 );
    tmp_dict_key_97 = const_str_plain_remove_section;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_97, tmp_dict_value_97 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_98 = outline_15_var___getitem__;

    CHECK_OBJECT( tmp_dict_value_98 );
    tmp_dict_key_98 = const_str_plain___getitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_98, tmp_dict_value_98 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_99 = outline_15_var___setitem__;

    CHECK_OBJECT( tmp_dict_value_99 );
    tmp_dict_key_99 = const_str_plain___setitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_99, tmp_dict_value_99 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_100 = outline_15_var___delitem__;

    CHECK_OBJECT( tmp_dict_value_100 );
    tmp_dict_key_100 = const_str_plain___delitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_100, tmp_dict_value_100 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_101 = outline_15_var___contains__;

    CHECK_OBJECT( tmp_dict_value_101 );
    tmp_dict_key_101 = const_str_plain___contains__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_101, tmp_dict_value_101 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_102 = outline_15_var___len__;

    CHECK_OBJECT( tmp_dict_value_102 );
    tmp_dict_key_102 = const_str_plain___len__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_102, tmp_dict_value_102 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_103 = outline_15_var___iter__;

    CHECK_OBJECT( tmp_dict_value_103 );
    tmp_dict_key_103 = const_str_plain___iter__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_103, tmp_dict_value_103 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_104 = outline_15_var__read;

    CHECK_OBJECT( tmp_dict_value_104 );
    tmp_dict_key_104 = const_str_plain__read;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_104, tmp_dict_value_104 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_105 = outline_15_var__join_multiline_values;

    CHECK_OBJECT( tmp_dict_value_105 );
    tmp_dict_key_105 = const_str_plain__join_multiline_values;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_105, tmp_dict_value_105 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_106 = outline_15_var__handle_error;

    CHECK_OBJECT( tmp_dict_value_106 );
    tmp_dict_key_106 = const_str_plain__handle_error;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_106, tmp_dict_value_106 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_107 = outline_15_var__unify_values;

    CHECK_OBJECT( tmp_dict_value_107 );
    tmp_dict_key_107 = const_str_plain__unify_values;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_107, tmp_dict_value_107 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_108 = outline_15_var__convert_to_boolean;

    CHECK_OBJECT( tmp_dict_value_108 );
    tmp_dict_key_108 = const_str_plain__convert_to_boolean;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_108, tmp_dict_value_108 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_109 = outline_15_var__validate_value_types;

    CHECK_OBJECT( tmp_dict_value_109 );
    tmp_dict_key_109 = const_str_plain__validate_value_types;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_109, tmp_dict_value_109 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_110 = outline_15_var_converters;

    CHECK_OBJECT( tmp_dict_value_110 );
    tmp_dict_key_110 = const_str_plain_converters;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_30, tmp_dict_key_110, tmp_dict_value_110 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_61;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_61:;
    CHECK_OBJECT( (PyObject *)outline_15_var___module__ );
    Py_DECREF( outline_15_var___module__ );
    outline_15_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var___doc__ );
    Py_DECREF( outline_15_var___doc__ );
    outline_15_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__SECT_TMPL );
    Py_DECREF( outline_15_var__SECT_TMPL );
    outline_15_var__SECT_TMPL = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__OPT_TMPL );
    Py_DECREF( outline_15_var__OPT_TMPL );
    outline_15_var__OPT_TMPL = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__OPT_NV_TMPL );
    Py_DECREF( outline_15_var__OPT_NV_TMPL );
    outline_15_var__OPT_NV_TMPL = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__DEFAULT_INTERPOLATION );
    Py_DECREF( outline_15_var__DEFAULT_INTERPOLATION );
    outline_15_var__DEFAULT_INTERPOLATION = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_SECTCRE );
    Py_DECREF( outline_15_var_SECTCRE );
    outline_15_var_SECTCRE = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_OPTCRE );
    Py_DECREF( outline_15_var_OPTCRE );
    outline_15_var_OPTCRE = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_OPTCRE_NV );
    Py_DECREF( outline_15_var_OPTCRE_NV );
    outline_15_var_OPTCRE_NV = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_NONSPACECRE );
    Py_DECREF( outline_15_var_NONSPACECRE );
    outline_15_var_NONSPACECRE = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_BOOLEAN_STATES );
    Py_DECREF( outline_15_var_BOOLEAN_STATES );
    outline_15_var_BOOLEAN_STATES = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var___init__ );
    Py_DECREF( outline_15_var___init__ );
    outline_15_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_defaults );
    Py_DECREF( outline_15_var_defaults );
    outline_15_var_defaults = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_sections );
    Py_DECREF( outline_15_var_sections );
    outline_15_var_sections = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_add_section );
    Py_DECREF( outline_15_var_add_section );
    outline_15_var_add_section = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_has_section );
    Py_DECREF( outline_15_var_has_section );
    outline_15_var_has_section = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_options );
    Py_DECREF( outline_15_var_options );
    outline_15_var_options = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_read );
    Py_DECREF( outline_15_var_read );
    outline_15_var_read = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_read_file );
    Py_DECREF( outline_15_var_read_file );
    outline_15_var_read_file = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_read_string );
    Py_DECREF( outline_15_var_read_string );
    outline_15_var_read_string = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_read_dict );
    Py_DECREF( outline_15_var_read_dict );
    outline_15_var_read_dict = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_readfp );
    Py_DECREF( outline_15_var_readfp );
    outline_15_var_readfp = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_get );
    Py_DECREF( outline_15_var_get );
    outline_15_var_get = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__get );
    Py_DECREF( outline_15_var__get );
    outline_15_var__get = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__get_conv );
    Py_DECREF( outline_15_var__get_conv );
    outline_15_var__get_conv = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_getint );
    Py_DECREF( outline_15_var_getint );
    outline_15_var_getint = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_getfloat );
    Py_DECREF( outline_15_var_getfloat );
    outline_15_var_getfloat = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_getboolean );
    Py_DECREF( outline_15_var_getboolean );
    outline_15_var_getboolean = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_items );
    Py_DECREF( outline_15_var_items );
    outline_15_var_items = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_popitem );
    Py_DECREF( outline_15_var_popitem );
    outline_15_var_popitem = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_optionxform );
    Py_DECREF( outline_15_var_optionxform );
    outline_15_var_optionxform = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_has_option );
    Py_DECREF( outline_15_var_has_option );
    outline_15_var_has_option = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_set );
    Py_DECREF( outline_15_var_set );
    outline_15_var_set = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_write );
    Py_DECREF( outline_15_var_write );
    outline_15_var_write = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__write_section );
    Py_DECREF( outline_15_var__write_section );
    outline_15_var__write_section = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_remove_option );
    Py_DECREF( outline_15_var_remove_option );
    outline_15_var_remove_option = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_remove_section );
    Py_DECREF( outline_15_var_remove_section );
    outline_15_var_remove_section = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var___getitem__ );
    Py_DECREF( outline_15_var___getitem__ );
    outline_15_var___getitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var___setitem__ );
    Py_DECREF( outline_15_var___setitem__ );
    outline_15_var___setitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var___delitem__ );
    Py_DECREF( outline_15_var___delitem__ );
    outline_15_var___delitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var___contains__ );
    Py_DECREF( outline_15_var___contains__ );
    outline_15_var___contains__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var___len__ );
    Py_DECREF( outline_15_var___len__ );
    outline_15_var___len__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var___iter__ );
    Py_DECREF( outline_15_var___iter__ );
    outline_15_var___iter__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__read );
    Py_DECREF( outline_15_var__read );
    outline_15_var__read = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__join_multiline_values );
    Py_DECREF( outline_15_var__join_multiline_values );
    outline_15_var__join_multiline_values = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__handle_error );
    Py_DECREF( outline_15_var__handle_error );
    outline_15_var__handle_error = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__unify_values );
    Py_DECREF( outline_15_var__unify_values );
    outline_15_var__unify_values = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__convert_to_boolean );
    Py_DECREF( outline_15_var__convert_to_boolean );
    outline_15_var__convert_to_boolean = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__validate_value_types );
    Py_DECREF( outline_15_var__validate_value_types );
    outline_15_var__validate_value_types = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var_converters );
    Py_DECREF( outline_15_var_converters );
    outline_15_var_converters = NULL;

    goto outline_result_30;
    // Exception handler code:
    try_except_handler_61:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_keeper_lineno_35 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_15_var___module__ );
    Py_DECREF( outline_15_var___module__ );
    outline_15_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var___doc__ );
    Py_DECREF( outline_15_var___doc__ );
    outline_15_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__SECT_TMPL );
    Py_DECREF( outline_15_var__SECT_TMPL );
    outline_15_var__SECT_TMPL = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__OPT_TMPL );
    Py_DECREF( outline_15_var__OPT_TMPL );
    outline_15_var__OPT_TMPL = NULL;

    CHECK_OBJECT( (PyObject *)outline_15_var__OPT_NV_TMPL );
    Py_DECREF( outline_15_var__OPT_NV_TMPL );
    outline_15_var__OPT_NV_TMPL = NULL;

    Py_XDECREF( outline_15_var__DEFAULT_INTERPOLATION );
    outline_15_var__DEFAULT_INTERPOLATION = NULL;

    Py_XDECREF( outline_15_var_SECTCRE );
    outline_15_var_SECTCRE = NULL;

    Py_XDECREF( outline_15_var_OPTCRE );
    outline_15_var_OPTCRE = NULL;

    Py_XDECREF( outline_15_var_OPTCRE_NV );
    outline_15_var_OPTCRE_NV = NULL;

    Py_XDECREF( outline_15_var_NONSPACECRE );
    outline_15_var_NONSPACECRE = NULL;

    Py_XDECREF( outline_15_var_BOOLEAN_STATES );
    outline_15_var_BOOLEAN_STATES = NULL;

    Py_XDECREF( outline_15_var___init__ );
    outline_15_var___init__ = NULL;

    Py_XDECREF( outline_15_var_defaults );
    outline_15_var_defaults = NULL;

    Py_XDECREF( outline_15_var_sections );
    outline_15_var_sections = NULL;

    Py_XDECREF( outline_15_var_add_section );
    outline_15_var_add_section = NULL;

    Py_XDECREF( outline_15_var_has_section );
    outline_15_var_has_section = NULL;

    Py_XDECREF( outline_15_var_options );
    outline_15_var_options = NULL;

    Py_XDECREF( outline_15_var_read );
    outline_15_var_read = NULL;

    Py_XDECREF( outline_15_var_read_file );
    outline_15_var_read_file = NULL;

    Py_XDECREF( outline_15_var_read_string );
    outline_15_var_read_string = NULL;

    Py_XDECREF( outline_15_var_read_dict );
    outline_15_var_read_dict = NULL;

    Py_XDECREF( outline_15_var_readfp );
    outline_15_var_readfp = NULL;

    Py_XDECREF( outline_15_var_get );
    outline_15_var_get = NULL;

    Py_XDECREF( outline_15_var__get );
    outline_15_var__get = NULL;

    Py_XDECREF( outline_15_var__get_conv );
    outline_15_var__get_conv = NULL;

    Py_XDECREF( outline_15_var_getint );
    outline_15_var_getint = NULL;

    Py_XDECREF( outline_15_var_getfloat );
    outline_15_var_getfloat = NULL;

    Py_XDECREF( outline_15_var_getboolean );
    outline_15_var_getboolean = NULL;

    Py_XDECREF( outline_15_var_items );
    outline_15_var_items = NULL;

    Py_XDECREF( outline_15_var_popitem );
    outline_15_var_popitem = NULL;

    Py_XDECREF( outline_15_var_optionxform );
    outline_15_var_optionxform = NULL;

    Py_XDECREF( outline_15_var_has_option );
    outline_15_var_has_option = NULL;

    Py_XDECREF( outline_15_var_set );
    outline_15_var_set = NULL;

    Py_XDECREF( outline_15_var_write );
    outline_15_var_write = NULL;

    Py_XDECREF( outline_15_var__write_section );
    outline_15_var__write_section = NULL;

    Py_XDECREF( outline_15_var_remove_option );
    outline_15_var_remove_option = NULL;

    Py_XDECREF( outline_15_var_remove_section );
    outline_15_var_remove_section = NULL;

    Py_XDECREF( outline_15_var___getitem__ );
    outline_15_var___getitem__ = NULL;

    Py_XDECREF( outline_15_var___setitem__ );
    outline_15_var___setitem__ = NULL;

    Py_XDECREF( outline_15_var___delitem__ );
    outline_15_var___delitem__ = NULL;

    Py_XDECREF( outline_15_var___contains__ );
    outline_15_var___contains__ = NULL;

    Py_XDECREF( outline_15_var___len__ );
    outline_15_var___len__ = NULL;

    Py_XDECREF( outline_15_var___iter__ );
    outline_15_var___iter__ = NULL;

    Py_XDECREF( outline_15_var__read );
    outline_15_var__read = NULL;

    Py_XDECREF( outline_15_var__join_multiline_values );
    outline_15_var__join_multiline_values = NULL;

    Py_XDECREF( outline_15_var__handle_error );
    outline_15_var__handle_error = NULL;

    Py_XDECREF( outline_15_var__unify_values );
    outline_15_var__unify_values = NULL;

    Py_XDECREF( outline_15_var__convert_to_boolean );
    outline_15_var__convert_to_boolean = NULL;

    Py_XDECREF( outline_15_var__validate_value_types );
    outline_15_var__validate_value_types = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_35;
    exception_value = exception_keeper_value_35;
    exception_tb = exception_keeper_tb_35;
    exception_lineno = exception_keeper_lineno_35;

    goto outline_exception_5;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_5:;
    exception_lineno = 549;
    goto try_except_handler_60;
    outline_result_30:;
    tmp_assign_source_177 = tmp_outline_return_value_30;
    assert( tmp_class_creation_16__class_dict == NULL );
    tmp_class_creation_16__class_dict = tmp_assign_source_177;

    tmp_compare_left_16 = const_str_plain___metaclass__;
    tmp_compare_right_16 = tmp_class_creation_16__class_dict;

    CHECK_OBJECT( tmp_compare_right_16 );
    tmp_cmp_In_16 = PySequence_Contains( tmp_compare_right_16, tmp_compare_left_16 );
    assert( !(tmp_cmp_In_16 == -1) );
    if ( tmp_cmp_In_16 == 1 )
    {
        goto condexpr_true_16;
    }
    else
    {
        goto condexpr_false_16;
    }
    condexpr_true_16:;
    tmp_dict_name_16 = tmp_class_creation_16__class_dict;

    CHECK_OBJECT( tmp_dict_name_16 );
    tmp_key_name_16 = const_str_plain___metaclass__;
    tmp_assign_source_228 = DICT_GET_ITEM( tmp_dict_name_16, tmp_key_name_16 );
    if ( tmp_assign_source_228 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 549;

        goto try_except_handler_60;
    }
    goto condexpr_end_16;
    condexpr_false_16:;
    tmp_subscribed_name_15 = tmp_class_creation_16__bases;

    CHECK_OBJECT( tmp_subscribed_name_15 );
    tmp_subscript_name_15 = const_int_0;
    tmp_assign_source_229 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
    if ( tmp_assign_source_229 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 549;

        goto try_except_handler_60;
    }
    assert( tmp_select_metaclass_16__base == NULL );
    tmp_select_metaclass_16__base = tmp_assign_source_229;

    // Tried code:
    // Tried code:
    tmp_source_name_23 = tmp_select_metaclass_16__base;

    CHECK_OBJECT( tmp_source_name_23 );
    tmp_outline_return_value_31 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_23 );
    if ( tmp_outline_return_value_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 549;

        goto try_except_handler_63;
    }
    goto try_return_handler_62;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_63:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_keeper_lineno_36 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_36 );
    Py_XDECREF( exception_keeper_value_36 );
    Py_XDECREF( exception_keeper_tb_36 );
    tmp_type_arg_15 = tmp_select_metaclass_16__base;

    CHECK_OBJECT( tmp_type_arg_15 );
    tmp_outline_return_value_31 = BUILTIN_TYPE1( tmp_type_arg_15 );
    assert( tmp_outline_return_value_31 != NULL );
    goto try_return_handler_62;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_62:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_16__base );
    Py_DECREF( tmp_select_metaclass_16__base );
    tmp_select_metaclass_16__base = NULL;

    goto outline_result_31;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_16__base );
    Py_DECREF( tmp_select_metaclass_16__base );
    tmp_select_metaclass_16__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_31:;
    tmp_assign_source_228 = tmp_outline_return_value_31;
    condexpr_end_16:;
    assert( tmp_class_creation_16__metaclass == NULL );
    tmp_class_creation_16__metaclass = tmp_assign_source_228;

    tmp_called_name_25 = tmp_class_creation_16__metaclass;

    CHECK_OBJECT( tmp_called_name_25 );
    tmp_args_element_name_55 = const_str_plain_RawConfigParser;
    tmp_args_element_name_56 = tmp_class_creation_16__bases;

    CHECK_OBJECT( tmp_args_element_name_56 );
    tmp_args_element_name_57 = tmp_class_creation_16__class_dict;

    CHECK_OBJECT( tmp_args_element_name_57 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 549;
    {
        PyObject *call_args[] = { tmp_args_element_name_55, tmp_args_element_name_56, tmp_args_element_name_57 };
        tmp_assign_source_230 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_25, call_args );
    }

    if ( tmp_assign_source_230 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 549;

        goto try_except_handler_60;
    }
    assert( tmp_class_creation_16__class == NULL );
    tmp_class_creation_16__class = tmp_assign_source_230;

    goto try_end_17;
    // Exception handler code:
    try_except_handler_60:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_keeper_lineno_37 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_16__bases );
    tmp_class_creation_16__bases = NULL;

    Py_XDECREF( tmp_class_creation_16__class_dict );
    tmp_class_creation_16__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_16__metaclass );
    tmp_class_creation_16__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_37;
    exception_value = exception_keeper_value_37;
    exception_tb = exception_keeper_tb_37;
    exception_lineno = exception_keeper_lineno_37;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    tmp_assign_source_231 = tmp_class_creation_16__class;

    CHECK_OBJECT( tmp_assign_source_231 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_RawConfigParser, tmp_assign_source_231 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__class );
    Py_DECREF( tmp_class_creation_16__class );
    tmp_class_creation_16__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__bases );
    Py_DECREF( tmp_class_creation_16__bases );
    tmp_class_creation_16__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__class_dict );
    Py_DECREF( tmp_class_creation_16__class_dict );
    tmp_class_creation_16__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__metaclass );
    Py_DECREF( tmp_class_creation_16__metaclass );
    tmp_class_creation_16__metaclass = NULL;

    // Tried code:
    tmp_assign_source_232 = PyTuple_New( 1 );
    tmp_tuple_element_18 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_RawConfigParser );

    if (unlikely( tmp_tuple_element_18 == NULL ))
    {
        tmp_tuple_element_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RawConfigParser );
    }

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_232 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "RawConfigParser" );
        exception_tb = NULL;

        exception_lineno = 1230;

        goto try_except_handler_64;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_assign_source_232, 0, tmp_tuple_element_18 );
    assert( tmp_class_creation_17__bases == NULL );
    tmp_class_creation_17__bases = tmp_assign_source_232;

    tmp_assign_source_234 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_16_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_234 );
    outline_16_var___module__ = tmp_assign_source_234;

    tmp_assign_source_235 = const_unicode_digest_fa3d841f27a9aa146426853cb2dc72ad;
    assert( outline_16_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_235 );
    outline_16_var___doc__ = tmp_assign_source_235;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1d483adeff710e212cffa37f5abd1161_7, codeobj_1d483adeff710e212cffa37f5abd1161, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1d483adeff710e212cffa37f5abd1161_7 = cache_frame_1d483adeff710e212cffa37f5abd1161_7;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1d483adeff710e212cffa37f5abd1161_7 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1d483adeff710e212cffa37f5abd1161_7 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_26 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_BasicInterpolation );

    if (unlikely( tmp_called_name_26 == NULL ))
    {
        tmp_called_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BasicInterpolation );
    }

    if ( tmp_called_name_26 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "BasicInterpolation" );
        exception_tb = NULL;

        exception_lineno = 1233;
        type_description_2 = "ooNNN";
        goto frame_exception_exit_7;
    }

    frame_1d483adeff710e212cffa37f5abd1161_7->m_frame.f_lineno = 1233;
    tmp_assign_source_236 = CALL_FUNCTION_NO_ARGS( tmp_called_name_26 );
    if ( tmp_assign_source_236 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1233;
        type_description_2 = "ooNNN";
        goto frame_exception_exit_7;
    }
    assert( outline_16_var__DEFAULT_INTERPOLATION == NULL );
    outline_16_var__DEFAULT_INTERPOLATION = tmp_assign_source_236;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_1d483adeff710e212cffa37f5abd1161_7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_6;

    frame_exception_exit_7:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1d483adeff710e212cffa37f5abd1161_7 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1d483adeff710e212cffa37f5abd1161_7, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1d483adeff710e212cffa37f5abd1161_7->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1d483adeff710e212cffa37f5abd1161_7, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1d483adeff710e212cffa37f5abd1161_7,
        type_description_2,
        outline_16_var___module__,
        outline_16_var___doc__,
        outline_16_var__DEFAULT_INTERPOLATION,
        NULL,
        NULL
    );


    // Release cached frame.
    if ( frame_1d483adeff710e212cffa37f5abd1161_7 == cache_frame_1d483adeff710e212cffa37f5abd1161_7 )
    {
        Py_DECREF( frame_1d483adeff710e212cffa37f5abd1161_7 );
    }
    cache_frame_1d483adeff710e212cffa37f5abd1161_7 = NULL;

    assertFrameObject( frame_1d483adeff710e212cffa37f5abd1161_7 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_6;

    frame_no_exception_6:;

    goto skip_nested_handling_6;
    nested_frame_exit_6:;

    goto try_except_handler_65;
    skip_nested_handling_6:;
    tmp_defaults_14 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_14 );
    tmp_assign_source_237 = MAKE_FUNCTION_backports$configparser$$$function_67_set( tmp_defaults_14 );
    assert( outline_16_var_set == NULL );
    outline_16_var_set = tmp_assign_source_237;

    tmp_assign_source_238 = MAKE_FUNCTION_backports$configparser$$$function_68_add_section(  );
    assert( outline_16_var_add_section == NULL );
    outline_16_var_add_section = tmp_assign_source_238;

    tmp_outline_return_value_32 = _PyDict_NewPresized( 5 );
    tmp_dict_value_111 = outline_16_var___module__;

    CHECK_OBJECT( tmp_dict_value_111 );
    tmp_dict_key_111 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_32, tmp_dict_key_111, tmp_dict_value_111 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_112 = outline_16_var___doc__;

    CHECK_OBJECT( tmp_dict_value_112 );
    tmp_dict_key_112 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_32, tmp_dict_key_112, tmp_dict_value_112 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_113 = outline_16_var__DEFAULT_INTERPOLATION;

    CHECK_OBJECT( tmp_dict_value_113 );
    tmp_dict_key_113 = const_str_plain__DEFAULT_INTERPOLATION;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_32, tmp_dict_key_113, tmp_dict_value_113 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_114 = outline_16_var_set;

    CHECK_OBJECT( tmp_dict_value_114 );
    tmp_dict_key_114 = const_str_plain_set;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_32, tmp_dict_key_114, tmp_dict_value_114 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_115 = outline_16_var_add_section;

    CHECK_OBJECT( tmp_dict_value_115 );
    tmp_dict_key_115 = const_str_plain_add_section;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_32, tmp_dict_key_115, tmp_dict_value_115 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_65;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_65:;
    CHECK_OBJECT( (PyObject *)outline_16_var___module__ );
    Py_DECREF( outline_16_var___module__ );
    outline_16_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_16_var___doc__ );
    Py_DECREF( outline_16_var___doc__ );
    outline_16_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_16_var__DEFAULT_INTERPOLATION );
    Py_DECREF( outline_16_var__DEFAULT_INTERPOLATION );
    outline_16_var__DEFAULT_INTERPOLATION = NULL;

    CHECK_OBJECT( (PyObject *)outline_16_var_set );
    Py_DECREF( outline_16_var_set );
    outline_16_var_set = NULL;

    CHECK_OBJECT( (PyObject *)outline_16_var_add_section );
    Py_DECREF( outline_16_var_add_section );
    outline_16_var_add_section = NULL;

    goto outline_result_32;
    // Exception handler code:
    try_except_handler_65:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_keeper_lineno_38 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_16_var___module__ );
    Py_DECREF( outline_16_var___module__ );
    outline_16_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_16_var___doc__ );
    Py_DECREF( outline_16_var___doc__ );
    outline_16_var___doc__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_38;
    exception_value = exception_keeper_value_38;
    exception_tb = exception_keeper_tb_38;
    exception_lineno = exception_keeper_lineno_38;

    goto outline_exception_6;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_6:;
    exception_lineno = 1230;
    goto try_except_handler_64;
    outline_result_32:;
    tmp_assign_source_233 = tmp_outline_return_value_32;
    assert( tmp_class_creation_17__class_dict == NULL );
    tmp_class_creation_17__class_dict = tmp_assign_source_233;

    tmp_compare_left_17 = const_str_plain___metaclass__;
    tmp_compare_right_17 = tmp_class_creation_17__class_dict;

    CHECK_OBJECT( tmp_compare_right_17 );
    tmp_cmp_In_17 = PySequence_Contains( tmp_compare_right_17, tmp_compare_left_17 );
    assert( !(tmp_cmp_In_17 == -1) );
    if ( tmp_cmp_In_17 == 1 )
    {
        goto condexpr_true_17;
    }
    else
    {
        goto condexpr_false_17;
    }
    condexpr_true_17:;
    tmp_dict_name_17 = tmp_class_creation_17__class_dict;

    CHECK_OBJECT( tmp_dict_name_17 );
    tmp_key_name_17 = const_str_plain___metaclass__;
    tmp_assign_source_239 = DICT_GET_ITEM( tmp_dict_name_17, tmp_key_name_17 );
    if ( tmp_assign_source_239 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1230;

        goto try_except_handler_64;
    }
    goto condexpr_end_17;
    condexpr_false_17:;
    tmp_subscribed_name_16 = tmp_class_creation_17__bases;

    CHECK_OBJECT( tmp_subscribed_name_16 );
    tmp_subscript_name_16 = const_int_0;
    tmp_assign_source_240 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
    if ( tmp_assign_source_240 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1230;

        goto try_except_handler_64;
    }
    assert( tmp_select_metaclass_17__base == NULL );
    tmp_select_metaclass_17__base = tmp_assign_source_240;

    // Tried code:
    // Tried code:
    tmp_source_name_24 = tmp_select_metaclass_17__base;

    CHECK_OBJECT( tmp_source_name_24 );
    tmp_outline_return_value_33 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_24 );
    if ( tmp_outline_return_value_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1230;

        goto try_except_handler_67;
    }
    goto try_return_handler_66;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_67:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_keeper_lineno_39 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_39 );
    Py_XDECREF( exception_keeper_value_39 );
    Py_XDECREF( exception_keeper_tb_39 );
    tmp_type_arg_16 = tmp_select_metaclass_17__base;

    CHECK_OBJECT( tmp_type_arg_16 );
    tmp_outline_return_value_33 = BUILTIN_TYPE1( tmp_type_arg_16 );
    assert( tmp_outline_return_value_33 != NULL );
    goto try_return_handler_66;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_66:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_17__base );
    Py_DECREF( tmp_select_metaclass_17__base );
    tmp_select_metaclass_17__base = NULL;

    goto outline_result_33;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_17__base );
    Py_DECREF( tmp_select_metaclass_17__base );
    tmp_select_metaclass_17__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_33:;
    tmp_assign_source_239 = tmp_outline_return_value_33;
    condexpr_end_17:;
    assert( tmp_class_creation_17__metaclass == NULL );
    tmp_class_creation_17__metaclass = tmp_assign_source_239;

    tmp_called_name_27 = tmp_class_creation_17__metaclass;

    CHECK_OBJECT( tmp_called_name_27 );
    tmp_args_element_name_58 = const_str_plain_ConfigParser;
    tmp_args_element_name_59 = tmp_class_creation_17__bases;

    CHECK_OBJECT( tmp_args_element_name_59 );
    tmp_args_element_name_60 = tmp_class_creation_17__class_dict;

    CHECK_OBJECT( tmp_args_element_name_60 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 1230;
    {
        PyObject *call_args[] = { tmp_args_element_name_58, tmp_args_element_name_59, tmp_args_element_name_60 };
        tmp_assign_source_241 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_27, call_args );
    }

    if ( tmp_assign_source_241 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1230;

        goto try_except_handler_64;
    }
    assert( tmp_class_creation_17__class == NULL );
    tmp_class_creation_17__class = tmp_assign_source_241;

    goto try_end_18;
    // Exception handler code:
    try_except_handler_64:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_keeper_lineno_40 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_17__bases );
    tmp_class_creation_17__bases = NULL;

    Py_XDECREF( tmp_class_creation_17__class_dict );
    tmp_class_creation_17__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_17__metaclass );
    tmp_class_creation_17__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_40;
    exception_value = exception_keeper_value_40;
    exception_tb = exception_keeper_tb_40;
    exception_lineno = exception_keeper_lineno_40;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    tmp_assign_source_242 = tmp_class_creation_17__class;

    CHECK_OBJECT( tmp_assign_source_242 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ConfigParser, tmp_assign_source_242 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_17__class );
    Py_DECREF( tmp_class_creation_17__class );
    tmp_class_creation_17__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_17__bases );
    Py_DECREF( tmp_class_creation_17__bases );
    tmp_class_creation_17__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_17__class_dict );
    Py_DECREF( tmp_class_creation_17__class_dict );
    tmp_class_creation_17__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_17__metaclass );
    Py_DECREF( tmp_class_creation_17__metaclass );
    tmp_class_creation_17__metaclass = NULL;

    // Tried code:
    tmp_assign_source_243 = PyTuple_New( 1 );
    tmp_tuple_element_19 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ConfigParser );

    if (unlikely( tmp_tuple_element_19 == NULL ))
    {
        tmp_tuple_element_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ConfigParser );
    }

    if ( tmp_tuple_element_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_243 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ConfigParser" );
        exception_tb = NULL;

        exception_lineno = 1249;

        goto try_except_handler_68;
    }

    Py_INCREF( tmp_tuple_element_19 );
    PyTuple_SET_ITEM( tmp_assign_source_243, 0, tmp_tuple_element_19 );
    assert( tmp_class_creation_18__bases == NULL );
    tmp_class_creation_18__bases = tmp_assign_source_243;

    tmp_assign_source_245 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_17_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_245 );
    outline_17_var___module__ = tmp_assign_source_245;

    tmp_assign_source_246 = const_unicode_digest_6e5f27735944d4660becbd9f74916e34;
    assert( outline_17_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_246 );
    outline_17_var___doc__ = tmp_assign_source_246;

    tmp_assign_source_247 = MAKE_FUNCTION_backports$configparser$$$function_69___init__(  );
    assert( outline_17_var___init__ == NULL );
    outline_17_var___init__ = tmp_assign_source_247;

    // Tried code:
    tmp_outline_return_value_34 = _PyDict_NewPresized( 3 );
    tmp_dict_value_116 = outline_17_var___module__;

    CHECK_OBJECT( tmp_dict_value_116 );
    tmp_dict_key_116 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_34, tmp_dict_key_116, tmp_dict_value_116 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_117 = outline_17_var___doc__;

    CHECK_OBJECT( tmp_dict_value_117 );
    tmp_dict_key_117 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_34, tmp_dict_key_117, tmp_dict_value_117 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_118 = outline_17_var___init__;

    CHECK_OBJECT( tmp_dict_value_118 );
    tmp_dict_key_118 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_34, tmp_dict_key_118, tmp_dict_value_118 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_69;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_69:;
    CHECK_OBJECT( (PyObject *)outline_17_var___module__ );
    Py_DECREF( outline_17_var___module__ );
    outline_17_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_17_var___doc__ );
    Py_DECREF( outline_17_var___doc__ );
    outline_17_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_17_var___init__ );
    Py_DECREF( outline_17_var___init__ );
    outline_17_var___init__ = NULL;

    goto outline_result_34;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_17_var___module__ );
    Py_DECREF( outline_17_var___module__ );
    outline_17_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_17_var___doc__ );
    Py_DECREF( outline_17_var___doc__ );
    outline_17_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_17_var___init__ );
    Py_DECREF( outline_17_var___init__ );
    outline_17_var___init__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_34:;
    tmp_assign_source_244 = tmp_outline_return_value_34;
    assert( tmp_class_creation_18__class_dict == NULL );
    tmp_class_creation_18__class_dict = tmp_assign_source_244;

    tmp_compare_left_18 = const_str_plain___metaclass__;
    tmp_compare_right_18 = tmp_class_creation_18__class_dict;

    CHECK_OBJECT( tmp_compare_right_18 );
    tmp_cmp_In_18 = PySequence_Contains( tmp_compare_right_18, tmp_compare_left_18 );
    assert( !(tmp_cmp_In_18 == -1) );
    if ( tmp_cmp_In_18 == 1 )
    {
        goto condexpr_true_18;
    }
    else
    {
        goto condexpr_false_18;
    }
    condexpr_true_18:;
    tmp_dict_name_18 = tmp_class_creation_18__class_dict;

    CHECK_OBJECT( tmp_dict_name_18 );
    tmp_key_name_18 = const_str_plain___metaclass__;
    tmp_assign_source_248 = DICT_GET_ITEM( tmp_dict_name_18, tmp_key_name_18 );
    if ( tmp_assign_source_248 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1249;

        goto try_except_handler_68;
    }
    goto condexpr_end_18;
    condexpr_false_18:;
    tmp_subscribed_name_17 = tmp_class_creation_18__bases;

    CHECK_OBJECT( tmp_subscribed_name_17 );
    tmp_subscript_name_17 = const_int_0;
    tmp_assign_source_249 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
    if ( tmp_assign_source_249 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1249;

        goto try_except_handler_68;
    }
    assert( tmp_select_metaclass_18__base == NULL );
    tmp_select_metaclass_18__base = tmp_assign_source_249;

    // Tried code:
    // Tried code:
    tmp_source_name_25 = tmp_select_metaclass_18__base;

    CHECK_OBJECT( tmp_source_name_25 );
    tmp_outline_return_value_35 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_25 );
    if ( tmp_outline_return_value_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1249;

        goto try_except_handler_71;
    }
    goto try_return_handler_70;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_71:;
    exception_keeper_type_41 = exception_type;
    exception_keeper_value_41 = exception_value;
    exception_keeper_tb_41 = exception_tb;
    exception_keeper_lineno_41 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_41 );
    Py_XDECREF( exception_keeper_value_41 );
    Py_XDECREF( exception_keeper_tb_41 );
    tmp_type_arg_17 = tmp_select_metaclass_18__base;

    CHECK_OBJECT( tmp_type_arg_17 );
    tmp_outline_return_value_35 = BUILTIN_TYPE1( tmp_type_arg_17 );
    assert( tmp_outline_return_value_35 != NULL );
    goto try_return_handler_70;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_70:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_18__base );
    Py_DECREF( tmp_select_metaclass_18__base );
    tmp_select_metaclass_18__base = NULL;

    goto outline_result_35;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_18__base );
    Py_DECREF( tmp_select_metaclass_18__base );
    tmp_select_metaclass_18__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_35:;
    tmp_assign_source_248 = tmp_outline_return_value_35;
    condexpr_end_18:;
    assert( tmp_class_creation_18__metaclass == NULL );
    tmp_class_creation_18__metaclass = tmp_assign_source_248;

    tmp_called_name_28 = tmp_class_creation_18__metaclass;

    CHECK_OBJECT( tmp_called_name_28 );
    tmp_args_element_name_61 = const_str_plain_SafeConfigParser;
    tmp_args_element_name_62 = tmp_class_creation_18__bases;

    CHECK_OBJECT( tmp_args_element_name_62 );
    tmp_args_element_name_63 = tmp_class_creation_18__class_dict;

    CHECK_OBJECT( tmp_args_element_name_63 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 1249;
    {
        PyObject *call_args[] = { tmp_args_element_name_61, tmp_args_element_name_62, tmp_args_element_name_63 };
        tmp_assign_source_250 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_28, call_args );
    }

    if ( tmp_assign_source_250 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1249;

        goto try_except_handler_68;
    }
    assert( tmp_class_creation_18__class == NULL );
    tmp_class_creation_18__class = tmp_assign_source_250;

    goto try_end_19;
    // Exception handler code:
    try_except_handler_68:;
    exception_keeper_type_42 = exception_type;
    exception_keeper_value_42 = exception_value;
    exception_keeper_tb_42 = exception_tb;
    exception_keeper_lineno_42 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_18__bases );
    tmp_class_creation_18__bases = NULL;

    Py_XDECREF( tmp_class_creation_18__class_dict );
    tmp_class_creation_18__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_18__metaclass );
    tmp_class_creation_18__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_42;
    exception_value = exception_keeper_value_42;
    exception_tb = exception_keeper_tb_42;
    exception_lineno = exception_keeper_lineno_42;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    tmp_assign_source_251 = tmp_class_creation_18__class;

    CHECK_OBJECT( tmp_assign_source_251 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_SafeConfigParser, tmp_assign_source_251 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_18__class );
    Py_DECREF( tmp_class_creation_18__class );
    tmp_class_creation_18__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_18__bases );
    Py_DECREF( tmp_class_creation_18__bases );
    tmp_class_creation_18__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_18__class_dict );
    Py_DECREF( tmp_class_creation_18__class_dict );
    tmp_class_creation_18__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_18__metaclass );
    Py_DECREF( tmp_class_creation_18__metaclass );
    tmp_class_creation_18__metaclass = NULL;

    // Tried code:
    tmp_assign_source_252 = PyTuple_New( 1 );
    tmp_tuple_element_20 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MutableMapping );

    if (unlikely( tmp_tuple_element_20 == NULL ))
    {
        tmp_tuple_element_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MutableMapping );
    }

    if ( tmp_tuple_element_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_252 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MutableMapping" );
        exception_tb = NULL;

        exception_lineno = 1262;

        goto try_except_handler_72;
    }

    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_assign_source_252, 0, tmp_tuple_element_20 );
    assert( tmp_class_creation_19__bases == NULL );
    tmp_class_creation_19__bases = tmp_assign_source_252;

    tmp_assign_source_254 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_18_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_254 );
    outline_18_var___module__ = tmp_assign_source_254;

    tmp_assign_source_255 = const_unicode_digest_4f2f59c5fd34e832e99e1afae744a1eb;
    assert( outline_18_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_255 );
    outline_18_var___doc__ = tmp_assign_source_255;

    tmp_assign_source_256 = MAKE_FUNCTION_backports$configparser$$$function_70___init__(  );
    assert( outline_18_var___init__ == NULL );
    outline_18_var___init__ = tmp_assign_source_256;

    tmp_assign_source_257 = MAKE_FUNCTION_backports$configparser$$$function_71___repr__(  );
    assert( outline_18_var___repr__ == NULL );
    outline_18_var___repr__ = tmp_assign_source_257;

    tmp_assign_source_258 = MAKE_FUNCTION_backports$configparser$$$function_72___getitem__(  );
    assert( outline_18_var___getitem__ == NULL );
    outline_18_var___getitem__ = tmp_assign_source_258;

    tmp_assign_source_259 = MAKE_FUNCTION_backports$configparser$$$function_73___setitem__(  );
    assert( outline_18_var___setitem__ == NULL );
    outline_18_var___setitem__ = tmp_assign_source_259;

    tmp_assign_source_260 = MAKE_FUNCTION_backports$configparser$$$function_74___delitem__(  );
    assert( outline_18_var___delitem__ == NULL );
    outline_18_var___delitem__ = tmp_assign_source_260;

    tmp_assign_source_261 = MAKE_FUNCTION_backports$configparser$$$function_75___contains__(  );
    assert( outline_18_var___contains__ == NULL );
    outline_18_var___contains__ = tmp_assign_source_261;

    tmp_assign_source_262 = MAKE_FUNCTION_backports$configparser$$$function_76___len__(  );
    assert( outline_18_var___len__ == NULL );
    outline_18_var___len__ = tmp_assign_source_262;

    tmp_assign_source_263 = MAKE_FUNCTION_backports$configparser$$$function_77___iter__(  );
    assert( outline_18_var___iter__ == NULL );
    outline_18_var___iter__ = tmp_assign_source_263;

    tmp_assign_source_264 = MAKE_FUNCTION_backports$configparser$$$function_78__options(  );
    assert( outline_18_var__options == NULL );
    outline_18_var__options = tmp_assign_source_264;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f39f8e2fa34d8c992a5aaf1d624dc002_8, codeobj_f39f8e2fa34d8c992a5aaf1d624dc002, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 = cache_frame_f39f8e2fa34d8c992a5aaf1d624dc002_8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_29 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_64 = MAKE_FUNCTION_backports$configparser$$$function_79_parser(  );
    frame_f39f8e2fa34d8c992a5aaf1d624dc002_8->m_frame.f_lineno = 1306;
    {
        PyObject *call_args[] = { tmp_args_element_name_64 };
        tmp_assign_source_265 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_29, call_args );
    }

    Py_DECREF( tmp_args_element_name_64 );
    if ( tmp_assign_source_265 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1306;
        type_description_2 = "oooooooooooNNN";
        goto frame_exception_exit_8;
    }
    assert( outline_18_var_parser == NULL );
    outline_18_var_parser = tmp_assign_source_265;

    tmp_called_name_30 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_65 = MAKE_FUNCTION_backports$configparser$$$function_80_name(  );
    frame_f39f8e2fa34d8c992a5aaf1d624dc002_8->m_frame.f_lineno = 1311;
    {
        PyObject *call_args[] = { tmp_args_element_name_65 };
        tmp_assign_source_266 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_30, call_args );
    }

    Py_DECREF( tmp_args_element_name_65 );
    if ( tmp_assign_source_266 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1311;
        type_description_2 = "ooooooooooooNN";
        goto frame_exception_exit_8;
    }
    assert( outline_18_var_name == NULL );
    outline_18_var_name = tmp_assign_source_266;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_7;

    frame_exception_exit_8:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f39f8e2fa34d8c992a5aaf1d624dc002_8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f39f8e2fa34d8c992a5aaf1d624dc002_8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f39f8e2fa34d8c992a5aaf1d624dc002_8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f39f8e2fa34d8c992a5aaf1d624dc002_8,
        type_description_2,
        outline_18_var___module__,
        outline_18_var___doc__,
        outline_18_var___init__,
        outline_18_var___repr__,
        outline_18_var___getitem__,
        outline_18_var___setitem__,
        outline_18_var___delitem__,
        outline_18_var___contains__,
        outline_18_var___len__,
        outline_18_var___iter__,
        outline_18_var__options,
        outline_18_var_parser,
        outline_18_var_name,
        NULL
    );


    // Release cached frame.
    if ( frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 == cache_frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 )
    {
        Py_DECREF( frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 );
    }
    cache_frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 = NULL;

    assertFrameObject( frame_f39f8e2fa34d8c992a5aaf1d624dc002_8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_7;

    frame_no_exception_7:;

    goto skip_nested_handling_7;
    nested_frame_exit_7:;

    goto try_except_handler_73;
    skip_nested_handling_7:;
    tmp_defaults_15 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_15 );
    tmp_assign_source_267 = MAKE_FUNCTION_backports$configparser$$$function_81_get( tmp_defaults_15 );
    assert( outline_18_var_get == NULL );
    outline_18_var_get = tmp_assign_source_267;

    tmp_outline_return_value_36 = _PyDict_NewPresized( 14 );
    tmp_dict_value_119 = outline_18_var___module__;

    CHECK_OBJECT( tmp_dict_value_119 );
    tmp_dict_key_119 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_119, tmp_dict_value_119 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_120 = outline_18_var___doc__;

    CHECK_OBJECT( tmp_dict_value_120 );
    tmp_dict_key_120 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_120, tmp_dict_value_120 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_121 = outline_18_var___init__;

    CHECK_OBJECT( tmp_dict_value_121 );
    tmp_dict_key_121 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_121, tmp_dict_value_121 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_122 = outline_18_var___repr__;

    CHECK_OBJECT( tmp_dict_value_122 );
    tmp_dict_key_122 = const_str_plain___repr__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_122, tmp_dict_value_122 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_123 = outline_18_var___getitem__;

    CHECK_OBJECT( tmp_dict_value_123 );
    tmp_dict_key_123 = const_str_plain___getitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_123, tmp_dict_value_123 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_124 = outline_18_var___setitem__;

    CHECK_OBJECT( tmp_dict_value_124 );
    tmp_dict_key_124 = const_str_plain___setitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_124, tmp_dict_value_124 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_125 = outline_18_var___delitem__;

    CHECK_OBJECT( tmp_dict_value_125 );
    tmp_dict_key_125 = const_str_plain___delitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_125, tmp_dict_value_125 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_126 = outline_18_var___contains__;

    CHECK_OBJECT( tmp_dict_value_126 );
    tmp_dict_key_126 = const_str_plain___contains__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_126, tmp_dict_value_126 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_127 = outline_18_var___len__;

    CHECK_OBJECT( tmp_dict_value_127 );
    tmp_dict_key_127 = const_str_plain___len__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_127, tmp_dict_value_127 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_128 = outline_18_var___iter__;

    CHECK_OBJECT( tmp_dict_value_128 );
    tmp_dict_key_128 = const_str_plain___iter__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_128, tmp_dict_value_128 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_129 = outline_18_var__options;

    CHECK_OBJECT( tmp_dict_value_129 );
    tmp_dict_key_129 = const_str_plain__options;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_129, tmp_dict_value_129 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_130 = outline_18_var_parser;

    CHECK_OBJECT( tmp_dict_value_130 );
    tmp_dict_key_130 = const_str_plain_parser;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_130, tmp_dict_value_130 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_131 = outline_18_var_name;

    CHECK_OBJECT( tmp_dict_value_131 );
    tmp_dict_key_131 = const_str_plain_name;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_131, tmp_dict_value_131 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_132 = outline_18_var_get;

    CHECK_OBJECT( tmp_dict_value_132 );
    tmp_dict_key_132 = const_str_plain_get;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_36, tmp_dict_key_132, tmp_dict_value_132 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_73;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_73:;
    CHECK_OBJECT( (PyObject *)outline_18_var___module__ );
    Py_DECREF( outline_18_var___module__ );
    outline_18_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___doc__ );
    Py_DECREF( outline_18_var___doc__ );
    outline_18_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___init__ );
    Py_DECREF( outline_18_var___init__ );
    outline_18_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___repr__ );
    Py_DECREF( outline_18_var___repr__ );
    outline_18_var___repr__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___getitem__ );
    Py_DECREF( outline_18_var___getitem__ );
    outline_18_var___getitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___setitem__ );
    Py_DECREF( outline_18_var___setitem__ );
    outline_18_var___setitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___delitem__ );
    Py_DECREF( outline_18_var___delitem__ );
    outline_18_var___delitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___contains__ );
    Py_DECREF( outline_18_var___contains__ );
    outline_18_var___contains__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___len__ );
    Py_DECREF( outline_18_var___len__ );
    outline_18_var___len__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___iter__ );
    Py_DECREF( outline_18_var___iter__ );
    outline_18_var___iter__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var__options );
    Py_DECREF( outline_18_var__options );
    outline_18_var__options = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var_parser );
    Py_DECREF( outline_18_var_parser );
    outline_18_var_parser = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var_name );
    Py_DECREF( outline_18_var_name );
    outline_18_var_name = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var_get );
    Py_DECREF( outline_18_var_get );
    outline_18_var_get = NULL;

    goto outline_result_36;
    // Exception handler code:
    try_except_handler_73:;
    exception_keeper_type_43 = exception_type;
    exception_keeper_value_43 = exception_value;
    exception_keeper_tb_43 = exception_tb;
    exception_keeper_lineno_43 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_18_var___module__ );
    Py_DECREF( outline_18_var___module__ );
    outline_18_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___doc__ );
    Py_DECREF( outline_18_var___doc__ );
    outline_18_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___init__ );
    Py_DECREF( outline_18_var___init__ );
    outline_18_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___repr__ );
    Py_DECREF( outline_18_var___repr__ );
    outline_18_var___repr__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___getitem__ );
    Py_DECREF( outline_18_var___getitem__ );
    outline_18_var___getitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___setitem__ );
    Py_DECREF( outline_18_var___setitem__ );
    outline_18_var___setitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___delitem__ );
    Py_DECREF( outline_18_var___delitem__ );
    outline_18_var___delitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___contains__ );
    Py_DECREF( outline_18_var___contains__ );
    outline_18_var___contains__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___len__ );
    Py_DECREF( outline_18_var___len__ );
    outline_18_var___len__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var___iter__ );
    Py_DECREF( outline_18_var___iter__ );
    outline_18_var___iter__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_18_var__options );
    Py_DECREF( outline_18_var__options );
    outline_18_var__options = NULL;

    Py_XDECREF( outline_18_var_parser );
    outline_18_var_parser = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_43;
    exception_value = exception_keeper_value_43;
    exception_tb = exception_keeper_tb_43;
    exception_lineno = exception_keeper_lineno_43;

    goto outline_exception_7;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_7:;
    exception_lineno = 1262;
    goto try_except_handler_72;
    outline_result_36:;
    tmp_assign_source_253 = tmp_outline_return_value_36;
    assert( tmp_class_creation_19__class_dict == NULL );
    tmp_class_creation_19__class_dict = tmp_assign_source_253;

    tmp_compare_left_19 = const_str_plain___metaclass__;
    tmp_compare_right_19 = tmp_class_creation_19__class_dict;

    CHECK_OBJECT( tmp_compare_right_19 );
    tmp_cmp_In_19 = PySequence_Contains( tmp_compare_right_19, tmp_compare_left_19 );
    assert( !(tmp_cmp_In_19 == -1) );
    if ( tmp_cmp_In_19 == 1 )
    {
        goto condexpr_true_19;
    }
    else
    {
        goto condexpr_false_19;
    }
    condexpr_true_19:;
    tmp_dict_name_19 = tmp_class_creation_19__class_dict;

    CHECK_OBJECT( tmp_dict_name_19 );
    tmp_key_name_19 = const_str_plain___metaclass__;
    tmp_assign_source_268 = DICT_GET_ITEM( tmp_dict_name_19, tmp_key_name_19 );
    if ( tmp_assign_source_268 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1262;

        goto try_except_handler_72;
    }
    goto condexpr_end_19;
    condexpr_false_19:;
    tmp_subscribed_name_18 = tmp_class_creation_19__bases;

    CHECK_OBJECT( tmp_subscribed_name_18 );
    tmp_subscript_name_18 = const_int_0;
    tmp_assign_source_269 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
    if ( tmp_assign_source_269 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1262;

        goto try_except_handler_72;
    }
    assert( tmp_select_metaclass_19__base == NULL );
    tmp_select_metaclass_19__base = tmp_assign_source_269;

    // Tried code:
    // Tried code:
    tmp_source_name_26 = tmp_select_metaclass_19__base;

    CHECK_OBJECT( tmp_source_name_26 );
    tmp_outline_return_value_37 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_26 );
    if ( tmp_outline_return_value_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1262;

        goto try_except_handler_75;
    }
    goto try_return_handler_74;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_75:;
    exception_keeper_type_44 = exception_type;
    exception_keeper_value_44 = exception_value;
    exception_keeper_tb_44 = exception_tb;
    exception_keeper_lineno_44 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_44 );
    Py_XDECREF( exception_keeper_value_44 );
    Py_XDECREF( exception_keeper_tb_44 );
    tmp_type_arg_18 = tmp_select_metaclass_19__base;

    CHECK_OBJECT( tmp_type_arg_18 );
    tmp_outline_return_value_37 = BUILTIN_TYPE1( tmp_type_arg_18 );
    assert( tmp_outline_return_value_37 != NULL );
    goto try_return_handler_74;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_74:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_19__base );
    Py_DECREF( tmp_select_metaclass_19__base );
    tmp_select_metaclass_19__base = NULL;

    goto outline_result_37;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_19__base );
    Py_DECREF( tmp_select_metaclass_19__base );
    tmp_select_metaclass_19__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_37:;
    tmp_assign_source_268 = tmp_outline_return_value_37;
    condexpr_end_19:;
    assert( tmp_class_creation_19__metaclass == NULL );
    tmp_class_creation_19__metaclass = tmp_assign_source_268;

    tmp_called_name_31 = tmp_class_creation_19__metaclass;

    CHECK_OBJECT( tmp_called_name_31 );
    tmp_args_element_name_66 = const_str_plain_SectionProxy;
    tmp_args_element_name_67 = tmp_class_creation_19__bases;

    CHECK_OBJECT( tmp_args_element_name_67 );
    tmp_args_element_name_68 = tmp_class_creation_19__class_dict;

    CHECK_OBJECT( tmp_args_element_name_68 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 1262;
    {
        PyObject *call_args[] = { tmp_args_element_name_66, tmp_args_element_name_67, tmp_args_element_name_68 };
        tmp_assign_source_270 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_31, call_args );
    }

    if ( tmp_assign_source_270 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1262;

        goto try_except_handler_72;
    }
    assert( tmp_class_creation_19__class == NULL );
    tmp_class_creation_19__class = tmp_assign_source_270;

    goto try_end_20;
    // Exception handler code:
    try_except_handler_72:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_keeper_lineno_45 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_19__bases );
    tmp_class_creation_19__bases = NULL;

    Py_XDECREF( tmp_class_creation_19__class_dict );
    tmp_class_creation_19__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_19__metaclass );
    tmp_class_creation_19__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_45;
    exception_value = exception_keeper_value_45;
    exception_tb = exception_keeper_tb_45;
    exception_lineno = exception_keeper_lineno_45;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    tmp_assign_source_271 = tmp_class_creation_19__class;

    CHECK_OBJECT( tmp_assign_source_271 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_SectionProxy, tmp_assign_source_271 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_19__class );
    Py_DECREF( tmp_class_creation_19__class );
    tmp_class_creation_19__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_19__bases );
    Py_DECREF( tmp_class_creation_19__bases );
    tmp_class_creation_19__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_19__class_dict );
    Py_DECREF( tmp_class_creation_19__class_dict );
    tmp_class_creation_19__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_19__metaclass );
    Py_DECREF( tmp_class_creation_19__metaclass );
    tmp_class_creation_19__metaclass = NULL;

    // Tried code:
    tmp_assign_source_272 = PyTuple_New( 1 );
    tmp_tuple_element_21 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_MutableMapping );

    if (unlikely( tmp_tuple_element_21 == NULL ))
    {
        tmp_tuple_element_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MutableMapping );
    }

    if ( tmp_tuple_element_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_272 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MutableMapping" );
        exception_tb = NULL;

        exception_lineno = 1334;

        goto try_except_handler_76;
    }

    Py_INCREF( tmp_tuple_element_21 );
    PyTuple_SET_ITEM( tmp_assign_source_272, 0, tmp_tuple_element_21 );
    assert( tmp_class_creation_20__bases == NULL );
    tmp_class_creation_20__bases = tmp_assign_source_272;

    tmp_assign_source_274 = const_str_digest_031a36d9e219a028fd504d88b7a8c068;
    assert( outline_19_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_274 );
    outline_19_var___module__ = tmp_assign_source_274;

    tmp_assign_source_275 = const_unicode_digest_922d4071dfffdf93a59015033bc38c95;
    assert( outline_19_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_275 );
    outline_19_var___doc__ = tmp_assign_source_275;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7801595be13afb8720eaf8e586651659_9, codeobj_7801595be13afb8720eaf8e586651659, module_backports$configparser, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_7801595be13afb8720eaf8e586651659_9 = cache_frame_7801595be13afb8720eaf8e586651659_9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7801595be13afb8720eaf8e586651659_9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7801595be13afb8720eaf8e586651659_9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_6 = GET_STRING_DICT_VALUE( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_re );

    if (unlikely( tmp_called_instance_6 == NULL ))
    {
        tmp_called_instance_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
    }

    if ( tmp_called_instance_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "re" );
        exception_tb = NULL;

        exception_lineno = 1342;
        type_description_2 = "ooNNNNNNN";
        goto frame_exception_exit_9;
    }

    frame_7801595be13afb8720eaf8e586651659_9->m_frame.f_lineno = 1342;
    tmp_assign_source_276 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_unicode_digest_d92a042e50db9cd5d96099fd0dfc976b_tuple, 0 ) );

    if ( tmp_assign_source_276 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1342;
        type_description_2 = "ooNNNNNNN";
        goto frame_exception_exit_9;
    }
    assert( outline_19_var_GETTERCRE == NULL );
    outline_19_var_GETTERCRE = tmp_assign_source_276;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_7801595be13afb8720eaf8e586651659_9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_8;

    frame_exception_exit_9:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7801595be13afb8720eaf8e586651659_9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7801595be13afb8720eaf8e586651659_9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7801595be13afb8720eaf8e586651659_9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7801595be13afb8720eaf8e586651659_9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7801595be13afb8720eaf8e586651659_9,
        type_description_2,
        outline_19_var___module__,
        outline_19_var___doc__,
        outline_19_var_GETTERCRE,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL
    );


    // Release cached frame.
    if ( frame_7801595be13afb8720eaf8e586651659_9 == cache_frame_7801595be13afb8720eaf8e586651659_9 )
    {
        Py_DECREF( frame_7801595be13afb8720eaf8e586651659_9 );
    }
    cache_frame_7801595be13afb8720eaf8e586651659_9 = NULL;

    assertFrameObject( frame_7801595be13afb8720eaf8e586651659_9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_8;

    frame_no_exception_8:;

    goto skip_nested_handling_8;
    nested_frame_exit_8:;

    goto try_except_handler_77;
    skip_nested_handling_8:;
    tmp_assign_source_277 = MAKE_FUNCTION_backports$configparser$$$function_82___init__(  );
    assert( outline_19_var___init__ == NULL );
    outline_19_var___init__ = tmp_assign_source_277;

    tmp_assign_source_278 = MAKE_FUNCTION_backports$configparser$$$function_83___getitem__(  );
    assert( outline_19_var___getitem__ == NULL );
    outline_19_var___getitem__ = tmp_assign_source_278;

    tmp_assign_source_279 = MAKE_FUNCTION_backports$configparser$$$function_84___setitem__(  );
    assert( outline_19_var___setitem__ == NULL );
    outline_19_var___setitem__ = tmp_assign_source_279;

    tmp_assign_source_280 = MAKE_FUNCTION_backports$configparser$$$function_85___delitem__(  );
    assert( outline_19_var___delitem__ == NULL );
    outline_19_var___delitem__ = tmp_assign_source_280;

    tmp_assign_source_281 = MAKE_FUNCTION_backports$configparser$$$function_86___iter__(  );
    assert( outline_19_var___iter__ == NULL );
    outline_19_var___iter__ = tmp_assign_source_281;

    tmp_assign_source_282 = MAKE_FUNCTION_backports$configparser$$$function_87___len__(  );
    assert( outline_19_var___len__ == NULL );
    outline_19_var___len__ = tmp_assign_source_282;

    tmp_outline_return_value_38 = _PyDict_NewPresized( 9 );
    tmp_dict_value_133 = outline_19_var___module__;

    CHECK_OBJECT( tmp_dict_value_133 );
    tmp_dict_key_133 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_38, tmp_dict_key_133, tmp_dict_value_133 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_134 = outline_19_var___doc__;

    CHECK_OBJECT( tmp_dict_value_134 );
    tmp_dict_key_134 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_38, tmp_dict_key_134, tmp_dict_value_134 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_135 = outline_19_var_GETTERCRE;

    CHECK_OBJECT( tmp_dict_value_135 );
    tmp_dict_key_135 = const_str_plain_GETTERCRE;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_38, tmp_dict_key_135, tmp_dict_value_135 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_136 = outline_19_var___init__;

    CHECK_OBJECT( tmp_dict_value_136 );
    tmp_dict_key_136 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_38, tmp_dict_key_136, tmp_dict_value_136 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_137 = outline_19_var___getitem__;

    CHECK_OBJECT( tmp_dict_value_137 );
    tmp_dict_key_137 = const_str_plain___getitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_38, tmp_dict_key_137, tmp_dict_value_137 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_138 = outline_19_var___setitem__;

    CHECK_OBJECT( tmp_dict_value_138 );
    tmp_dict_key_138 = const_str_plain___setitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_38, tmp_dict_key_138, tmp_dict_value_138 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_139 = outline_19_var___delitem__;

    CHECK_OBJECT( tmp_dict_value_139 );
    tmp_dict_key_139 = const_str_plain___delitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_38, tmp_dict_key_139, tmp_dict_value_139 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_140 = outline_19_var___iter__;

    CHECK_OBJECT( tmp_dict_value_140 );
    tmp_dict_key_140 = const_str_plain___iter__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_38, tmp_dict_key_140, tmp_dict_value_140 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_141 = outline_19_var___len__;

    CHECK_OBJECT( tmp_dict_value_141 );
    tmp_dict_key_141 = const_str_plain___len__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_38, tmp_dict_key_141, tmp_dict_value_141 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_77;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_77:;
    CHECK_OBJECT( (PyObject *)outline_19_var___module__ );
    Py_DECREF( outline_19_var___module__ );
    outline_19_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_19_var___doc__ );
    Py_DECREF( outline_19_var___doc__ );
    outline_19_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_19_var_GETTERCRE );
    Py_DECREF( outline_19_var_GETTERCRE );
    outline_19_var_GETTERCRE = NULL;

    CHECK_OBJECT( (PyObject *)outline_19_var___init__ );
    Py_DECREF( outline_19_var___init__ );
    outline_19_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_19_var___getitem__ );
    Py_DECREF( outline_19_var___getitem__ );
    outline_19_var___getitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_19_var___setitem__ );
    Py_DECREF( outline_19_var___setitem__ );
    outline_19_var___setitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_19_var___delitem__ );
    Py_DECREF( outline_19_var___delitem__ );
    outline_19_var___delitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_19_var___iter__ );
    Py_DECREF( outline_19_var___iter__ );
    outline_19_var___iter__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_19_var___len__ );
    Py_DECREF( outline_19_var___len__ );
    outline_19_var___len__ = NULL;

    goto outline_result_38;
    // Exception handler code:
    try_except_handler_77:;
    exception_keeper_type_46 = exception_type;
    exception_keeper_value_46 = exception_value;
    exception_keeper_tb_46 = exception_tb;
    exception_keeper_lineno_46 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_19_var___module__ );
    Py_DECREF( outline_19_var___module__ );
    outline_19_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_19_var___doc__ );
    Py_DECREF( outline_19_var___doc__ );
    outline_19_var___doc__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_46;
    exception_value = exception_keeper_value_46;
    exception_tb = exception_keeper_tb_46;
    exception_lineno = exception_keeper_lineno_46;

    goto outline_exception_8;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_8:;
    exception_lineno = 1334;
    goto try_except_handler_76;
    outline_result_38:;
    tmp_assign_source_273 = tmp_outline_return_value_38;
    assert( tmp_class_creation_20__class_dict == NULL );
    tmp_class_creation_20__class_dict = tmp_assign_source_273;

    tmp_compare_left_20 = const_str_plain___metaclass__;
    tmp_compare_right_20 = tmp_class_creation_20__class_dict;

    CHECK_OBJECT( tmp_compare_right_20 );
    tmp_cmp_In_20 = PySequence_Contains( tmp_compare_right_20, tmp_compare_left_20 );
    assert( !(tmp_cmp_In_20 == -1) );
    if ( tmp_cmp_In_20 == 1 )
    {
        goto condexpr_true_20;
    }
    else
    {
        goto condexpr_false_20;
    }
    condexpr_true_20:;
    tmp_dict_name_20 = tmp_class_creation_20__class_dict;

    CHECK_OBJECT( tmp_dict_name_20 );
    tmp_key_name_20 = const_str_plain___metaclass__;
    tmp_assign_source_283 = DICT_GET_ITEM( tmp_dict_name_20, tmp_key_name_20 );
    if ( tmp_assign_source_283 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;

        goto try_except_handler_76;
    }
    goto condexpr_end_20;
    condexpr_false_20:;
    tmp_subscribed_name_19 = tmp_class_creation_20__bases;

    CHECK_OBJECT( tmp_subscribed_name_19 );
    tmp_subscript_name_19 = const_int_0;
    tmp_assign_source_284 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
    if ( tmp_assign_source_284 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;

        goto try_except_handler_76;
    }
    assert( tmp_select_metaclass_20__base == NULL );
    tmp_select_metaclass_20__base = tmp_assign_source_284;

    // Tried code:
    // Tried code:
    tmp_source_name_27 = tmp_select_metaclass_20__base;

    CHECK_OBJECT( tmp_source_name_27 );
    tmp_outline_return_value_39 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_27 );
    if ( tmp_outline_return_value_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;

        goto try_except_handler_79;
    }
    goto try_return_handler_78;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_79:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_keeper_lineno_47 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_47 );
    Py_XDECREF( exception_keeper_value_47 );
    Py_XDECREF( exception_keeper_tb_47 );
    tmp_type_arg_19 = tmp_select_metaclass_20__base;

    CHECK_OBJECT( tmp_type_arg_19 );
    tmp_outline_return_value_39 = BUILTIN_TYPE1( tmp_type_arg_19 );
    assert( tmp_outline_return_value_39 != NULL );
    goto try_return_handler_78;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_78:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_20__base );
    Py_DECREF( tmp_select_metaclass_20__base );
    tmp_select_metaclass_20__base = NULL;

    goto outline_result_39;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_20__base );
    Py_DECREF( tmp_select_metaclass_20__base );
    tmp_select_metaclass_20__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( backports$configparser );
    return MOD_RETURN_VALUE( NULL );
    outline_result_39:;
    tmp_assign_source_283 = tmp_outline_return_value_39;
    condexpr_end_20:;
    assert( tmp_class_creation_20__metaclass == NULL );
    tmp_class_creation_20__metaclass = tmp_assign_source_283;

    tmp_called_name_32 = tmp_class_creation_20__metaclass;

    CHECK_OBJECT( tmp_called_name_32 );
    tmp_args_element_name_69 = const_str_plain_ConverterMapping;
    tmp_args_element_name_70 = tmp_class_creation_20__bases;

    CHECK_OBJECT( tmp_args_element_name_70 );
    tmp_args_element_name_71 = tmp_class_creation_20__class_dict;

    CHECK_OBJECT( tmp_args_element_name_71 );
    frame_7697ffe4ae7754475e380588f515f957->m_frame.f_lineno = 1334;
    {
        PyObject *call_args[] = { tmp_args_element_name_69, tmp_args_element_name_70, tmp_args_element_name_71 };
        tmp_assign_source_285 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_32, call_args );
    }

    if ( tmp_assign_source_285 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;

        goto try_except_handler_76;
    }
    assert( tmp_class_creation_20__class == NULL );
    tmp_class_creation_20__class = tmp_assign_source_285;

    goto try_end_21;
    // Exception handler code:
    try_except_handler_76:;
    exception_keeper_type_48 = exception_type;
    exception_keeper_value_48 = exception_value;
    exception_keeper_tb_48 = exception_tb;
    exception_keeper_lineno_48 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_20__bases );
    tmp_class_creation_20__bases = NULL;

    Py_XDECREF( tmp_class_creation_20__class_dict );
    tmp_class_creation_20__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_20__metaclass );
    tmp_class_creation_20__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_48;
    exception_value = exception_keeper_value_48;
    exception_tb = exception_keeper_tb_48;
    exception_lineno = exception_keeper_lineno_48;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7697ffe4ae7754475e380588f515f957 );
#endif
    popFrameStack();

    assertFrameObject( frame_7697ffe4ae7754475e380588f515f957 );

    goto frame_no_exception_9;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7697ffe4ae7754475e380588f515f957 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7697ffe4ae7754475e380588f515f957, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7697ffe4ae7754475e380588f515f957->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7697ffe4ae7754475e380588f515f957, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_9:;
    tmp_assign_source_286 = tmp_class_creation_20__class;

    CHECK_OBJECT( tmp_assign_source_286 );
    UPDATE_STRING_DICT0( moduledict_backports$configparser, (Nuitka_StringObject *)const_str_plain_ConverterMapping, tmp_assign_source_286 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_20__class );
    Py_DECREF( tmp_class_creation_20__class );
    tmp_class_creation_20__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_20__bases );
    Py_DECREF( tmp_class_creation_20__bases );
    tmp_class_creation_20__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_20__class_dict );
    Py_DECREF( tmp_class_creation_20__class_dict );
    tmp_class_creation_20__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_20__metaclass );
    Py_DECREF( tmp_class_creation_20__metaclass );
    tmp_class_creation_20__metaclass = NULL;


    return MOD_RETURN_VALUE( module_backports$configparser );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
