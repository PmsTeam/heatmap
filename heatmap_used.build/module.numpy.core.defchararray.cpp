/* Generated code for Python source for module 'numpy.core.defchararray'
 * created by Nuitka version 0.5.28.1
 *
 * This code is in part copyright 2017 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The _module_numpy$core$defchararray is a Python object pointer of module type. */

/* Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_numpy$core$defchararray;
PyDictObject *moduledict_numpy$core$defchararray;

/* The module constants used, if any. */
static PyObject *const_tuple_str_plain_a_str_plain_a_arr_tuple;
static PyObject *const_str_digest_f4a6849e556660b5efeac92d5392f237;
extern PyObject *const_str_plain_less;
extern PyObject *const_tuple_str_plain_self_str_plain_other_tuple;
extern PyObject *const_str_plain_startswith;
static PyObject *const_str_plain_tabsize;
extern PyObject *const_str_plain___add__;
static PyObject *const_str_digest_c8898c6da55c00b3c87ca2091a9df6b4;
extern PyObject *const_str_plain_isdigit;
static PyObject *const_str_digest_5eb0425a464ed8a2a9065933de402e8b;
static PyObject *const_str_digest_dfb78de7c946c46d1803aff4e8d69ee7;
static PyObject *const_str_digest_34665efa5bc130b23d97cf4475f926ec;
static PyObject *const_str_plain_keepends;
static PyObject *const_str_plain_table;
static PyObject *const_str_digest_3269842792070eceda2611a70de2c467;
static PyObject *const_str_digest_0ed53d43c6f55caf5ff417ee969149e6;
static PyObject *const_tuple_str_plain_self_str_plain_width_tuple;
static PyObject *const_str_digest_ff7d70dea987435520cfa46a01164736;
static PyObject *const_str_digest_e8604e2c91fef4e251aa00b1bbd1c72c;
static PyObject *const_str_digest_ea87c37d5d9f29b85383fe507438082b;
extern PyObject *const_str_plain_prefix;
static PyObject *const_str_plain_arr1;
static PyObject *const_str_plain_arr2;
extern PyObject *const_str_plain_zfill;
extern PyObject *const_int_neg_1;
static PyObject *const_tuple_ff1096385b6e9ecbb3d8e7346195ef08_tuple;
extern PyObject *const_str_plain_kind;
static PyObject *const_str_plain_rsplit;
static PyObject *const_str_digest_31dc6a288c0d4a4e7b2aec82225ac633;
extern PyObject *const_str_plain_less_equal;
static PyObject *const_str_digest_8a55f70ff88c306b6733977d716cf867;
extern PyObject *const_str_plain_seq;
static PyObject *const_str_digest_31f0660a9923d86045b29d08da811f11;
extern PyObject *const_str_plain_find;
static PyObject *const_tuple_str_plain_self_str_plain_sep_str_plain_maxsplit_tuple;
static PyObject *const_str_digest_27f654082810eb666260649805133d75;
extern PyObject *const_str_plain_encoding;
static PyObject *const_str_plain__bytes;
static PyObject *const_str_digest_db9f783c5770e04bd216384b187bee51;
extern PyObject *const_str_plain_issubdtype;
static PyObject *const_str_plain_capitalize;
static PyObject *const_str_digest_bfe91af571aeeb0d4790c1cdf89f61ad;
extern PyObject *const_str_plain_suffix;
extern PyObject *const_str_plain_new;
extern PyObject *const_tuple_type_list_type_tuple_tuple;
static PyObject *const_str_digest_89b68cae8e406047e4189d31c89ee40e;
static PyObject *const_tuple_str_plain__vec_string_tuple;
static PyObject *const_str_digest_9995e845f48eeba9d2fb71e5b560ab77;
static PyObject *const_str_plain_rindex;
extern PyObject *const_str_plain_sep;
extern PyObject *const_str_plain_ndarray;
static PyObject *const_str_digest_27493340c1f269a1654bddf864a966df;
static PyObject *const_str_digest_f381d04127027c5c531e71b761e287b4;
static PyObject *const_list_96cf61cd2e2d20d9090d7cb54c76aa45_list;
extern PyObject *const_str_plain_add;
static PyObject *const_str_plain_filler;
static PyObject *const_str_digest_77dbf846f87dcbf6ed0c5f6020628507;
extern PyObject *const_str_plain_unicode_;
extern PyObject *const_str_plain_equal;
static PyObject *const_str_digest_370db36e0f092f4c33948c6a0a8a7c0c;
extern PyObject *const_str_plain_lstrip;
static PyObject *const_str_plain_width_arr;
extern PyObject *const_str_plain_string_;
extern PyObject *const_str_plain___rmul__;
static PyObject *const_str_digest_af5f3cc1ce60bcb35f35ba4b06e53e3c;
static PyObject *const_str_plain_isupper;
static PyObject *const_tuple_int_pos_1_false_none_int_0_none_str_plain_C_tuple;
extern PyObject *const_str_plain___array__;
extern PyObject *const_str_digest_f104ae7867dfcd3f38891fc4f1b7cd57;
extern PyObject *const_str_plain_multiply;
static PyObject *const_str_digest_a53e6044afa65158b90d5bc4937bebce;
extern PyObject *const_str_plain_isspace;
extern PyObject *const_str_plain_sys;
static PyObject *const_str_plain_out_size;
static PyObject *const_tuple_str_plain_a_str_plain_encoding_str_plain_errors_tuple;
extern PyObject *const_str_plain_deletechars;
static PyObject *const_str_digest_1a3e79c74aa19ef7b4ae553d0015f69b;
static PyObject *const_tuple_str_plain_self_str_plain_chars_tuple;
static PyObject *const_tuple_str_plain_result_tuple;
extern PyObject *const_str_plain_greater_equal;
static PyObject *const_str_digest_669a3d36bb2d15388a6de410aab16c70;
extern PyObject *const_str_plain_compare_chararrays;
static PyObject *const_str_digest_a0e6581003ea295aece7cf0626572e38;
extern PyObject *const_str_plain_mod;
static PyObject *const_tuple_str_plain_x1_str_plain_x2_tuple;
extern PyObject *const_str_plain_translate;
static PyObject *const_str_digest_b5e859ad63fb04fe89c31ec88642fe25;
static PyObject *const_tuple_str_plain_self_str_plain_seq_tuple;
extern PyObject *const_str_plain_dtype;
static PyObject *const_tuple_str_space_tuple;
static PyObject *const_str_digest_4341a35a56eeab0b9477e620f04aa452;
static PyObject *const_str_digest_564fa9aa65a17e01056893ccc9a72ac5;
extern PyObject *const_str_plain_argsort;
static PyObject *const_tuple_d4bbaa6198be3c7d31ead03293ed11d2_tuple;
static PyObject *const_tuple_str_plain_a_str_plain_keepends_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_i_tuple;
extern PyObject *const_str_plain_encode;
static PyObject *const_str_digest_74e5597ad0b09fcbe56c7d593efefeae;
extern PyObject *const_tuple_int_0_none_tuple;
extern PyObject *const_str_plain_replace;
extern PyObject *const_str_plain_not_equal;
static PyObject *const_str_digest_407032a58199a71589a95abccc19c001;
extern PyObject *const_tuple_empty;
static PyObject *const_str_digest_c2e1433d5cd52b123171db4613a50562;
static PyObject *const_str_digest_da05527f9d5c7354019c3798f1a6a21c;
static PyObject *const_str_digest_ff2cf54b495716821a5fbe07d44a5d63;
static PyObject *const_str_digest_fe502ff73f093b0097d0fd7194d05bdc;
extern PyObject *const_str_plain_temp;
static PyObject *const_str_digest_13a3d281e8ff695dfc1265ae7a401e42;
static PyObject *const_str_digest_c566e8f3fba64199b66b7b7424440c9c;
static PyObject *const_str_plain_swapcase;
extern PyObject *const_str_plain_asbytes;
static PyObject *const_str_plain_islower;
extern PyObject *const_str_plain_max;
static PyObject *const_str_digest_94099384fade5787f5d909b7d86c447f;
static PyObject *const_str_digest_d64bb34d36fc1221935b64697c3efb1a;
static PyObject *const_str_plain_center;
extern PyObject *const_str_plain___file__;
static PyObject *const_tuple_str_plain_self_str_plain_sep_tuple;
static PyObject *const_str_plain_str_len;
static PyObject *const_str_digest_8de4f2b16d5ed5253b454e343eaf00b9;
extern PyObject *const_str_plain___new__;
extern PyObject *const_str_plain___getitem__;
extern PyObject *const_str_plain___metaclass__;
static PyObject *const_str_digest_18a90f3ec57ce65c30fee1abaa129783;
static PyObject *const_str_digest_ed597c0c0dc1af08d05b24404e8edbee;
static PyObject *const_str_digest_bf1a718b48ab74200a93a085eed2aa7b;
static PyObject *const_tuple_b10acacc129766c0c55c24c4981d5b23_tuple;
extern PyObject *const_tuple_none_none_tuple;
static PyObject *const_str_digest_48cd9f4fe69db5e47bee578d876a3ce1;
static PyObject *const_str_digest_3a1b0c0ed61ae6c14954396ac72a23ba;
static PyObject *const_str_plain__vec_string;
extern PyObject *const_str_plain___mul__;
extern PyObject *const_tuple_str_plain_self_str_plain_obj_tuple;
extern PyObject *const_str_plain___lt__;
static PyObject *const_str_digest_bdfe461b26b9f24bffd00ff8bfe2e36b;
static PyObject *const_tuple_614c5da9f7e26a39d03084a56f615153_tuple;
extern PyObject *const_str_plain_partition;
static PyObject *const_tuple_str_plain_ndarray_str_plain_compare_chararrays_tuple;
static PyObject *const_tuple_int_pos_8_tuple;
static PyObject *const_str_plain_x1;
static PyObject *const_str_digest_c6559b7101568cfc54038b280a964a69;
extern PyObject *const_str_plain_x2;
static PyObject *const_str_plain_isnumeric;
static PyObject *const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple;
static PyObject *const_str_digest_13243295198ba360687160a687a3cc51;
static PyObject *const_str_digest_a186b542d1544119c6bf394d570c4cc9;
static PyObject *const_str_digest_6af79caaca7254737a21b812370d540e;
static PyObject *const_str_digest_59d16de3818bb11ef313375a43d6cb26;
static PyObject *const_tuple_str_plain_self_str_plain_table_str_plain_deletechars_tuple;
static PyObject *const_str_digest_1b57ba42cb2c7e3f89f6d65425840a19;
static PyObject *const_str_plain_maxunicode;
extern PyObject *const_str_plain_subtype;
static PyObject *const_str_digest_a5a29403df10201d5a15acf254142f51;
static PyObject *const_str_plain__to_string_or_unicode_array;
static PyObject *const_str_plain_isdecimal;
static PyObject *const_str_digest_d1a8fbd5951f097d7b5e23a9ce6f2e38;
static PyObject *const_str_digest_6579a68a1d639c52e7586ab3d39caf7e;
static PyObject *const_tuple_str_plain_a_str_plain_sep_str_plain_maxsplit_tuple;
static PyObject *const_str_digest_82790523a655292122ed96170eaac455;
static PyObject *const_str_digest_4cd970d8c7925c19e8311aabe268064c;
extern PyObject *const_str_plain_integer;
static PyObject *const_str_digest_1cbaac8f0091050f5ef63753f284202e;
static PyObject *const_tuple_str_plain_a_str_plain_tabsize_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_obj_str_plain_val_str_plain_temp_tuple;
extern PyObject *const_str_plain___rmod__;
static PyObject *const_tuple_str_plain_a_str_plain_chars_str_plain_a_arr_tuple;
static PyObject *const_str_plain_utf_32;
extern PyObject *const_tuple_none_none_none_tuple;
extern PyObject *const_str_plain_division;
extern PyObject *const_str_plain_chk;
static PyObject *const_int_pos_65535;
static PyObject *const_str_digest_f34b7924920f137cb73c541bccd59d9e;
static PyObject *const_str_plain_rfind;
static PyObject *const_str_digest_9aabf23e6cdfbaaa53cce6a8a354a57e;
static PyObject *const_tuple_str_plain_a_str_plain_values_tuple;
static PyObject *const_str_digest_ce6e7791833d63412553bd63afe3b68a;
static PyObject *const_str_digest_c6291081ede3628eae8b561e3aa22d02;
extern PyObject *const_str_plain_tolist;
extern PyObject *const_str_plain_type;
static PyObject *const_str_digest_1ea3df1363a47009ecddae9da26b5b9d;
extern PyObject *const_str_plain_decode;
static PyObject *const_tuple_df78e43c5ccd3841b39b5b0da090b35d_tuple;
extern PyObject *const_str_plain_offset;
extern PyObject *const_str_plain_subok;
static PyObject *const_str_digest_166450b7aaeed3e1449ea7d0d219e082;
extern PyObject *const_str_plain_view;
extern PyObject *const_str_plain_width;
static PyObject *const_str_plain_rpartition;
static PyObject *const_str_digest_06d026467411edebb0ee7ea28f9a5216;
static PyObject *const_str_digest_4f9e3534f82f4d696fcbb87af335efd9;
extern PyObject *const_str_plain_size;
extern PyObject *const_str_plain___ne__;
extern PyObject *const_str_plain_numpy;
static PyObject *const_str_digest_5f408ea264aad5c192d303d32799c57f;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_val;
static PyObject *const_tuple_848e2417a36e2e5562d87499b693dbba_tuple;
extern PyObject *const_str_plain_upper;
static PyObject *const_str_digest_0109c0829411c3b4b003a0403894c15e;
static PyObject *const_str_plain_chars;
extern PyObject *const_str_plain_sub;
static PyObject *const_str_digest_5d23d111c507bcd3f3ad472825ffdb2d;
extern PyObject *const_tuple_int_neg_1_str_plain_quicksort_none_tuple;
static PyObject *const_str_digest_40d317e05fcf700cc50781bbb3778576;
static PyObject *const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_str_plain_strip;
static PyObject *const_tuple_str_plain_args_str_plain_newargs_str_plain_chk_tuple;
static PyObject *const_str_plain__get_num_chars;
static PyObject *const_str_plain__clean_args;
extern PyObject *const_str_plain_errors;
static PyObject *const_str_digest_28967138fa1cdbae9c3af9308a03d7af;
extern PyObject *const_int_pos_4;
extern PyObject *const_int_pos_3;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_plain_old;
extern PyObject *const_str_plain___mod__;
static PyObject *const_str_digest_402dafb8652990c3e86f3f5f2231444b;
static PyObject *const_tuple_str_plain_asbytes_str_plain_long_tuple;
static PyObject *const_str_digest_35146008002b011fcbcff42d0aacc4f3;
extern PyObject *const_str_plain_strides;
static PyObject *const_str_digest_6b9e7a9aed65ab6d66b9fc710b2681de;
static PyObject *const_str_plain__len;
extern PyObject *const_str_plain_array;
static PyObject *const_str_digest_932904e8b8f191665952523663b31823;
static PyObject *const_str_digest_120767f4a935a1531601d197d1737bf5;
static PyObject *const_str_digest_3d8c57f7219b74162633beae5001d2ea;
extern PyObject *const_str_plain_join;
static PyObject *const_tuple_str_plain_a_str_plain_sep_tuple;
static PyObject *const_str_digest_d012651e0317365e959276935d450227;
extern PyObject *const_int_pos_8;
extern PyObject *const_str_plain___ge__;
static PyObject *const_tuple_8f60b7210c1eb31dd5eca03428259679_tuple;
extern PyObject *const_str_plain_bool_;
static PyObject *const_tuple_e432aca623d2d5a01132395892700600_tuple;
extern PyObject *const_str_plain_flat;
static PyObject *const_str_digest_b6d6bb22a164c3a643d1b4c41154ad1d;
extern PyObject *const_str_plain___le__;
static PyObject *const_str_digest_ddacf7199b10a54bd8a6e4839404b560;
extern PyObject *const_str_plain_C;
extern PyObject *const_str_plain_narray;
extern PyObject *const_str_plain_result;
extern PyObject *const_str_plain_numerictypes;
static PyObject *const_tuple_9beca1f56a910033400bdcfb3741a450_tuple;
extern PyObject *const_str_plain_shape;
extern PyObject *const_str_plain_endswith;
extern PyObject *const_str_plain_i;
extern PyObject *const_str_plain_a;
static PyObject *const_str_digest_ce15cd29702c6c9d86440e3a56bba77c;
extern PyObject *const_str_plain_x;
extern PyObject *const_str_plain_buffer;
static PyObject *const_str_digest_0b67f0d361a6beaf6a5ab909ea0038c0;
static PyObject *const_str_digest_bb0962fef816a978c383a795a3ab79df;
static PyObject *const_str_digest_8510ce82a61894dda614b077424f1c03;
extern PyObject *const_str_plain_quicksort;
static PyObject *const_tuple_f0791bc3ebe287fb1326beb23b80e222_tuple;
static PyObject *const_str_digest_45e55f7ec5f130d0205a09e6d808ad1f;
extern PyObject *const_str_plain_char;
static PyObject *const_tuple_str_plain_self_str_plain_encoding_str_plain_errors_tuple;
static PyObject *const_str_digest_860001e6dde8a3df67b917047395594f;
extern PyObject *const_str_plain_start;
static PyObject *const_str_digest_ac2cb96401e4f8223e7ec873c26c0a53;
static PyObject *const_str_digest_0b812166a1767359e46490bf0e9262cd;
extern PyObject *const_str_plain___all__;
extern PyObject *const_int_0;
static PyObject *const_tuple_str_plain_self_str_plain_axis_str_plain_kind_str_plain_order_tuple;
static PyObject *const_str_digest_d73dd53e1a6282b2c8ba36b78aabf2f8;
static PyObject *const_tuple_str_plain_self_str_plain_old_str_plain_new_str_plain_count_tuple;
static PyObject *const_str_plain_expandtabs;
static PyObject *const_str_digest_0b427137de2178b66aa5df5a9ad5360e;
static PyObject *const_tuple_str_plain_self_str_plain_tabsize_tuple;
static PyObject *const_str_digest_0fd92dba6d696db84e85b6712be8c51c;
extern PyObject *const_str_plain___gt__;
extern PyObject *const_str_plain_append;
static PyObject *const_tuple_str_plain_self_str_plain_keepends_tuple;
extern PyObject *const_str_plain_print_function;
static PyObject *const_str_digest_01c8bea278c39e677484d0771ddce9af;
extern PyObject *const_str_plain_copy;
extern PyObject *const_str_plain___radd__;
extern PyObject *const_str_plain___package__;
extern PyObject *const_str_plain_title;
static PyObject *const_tuple_str_plain_sep_str_plain_seq_tuple;
static PyObject *const_str_digest_0fa7cdb2bd564dc1afddba0ed189171c;
extern PyObject *const_dict_empty;
extern PyObject *const_str_plain_len;
extern PyObject *const_str_plain_count;
extern PyObject *const_str_plain_index;
extern PyObject *const_str_plain_axis;
static PyObject *const_str_digest_20409f4d1b21d63adec44895ab020a67;
extern PyObject *const_str_plain_unicode;
static PyObject *const_str_digest_ee566550407ac0b309e45bcfe9af28d1;
static PyObject *const_str_digest_c754d1f17e66e1ac194aaf4d979da935;
static PyObject *const_str_digest_1660bc17621154cff83c4b5b159ff78e;
extern PyObject *const_str_plain_issubclass;
static PyObject *const_str_digest_68745b0e72d4cfd6a2910c4926bb4753;
extern PyObject *const_str_plain_asarray;
static PyObject *const_str_plain_i_arr;
extern PyObject *const_str_plain_itemsize;
static PyObject *const_str_digest_3fa40698fa6a6f051f625e2c2267861d;
extern PyObject *const_str_plain___array_finalize__;
static PyObject *const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple;
extern PyObject *const_str_digest_ff5b71fb1b4d9fcd10c8725add9c701b;
extern PyObject *const_tuple_str_plain_a_tuple;
static PyObject *const_str_digest_3289aefeb1e46bff17ff2d10ff6f22b3;
static PyObject *const_tuple_str_plain_args_str_plain_x_tuple;
static PyObject *const_str_plain__use_unicode;
extern PyObject *const_str_plain_split;
static PyObject *const_str_digest_5c3af0d5a8e1b958c52cabd57c02af58;
static PyObject *const_str_digest_10e1ae4f452855d1730a4c791fc7c4a9;
extern PyObject *const_str_plain_version_info;
extern PyObject *const_str_plain_object_;
static PyObject *const_str_plain_a_arr;
extern PyObject *const_str_plain_args;
static PyObject *const_str_plain_istitle;
extern PyObject *const_str_plain___module__;
static PyObject *const_tuple_str_plain_utf_32_tuple;
extern PyObject *const_str_plain_lower;
extern PyObject *const_str_plain_isalpha;
extern PyObject *const_str_plain_splitlines;
static PyObject *const_str_digest_fccf63ccb9c4c444f4ae8ad7ea53e3c3;
extern PyObject *const_str_plain_rjust;
static PyObject *const_str_digest_be4dc9f635f0fab9b717c832a2782f99;
static PyObject *const_str_digest_313b2fc9a8dbd2e0429362347b1b0b0a;
static PyObject *const_str_plain_character;
extern PyObject *const_str_plain_rstrip;
extern PyObject *const_str_plain_astype;
static PyObject *const_str_digest_7b8d41440bc9fec644ed7b4bfdec0e2d;
static PyObject *const_str_digest_8521bce6d515eb30d285d8425ec0464b;
extern PyObject *const_str_plain_values;
static PyObject *const_tuple_283c761c3aea2c05f47a077a1ab609a6_tuple;
static PyObject *const_tuple_none_true_none_none_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_width_str_plain_fillchar_tuple;
extern PyObject *const_str_plain_numeric;
extern PyObject *const_str_plain_other;
static PyObject *const_str_plain_fillchar;
extern PyObject *const_str_plain_order;
extern PyObject *const_str_plain_isalnum;
static PyObject *const_str_digest_0f3615246f6268254fc342fe93c15124;
extern PyObject *const_str_plain_obj;
static PyObject *const_str_plain_SUbc;
extern PyObject *const_tuple_str_plain_array_tuple;
extern PyObject *const_str_plain_greater;
extern PyObject *const_str_plain_long;
extern PyObject *const_str_space;
static PyObject *const_str_digest_5eef8220b28eedd6ef54e0fccc930225;
extern PyObject *const_str_chr_62;
static PyObject *const_tuple_str_plain_a_str_plain_old_str_plain_new_str_plain_count_tuple;
extern PyObject *const_str_chr_60;
extern PyObject *const_str_plain___eq__;
static PyObject *const_str_plain_ljust;
static PyObject *const_str_digest_0efc402f724c6562070106da0759b49e;
extern PyObject *const_str_plain_absolute_import;
static PyObject *const_str_digest_eedf17debea1eff4671fe2e9c404b399;
static PyObject *const_str_digest_866313d66dea37b2e1a4c34e0ecc35f7;
extern PyObject *const_str_plain___doc__;
static PyObject *const_tuple_str_plain_a_str_plain_prefix_str_plain_start_str_plain_end_tuple;
static PyObject *const_tuple_str_plain_a_str_plain_suffix_str_plain_start_str_plain_end_tuple;
static PyObject *const_str_plain__globalvar;
static PyObject *const_str_digest_520a6033be9967222d1db657312d51b3;
extern PyObject *const_str_plain___len__;
extern PyObject *const_str_plain_chararray;
static PyObject *const_str_plain_newargs;
extern PyObject *const_str_empty;
static PyObject *const_str_digest_771db41ca94e6f1ea410a065e80903b0;
static PyObject *const_str_digest_b0bc7306e41c75e3d731d556d1adf767;
static PyObject *const_str_plain__unicode;
extern PyObject *const_str_plain_end;
extern PyObject *const_str_plain_maxsplit;
static PyObject *const_str_digest_d3a12212d5fa80f932a9ca89b20b1656;
extern PyObject *const_tuple_none_tuple;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_tuple_str_plain_a_str_plain_a_arr_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_a_arr_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    const_str_plain_a_arr = UNSTREAM_STRING( &constant_bin[ 251607 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_a_arr_tuple, 1, const_str_plain_a_arr ); Py_INCREF( const_str_plain_a_arr );
    const_str_digest_f4a6849e556660b5efeac92d5392f237 = UNSTREAM_STRING( &constant_bin[ 251612 ], 170, 0 );
    const_str_plain_tabsize = UNSTREAM_STRING( &constant_bin[ 251782 ], 7, 1 );
    const_str_digest_c8898c6da55c00b3c87ca2091a9df6b4 = UNSTREAM_STRING( &constant_bin[ 251789 ], 564, 0 );
    const_str_digest_5eb0425a464ed8a2a9065933de402e8b = UNSTREAM_STRING( &constant_bin[ 252353 ], 106, 0 );
    const_str_digest_dfb78de7c946c46d1803aff4e8d69ee7 = UNSTREAM_STRING( &constant_bin[ 252459 ], 194, 0 );
    const_str_digest_34665efa5bc130b23d97cf4475f926ec = UNSTREAM_STRING( &constant_bin[ 252653 ], 755, 0 );
    const_str_plain_keepends = UNSTREAM_STRING( &constant_bin[ 253408 ], 8, 1 );
    const_str_plain_table = UNSTREAM_STRING( &constant_bin[ 69167 ], 5, 1 );
    const_str_digest_3269842792070eceda2611a70de2c467 = UNSTREAM_STRING( &constant_bin[ 253416 ], 671, 0 );
    const_str_digest_0ed53d43c6f55caf5ff417ee969149e6 = UNSTREAM_STRING( &constant_bin[ 254087 ], 435, 0 );
    const_tuple_str_plain_self_str_plain_width_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_width_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_width_tuple, 1, const_str_plain_width ); Py_INCREF( const_str_plain_width );
    const_str_digest_ff7d70dea987435520cfa46a01164736 = UNSTREAM_STRING( &constant_bin[ 254522 ], 474, 0 );
    const_str_digest_e8604e2c91fef4e251aa00b1bbd1c72c = UNSTREAM_STRING( &constant_bin[ 254996 ], 201, 0 );
    const_str_digest_ea87c37d5d9f29b85383fe507438082b = UNSTREAM_STRING( &constant_bin[ 255197 ], 142, 0 );
    const_str_plain_arr1 = UNSTREAM_STRING( &constant_bin[ 255339 ], 4, 1 );
    const_str_plain_arr2 = UNSTREAM_STRING( &constant_bin[ 255343 ], 4, 1 );
    const_tuple_ff1096385b6e9ecbb3d8e7346195ef08_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_ff1096385b6e9ecbb3d8e7346195ef08_tuple, 0, const_str_plain_string_ ); Py_INCREF( const_str_plain_string_ );
    PyTuple_SET_ITEM( const_tuple_ff1096385b6e9ecbb3d8e7346195ef08_tuple, 1, const_str_plain_unicode_ ); Py_INCREF( const_str_plain_unicode_ );
    PyTuple_SET_ITEM( const_tuple_ff1096385b6e9ecbb3d8e7346195ef08_tuple, 2, const_str_plain_integer ); Py_INCREF( const_str_plain_integer );
    PyTuple_SET_ITEM( const_tuple_ff1096385b6e9ecbb3d8e7346195ef08_tuple, 3, const_str_plain_object_ ); Py_INCREF( const_str_plain_object_ );
    PyTuple_SET_ITEM( const_tuple_ff1096385b6e9ecbb3d8e7346195ef08_tuple, 4, const_str_plain_bool_ ); Py_INCREF( const_str_plain_bool_ );
    const_str_plain_character = UNSTREAM_STRING( &constant_bin[ 20630 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_ff1096385b6e9ecbb3d8e7346195ef08_tuple, 5, const_str_plain_character ); Py_INCREF( const_str_plain_character );
    const_str_plain_rsplit = UNSTREAM_STRING( &constant_bin[ 255347 ], 6, 1 );
    const_str_digest_31dc6a288c0d4a4e7b2aec82225ac633 = UNSTREAM_STRING( &constant_bin[ 255353 ], 973, 0 );
    const_str_digest_8a55f70ff88c306b6733977d716cf867 = UNSTREAM_STRING( &constant_bin[ 256326 ], 870, 0 );
    const_str_digest_31f0660a9923d86045b29d08da811f11 = UNSTREAM_STRING( &constant_bin[ 257196 ], 417, 0 );
    const_tuple_str_plain_self_str_plain_sep_str_plain_maxsplit_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sep_str_plain_maxsplit_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sep_str_plain_maxsplit_tuple, 1, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sep_str_plain_maxsplit_tuple, 2, const_str_plain_maxsplit ); Py_INCREF( const_str_plain_maxsplit );
    const_str_digest_27f654082810eb666260649805133d75 = UNSTREAM_STRING( &constant_bin[ 257613 ], 168, 0 );
    const_str_plain__bytes = UNSTREAM_STRING( &constant_bin[ 257781 ], 6, 1 );
    const_str_digest_db9f783c5770e04bd216384b187bee51 = UNSTREAM_STRING( &constant_bin[ 257787 ], 228, 0 );
    const_str_plain_capitalize = UNSTREAM_STRING( &constant_bin[ 257700 ], 10, 1 );
    const_str_digest_bfe91af571aeeb0d4790c1cdf89f61ad = UNSTREAM_STRING( &constant_bin[ 258015 ], 226, 0 );
    const_str_digest_89b68cae8e406047e4189d31c89ee40e = UNSTREAM_STRING( &constant_bin[ 258241 ], 160, 0 );
    const_tuple_str_plain__vec_string_tuple = PyTuple_New( 1 );
    const_str_plain__vec_string = UNSTREAM_STRING( &constant_bin[ 258401 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain__vec_string_tuple, 0, const_str_plain__vec_string ); Py_INCREF( const_str_plain__vec_string );
    const_str_digest_9995e845f48eeba9d2fb71e5b560ab77 = UNSTREAM_STRING( &constant_bin[ 258412 ], 528, 0 );
    const_str_plain_rindex = UNSTREAM_STRING( &constant_bin[ 212821 ], 6, 1 );
    const_str_digest_27493340c1f269a1654bddf864a966df = UNSTREAM_STRING( &constant_bin[ 258940 ], 558, 0 );
    const_str_digest_f381d04127027c5c531e71b761e287b4 = UNSTREAM_STRING( &constant_bin[ 259498 ], 148, 0 );
    const_list_96cf61cd2e2d20d9090d7cb54c76aa45_list = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 259646 ], 618 );
    const_str_plain_filler = UNSTREAM_STRING( &constant_bin[ 260264 ], 6, 1 );
    const_str_digest_77dbf846f87dcbf6ed0c5f6020628507 = UNSTREAM_STRING( &constant_bin[ 260270 ], 189, 0 );
    const_str_digest_370db36e0f092f4c33948c6a0a8a7c0c = UNSTREAM_STRING( &constant_bin[ 260459 ], 3562, 0 );
    const_str_plain_width_arr = UNSTREAM_STRING( &constant_bin[ 264021 ], 9, 1 );
    const_str_digest_af5f3cc1ce60bcb35f35ba4b06e53e3c = UNSTREAM_STRING( &constant_bin[ 264030 ], 134, 0 );
    const_str_plain_isupper = UNSTREAM_STRING( &constant_bin[ 258224 ], 7, 1 );
    const_tuple_int_pos_1_false_none_int_0_none_str_plain_C_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_false_none_int_0_none_str_plain_C_tuple, 0, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_false_none_int_0_none_str_plain_C_tuple, 1, Py_False ); Py_INCREF( Py_False );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_false_none_int_0_none_str_plain_C_tuple, 2, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_false_none_int_0_none_str_plain_C_tuple, 3, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_false_none_int_0_none_str_plain_C_tuple, 4, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_false_none_int_0_none_str_plain_C_tuple, 5, const_str_plain_C ); Py_INCREF( const_str_plain_C );
    const_str_digest_a53e6044afa65158b90d5bc4937bebce = UNSTREAM_STRING( &constant_bin[ 153674 ], 2, 0 );
    const_str_plain_out_size = UNSTREAM_STRING( &constant_bin[ 264164 ], 8, 1 );
    const_tuple_str_plain_a_str_plain_encoding_str_plain_errors_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_encoding_str_plain_errors_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_encoding_str_plain_errors_tuple, 1, const_str_plain_encoding ); Py_INCREF( const_str_plain_encoding );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_encoding_str_plain_errors_tuple, 2, const_str_plain_errors ); Py_INCREF( const_str_plain_errors );
    const_str_digest_1a3e79c74aa19ef7b4ae553d0015f69b = UNSTREAM_STRING( &constant_bin[ 264172 ], 568, 0 );
    const_tuple_str_plain_self_str_plain_chars_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_chars_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_chars = UNSTREAM_STRING( &constant_bin[ 241313 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_chars_tuple, 1, const_str_plain_chars ); Py_INCREF( const_str_plain_chars );
    const_tuple_str_plain_result_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_result_tuple, 0, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_str_digest_669a3d36bb2d15388a6de410aab16c70 = UNSTREAM_STRING( &constant_bin[ 264740 ], 635, 0 );
    const_str_digest_a0e6581003ea295aece7cf0626572e38 = UNSTREAM_STRING( &constant_bin[ 265375 ], 397, 0 );
    const_tuple_str_plain_x1_str_plain_x2_tuple = PyTuple_New( 2 );
    const_str_plain_x1 = UNSTREAM_STRING( &constant_bin[ 99688 ], 2, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x1_str_plain_x2_tuple, 0, const_str_plain_x1 ); Py_INCREF( const_str_plain_x1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x1_str_plain_x2_tuple, 1, const_str_plain_x2 ); Py_INCREF( const_str_plain_x2 );
    const_str_digest_b5e859ad63fb04fe89c31ec88642fe25 = UNSTREAM_STRING( &constant_bin[ 265772 ], 853, 0 );
    const_tuple_str_plain_self_str_plain_seq_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_seq_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_seq_tuple, 1, const_str_plain_seq ); Py_INCREF( const_str_plain_seq );
    const_tuple_str_space_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_space_tuple, 0, const_str_space ); Py_INCREF( const_str_space );
    const_str_digest_4341a35a56eeab0b9477e620f04aa452 = UNSTREAM_STRING( &constant_bin[ 266625 ], 221, 0 );
    const_str_digest_564fa9aa65a17e01056893ccc9a72ac5 = UNSTREAM_STRING( &constant_bin[ 266846 ], 439, 0 );
    const_tuple_d4bbaa6198be3c7d31ead03293ed11d2_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 267285 ], 694 );
    const_tuple_str_plain_a_str_plain_keepends_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_keepends_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_keepends_tuple, 1, const_str_plain_keepends ); Py_INCREF( const_str_plain_keepends );
    const_tuple_str_plain_self_str_plain_i_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_i_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_i_tuple, 1, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_str_digest_74e5597ad0b09fcbe56c7d593efefeae = UNSTREAM_STRING( &constant_bin[ 267979 ], 171, 0 );
    const_str_digest_407032a58199a71589a95abccc19c001 = UNSTREAM_STRING( &constant_bin[ 268150 ], 160, 0 );
    const_str_digest_c2e1433d5cd52b123171db4613a50562 = UNSTREAM_STRING( &constant_bin[ 268310 ], 111, 0 );
    const_str_digest_da05527f9d5c7354019c3798f1a6a21c = UNSTREAM_STRING( &constant_bin[ 268421 ], 632, 0 );
    const_str_digest_ff2cf54b495716821a5fbe07d44a5d63 = UNSTREAM_STRING( &constant_bin[ 269053 ], 566, 0 );
    const_str_digest_fe502ff73f093b0097d0fd7194d05bdc = UNSTREAM_STRING( &constant_bin[ 269619 ], 374, 0 );
    const_str_digest_13a3d281e8ff695dfc1265ae7a401e42 = UNSTREAM_STRING( &constant_bin[ 269993 ], 529, 0 );
    const_str_digest_c566e8f3fba64199b66b7b7424440c9c = UNSTREAM_STRING( &constant_bin[ 207100 ], 2, 0 );
    const_str_plain_swapcase = UNSTREAM_STRING( &constant_bin[ 260162 ], 8, 1 );
    const_str_plain_islower = UNSTREAM_STRING( &constant_bin[ 259930 ], 7, 1 );
    const_str_digest_94099384fade5787f5d909b7d86c447f = UNSTREAM_STRING( &constant_bin[ 270522 ], 232, 0 );
    const_str_digest_d64bb34d36fc1221935b64697c3efb1a = UNSTREAM_STRING( &constant_bin[ 270754 ], 545, 0 );
    const_str_plain_center = UNSTREAM_STRING( &constant_bin[ 259804 ], 6, 1 );
    const_tuple_str_plain_self_str_plain_sep_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sep_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sep_tuple, 1, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    const_str_plain_str_len = UNSTREAM_STRING( &constant_bin[ 243093 ], 7, 1 );
    const_str_digest_8de4f2b16d5ed5253b454e343eaf00b9 = UNSTREAM_STRING( &constant_bin[ 271299 ], 563, 0 );
    const_str_digest_18a90f3ec57ce65c30fee1abaa129783 = UNSTREAM_STRING( &constant_bin[ 271862 ], 107, 0 );
    const_str_digest_ed597c0c0dc1af08d05b24404e8edbee = UNSTREAM_STRING( &constant_bin[ 271969 ], 117, 0 );
    const_str_digest_bf1a718b48ab74200a93a085eed2aa7b = UNSTREAM_STRING( &constant_bin[ 272086 ], 183, 0 );
    const_tuple_b10acacc129766c0c55c24c4981d5b23_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_b10acacc129766c0c55c24c4981d5b23_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_b10acacc129766c0c55c24c4981d5b23_tuple, 1, const_str_plain_table ); Py_INCREF( const_str_plain_table );
    PyTuple_SET_ITEM( const_tuple_b10acacc129766c0c55c24c4981d5b23_tuple, 2, const_str_plain_deletechars ); Py_INCREF( const_str_plain_deletechars );
    PyTuple_SET_ITEM( const_tuple_b10acacc129766c0c55c24c4981d5b23_tuple, 3, const_str_plain_a_arr ); Py_INCREF( const_str_plain_a_arr );
    const_str_digest_48cd9f4fe69db5e47bee578d876a3ce1 = UNSTREAM_STRING( &constant_bin[ 272269 ], 2471, 0 );
    const_str_digest_3a1b0c0ed61ae6c14954396ac72a23ba = UNSTREAM_STRING( &constant_bin[ 274740 ], 148, 0 );
    const_str_digest_bdfe461b26b9f24bffd00ff8bfe2e36b = UNSTREAM_STRING( &constant_bin[ 274888 ], 241, 0 );
    const_tuple_614c5da9f7e26a39d03084a56f615153_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_614c5da9f7e26a39d03084a56f615153_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_614c5da9f7e26a39d03084a56f615153_tuple, 1, const_str_plain_prefix ); Py_INCREF( const_str_plain_prefix );
    PyTuple_SET_ITEM( const_tuple_614c5da9f7e26a39d03084a56f615153_tuple, 2, const_str_plain_start ); Py_INCREF( const_str_plain_start );
    PyTuple_SET_ITEM( const_tuple_614c5da9f7e26a39d03084a56f615153_tuple, 3, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    const_tuple_str_plain_ndarray_str_plain_compare_chararrays_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ndarray_str_plain_compare_chararrays_tuple, 0, const_str_plain_ndarray ); Py_INCREF( const_str_plain_ndarray );
    PyTuple_SET_ITEM( const_tuple_str_plain_ndarray_str_plain_compare_chararrays_tuple, 1, const_str_plain_compare_chararrays ); Py_INCREF( const_str_plain_compare_chararrays );
    const_tuple_int_pos_8_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_tuple, 0, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_digest_c6559b7101568cfc54038b280a964a69 = UNSTREAM_STRING( &constant_bin[ 275129 ], 157, 0 );
    const_str_plain_isnumeric = UNSTREAM_STRING( &constant_bin[ 260219 ], 9, 1 );
    const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple, 1, const_str_plain_sub ); Py_INCREF( const_str_plain_sub );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple, 2, const_str_plain_start ); Py_INCREF( const_str_plain_start );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple, 3, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    const_str_digest_13243295198ba360687160a687a3cc51 = UNSTREAM_STRING( &constant_bin[ 32000 ], 2, 0 );
    const_str_digest_a186b542d1544119c6bf394d570c4cc9 = UNSTREAM_STRING( &constant_bin[ 275286 ], 473, 0 );
    const_str_digest_6af79caaca7254737a21b812370d540e = UNSTREAM_STRING( &constant_bin[ 275759 ], 244, 0 );
    const_str_digest_59d16de3818bb11ef313375a43d6cb26 = UNSTREAM_STRING( &constant_bin[ 276003 ], 118, 0 );
    const_tuple_str_plain_self_str_plain_table_str_plain_deletechars_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_table_str_plain_deletechars_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_table_str_plain_deletechars_tuple, 1, const_str_plain_table ); Py_INCREF( const_str_plain_table );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_table_str_plain_deletechars_tuple, 2, const_str_plain_deletechars ); Py_INCREF( const_str_plain_deletechars );
    const_str_digest_1b57ba42cb2c7e3f89f6d65425840a19 = UNSTREAM_STRING( &constant_bin[ 276121 ], 723, 0 );
    const_str_plain_maxunicode = UNSTREAM_STRING( &constant_bin[ 276844 ], 10, 1 );
    const_str_digest_a5a29403df10201d5a15acf254142f51 = UNSTREAM_STRING( &constant_bin[ 276854 ], 188, 0 );
    const_str_plain__to_string_or_unicode_array = UNSTREAM_STRING( &constant_bin[ 277042 ], 27, 1 );
    const_str_plain_isdecimal = UNSTREAM_STRING( &constant_bin[ 260233 ], 9, 1 );
    const_str_digest_d1a8fbd5951f097d7b5e23a9ce6f2e38 = UNSTREAM_STRING( &constant_bin[ 277069 ], 424, 0 );
    const_str_digest_6579a68a1d639c52e7586ab3d39caf7e = UNSTREAM_STRING( &constant_bin[ 277493 ], 106, 0 );
    const_tuple_str_plain_a_str_plain_sep_str_plain_maxsplit_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_sep_str_plain_maxsplit_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_sep_str_plain_maxsplit_tuple, 1, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_sep_str_plain_maxsplit_tuple, 2, const_str_plain_maxsplit ); Py_INCREF( const_str_plain_maxsplit );
    const_str_digest_82790523a655292122ed96170eaac455 = UNSTREAM_STRING( &constant_bin[ 277599 ], 420, 0 );
    const_str_digest_4cd970d8c7925c19e8311aabe268064c = UNSTREAM_STRING( &constant_bin[ 278019 ], 45, 0 );
    const_str_digest_1cbaac8f0091050f5ef63753f284202e = UNSTREAM_STRING( &constant_bin[ 278064 ], 577, 0 );
    const_tuple_str_plain_a_str_plain_tabsize_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_tabsize_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_tabsize_tuple, 1, const_str_plain_tabsize ); Py_INCREF( const_str_plain_tabsize );
    const_tuple_str_plain_self_str_plain_obj_str_plain_val_str_plain_temp_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_val_str_plain_temp_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_val_str_plain_temp_tuple, 1, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_val_str_plain_temp_tuple, 2, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_val_str_plain_temp_tuple, 3, const_str_plain_temp ); Py_INCREF( const_str_plain_temp );
    const_tuple_str_plain_a_str_plain_chars_str_plain_a_arr_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_chars_str_plain_a_arr_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_chars_str_plain_a_arr_tuple, 1, const_str_plain_chars ); Py_INCREF( const_str_plain_chars );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_chars_str_plain_a_arr_tuple, 2, const_str_plain_a_arr ); Py_INCREF( const_str_plain_a_arr );
    const_str_plain_utf_32 = UNSTREAM_STRING( &constant_bin[ 278641 ], 6, 1 );
    const_int_pos_65535 = PyInt_FromLong( 65535l );
    const_str_digest_f34b7924920f137cb73c541bccd59d9e = UNSTREAM_STRING( &constant_bin[ 278647 ], 497, 0 );
    const_str_plain_rfind = UNSTREAM_STRING( &constant_bin[ 259119 ], 5, 1 );
    const_str_digest_9aabf23e6cdfbaaa53cce6a8a354a57e = UNSTREAM_STRING( &constant_bin[ 279144 ], 376, 0 );
    const_tuple_str_plain_a_str_plain_values_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_values_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_values_tuple, 1, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    const_str_digest_ce6e7791833d63412553bd63afe3b68a = UNSTREAM_STRING( &constant_bin[ 279520 ], 183, 0 );
    const_str_digest_c6291081ede3628eae8b561e3aa22d02 = UNSTREAM_STRING( &constant_bin[ 279703 ], 432, 0 );
    const_str_digest_1ea3df1363a47009ecddae9da26b5b9d = UNSTREAM_STRING( &constant_bin[ 280135 ], 958, 0 );
    const_tuple_df78e43c5ccd3841b39b5b0da090b35d_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_df78e43c5ccd3841b39b5b0da090b35d_tuple, 0, const_str_plain_x1 ); Py_INCREF( const_str_plain_x1 );
    PyTuple_SET_ITEM( const_tuple_df78e43c5ccd3841b39b5b0da090b35d_tuple, 1, const_str_plain_x2 ); Py_INCREF( const_str_plain_x2 );
    PyTuple_SET_ITEM( const_tuple_df78e43c5ccd3841b39b5b0da090b35d_tuple, 2, const_str_plain_arr1 ); Py_INCREF( const_str_plain_arr1 );
    PyTuple_SET_ITEM( const_tuple_df78e43c5ccd3841b39b5b0da090b35d_tuple, 3, const_str_plain_arr2 ); Py_INCREF( const_str_plain_arr2 );
    PyTuple_SET_ITEM( const_tuple_df78e43c5ccd3841b39b5b0da090b35d_tuple, 4, const_str_plain_out_size ); Py_INCREF( const_str_plain_out_size );
    PyTuple_SET_ITEM( const_tuple_df78e43c5ccd3841b39b5b0da090b35d_tuple, 5, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    const_str_digest_166450b7aaeed3e1449ea7d0d219e082 = UNSTREAM_STRING( &constant_bin[ 281093 ], 901, 0 );
    const_str_plain_rpartition = UNSTREAM_STRING( &constant_bin[ 256411 ], 10, 1 );
    const_str_digest_06d026467411edebb0ee7ea28f9a5216 = UNSTREAM_STRING( &constant_bin[ 281994 ], 160, 0 );
    const_str_digest_4f9e3534f82f4d696fcbb87af335efd9 = UNSTREAM_STRING( &constant_bin[ 282154 ], 567, 0 );
    const_str_digest_5f408ea264aad5c192d303d32799c57f = UNSTREAM_STRING( &constant_bin[ 271884 ], 2, 0 );
    const_tuple_848e2417a36e2e5562d87499b693dbba_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_848e2417a36e2e5562d87499b693dbba_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_848e2417a36e2e5562d87499b693dbba_tuple, 1, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_848e2417a36e2e5562d87499b693dbba_tuple, 2, const_str_plain_a_arr ); Py_INCREF( const_str_plain_a_arr );
    const_str_plain_i_arr = UNSTREAM_STRING( &constant_bin[ 282721 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_848e2417a36e2e5562d87499b693dbba_tuple, 3, const_str_plain_i_arr ); Py_INCREF( const_str_plain_i_arr );
    PyTuple_SET_ITEM( const_tuple_848e2417a36e2e5562d87499b693dbba_tuple, 4, const_str_plain_out_size ); Py_INCREF( const_str_plain_out_size );
    const_str_digest_0109c0829411c3b4b003a0403894c15e = UNSTREAM_STRING( &constant_bin[ 282726 ], 192, 0 );
    const_str_digest_5d23d111c507bcd3f3ad472825ffdb2d = UNSTREAM_STRING( &constant_bin[ 282918 ], 104, 0 );
    const_str_digest_40d317e05fcf700cc50781bbb3778576 = UNSTREAM_STRING( &constant_bin[ 283022 ], 853, 0 );
    const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple, 1, const_str_plain_sub ); Py_INCREF( const_str_plain_sub );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple, 2, const_str_plain_start ); Py_INCREF( const_str_plain_start );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple, 3, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    const_tuple_str_plain_args_str_plain_newargs_str_plain_chk_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_newargs_str_plain_chk_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    const_str_plain_newargs = UNSTREAM_STRING( &constant_bin[ 283875 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_newargs_str_plain_chk_tuple, 1, const_str_plain_newargs ); Py_INCREF( const_str_plain_newargs );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_newargs_str_plain_chk_tuple, 2, const_str_plain_chk ); Py_INCREF( const_str_plain_chk );
    const_str_plain__get_num_chars = UNSTREAM_STRING( &constant_bin[ 283882 ], 14, 1 );
    const_str_plain__clean_args = UNSTREAM_STRING( &constant_bin[ 283896 ], 11, 1 );
    const_str_digest_28967138fa1cdbae9c3af9308a03d7af = UNSTREAM_STRING( &constant_bin[ 272550 ], 23, 0 );
    const_str_digest_402dafb8652990c3e86f3f5f2231444b = UNSTREAM_STRING( &constant_bin[ 283907 ], 322, 0 );
    const_tuple_str_plain_asbytes_str_plain_long_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_asbytes_str_plain_long_tuple, 0, const_str_plain_asbytes ); Py_INCREF( const_str_plain_asbytes );
    PyTuple_SET_ITEM( const_tuple_str_plain_asbytes_str_plain_long_tuple, 1, const_str_plain_long ); Py_INCREF( const_str_plain_long );
    const_str_digest_35146008002b011fcbcff42d0aacc4f3 = UNSTREAM_STRING( &constant_bin[ 284229 ], 103, 0 );
    const_str_digest_6b9e7a9aed65ab6d66b9fc710b2681de = UNSTREAM_STRING( &constant_bin[ 284332 ], 29, 0 );
    const_str_plain__len = UNSTREAM_STRING( &constant_bin[ 17039 ], 4, 1 );
    const_str_digest_932904e8b8f191665952523663b31823 = UNSTREAM_STRING( &constant_bin[ 284361 ], 223, 0 );
    const_str_digest_120767f4a935a1531601d197d1737bf5 = UNSTREAM_STRING( &constant_bin[ 284584 ], 223, 0 );
    const_str_digest_3d8c57f7219b74162633beae5001d2ea = UNSTREAM_STRING( &constant_bin[ 284807 ], 56, 0 );
    const_tuple_str_plain_a_str_plain_sep_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_sep_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_sep_tuple, 1, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    const_str_digest_d012651e0317365e959276935d450227 = UNSTREAM_STRING( &constant_bin[ 284863 ], 515, 0 );
    const_tuple_8f60b7210c1eb31dd5eca03428259679_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_8f60b7210c1eb31dd5eca03428259679_tuple, 0, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    PyTuple_SET_ITEM( const_tuple_8f60b7210c1eb31dd5eca03428259679_tuple, 1, const_str_plain_itemsize ); Py_INCREF( const_str_plain_itemsize );
    PyTuple_SET_ITEM( const_tuple_8f60b7210c1eb31dd5eca03428259679_tuple, 2, const_str_plain_unicode ); Py_INCREF( const_str_plain_unicode );
    PyTuple_SET_ITEM( const_tuple_8f60b7210c1eb31dd5eca03428259679_tuple, 3, const_str_plain_order ); Py_INCREF( const_str_plain_order );
    const_tuple_e432aca623d2d5a01132395892700600_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_e432aca623d2d5a01132395892700600_tuple, 0, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    PyTuple_SET_ITEM( const_tuple_e432aca623d2d5a01132395892700600_tuple, 1, const_str_plain_itemsize ); Py_INCREF( const_str_plain_itemsize );
    PyTuple_SET_ITEM( const_tuple_e432aca623d2d5a01132395892700600_tuple, 2, const_str_plain_copy ); Py_INCREF( const_str_plain_copy );
    PyTuple_SET_ITEM( const_tuple_e432aca623d2d5a01132395892700600_tuple, 3, const_str_plain_unicode ); Py_INCREF( const_str_plain_unicode );
    PyTuple_SET_ITEM( const_tuple_e432aca623d2d5a01132395892700600_tuple, 4, const_str_plain_order ); Py_INCREF( const_str_plain_order );
    PyTuple_SET_ITEM( const_tuple_e432aca623d2d5a01132395892700600_tuple, 5, const_str_plain_shape ); Py_INCREF( const_str_plain_shape );
    PyTuple_SET_ITEM( const_tuple_e432aca623d2d5a01132395892700600_tuple, 6, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    PyTuple_SET_ITEM( const_tuple_e432aca623d2d5a01132395892700600_tuple, 7, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    const_str_digest_b6d6bb22a164c3a643d1b4c41154ad1d = UNSTREAM_STRING( &constant_bin[ 285378 ], 564, 0 );
    const_str_digest_ddacf7199b10a54bd8a6e4839404b560 = UNSTREAM_STRING( &constant_bin[ 285942 ], 108, 0 );
    const_tuple_9beca1f56a910033400bdcfb3741a450_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_9beca1f56a910033400bdcfb3741a450_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_9beca1f56a910033400bdcfb3741a450_tuple, 1, const_str_plain_width ); Py_INCREF( const_str_plain_width );
    const_str_plain_fillchar = UNSTREAM_STRING( &constant_bin[ 278914 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_9beca1f56a910033400bdcfb3741a450_tuple, 2, const_str_plain_fillchar ); Py_INCREF( const_str_plain_fillchar );
    PyTuple_SET_ITEM( const_tuple_9beca1f56a910033400bdcfb3741a450_tuple, 3, const_str_plain_a_arr ); Py_INCREF( const_str_plain_a_arr );
    PyTuple_SET_ITEM( const_tuple_9beca1f56a910033400bdcfb3741a450_tuple, 4, const_str_plain_width_arr ); Py_INCREF( const_str_plain_width_arr );
    PyTuple_SET_ITEM( const_tuple_9beca1f56a910033400bdcfb3741a450_tuple, 5, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    const_str_digest_ce15cd29702c6c9d86440e3a56bba77c = UNSTREAM_STRING( &constant_bin[ 286050 ], 32, 0 );
    const_str_digest_0b67f0d361a6beaf6a5ab909ea0038c0 = UNSTREAM_STRING( &constant_bin[ 286082 ], 187, 0 );
    const_str_digest_bb0962fef816a978c383a795a3ab79df = UNSTREAM_STRING( &constant_bin[ 286269 ], 627, 0 );
    const_str_digest_8510ce82a61894dda614b077424f1c03 = UNSTREAM_STRING( &constant_bin[ 286896 ], 716, 0 );
    const_tuple_f0791bc3ebe287fb1326beb23b80e222_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_f0791bc3ebe287fb1326beb23b80e222_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_f0791bc3ebe287fb1326beb23b80e222_tuple, 1, const_str_plain_width ); Py_INCREF( const_str_plain_width );
    PyTuple_SET_ITEM( const_tuple_f0791bc3ebe287fb1326beb23b80e222_tuple, 2, const_str_plain_a_arr ); Py_INCREF( const_str_plain_a_arr );
    PyTuple_SET_ITEM( const_tuple_f0791bc3ebe287fb1326beb23b80e222_tuple, 3, const_str_plain_width_arr ); Py_INCREF( const_str_plain_width_arr );
    PyTuple_SET_ITEM( const_tuple_f0791bc3ebe287fb1326beb23b80e222_tuple, 4, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    const_str_digest_45e55f7ec5f130d0205a09e6d808ad1f = UNSTREAM_STRING( &constant_bin[ 287612 ], 1218, 0 );
    const_tuple_str_plain_self_str_plain_encoding_str_plain_errors_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_encoding_str_plain_errors_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_encoding_str_plain_errors_tuple, 1, const_str_plain_encoding ); Py_INCREF( const_str_plain_encoding );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_encoding_str_plain_errors_tuple, 2, const_str_plain_errors ); Py_INCREF( const_str_plain_errors );
    const_str_digest_860001e6dde8a3df67b917047395594f = UNSTREAM_STRING( &constant_bin[ 288830 ], 167, 0 );
    const_str_digest_ac2cb96401e4f8223e7ec873c26c0a53 = UNSTREAM_STRING( &constant_bin[ 288997 ], 204, 0 );
    const_str_digest_0b812166a1767359e46490bf0e9262cd = UNSTREAM_STRING( &constant_bin[ 289201 ], 387, 0 );
    const_tuple_str_plain_self_str_plain_axis_str_plain_kind_str_plain_order_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_axis_str_plain_kind_str_plain_order_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_axis_str_plain_kind_str_plain_order_tuple, 1, const_str_plain_axis ); Py_INCREF( const_str_plain_axis );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_axis_str_plain_kind_str_plain_order_tuple, 2, const_str_plain_kind ); Py_INCREF( const_str_plain_kind );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_axis_str_plain_kind_str_plain_order_tuple, 3, const_str_plain_order ); Py_INCREF( const_str_plain_order );
    const_str_digest_d73dd53e1a6282b2c8ba36b78aabf2f8 = UNSTREAM_STRING( &constant_bin[ 289588 ], 447, 0 );
    const_tuple_str_plain_self_str_plain_old_str_plain_new_str_plain_count_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_old_str_plain_new_str_plain_count_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_old_str_plain_new_str_plain_count_tuple, 1, const_str_plain_old ); Py_INCREF( const_str_plain_old );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_old_str_plain_new_str_plain_count_tuple, 2, const_str_plain_new ); Py_INCREF( const_str_plain_new );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_old_str_plain_new_str_plain_count_tuple, 3, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_str_plain_expandtabs = UNSTREAM_STRING( &constant_bin[ 259860 ], 10, 1 );
    const_str_digest_0b427137de2178b66aa5df5a9ad5360e = UNSTREAM_STRING( &constant_bin[ 290035 ], 228, 0 );
    const_tuple_str_plain_self_str_plain_tabsize_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_tabsize_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_tabsize_tuple, 1, const_str_plain_tabsize ); Py_INCREF( const_str_plain_tabsize );
    const_str_digest_0fd92dba6d696db84e85b6712be8c51c = UNSTREAM_STRING( &constant_bin[ 290263 ], 149, 0 );
    const_tuple_str_plain_self_str_plain_keepends_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_keepends_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_keepends_tuple, 1, const_str_plain_keepends ); Py_INCREF( const_str_plain_keepends );
    const_str_digest_01c8bea278c39e677484d0771ddce9af = UNSTREAM_STRING( &constant_bin[ 290412 ], 460, 0 );
    const_tuple_str_plain_sep_str_plain_seq_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_sep_str_plain_seq_tuple, 0, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    PyTuple_SET_ITEM( const_tuple_str_plain_sep_str_plain_seq_tuple, 1, const_str_plain_seq ); Py_INCREF( const_str_plain_seq );
    const_str_digest_0fa7cdb2bd564dc1afddba0ed189171c = UNSTREAM_STRING( &constant_bin[ 290872 ], 58, 0 );
    const_str_digest_20409f4d1b21d63adec44895ab020a67 = UNSTREAM_STRING( &constant_bin[ 290930 ], 1757, 0 );
    const_str_digest_ee566550407ac0b309e45bcfe9af28d1 = UNSTREAM_STRING( &constant_bin[ 292687 ], 556, 0 );
    const_str_digest_c754d1f17e66e1ac194aaf4d979da935 = UNSTREAM_STRING( &constant_bin[ 293243 ], 197, 0 );
    const_str_digest_1660bc17621154cff83c4b5b159ff78e = UNSTREAM_STRING( &constant_bin[ 293440 ], 549, 0 );
    const_str_digest_68745b0e72d4cfd6a2910c4926bb4753 = UNSTREAM_STRING( &constant_bin[ 293989 ], 1415, 0 );
    const_str_digest_3fa40698fa6a6f051f625e2c2267861d = UNSTREAM_STRING( &constant_bin[ 295404 ], 204, 0 );
    const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 0, const_str_plain_subtype ); Py_INCREF( const_str_plain_subtype );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 1, const_str_plain_shape ); Py_INCREF( const_str_plain_shape );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 2, const_str_plain_itemsize ); Py_INCREF( const_str_plain_itemsize );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 3, const_str_plain_unicode ); Py_INCREF( const_str_plain_unicode );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 4, const_str_plain_buffer ); Py_INCREF( const_str_plain_buffer );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 5, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 6, const_str_plain_strides ); Py_INCREF( const_str_plain_strides );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 7, const_str_plain_order ); Py_INCREF( const_str_plain_order );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 8, const_str_plain_dtype ); Py_INCREF( const_str_plain_dtype );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 9, const_str_plain_filler ); Py_INCREF( const_str_plain_filler );
    PyTuple_SET_ITEM( const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 10, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_digest_3289aefeb1e46bff17ff2d10ff6f22b3 = UNSTREAM_STRING( &constant_bin[ 295608 ], 177, 0 );
    const_tuple_str_plain_args_str_plain_x_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_x_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_x_tuple, 1, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    const_str_plain__use_unicode = UNSTREAM_STRING( &constant_bin[ 295785 ], 12, 1 );
    const_str_digest_5c3af0d5a8e1b958c52cabd57c02af58 = UNSTREAM_STRING( &constant_bin[ 295797 ], 172, 0 );
    const_str_digest_10e1ae4f452855d1730a4c791fc7c4a9 = UNSTREAM_STRING( &constant_bin[ 295969 ], 564, 0 );
    const_str_plain_istitle = UNSTREAM_STRING( &constant_bin[ 259954 ], 7, 1 );
    const_tuple_str_plain_utf_32_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_utf_32_tuple, 0, const_str_plain_utf_32 ); Py_INCREF( const_str_plain_utf_32 );
    const_str_digest_fccf63ccb9c4c444f4ae8ad7ea53e3c3 = UNSTREAM_STRING( &constant_bin[ 296533 ], 192, 0 );
    const_str_digest_be4dc9f635f0fab9b717c832a2782f99 = UNSTREAM_STRING( &constant_bin[ 296725 ], 535, 0 );
    const_str_digest_313b2fc9a8dbd2e0429362347b1b0b0a = UNSTREAM_STRING( &constant_bin[ 297260 ], 197, 0 );
    const_str_digest_7b8d41440bc9fec644ed7b4bfdec0e2d = UNSTREAM_STRING( &constant_bin[ 297457 ], 851, 0 );
    const_str_digest_8521bce6d515eb30d285d8425ec0464b = UNSTREAM_STRING( &constant_bin[ 298308 ], 291, 0 );
    const_tuple_283c761c3aea2c05f47a077a1ab609a6_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_283c761c3aea2c05f47a077a1ab609a6_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_283c761c3aea2c05f47a077a1ab609a6_tuple, 1, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    PyTuple_SET_ITEM( const_tuple_283c761c3aea2c05f47a077a1ab609a6_tuple, 2, const_str_plain_start ); Py_INCREF( const_str_plain_start );
    PyTuple_SET_ITEM( const_tuple_283c761c3aea2c05f47a077a1ab609a6_tuple, 3, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    const_tuple_none_true_none_none_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_none_true_none_none_tuple, 0, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_none_true_none_none_tuple, 1, Py_True ); Py_INCREF( Py_True );
    PyTuple_SET_ITEM( const_tuple_none_true_none_none_tuple, 2, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_none_true_none_none_tuple, 3, Py_None ); Py_INCREF( Py_None );
    const_tuple_str_plain_self_str_plain_width_str_plain_fillchar_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_width_str_plain_fillchar_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_width_str_plain_fillchar_tuple, 1, const_str_plain_width ); Py_INCREF( const_str_plain_width );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_width_str_plain_fillchar_tuple, 2, const_str_plain_fillchar ); Py_INCREF( const_str_plain_fillchar );
    const_str_digest_0f3615246f6268254fc342fe93c15124 = UNSTREAM_STRING( &constant_bin[ 298599 ], 101, 0 );
    const_str_plain_SUbc = UNSTREAM_STRING( &constant_bin[ 298700 ], 4, 1 );
    const_str_digest_5eef8220b28eedd6ef54e0fccc930225 = UNSTREAM_STRING( &constant_bin[ 298704 ], 674, 0 );
    const_tuple_str_plain_a_str_plain_old_str_plain_new_str_plain_count_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_old_str_plain_new_str_plain_count_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_old_str_plain_new_str_plain_count_tuple, 1, const_str_plain_old ); Py_INCREF( const_str_plain_old );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_old_str_plain_new_str_plain_count_tuple, 2, const_str_plain_new ); Py_INCREF( const_str_plain_new );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_old_str_plain_new_str_plain_count_tuple, 3, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_str_plain_ljust = UNSTREAM_STRING( &constant_bin[ 251767 ], 5, 1 );
    const_str_digest_0efc402f724c6562070106da0759b49e = UNSTREAM_STRING( &constant_bin[ 299378 ], 414, 0 );
    const_str_digest_eedf17debea1eff4671fe2e9c404b399 = UNSTREAM_STRING( &constant_bin[ 299792 ], 185, 0 );
    const_str_digest_866313d66dea37b2e1a4c34e0ecc35f7 = UNSTREAM_STRING( &constant_bin[ 299977 ], 209, 0 );
    const_tuple_str_plain_a_str_plain_prefix_str_plain_start_str_plain_end_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_prefix_str_plain_start_str_plain_end_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_prefix_str_plain_start_str_plain_end_tuple, 1, const_str_plain_prefix ); Py_INCREF( const_str_plain_prefix );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_prefix_str_plain_start_str_plain_end_tuple, 2, const_str_plain_start ); Py_INCREF( const_str_plain_start );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_prefix_str_plain_start_str_plain_end_tuple, 3, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    const_tuple_str_plain_a_str_plain_suffix_str_plain_start_str_plain_end_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_suffix_str_plain_start_str_plain_end_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_suffix_str_plain_start_str_plain_end_tuple, 1, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_suffix_str_plain_start_str_plain_end_tuple, 2, const_str_plain_start ); Py_INCREF( const_str_plain_start );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_suffix_str_plain_start_str_plain_end_tuple, 3, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    const_str_plain__globalvar = UNSTREAM_STRING( &constant_bin[ 300186 ], 10, 1 );
    const_str_digest_520a6033be9967222d1db657312d51b3 = UNSTREAM_STRING( &constant_bin[ 300196 ], 158, 0 );
    const_str_digest_771db41ca94e6f1ea410a065e80903b0 = UNSTREAM_STRING( &constant_bin[ 300354 ], 496, 0 );
    const_str_digest_b0bc7306e41c75e3d731d556d1adf767 = UNSTREAM_STRING( &constant_bin[ 300850 ], 161, 0 );
    const_str_plain__unicode = UNSTREAM_STRING( &constant_bin[ 13606 ], 8, 1 );
    const_str_digest_d3a12212d5fa80f932a9ca89b20b1656 = UNSTREAM_STRING( &constant_bin[ 301011 ], 177, 0 );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_numpy$core$defchararray( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_3e0fa734728f3e91ed6b5b4357299490;
static PyCodeObject *codeobj_8bc8671318c3e8989fd49a83a4043e3a;
static PyCodeObject *codeobj_bda0219e7285bf31e37d43f1e90536db;
static PyCodeObject *codeobj_20d0a8878f014db189b88ee053662d0d;
static PyCodeObject *codeobj_5e13668a626a54c131f2447b766b1118;
static PyCodeObject *codeobj_c0a69ffdf5ce79add418a0c03300670a;
static PyCodeObject *codeobj_45ef090305b99884415fa07d407849b9;
static PyCodeObject *codeobj_d320c62af8b20d6ff18fbff8b5a3eaec;
static PyCodeObject *codeobj_f4cc993b938c0b7b72ca23ebe3807d3a;
static PyCodeObject *codeobj_2427f0df1a99ee54052d98522a28ade7;
static PyCodeObject *codeobj_66cd3ddfbe20b66729d1ba150aaabf3c;
static PyCodeObject *codeobj_4753bc977a57cb311c7c1807611ea60b;
static PyCodeObject *codeobj_25dae428e2315d2543638fd560bc6019;
static PyCodeObject *codeobj_37091ca58ae6294a8a6cccb443f967b4;
static PyCodeObject *codeobj_e9a9a11c880fb9a95ef87a375624c8ae;
static PyCodeObject *codeobj_7fb7e8527695449f6de27c712df761f6;
static PyCodeObject *codeobj_aef90ad19239083f1e0e5c2ada83d9ab;
static PyCodeObject *codeobj_9f326743c7b38e0dac7eda79a5fb5220;
static PyCodeObject *codeobj_891591b6adb252391d9cd4f2d0074064;
static PyCodeObject *codeobj_64922c851ec33ba7f840283582a5034b;
static PyCodeObject *codeobj_6023ff2c9d00d178df7e17c829cb08b2;
static PyCodeObject *codeobj_f02cfc4e0202eba5cb46a13022dda3ce;
static PyCodeObject *codeobj_d5fc4ec52582057fc26f94265f9704c9;
static PyCodeObject *codeobj_c7d301a4af431c6d3f1b36270c95795a;
static PyCodeObject *codeobj_4e60b225f279257d5201da57dae5c27c;
static PyCodeObject *codeobj_543d5953ba54135ed4fa712de1ff9905;
static PyCodeObject *codeobj_82915ffb8cc23f090e41c3e7ce523fdb;
static PyCodeObject *codeobj_5d45817cc62062fd3ad531eef011b11d;
static PyCodeObject *codeobj_576c7c8954aaddcd3581abf50f1c4036;
static PyCodeObject *codeobj_4a12094d77e46b0245aa74ffdf98ad29;
static PyCodeObject *codeobj_97ea5dfb81ca0967a6f5ed3f4d101cbb;
static PyCodeObject *codeobj_28851acbd132ef03bca5d0de27db3244;
static PyCodeObject *codeobj_e7e8f9e5c59869d0ab8a9b0c8ebe52e4;
static PyCodeObject *codeobj_588064e3a7be0dcd8519d813292f6995;
static PyCodeObject *codeobj_104a62994edb93f0d06a56f0871a742b;
static PyCodeObject *codeobj_499280535e79e0de38c6d6803da02d0b;
static PyCodeObject *codeobj_0d30f15cc026a899b931a0d57179712a;
static PyCodeObject *codeobj_483dc6ad41367c020fd5ad6c5a95801e;
static PyCodeObject *codeobj_6fe73b3fe2f8f84f354e24ac81a03f85;
static PyCodeObject *codeobj_caac05b022afd18238cd38826ed6a2c1;
static PyCodeObject *codeobj_88e0f8f43136d7979decf04e4c999b27;
static PyCodeObject *codeobj_0871a0020464419ae8b946a41de7898c;
static PyCodeObject *codeobj_f9f994554fa5bbcb468c1526eace8370;
static PyCodeObject *codeobj_66fb799fc3f51a21c78c3b13b0b353f3;
static PyCodeObject *codeobj_30d4ccf81c35f1488e7ccd275079f794;
static PyCodeObject *codeobj_e1a3fb523f8c337d7116eb81109c2049;
static PyCodeObject *codeobj_e0fe49472ffe0143c5b58fdd3dbf0414;
static PyCodeObject *codeobj_6994a26c43346cc9dd240ad9437bc86b;
static PyCodeObject *codeobj_33e5bbf7b23584dd76e269a4abc2ffae;
static PyCodeObject *codeobj_741cb7608c756f759e751a414255e2eb;
static PyCodeObject *codeobj_40775d40770d1c61759195a5097b5f63;
static PyCodeObject *codeobj_c74e4a912fe6802773715d4551429507;
static PyCodeObject *codeobj_3577fc4023390a81aa4eff2a58433ed5;
static PyCodeObject *codeobj_c0017a4efffe109afd364d75388dbf86;
static PyCodeObject *codeobj_adeed44f735add38605bab572a71d063;
static PyCodeObject *codeobj_e6d1c5649234c28bb760d91df8840c44;
static PyCodeObject *codeobj_bc3700ed0ff25e17c78f6812b46a1a55;
static PyCodeObject *codeobj_beadcf5e57018246f301aeb943e8a0b5;
static PyCodeObject *codeobj_ddb064337cc3a965e3b69a6ea5b851c7;
static PyCodeObject *codeobj_f5d9b1ad3c36acd0ebc11aa2666d45f5;
static PyCodeObject *codeobj_8eac18f632e8e14a5437dc0a7a03a1b6;
static PyCodeObject *codeobj_3015e538c1d7d423270b75f9dc03ded5;
static PyCodeObject *codeobj_637036ff19bcab39432111ea43ddfbc3;
static PyCodeObject *codeobj_897a16cf34fb0033047f914b606ea635;
static PyCodeObject *codeobj_365ab4b3be9dfc5d97040071c47d4bce;
static PyCodeObject *codeobj_4224454610916188eafe4f5e79b58080;
static PyCodeObject *codeobj_8d6d8c365abd2c16ac024728332f1e8c;
static PyCodeObject *codeobj_72444349480dc98d3a7d0201ecc81973;
static PyCodeObject *codeobj_5e64cb2ec01dab57518ea6d6f92f8fcd;
static PyCodeObject *codeobj_a33a371a5c7cce89c3c05c68bcfd008c;
static PyCodeObject *codeobj_694d2203ed8fa6e6dccfbba5f077e0e1;
static PyCodeObject *codeobj_5a2a1c32e5d2c6de6354d66048ea1609;
static PyCodeObject *codeobj_3d386d9af9641b5c81db0327962c2ec9;
static PyCodeObject *codeobj_017c7b87a7e7ce81cb5ee90076c85b49;
static PyCodeObject *codeobj_053886896c8be5490a1953eb20b44505;
static PyCodeObject *codeobj_fdd005b3f8a7bd8c4037ef32f73a00f2;
static PyCodeObject *codeobj_6d8e00b68557c53182dbc320ad8510ba;
static PyCodeObject *codeobj_c493b0b68f8b70f3627e36844027d783;
static PyCodeObject *codeobj_8a447f71fb09204701238ffe8b83a234;
static PyCodeObject *codeobj_e0555e0e1ddabfd6d9df168c6e2c8763;
static PyCodeObject *codeobj_ef1dfe6672a95b9b92d91227adb1536b;
static PyCodeObject *codeobj_bcd40bd792ee2e41d66e4c54d40bd52e;
static PyCodeObject *codeobj_60745dc77ca2193582f31aff43d635d8;
static PyCodeObject *codeobj_bffd6034ddf21eabb1869abc674519b6;
static PyCodeObject *codeobj_618f403d0495af6f4868b03c97179f61;
static PyCodeObject *codeobj_404ee8dc1f02878c01ed4adc97ade7b1;
static PyCodeObject *codeobj_912b1fbc0b5de9c6d0ee7e7209ec7eba;
static PyCodeObject *codeobj_5b75276146c4260a652059461937a08b;
static PyCodeObject *codeobj_6a889823890a0accecaf46020b433d3c;
static PyCodeObject *codeobj_d26bd3cf9e512fbf422f4610b79f09b3;
static PyCodeObject *codeobj_ed77619f7e9393d02f500e9957f60750;
static PyCodeObject *codeobj_423c1e0595b4ad94043eb23c3ecf9ed4;
static PyCodeObject *codeobj_f7141c9ab5a4fa7fe787dcbd7418a753;
static PyCodeObject *codeobj_0d4838be6d467b6a234a6112fb67ce70;
static PyCodeObject *codeobj_c85b09eda9b23a3c6d3f4166ad2bd603;
static PyCodeObject *codeobj_9668953ae50b0b755273b9db8a84d4cf;
static PyCodeObject *codeobj_d42a129d212d4614eab0b37513fc4b5a;
static PyCodeObject *codeobj_44b8d7e087a364c55d7746dcae95b39b;
static PyCodeObject *codeobj_0220ac5545ae11b2be02eadc492d3787;
static PyCodeObject *codeobj_8a282e2ea2d7fd9b44a9e69a7b5399e0;
static PyCodeObject *codeobj_95fd8319b5a538d898c475ee4ae67aee;
static PyCodeObject *codeobj_5284241698763c6ec090a47a6bf7e174;
static PyCodeObject *codeobj_5693c0907afdc65b955814b62aa42e89;
static PyCodeObject *codeobj_9c0b3de3cdff3e1e82ebd2a45dd1a148;
static PyCodeObject *codeobj_93e3ce98d20b6216dc9532150c84f84a;
static PyCodeObject *codeobj_fb50cb70987423fb24ab028fff37a8ec;
static PyCodeObject *codeobj_9f34a63a280259c577f6484a1d87048a;
static PyCodeObject *codeobj_d49a57bbf3a7bddb8cc1aeb12aa4f9a6;
static PyCodeObject *codeobj_848f92def2c6b3a6dc8e1eb3a065acdc;
static PyCodeObject *codeobj_4a0e56a9b171c76c9e491cb1aadecaab;
static PyCodeObject *codeobj_cbf724c45ff30f9dd8ccb28b307825ee;
static PyCodeObject *codeobj_465520d6587c2be356aa7de9b6a29342;

static void createModuleCodeObjects(void)
{
    module_filename_obj = const_str_digest_3d8c57f7219b74162633beae5001d2ea;
    codeobj_3e0fa734728f3e91ed6b5b4357299490 = MAKE_CODEOBJ( module_filename_obj, const_str_digest_ce15cd29702c6c9d86440e3a56bba77c, 1, const_tuple_empty, 0, CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8bc8671318c3e8989fd49a83a4043e3a = MAKE_CODEOBJ( module_filename_obj, const_str_plain___add__, 1928, const_tuple_str_plain_self_str_plain_other_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bda0219e7285bf31e37d43f1e90536db = MAKE_CODEOBJ( module_filename_obj, const_str_plain___array_finalize__, 1846, const_tuple_str_plain_self_str_plain_obj_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_20d0a8878f014db189b88ee053662d0d = MAKE_CODEOBJ( module_filename_obj, const_str_plain___eq__, 1868, const_tuple_str_plain_self_str_plain_other_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5e13668a626a54c131f2447b766b1118 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___ge__, 1888, const_tuple_str_plain_self_str_plain_other_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c0a69ffdf5ce79add418a0c03300670a = MAKE_CODEOBJ( module_filename_obj, const_str_plain___getitem__, 1851, const_tuple_str_plain_self_str_plain_obj_str_plain_val_str_plain_temp_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_45ef090305b99884415fa07d407849b9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___gt__, 1908, const_tuple_str_plain_self_str_plain_other_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d320c62af8b20d6ff18fbff8b5a3eaec = MAKE_CODEOBJ( module_filename_obj, const_str_plain___le__, 1898, const_tuple_str_plain_self_str_plain_other_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f4cc993b938c0b7b72ca23ebe3807d3a = MAKE_CODEOBJ( module_filename_obj, const_str_plain___lt__, 1918, const_tuple_str_plain_self_str_plain_other_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_2427f0df1a99ee54052d98522a28ade7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___mod__, 1972, const_tuple_str_plain_self_str_plain_i_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_66cd3ddfbe20b66729d1ba150aaabf3c = MAKE_CODEOBJ( module_filename_obj, const_str_plain___mul__, 1950, const_tuple_str_plain_self_str_plain_i_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4753bc977a57cb311c7c1807611ea60b = MAKE_CODEOBJ( module_filename_obj, const_str_plain___ne__, 1878, const_tuple_str_plain_self_str_plain_other_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_25dae428e2315d2543638fd560bc6019 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___new__, 1811, const_tuple_22f20a043aea4fd1c311081fa77ea299_tuple, 8, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_37091ca58ae6294a8a6cccb443f967b4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___radd__, 1939, const_tuple_str_plain_self_str_plain_other_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e9a9a11c880fb9a95ef87a375624c8ae = MAKE_CODEOBJ( module_filename_obj, const_str_plain___rmod__, 1984, const_tuple_str_plain_self_str_plain_other_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_7fb7e8527695449f6de27c712df761f6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___rmul__, 1961, const_tuple_str_plain_self_str_plain_i_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_aef90ad19239083f1e0e5c2ada83d9ab = MAKE_CODEOBJ( module_filename_obj, const_str_plain__clean_args, 71, const_tuple_str_plain_args_str_plain_newargs_str_plain_chk_tuple, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9f326743c7b38e0dac7eda79a5fb5220 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__get_num_chars, 87, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_891591b6adb252391d9cd4f2d0074064 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__to_string_or_unicode_array, 64, const_tuple_str_plain_result_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_64922c851ec33ba7f840283582a5034b = MAKE_CODEOBJ( module_filename_obj, const_str_plain__use_unicode, 50, const_tuple_str_plain_args_str_plain_x_tuple, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6023ff2c9d00d178df7e17c829cb08b2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add, 262, const_tuple_df78e43c5ccd3841b39b5b0da090b35d_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f02cfc4e0202eba5cb46a13022dda3ce = MAKE_CODEOBJ( module_filename_obj, const_str_plain_argsort, 1987, const_tuple_str_plain_self_str_plain_axis_str_plain_kind_str_plain_order_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d5fc4ec52582057fc26f94265f9704c9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_array, 2478, const_tuple_e432aca623d2d5a01132395892700600_tuple, 5, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c7d301a4af431c6d3f1b36270c95795a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_asarray, 2630, const_tuple_8f60b7210c1eb31dd5eca03428259679_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4e60b225f279257d5201da57dae5c27c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_capitalize, 342, const_tuple_str_plain_a_str_plain_a_arr_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_543d5953ba54135ed4fa712de1ff9905 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_capitalize, 2008, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_82915ffb8cc23f090e41c3e7ce523fdb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_center, 380, const_tuple_9beca1f56a910033400bdcfb3741a450_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5d45817cc62062fd3ad531eef011b11d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_center, 2020, const_tuple_str_plain_self_str_plain_width_str_plain_fillchar_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_576c7c8954aaddcd3581abf50f1c4036 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_chararray, 1669, const_tuple_d4bbaa6198be3c7d31ead03293ed11d2_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4a12094d77e46b0245aa74ffdf98ad29 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_count, 416, const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_97ea5dfb81ca0967a6f5ed3f4d101cbb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_count, 2031, const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_28851acbd132ef03bca5d0de27db3244 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_decode, 462, const_tuple_str_plain_a_str_plain_encoding_str_plain_errors_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_decode, 2043, const_tuple_str_plain_self_str_plain_encoding_str_plain_errors_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_588064e3a7be0dcd8519d813292f6995 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_encode, 508, const_tuple_str_plain_a_str_plain_encoding_str_plain_errors_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_104a62994edb93f0d06a56f0871a742b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_encode, 2054, const_tuple_str_plain_self_str_plain_encoding_str_plain_errors_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_499280535e79e0de38c6d6803da02d0b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_endswith, 543, const_tuple_str_plain_a_str_plain_suffix_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0d30f15cc026a899b931a0d57179712a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_endswith, 2065, const_tuple_283c761c3aea2c05f47a077a1ab609a6_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_483dc6ad41367c020fd5ad6c5a95801e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_equal, 98, const_tuple_str_plain_x1_str_plain_x2_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6fe73b3fe2f8f84f354e24ac81a03f85 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_expandtabs, 587, const_tuple_str_plain_a_str_plain_tabsize_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_caac05b022afd18238cd38826ed6a2c1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_expandtabs, 2077, const_tuple_str_plain_self_str_plain_tabsize_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_88e0f8f43136d7979decf04e4c999b27 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_find, 622, const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0871a0020464419ae8b946a41de7898c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_find, 2089, const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f9f994554fa5bbcb468c1526eace8370 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_greater, 195, const_tuple_str_plain_x1_str_plain_x2_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_66fb799fc3f51a21c78c3b13b0b353f3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_greater_equal, 146, const_tuple_str_plain_x1_str_plain_x2_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_30d4ccf81c35f1488e7ccd275079f794 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_index, 657, const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e1a3fb523f8c337d7116eb81109c2049 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_index, 2101, const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e0fe49472ffe0143c5b58fdd3dbf0414 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isalnum, 684, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6994a26c43346cc9dd240ad9437bc86b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isalnum, 2112, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_33e5bbf7b23584dd76e269a4abc2ffae = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isalpha, 708, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_741cb7608c756f759e751a414255e2eb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isalpha, 2125, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_40775d40770d1c61759195a5097b5f63 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isdecimal, 1638, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c74e4a912fe6802773715d4551429507 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isdecimal, 2465, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3577fc4023390a81aa4eff2a58433ed5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isdigit, 732, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c0017a4efffe109afd364d75388dbf86 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isdigit, 2138, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_adeed44f735add38605bab572a71d063 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_islower, 756, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e6d1c5649234c28bb760d91df8840c44 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_islower, 2150, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bc3700ed0ff25e17c78f6812b46a1a55 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isnumeric, 1607, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_beadcf5e57018246f301aeb943e8a0b5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isnumeric, 2453, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ddb064337cc3a965e3b69a6ea5b851c7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isspace, 781, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f5d9b1ad3c36acd0ebc11aa2666d45f5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isspace, 2163, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8eac18f632e8e14a5437dc0a7a03a1b6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_istitle, 806, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3015e538c1d7d423270b75f9dc03ded5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_istitle, 2176, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_637036ff19bcab39432111ea43ddfbc3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isupper, 830, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_897a16cf34fb0033047f914b606ea635 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_isupper, 2188, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_365ab4b3be9dfc5d97040071c47d4bce = MAKE_CODEOBJ( module_filename_obj, const_str_plain_join, 855, const_tuple_str_plain_sep_str_plain_seq_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4224454610916188eafe4f5e79b58080 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_join, 2201, const_tuple_str_plain_self_str_plain_seq_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8d6d8c365abd2c16ac024728332f1e8c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_less, 219, const_tuple_str_plain_x1_str_plain_x2_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_72444349480dc98d3a7d0201ecc81973 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_less_equal, 171, const_tuple_str_plain_x1_str_plain_x2_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5e64cb2ec01dab57518ea6d6f92f8fcd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ljust, 880, const_tuple_9beca1f56a910033400bdcfb3741a450_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_a33a371a5c7cce89c3c05c68bcfd008c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ljust, 2213, const_tuple_str_plain_self_str_plain_width_str_plain_fillchar_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_694d2203ed8fa6e6dccfbba5f077e0e1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_lower, 915, const_tuple_str_plain_a_str_plain_a_arr_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5a2a1c32e5d2c6de6354d66048ea1609 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_lower, 2225, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_3d386d9af9641b5c81db0327962c2ec9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_lstrip, 951, const_tuple_str_plain_a_str_plain_chars_str_plain_a_arr_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_017c7b87a7e7ce81cb5ee90076c85b49 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_lstrip, 2237, const_tuple_str_plain_self_str_plain_chars_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_053886896c8be5490a1953eb20b44505 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_mod, 316, const_tuple_str_plain_a_str_plain_values_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_fdd005b3f8a7bd8c4037ef32f73a00f2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_multiply, 288, const_tuple_848e2417a36e2e5562d87499b693dbba_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6d8e00b68557c53182dbc320ad8510ba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_not_equal, 122, const_tuple_str_plain_x1_str_plain_x2_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c493b0b68f8b70f3627e36844027d783 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_partition, 1008, const_tuple_str_plain_a_str_plain_sep_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8a447f71fb09204701238ffe8b83a234 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_partition, 2249, const_tuple_str_plain_self_str_plain_sep_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_e0555e0e1ddabfd6d9df168c6e2c8763 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_replace, 1043, const_tuple_str_plain_a_str_plain_old_str_plain_new_str_plain_count_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ef1dfe6672a95b9b92d91227adb1536b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_replace, 2259, const_tuple_str_plain_self_str_plain_old_str_plain_new_str_plain_count_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bcd40bd792ee2e41d66e4c54d40bd52e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rfind, 1075, const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_60745dc77ca2193582f31aff43d635d8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rfind, 2271, const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_bffd6034ddf21eabb1869abc674519b6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rindex, 1107, const_tuple_str_plain_a_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_618f403d0495af6f4868b03c97179f61 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rindex, 2284, const_tuple_str_plain_self_str_plain_sub_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_404ee8dc1f02878c01ed4adc97ade7b1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rjust, 1136, const_tuple_9beca1f56a910033400bdcfb3741a450_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_912b1fbc0b5de9c6d0ee7e7209ec7eba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rjust, 2296, const_tuple_str_plain_self_str_plain_width_str_plain_fillchar_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5b75276146c4260a652059461937a08b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rpartition, 1171, const_tuple_str_plain_a_str_plain_sep_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_6a889823890a0accecaf46020b433d3c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rpartition, 2308, const_tuple_str_plain_self_str_plain_sep_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d26bd3cf9e512fbf422f4610b79f09b3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rsplit, 1206, const_tuple_str_plain_a_str_plain_sep_str_plain_maxsplit_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_ed77619f7e9393d02f500e9957f60750 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rsplit, 2318, const_tuple_str_plain_self_str_plain_sep_str_plain_maxsplit_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_423c1e0595b4ad94043eb23c3ecf9ed4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rstrip, 1243, const_tuple_str_plain_a_str_plain_chars_str_plain_a_arr_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_f7141c9ab5a4fa7fe787dcbd7418a753 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rstrip, 2330, const_tuple_str_plain_self_str_plain_chars_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0d4838be6d467b6a234a6112fb67ce70 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_split, 1287, const_tuple_str_plain_a_str_plain_sep_str_plain_maxsplit_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_c85b09eda9b23a3c6d3f4166ad2bd603 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_split, 2342, const_tuple_str_plain_self_str_plain_sep_str_plain_maxsplit_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9668953ae50b0b755273b9db8a84d4cf = MAKE_CODEOBJ( module_filename_obj, const_str_plain_splitlines, 1321, const_tuple_str_plain_a_str_plain_keepends_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d42a129d212d4614eab0b37513fc4b5a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_splitlines, 2354, const_tuple_str_plain_self_str_plain_keepends_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_44b8d7e087a364c55d7746dcae95b39b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_startswith, 1350, const_tuple_str_plain_a_str_plain_prefix_str_plain_start_str_plain_end_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_0220ac5545ae11b2be02eadc492d3787 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_startswith, 2366, const_tuple_614c5da9f7e26a39d03084a56f615153_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_8a282e2ea2d7fd9b44a9e69a7b5399e0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_str_len, 243, const_tuple_str_plain_a_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_95fd8319b5a538d898c475ee4ae67aee = MAKE_CODEOBJ( module_filename_obj, const_str_plain_strip, 1381, const_tuple_str_plain_a_str_plain_chars_str_plain_a_arr_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5284241698763c6ec090a47a6bf7e174 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_strip, 2378, const_tuple_str_plain_self_str_plain_chars_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_5693c0907afdc65b955814b62aa42e89 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_swapcase, 1429, const_tuple_str_plain_a_str_plain_a_arr_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9c0b3de3cdff3e1e82ebd2a45dd1a148 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_swapcase, 2390, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_93e3ce98d20b6216dc9532150c84f84a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_title, 1466, const_tuple_str_plain_a_str_plain_a_arr_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_fb50cb70987423fb24ab028fff37a8ec = MAKE_CODEOBJ( module_filename_obj, const_str_plain_title, 2402, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_9f34a63a280259c577f6484a1d87048a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_translate, 1505, const_tuple_b10acacc129766c0c55c24c4981d5b23_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_translate, 2415, const_tuple_str_plain_self_str_plain_table_str_plain_deletechars_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_848f92def2c6b3a6dc8e1eb3a065acdc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_upper, 1541, const_tuple_str_plain_a_str_plain_a_arr_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_4a0e56a9b171c76c9e491cb1aadecaab = MAKE_CODEOBJ( module_filename_obj, const_str_plain_upper, 2429, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_cbf724c45ff30f9dd8ccb28b307825ee = MAKE_CODEOBJ( module_filename_obj, const_str_plain_zfill, 1577, const_tuple_f0791bc3ebe287fb1326beb23b80e222_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
    codeobj_465520d6587c2be356aa7de9b6a29342 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_zfill, 2441, const_tuple_str_plain_self_str_plain_width_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | CO_FUTURE_PRINT_FUNCTION );
}

// The module function declarations.
static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_100_startswith( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_101_strip( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_102_swapcase(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_103_title(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_104_translate( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_105_upper(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_106_zfill(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_107_isnumeric(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_108_isdecimal(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_109_array( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_10_less(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_110_asarray( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_11_str_len(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_12_add(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_13_multiply(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_14_mod(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_15_capitalize(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_16_center( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_17_count( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_18_decode( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_19_encode( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_1__use_unicode(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_20_endswith( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_21_expandtabs( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_22_find( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_23_index( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_24_isalnum(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_25_isalpha(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_26_isdigit(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_27_islower(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_28_isspace(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_29_istitle(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_2__to_string_or_unicode_array(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_30_isupper(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_31_join(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_32_ljust( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_33_lower(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_34_lstrip( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_35_partition(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_36_replace( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_37_rfind( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_38_rindex( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_39_rjust( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_3__clean_args(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_40_rpartition(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_41_rsplit( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_42_rstrip( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_43_split( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_44_splitlines( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_45_startswith( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_46_strip( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_47_swapcase(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_48_title(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_49_translate( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_4__get_num_chars(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_50_upper(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_51_zfill(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_52_isnumeric(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_53_isdecimal(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_54___new__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_55___array_finalize__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_56___getitem__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_57___eq__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_58___ne__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_59___ge__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_5_equal(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_60___le__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_61___gt__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_62___lt__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_63___add__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_64___radd__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_65___mul__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_66___rmul__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_67___mod__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_68___rmod__(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_69_argsort( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_6_not_equal(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_70_capitalize(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_71_center( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_72_count( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_73_decode( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_74_encode( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_75_endswith( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_76_expandtabs( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_77_find( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_78_index( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_79_isalnum(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_7_greater_equal(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_80_isalpha(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_81_isdigit(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_82_islower(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_83_isspace(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_84_istitle(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_85_isupper(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_86_join(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_87_ljust( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_88_lower(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_89_lstrip( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_8_less_equal(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_90_partition(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_91_replace( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_92_rfind( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_93_rindex( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_94_rjust( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_95_rpartition(  );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_96_rsplit( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_97_rstrip( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_98_split( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_99_splitlines( PyObject *defaults );


static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_9_greater(  );


// The module function definitions.
static PyObject *impl_numpy$core$defchararray$$$function_1__use_unicode( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[ 0 ];
    PyObject *var_x = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_64922c851ec33ba7f840283582a5034b = NULL;

    struct Nuitka_FrameObject *frame_64922c851ec33ba7f840283582a5034b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_64922c851ec33ba7f840283582a5034b, codeobj_64922c851ec33ba7f840283582a5034b, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_64922c851ec33ba7f840283582a5034b = cache_frame_64922c851ec33ba7f840283582a5034b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_64922c851ec33ba7f840283582a5034b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_64922c851ec33ba7f840283582a5034b ) == 2 ); // Frame stack

    // Framed code:
    tmp_iter_arg_1 = par_args;

    CHECK_OBJECT( tmp_iter_arg_1 );
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 58;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oo";
            exception_lineno = 58;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_x;
        var_x = tmp_assign_source_3;
        Py_INCREF( var_x );
        Py_XDECREF( old );
    }

    tmp_isinstance_inst_1 = var_x;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__unicode );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__unicode );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_unicode" );
        exception_tb = NULL;

        exception_lineno = 59;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_or_left_value_1 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    assert( tmp_called_name_1 != NULL );
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 60;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_2 = var_x;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_64922c851ec33ba7f840283582a5034b->m_frame.f_lineno = 60;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_source_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_dtype );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_type );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 60;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    frame_64922c851ec33ba7f840283582a5034b->m_frame.f_lineno = 60;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3 };
        tmp_or_right_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    Py_INCREF( tmp_or_left_value_1 );
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 60;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_return_value == NULL ))
    {
        tmp_return_value = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 61;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_return_value );
    goto try_return_handler_2;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 58;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__iter_value );
    Py_DECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_string_ );

    if (unlikely( tmp_return_value == NULL ))
    {
        tmp_return_value = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_string_ );
    }

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "string_" );
        exception_tb = NULL;

        exception_lineno = 62;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_64922c851ec33ba7f840283582a5034b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_64922c851ec33ba7f840283582a5034b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_64922c851ec33ba7f840283582a5034b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_64922c851ec33ba7f840283582a5034b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_64922c851ec33ba7f840283582a5034b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_64922c851ec33ba7f840283582a5034b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_64922c851ec33ba7f840283582a5034b,
        type_description_1,
        par_args,
        var_x
    );


    // Release cached frame.
    if ( frame_64922c851ec33ba7f840283582a5034b == cache_frame_64922c851ec33ba7f840283582a5034b )
    {
        Py_DECREF( frame_64922c851ec33ba7f840283582a5034b );
    }
    cache_frame_64922c851ec33ba7f840283582a5034b = NULL;

    assertFrameObject( frame_64922c851ec33ba7f840283582a5034b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_1__use_unicode );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_1__use_unicode );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_2__to_string_or_unicode_array( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_result = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_891591b6adb252391d9cd4f2d0074064 = NULL;

    struct Nuitka_FrameObject *frame_891591b6adb252391d9cd4f2d0074064;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_891591b6adb252391d9cd4f2d0074064, codeobj_891591b6adb252391d9cd4f2d0074064, module_numpy$core$defchararray, sizeof(void *) );
    frame_891591b6adb252391d9cd4f2d0074064 = cache_frame_891591b6adb252391d9cd4f2d0074064;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_891591b6adb252391d9cd4f2d0074064 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_891591b6adb252391d9cd4f2d0074064 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 69;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_asarray );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_1 = par_result;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_891591b6adb252391d9cd4f2d0074064->m_frame.f_lineno = 69;
    tmp_args_element_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_tolist );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 69;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_891591b6adb252391d9cd4f2d0074064->m_frame.f_lineno = 69;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_891591b6adb252391d9cd4f2d0074064 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_891591b6adb252391d9cd4f2d0074064 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_891591b6adb252391d9cd4f2d0074064 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_891591b6adb252391d9cd4f2d0074064, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_891591b6adb252391d9cd4f2d0074064->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_891591b6adb252391d9cd4f2d0074064, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_891591b6adb252391d9cd4f2d0074064,
        type_description_1,
        par_result
    );


    // Release cached frame.
    if ( frame_891591b6adb252391d9cd4f2d0074064 == cache_frame_891591b6adb252391d9cd4f2d0074064 )
    {
        Py_DECREF( frame_891591b6adb252391d9cd4f2d0074064 );
    }
    cache_frame_891591b6adb252391d9cd4f2d0074064 = NULL;

    assertFrameObject( frame_891591b6adb252391d9cd4f2d0074064 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_2__to_string_or_unicode_array );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_result );
    Py_DECREF( par_result );
    par_result = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_result );
    Py_DECREF( par_result );
    par_result = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_2__to_string_or_unicode_array );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_3__clean_args( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[ 0 ];
    PyObject *var_newargs = NULL;
    PyObject *var_chk = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    bool tmp_is_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_return_value;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_aef90ad19239083f1e0e5c2ada83d9ab = NULL;

    struct Nuitka_FrameObject *frame_aef90ad19239083f1e0e5c2ada83d9ab;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = PyList_New( 0 );
    assert( var_newargs == NULL );
    var_newargs = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_aef90ad19239083f1e0e5c2ada83d9ab, codeobj_aef90ad19239083f1e0e5c2ada83d9ab, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_aef90ad19239083f1e0e5c2ada83d9ab = cache_frame_aef90ad19239083f1e0e5c2ada83d9ab;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_aef90ad19239083f1e0e5c2ada83d9ab );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_aef90ad19239083f1e0e5c2ada83d9ab ) == 2 ); // Frame stack

    // Framed code:
    tmp_iter_arg_1 = par_args;

    CHECK_OBJECT( tmp_iter_arg_1 );
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 81;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            exception_lineno = 81;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_4 );
    {
        PyObject *old = var_chk;
        var_chk = tmp_assign_source_4;
        Py_INCREF( var_chk );
        Py_XDECREF( old );
    }

    tmp_compare_left_1 = var_chk;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    tmp_called_instance_1 = var_newargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = var_chk;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_aef90ad19239083f1e0e5c2ada83d9ab->m_frame.f_lineno = 84;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_append, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 81;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aef90ad19239083f1e0e5c2ada83d9ab );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aef90ad19239083f1e0e5c2ada83d9ab );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_aef90ad19239083f1e0e5c2ada83d9ab, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_aef90ad19239083f1e0e5c2ada83d9ab->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_aef90ad19239083f1e0e5c2ada83d9ab, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_aef90ad19239083f1e0e5c2ada83d9ab,
        type_description_1,
        par_args,
        var_newargs,
        var_chk
    );


    // Release cached frame.
    if ( frame_aef90ad19239083f1e0e5c2ada83d9ab == cache_frame_aef90ad19239083f1e0e5c2ada83d9ab )
    {
        Py_DECREF( frame_aef90ad19239083f1e0e5c2ada83d9ab );
    }
    cache_frame_aef90ad19239083f1e0e5c2ada83d9ab = NULL;

    assertFrameObject( frame_aef90ad19239083f1e0e5c2ada83d9ab );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = var_newargs;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_3__clean_args );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)var_newargs );
    Py_DECREF( var_newargs );
    var_newargs = NULL;

    Py_XDECREF( var_chk );
    var_chk = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)var_newargs );
    Py_DECREF( var_newargs );
    var_newargs = NULL;

    Py_XDECREF( var_chk );
    var_chk = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_3__clean_args );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_4__get_num_chars( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    static struct Nuitka_FrameObject *cache_frame_9f326743c7b38e0dac7eda79a5fb5220 = NULL;

    struct Nuitka_FrameObject *frame_9f326743c7b38e0dac7eda79a5fb5220;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9f326743c7b38e0dac7eda79a5fb5220, codeobj_9f326743c7b38e0dac7eda79a5fb5220, module_numpy$core$defchararray, sizeof(void *) );
    frame_9f326743c7b38e0dac7eda79a5fb5220 = cache_frame_9f326743c7b38e0dac7eda79a5fb5220;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9f326743c7b38e0dac7eda79a5fb5220 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9f326743c7b38e0dac7eda79a5fb5220 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    assert( tmp_called_name_1 != NULL );
    tmp_source_name_2 = par_a;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_dtype );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_type );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 93;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    frame_9f326743c7b38e0dac7eda79a5fb5220->m_frame.f_lineno = 93;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 93;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_3 = par_a;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_itemsize );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = const_int_pos_4;
    tmp_return_value = BINARY_OPERATION_FLOORDIV( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_source_name_4 = par_a;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_itemsize );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f326743c7b38e0dac7eda79a5fb5220 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f326743c7b38e0dac7eda79a5fb5220 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f326743c7b38e0dac7eda79a5fb5220 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9f326743c7b38e0dac7eda79a5fb5220, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9f326743c7b38e0dac7eda79a5fb5220->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9f326743c7b38e0dac7eda79a5fb5220, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9f326743c7b38e0dac7eda79a5fb5220,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_9f326743c7b38e0dac7eda79a5fb5220 == cache_frame_9f326743c7b38e0dac7eda79a5fb5220 )
    {
        Py_DECREF( frame_9f326743c7b38e0dac7eda79a5fb5220 );
    }
    cache_frame_9f326743c7b38e0dac7eda79a5fb5220 = NULL;

    assertFrameObject( frame_9f326743c7b38e0dac7eda79a5fb5220 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_4__get_num_chars );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_4__get_num_chars );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_5_equal( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x1 = python_pars[ 0 ];
    PyObject *par_x2 = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_483dc6ad41367c020fd5ad6c5a95801e = NULL;

    struct Nuitka_FrameObject *frame_483dc6ad41367c020fd5ad6c5a95801e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_483dc6ad41367c020fd5ad6c5a95801e, codeobj_483dc6ad41367c020fd5ad6c5a95801e, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_483dc6ad41367c020fd5ad6c5a95801e = cache_frame_483dc6ad41367c020fd5ad6c5a95801e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_483dc6ad41367c020fd5ad6c5a95801e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_483dc6ad41367c020fd5ad6c5a95801e ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_compare_chararrays );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_compare_chararrays );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "compare_chararrays" );
        exception_tb = NULL;

        exception_lineno = 120;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_x1;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_x2;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = const_str_digest_13243295198ba360687160a687a3cc51;
    tmp_args_element_name_4 = Py_True;
    frame_483dc6ad41367c020fd5ad6c5a95801e->m_frame.f_lineno = 120;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 120;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_483dc6ad41367c020fd5ad6c5a95801e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_483dc6ad41367c020fd5ad6c5a95801e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_483dc6ad41367c020fd5ad6c5a95801e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_483dc6ad41367c020fd5ad6c5a95801e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_483dc6ad41367c020fd5ad6c5a95801e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_483dc6ad41367c020fd5ad6c5a95801e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_483dc6ad41367c020fd5ad6c5a95801e,
        type_description_1,
        par_x1,
        par_x2
    );


    // Release cached frame.
    if ( frame_483dc6ad41367c020fd5ad6c5a95801e == cache_frame_483dc6ad41367c020fd5ad6c5a95801e )
    {
        Py_DECREF( frame_483dc6ad41367c020fd5ad6c5a95801e );
    }
    cache_frame_483dc6ad41367c020fd5ad6c5a95801e = NULL;

    assertFrameObject( frame_483dc6ad41367c020fd5ad6c5a95801e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_5_equal );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_5_equal );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_6_not_equal( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x1 = python_pars[ 0 ];
    PyObject *par_x2 = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_6d8e00b68557c53182dbc320ad8510ba = NULL;

    struct Nuitka_FrameObject *frame_6d8e00b68557c53182dbc320ad8510ba;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6d8e00b68557c53182dbc320ad8510ba, codeobj_6d8e00b68557c53182dbc320ad8510ba, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_6d8e00b68557c53182dbc320ad8510ba = cache_frame_6d8e00b68557c53182dbc320ad8510ba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6d8e00b68557c53182dbc320ad8510ba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6d8e00b68557c53182dbc320ad8510ba ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_compare_chararrays );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_compare_chararrays );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "compare_chararrays" );
        exception_tb = NULL;

        exception_lineno = 144;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_x1;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_x2;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = const_str_digest_5f408ea264aad5c192d303d32799c57f;
    tmp_args_element_name_4 = Py_True;
    frame_6d8e00b68557c53182dbc320ad8510ba->m_frame.f_lineno = 144;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6d8e00b68557c53182dbc320ad8510ba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6d8e00b68557c53182dbc320ad8510ba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6d8e00b68557c53182dbc320ad8510ba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6d8e00b68557c53182dbc320ad8510ba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6d8e00b68557c53182dbc320ad8510ba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6d8e00b68557c53182dbc320ad8510ba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6d8e00b68557c53182dbc320ad8510ba,
        type_description_1,
        par_x1,
        par_x2
    );


    // Release cached frame.
    if ( frame_6d8e00b68557c53182dbc320ad8510ba == cache_frame_6d8e00b68557c53182dbc320ad8510ba )
    {
        Py_DECREF( frame_6d8e00b68557c53182dbc320ad8510ba );
    }
    cache_frame_6d8e00b68557c53182dbc320ad8510ba = NULL;

    assertFrameObject( frame_6d8e00b68557c53182dbc320ad8510ba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_6_not_equal );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_6_not_equal );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_7_greater_equal( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x1 = python_pars[ 0 ];
    PyObject *par_x2 = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_66fb799fc3f51a21c78c3b13b0b353f3 = NULL;

    struct Nuitka_FrameObject *frame_66fb799fc3f51a21c78c3b13b0b353f3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_66fb799fc3f51a21c78c3b13b0b353f3, codeobj_66fb799fc3f51a21c78c3b13b0b353f3, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_66fb799fc3f51a21c78c3b13b0b353f3 = cache_frame_66fb799fc3f51a21c78c3b13b0b353f3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_66fb799fc3f51a21c78c3b13b0b353f3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_66fb799fc3f51a21c78c3b13b0b353f3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_compare_chararrays );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_compare_chararrays );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "compare_chararrays" );
        exception_tb = NULL;

        exception_lineno = 169;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_x1;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_x2;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = const_str_digest_a53e6044afa65158b90d5bc4937bebce;
    tmp_args_element_name_4 = Py_True;
    frame_66fb799fc3f51a21c78c3b13b0b353f3->m_frame.f_lineno = 169;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 169;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_66fb799fc3f51a21c78c3b13b0b353f3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_66fb799fc3f51a21c78c3b13b0b353f3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_66fb799fc3f51a21c78c3b13b0b353f3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_66fb799fc3f51a21c78c3b13b0b353f3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_66fb799fc3f51a21c78c3b13b0b353f3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_66fb799fc3f51a21c78c3b13b0b353f3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_66fb799fc3f51a21c78c3b13b0b353f3,
        type_description_1,
        par_x1,
        par_x2
    );


    // Release cached frame.
    if ( frame_66fb799fc3f51a21c78c3b13b0b353f3 == cache_frame_66fb799fc3f51a21c78c3b13b0b353f3 )
    {
        Py_DECREF( frame_66fb799fc3f51a21c78c3b13b0b353f3 );
    }
    cache_frame_66fb799fc3f51a21c78c3b13b0b353f3 = NULL;

    assertFrameObject( frame_66fb799fc3f51a21c78c3b13b0b353f3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_7_greater_equal );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_7_greater_equal );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_8_less_equal( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x1 = python_pars[ 0 ];
    PyObject *par_x2 = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_72444349480dc98d3a7d0201ecc81973 = NULL;

    struct Nuitka_FrameObject *frame_72444349480dc98d3a7d0201ecc81973;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_72444349480dc98d3a7d0201ecc81973, codeobj_72444349480dc98d3a7d0201ecc81973, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_72444349480dc98d3a7d0201ecc81973 = cache_frame_72444349480dc98d3a7d0201ecc81973;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_72444349480dc98d3a7d0201ecc81973 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_72444349480dc98d3a7d0201ecc81973 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_compare_chararrays );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_compare_chararrays );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "compare_chararrays" );
        exception_tb = NULL;

        exception_lineno = 193;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_x1;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_x2;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = const_str_digest_c566e8f3fba64199b66b7b7424440c9c;
    tmp_args_element_name_4 = Py_True;
    frame_72444349480dc98d3a7d0201ecc81973->m_frame.f_lineno = 193;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 193;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_72444349480dc98d3a7d0201ecc81973 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_72444349480dc98d3a7d0201ecc81973 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_72444349480dc98d3a7d0201ecc81973 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_72444349480dc98d3a7d0201ecc81973, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_72444349480dc98d3a7d0201ecc81973->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_72444349480dc98d3a7d0201ecc81973, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_72444349480dc98d3a7d0201ecc81973,
        type_description_1,
        par_x1,
        par_x2
    );


    // Release cached frame.
    if ( frame_72444349480dc98d3a7d0201ecc81973 == cache_frame_72444349480dc98d3a7d0201ecc81973 )
    {
        Py_DECREF( frame_72444349480dc98d3a7d0201ecc81973 );
    }
    cache_frame_72444349480dc98d3a7d0201ecc81973 = NULL;

    assertFrameObject( frame_72444349480dc98d3a7d0201ecc81973 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_8_less_equal );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_8_less_equal );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_9_greater( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x1 = python_pars[ 0 ];
    PyObject *par_x2 = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_f9f994554fa5bbcb468c1526eace8370 = NULL;

    struct Nuitka_FrameObject *frame_f9f994554fa5bbcb468c1526eace8370;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f9f994554fa5bbcb468c1526eace8370, codeobj_f9f994554fa5bbcb468c1526eace8370, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_f9f994554fa5bbcb468c1526eace8370 = cache_frame_f9f994554fa5bbcb468c1526eace8370;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f9f994554fa5bbcb468c1526eace8370 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f9f994554fa5bbcb468c1526eace8370 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_compare_chararrays );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_compare_chararrays );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "compare_chararrays" );
        exception_tb = NULL;

        exception_lineno = 217;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_x1;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_x2;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = const_str_chr_62;
    tmp_args_element_name_4 = Py_True;
    frame_f9f994554fa5bbcb468c1526eace8370->m_frame.f_lineno = 217;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 217;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f9f994554fa5bbcb468c1526eace8370 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f9f994554fa5bbcb468c1526eace8370 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f9f994554fa5bbcb468c1526eace8370 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f9f994554fa5bbcb468c1526eace8370, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f9f994554fa5bbcb468c1526eace8370->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f9f994554fa5bbcb468c1526eace8370, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f9f994554fa5bbcb468c1526eace8370,
        type_description_1,
        par_x1,
        par_x2
    );


    // Release cached frame.
    if ( frame_f9f994554fa5bbcb468c1526eace8370 == cache_frame_f9f994554fa5bbcb468c1526eace8370 )
    {
        Py_DECREF( frame_f9f994554fa5bbcb468c1526eace8370 );
    }
    cache_frame_f9f994554fa5bbcb468c1526eace8370 = NULL;

    assertFrameObject( frame_f9f994554fa5bbcb468c1526eace8370 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_9_greater );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_9_greater );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_10_less( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x1 = python_pars[ 0 ];
    PyObject *par_x2 = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8d6d8c365abd2c16ac024728332f1e8c = NULL;

    struct Nuitka_FrameObject *frame_8d6d8c365abd2c16ac024728332f1e8c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8d6d8c365abd2c16ac024728332f1e8c, codeobj_8d6d8c365abd2c16ac024728332f1e8c, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_8d6d8c365abd2c16ac024728332f1e8c = cache_frame_8d6d8c365abd2c16ac024728332f1e8c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8d6d8c365abd2c16ac024728332f1e8c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8d6d8c365abd2c16ac024728332f1e8c ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_compare_chararrays );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_compare_chararrays );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "compare_chararrays" );
        exception_tb = NULL;

        exception_lineno = 241;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_x1;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_x2;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = const_str_chr_60;
    tmp_args_element_name_4 = Py_True;
    frame_8d6d8c365abd2c16ac024728332f1e8c->m_frame.f_lineno = 241;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8d6d8c365abd2c16ac024728332f1e8c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8d6d8c365abd2c16ac024728332f1e8c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8d6d8c365abd2c16ac024728332f1e8c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8d6d8c365abd2c16ac024728332f1e8c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8d6d8c365abd2c16ac024728332f1e8c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8d6d8c365abd2c16ac024728332f1e8c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8d6d8c365abd2c16ac024728332f1e8c,
        type_description_1,
        par_x1,
        par_x2
    );


    // Release cached frame.
    if ( frame_8d6d8c365abd2c16ac024728332f1e8c == cache_frame_8d6d8c365abd2c16ac024728332f1e8c )
    {
        Py_DECREF( frame_8d6d8c365abd2c16ac024728332f1e8c );
    }
    cache_frame_8d6d8c365abd2c16ac024728332f1e8c = NULL;

    assertFrameObject( frame_8d6d8c365abd2c16ac024728332f1e8c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_10_less );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_10_less );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_11_str_len( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 = NULL;

    struct Nuitka_FrameObject *frame_8a282e2ea2d7fd9b44a9e69a7b5399e0;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8a282e2ea2d7fd9b44a9e69a7b5399e0, codeobj_8a282e2ea2d7fd9b44a9e69a7b5399e0, module_numpy$core$defchararray, sizeof(void *) );
    frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 = cache_frame_8a282e2ea2d7fd9b44a9e69a7b5399e0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 260;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_integer );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_integer );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "integer" );
        exception_tb = NULL;

        exception_lineno = 260;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain___len__;
    frame_8a282e2ea2d7fd9b44a9e69a7b5399e0->m_frame.f_lineno = 260;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 260;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8a282e2ea2d7fd9b44a9e69a7b5399e0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8a282e2ea2d7fd9b44a9e69a7b5399e0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8a282e2ea2d7fd9b44a9e69a7b5399e0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8a282e2ea2d7fd9b44a9e69a7b5399e0,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 == cache_frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 )
    {
        Py_DECREF( frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 );
    }
    cache_frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 = NULL;

    assertFrameObject( frame_8a282e2ea2d7fd9b44a9e69a7b5399e0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_11_str_len );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_11_str_len );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_12_add( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x1 = python_pars[ 0 ];
    PyObject *par_x2 = python_pars[ 1 ];
    PyObject *var_arr1 = NULL;
    PyObject *var_arr2 = NULL;
    PyObject *var_out_size = NULL;
    PyObject *var_dtype = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_left_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    static struct Nuitka_FrameObject *cache_frame_6023ff2c9d00d178df7e17c829cb08b2 = NULL;

    struct Nuitka_FrameObject *frame_6023ff2c9d00d178df7e17c829cb08b2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6023ff2c9d00d178df7e17c829cb08b2, codeobj_6023ff2c9d00d178df7e17c829cb08b2, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6023ff2c9d00d178df7e17c829cb08b2 = cache_frame_6023ff2c9d00d178df7e17c829cb08b2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6023ff2c9d00d178df7e17c829cb08b2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6023ff2c9d00d178df7e17c829cb08b2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 282;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_x1;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_6023ff2c9d00d178df7e17c829cb08b2->m_frame.f_lineno = 282;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 282;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_arr1 == NULL );
    var_arr1 = tmp_assign_source_1;

    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 283;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_x2;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_6023ff2c9d00d178df7e17c829cb08b2->m_frame.f_lineno = 283;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 283;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_arr2 == NULL );
    var_arr2 = tmp_assign_source_2;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__get_num_chars );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__get_num_chars );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_get_num_chars" );
        exception_tb = NULL;

        exception_lineno = 284;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = var_arr1;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_6023ff2c9d00d178df7e17c829cb08b2->m_frame.f_lineno = 284;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_left_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 284;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__get_num_chars );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__get_num_chars );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_get_num_chars" );
        exception_tb = NULL;

        exception_lineno = 284;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = var_arr2;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_6023ff2c9d00d178df7e17c829cb08b2->m_frame.f_lineno = 284;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 284;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 284;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_out_size == NULL );
    var_out_size = tmp_assign_source_3;

    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__use_unicode );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__use_unicode );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_use_unicode" );
        exception_tb = NULL;

        exception_lineno = 285;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = var_arr1;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = var_arr2;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_6023ff2c9d00d178df7e17c829cb08b2->m_frame.f_lineno = 285;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_dtype == NULL );
    var_dtype = tmp_assign_source_4;

    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 286;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = var_arr1;

    CHECK_OBJECT( tmp_args_element_name_7 );
    tmp_args_element_name_8 = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_dtype;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_8, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_out_size;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_8, 1, tmp_tuple_element_1 );
    tmp_args_element_name_9 = const_str_plain___add__;
    tmp_args_element_name_10 = PyTuple_New( 1 );
    tmp_tuple_element_2 = var_arr2;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_10, 0, tmp_tuple_element_2 );
    frame_6023ff2c9d00d178df7e17c829cb08b2->m_frame.f_lineno = 286;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_args_element_name_8 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6023ff2c9d00d178df7e17c829cb08b2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6023ff2c9d00d178df7e17c829cb08b2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6023ff2c9d00d178df7e17c829cb08b2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6023ff2c9d00d178df7e17c829cb08b2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6023ff2c9d00d178df7e17c829cb08b2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6023ff2c9d00d178df7e17c829cb08b2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6023ff2c9d00d178df7e17c829cb08b2,
        type_description_1,
        par_x1,
        par_x2,
        var_arr1,
        var_arr2,
        var_out_size,
        var_dtype
    );


    // Release cached frame.
    if ( frame_6023ff2c9d00d178df7e17c829cb08b2 == cache_frame_6023ff2c9d00d178df7e17c829cb08b2 )
    {
        Py_DECREF( frame_6023ff2c9d00d178df7e17c829cb08b2 );
    }
    cache_frame_6023ff2c9d00d178df7e17c829cb08b2 = NULL;

    assertFrameObject( frame_6023ff2c9d00d178df7e17c829cb08b2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_12_add );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    CHECK_OBJECT( (PyObject *)var_arr1 );
    Py_DECREF( var_arr1 );
    var_arr1 = NULL;

    CHECK_OBJECT( (PyObject *)var_arr2 );
    Py_DECREF( var_arr2 );
    var_arr2 = NULL;

    CHECK_OBJECT( (PyObject *)var_out_size );
    Py_DECREF( var_out_size );
    var_out_size = NULL;

    CHECK_OBJECT( (PyObject *)var_dtype );
    Py_DECREF( var_dtype );
    var_dtype = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x1 );
    Py_DECREF( par_x1 );
    par_x1 = NULL;

    CHECK_OBJECT( (PyObject *)par_x2 );
    Py_DECREF( par_x2 );
    par_x2 = NULL;

    Py_XDECREF( var_arr1 );
    var_arr1 = NULL;

    Py_XDECREF( var_arr2 );
    var_arr2 = NULL;

    Py_XDECREF( var_out_size );
    var_out_size = NULL;

    Py_XDECREF( var_dtype );
    var_dtype = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_12_add );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_13_multiply( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_i = python_pars[ 1 ];
    PyObject *var_a_arr = NULL;
    PyObject *var_i_arr = NULL;
    PyObject *var_out_size = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    static struct Nuitka_FrameObject *cache_frame_fdd005b3f8a7bd8c4037ef32f73a00f2 = NULL;

    struct Nuitka_FrameObject *frame_fdd005b3f8a7bd8c4037ef32f73a00f2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fdd005b3f8a7bd8c4037ef32f73a00f2, codeobj_fdd005b3f8a7bd8c4037ef32f73a00f2, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_fdd005b3f8a7bd8c4037ef32f73a00f2 = cache_frame_fdd005b3f8a7bd8c4037ef32f73a00f2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fdd005b3f8a7bd8c4037ef32f73a00f2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fdd005b3f8a7bd8c4037ef32f73a00f2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 308;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame.f_lineno = 308;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 308;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 309;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_i;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame.f_lineno = 309;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_i_arr == NULL );
    var_i_arr = tmp_assign_source_2;

    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    assert( tmp_called_name_1 != NULL );
    tmp_source_name_2 = var_i_arr;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_dtype );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 310;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_type );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 310;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_integer );

    if (unlikely( tmp_args_element_name_4 == NULL ))
    {
        tmp_args_element_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_integer );
    }

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "integer" );
        exception_tb = NULL;

        exception_lineno = 310;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame.f_lineno = 310;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 310;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 310;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_str_digest_6b9e7a9aed65ab6d66b9fc710b2681de;
    frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame.f_lineno = 311;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 311;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__get_num_chars );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__get_num_chars );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_get_num_chars" );
        exception_tb = NULL;

        exception_lineno = 312;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame.f_lineno = 312;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_left_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 312;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_BUILTIN( const_str_plain_max );
    assert( tmp_called_name_3 != NULL );
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_long );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_long );
    }

    if ( tmp_called_name_4 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "long" );
        exception_tb = NULL;

        exception_lineno = 312;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_instance_3 = var_i_arr;

    CHECK_OBJECT( tmp_called_instance_3 );
    frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame.f_lineno = 312;
    tmp_args_element_name_7 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_max );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 312;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame.f_lineno = 312;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_args_element_name_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 312;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = const_int_0;
    frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame.f_lineno = 312;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_8 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 312;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 312;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_out_size == NULL );
    var_out_size = tmp_assign_source_3;

    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 313;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_9 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_9 );
    tmp_args_element_name_10 = PyTuple_New( 2 );
    tmp_source_name_4 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_dtype );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 314;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_type );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 314;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_10, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_out_size;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_10, 1, tmp_tuple_element_1 );
    tmp_args_element_name_11 = const_str_plain___mul__;
    tmp_args_element_name_12 = PyTuple_New( 1 );
    tmp_tuple_element_2 = var_i_arr;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_12, 0, tmp_tuple_element_2 );
    frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame.f_lineno = 313;
    {
        PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_args_element_name_10 );
    Py_DECREF( tmp_args_element_name_12 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 313;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fdd005b3f8a7bd8c4037ef32f73a00f2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fdd005b3f8a7bd8c4037ef32f73a00f2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fdd005b3f8a7bd8c4037ef32f73a00f2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fdd005b3f8a7bd8c4037ef32f73a00f2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fdd005b3f8a7bd8c4037ef32f73a00f2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fdd005b3f8a7bd8c4037ef32f73a00f2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fdd005b3f8a7bd8c4037ef32f73a00f2,
        type_description_1,
        par_a,
        par_i,
        var_a_arr,
        var_i_arr,
        var_out_size
    );


    // Release cached frame.
    if ( frame_fdd005b3f8a7bd8c4037ef32f73a00f2 == cache_frame_fdd005b3f8a7bd8c4037ef32f73a00f2 )
    {
        Py_DECREF( frame_fdd005b3f8a7bd8c4037ef32f73a00f2 );
    }
    cache_frame_fdd005b3f8a7bd8c4037ef32f73a00f2 = NULL;

    assertFrameObject( frame_fdd005b3f8a7bd8c4037ef32f73a00f2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_13_multiply );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_i_arr );
    Py_DECREF( var_i_arr );
    var_i_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_out_size );
    Py_DECREF( var_out_size );
    var_out_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    Py_XDECREF( var_i_arr );
    var_i_arr = NULL;

    Py_XDECREF( var_out_size );
    var_out_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_13_multiply );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_14_mod( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_values = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_053886896c8be5490a1953eb20b44505 = NULL;

    struct Nuitka_FrameObject *frame_053886896c8be5490a1953eb20b44505;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_053886896c8be5490a1953eb20b44505, codeobj_053886896c8be5490a1953eb20b44505, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_053886896c8be5490a1953eb20b44505 = cache_frame_053886896c8be5490a1953eb20b44505;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_053886896c8be5490a1953eb20b44505 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_053886896c8be5490a1953eb20b44505 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_to_string_or_unicode_array" );
        exception_tb = NULL;

        exception_lineno = 339;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 340;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_a;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 340;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain___mod__;
    tmp_args_element_name_5 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_values;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_1 );
    frame_053886896c8be5490a1953eb20b44505->m_frame.f_lineno = 340;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_053886896c8be5490a1953eb20b44505->m_frame.f_lineno = 339;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 339;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_053886896c8be5490a1953eb20b44505 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_053886896c8be5490a1953eb20b44505 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_053886896c8be5490a1953eb20b44505 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_053886896c8be5490a1953eb20b44505, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_053886896c8be5490a1953eb20b44505->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_053886896c8be5490a1953eb20b44505, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_053886896c8be5490a1953eb20b44505,
        type_description_1,
        par_a,
        par_values
    );


    // Release cached frame.
    if ( frame_053886896c8be5490a1953eb20b44505 == cache_frame_053886896c8be5490a1953eb20b44505 )
    {
        Py_DECREF( frame_053886896c8be5490a1953eb20b44505 );
    }
    cache_frame_053886896c8be5490a1953eb20b44505 = NULL;

    assertFrameObject( frame_053886896c8be5490a1953eb20b44505 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_14_mod );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_14_mod );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_15_capitalize( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *var_a_arr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_4e60b225f279257d5201da57dae5c27c = NULL;

    struct Nuitka_FrameObject *frame_4e60b225f279257d5201da57dae5c27c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4e60b225f279257d5201da57dae5c27c, codeobj_4e60b225f279257d5201da57dae5c27c, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_4e60b225f279257d5201da57dae5c27c = cache_frame_4e60b225f279257d5201da57dae5c27c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4e60b225f279257d5201da57dae5c27c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4e60b225f279257d5201da57dae5c27c ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 376;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_4e60b225f279257d5201da57dae5c27c->m_frame.f_lineno = 376;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 376;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 377;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_1 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dtype );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 377;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_str_plain_capitalize;
    frame_4e60b225f279257d5201da57dae5c27c->m_frame.f_lineno = 377;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 377;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4e60b225f279257d5201da57dae5c27c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4e60b225f279257d5201da57dae5c27c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4e60b225f279257d5201da57dae5c27c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4e60b225f279257d5201da57dae5c27c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4e60b225f279257d5201da57dae5c27c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4e60b225f279257d5201da57dae5c27c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4e60b225f279257d5201da57dae5c27c,
        type_description_1,
        par_a,
        var_a_arr
    );


    // Release cached frame.
    if ( frame_4e60b225f279257d5201da57dae5c27c == cache_frame_4e60b225f279257d5201da57dae5c27c )
    {
        Py_DECREF( frame_4e60b225f279257d5201da57dae5c27c );
    }
    cache_frame_4e60b225f279257d5201da57dae5c27c = NULL;

    assertFrameObject( frame_4e60b225f279257d5201da57dae5c27c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_15_capitalize );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_15_capitalize );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_16_center( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_width = python_pars[ 1 ];
    PyObject *par_fillchar = python_pars[ 2 ];
    PyObject *var_a_arr = NULL;
    PyObject *var_width_arr = NULL;
    PyObject *var_size = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    static struct Nuitka_FrameObject *cache_frame_82915ffb8cc23f090e41c3e7ce523fdb = NULL;

    struct Nuitka_FrameObject *frame_82915ffb8cc23f090e41c3e7ce523fdb;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_82915ffb8cc23f090e41c3e7ce523fdb, codeobj_82915ffb8cc23f090e41c3e7ce523fdb, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_82915ffb8cc23f090e41c3e7ce523fdb = cache_frame_82915ffb8cc23f090e41c3e7ce523fdb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_82915ffb8cc23f090e41c3e7ce523fdb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_82915ffb8cc23f090e41c3e7ce523fdb ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 407;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_82915ffb8cc23f090e41c3e7ce523fdb->m_frame.f_lineno = 407;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 407;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 408;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_width;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_82915ffb8cc23f090e41c3e7ce523fdb->m_frame.f_lineno = 408;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 408;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_width_arr == NULL );
    var_width_arr = tmp_assign_source_2;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_long );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_long );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "long" );
        exception_tb = NULL;

        exception_lineno = 409;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 409;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_max );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 409;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = var_width_arr;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_flat );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 409;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_82915ffb8cc23f090e41c3e7ce523fdb->m_frame.f_lineno = 409;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 409;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_82915ffb8cc23f090e41c3e7ce523fdb->m_frame.f_lineno = 409;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 409;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_size == NULL );
    var_size = tmp_assign_source_3;

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 410;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_issubdtype );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 410;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_dtype );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 410;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 410;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_string_ );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 410;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_82915ffb8cc23f090e41c3e7ce523fdb->m_frame.f_lineno = 410;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 410;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 410;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asbytes" );
        exception_tb = NULL;

        exception_lineno = 411;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_fillchar;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_82915ffb8cc23f090e41c3e7ce523fdb->m_frame.f_lineno = 411;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 411;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_fillchar;
        assert( old != NULL );
        par_fillchar = tmp_assign_source_4;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 412;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_args_element_name_9 = PyTuple_New( 2 );
    tmp_source_name_7 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_dtype );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 413;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_type );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 413;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_9, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_size;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_9, 1, tmp_tuple_element_1 );
    tmp_args_element_name_10 = const_str_plain_center;
    tmp_args_element_name_11 = PyTuple_New( 2 );
    tmp_tuple_element_2 = var_width_arr;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_fillchar;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 1, tmp_tuple_element_2 );
    frame_82915ffb8cc23f090e41c3e7ce523fdb->m_frame.f_lineno = 412;
    {
        PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_args_element_name_9 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 412;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_82915ffb8cc23f090e41c3e7ce523fdb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_82915ffb8cc23f090e41c3e7ce523fdb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_82915ffb8cc23f090e41c3e7ce523fdb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_82915ffb8cc23f090e41c3e7ce523fdb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_82915ffb8cc23f090e41c3e7ce523fdb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_82915ffb8cc23f090e41c3e7ce523fdb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_82915ffb8cc23f090e41c3e7ce523fdb,
        type_description_1,
        par_a,
        par_width,
        par_fillchar,
        var_a_arr,
        var_width_arr,
        var_size
    );


    // Release cached frame.
    if ( frame_82915ffb8cc23f090e41c3e7ce523fdb == cache_frame_82915ffb8cc23f090e41c3e7ce523fdb )
    {
        Py_DECREF( frame_82915ffb8cc23f090e41c3e7ce523fdb );
    }
    cache_frame_82915ffb8cc23f090e41c3e7ce523fdb = NULL;

    assertFrameObject( frame_82915ffb8cc23f090e41c3e7ce523fdb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_16_center );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)par_fillchar );
    Py_DECREF( par_fillchar );
    par_fillchar = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_width_arr );
    Py_DECREF( var_width_arr );
    var_width_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_size );
    Py_DECREF( var_size );
    var_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    Py_XDECREF( par_fillchar );
    par_fillchar = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    Py_XDECREF( var_width_arr );
    var_width_arr = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_16_center );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_17_count( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_4a12094d77e46b0245aa74ffdf98ad29 = NULL;

    struct Nuitka_FrameObject *frame_4a12094d77e46b0245aa74ffdf98ad29;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4a12094d77e46b0245aa74ffdf98ad29, codeobj_4a12094d77e46b0245aa74ffdf98ad29, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4a12094d77e46b0245aa74ffdf98ad29 = cache_frame_4a12094d77e46b0245aa74ffdf98ad29;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4a12094d77e46b0245aa74ffdf98ad29 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4a12094d77e46b0245aa74ffdf98ad29 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 459;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_integer );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_integer );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "integer" );
        exception_tb = NULL;

        exception_lineno = 459;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_count;
    tmp_left_name_1 = PyList_New( 2 );
    tmp_list_element_1 = par_sub;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_start;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 1, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 459;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_end;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_4a12094d77e46b0245aa74ffdf98ad29->m_frame.f_lineno = 459;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 459;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_4a12094d77e46b0245aa74ffdf98ad29->m_frame.f_lineno = 459;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a12094d77e46b0245aa74ffdf98ad29 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a12094d77e46b0245aa74ffdf98ad29 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a12094d77e46b0245aa74ffdf98ad29 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4a12094d77e46b0245aa74ffdf98ad29, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4a12094d77e46b0245aa74ffdf98ad29->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4a12094d77e46b0245aa74ffdf98ad29, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4a12094d77e46b0245aa74ffdf98ad29,
        type_description_1,
        par_a,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_4a12094d77e46b0245aa74ffdf98ad29 == cache_frame_4a12094d77e46b0245aa74ffdf98ad29 )
    {
        Py_DECREF( frame_4a12094d77e46b0245aa74ffdf98ad29 );
    }
    cache_frame_4a12094d77e46b0245aa74ffdf98ad29 = NULL;

    assertFrameObject( frame_4a12094d77e46b0245aa74ffdf98ad29 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_17_count );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_17_count );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_18_decode( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_encoding = python_pars[ 1 ];
    PyObject *par_errors = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_28851acbd132ef03bca5d0de27db3244 = NULL;

    struct Nuitka_FrameObject *frame_28851acbd132ef03bca5d0de27db3244;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_28851acbd132ef03bca5d0de27db3244, codeobj_28851acbd132ef03bca5d0de27db3244, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_28851acbd132ef03bca5d0de27db3244 = cache_frame_28851acbd132ef03bca5d0de27db3244;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_28851acbd132ef03bca5d0de27db3244 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_28851acbd132ef03bca5d0de27db3244 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_to_string_or_unicode_array" );
        exception_tb = NULL;

        exception_lineno = 504;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 505;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_a;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 505;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain_decode;
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 505;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = par_encoding;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_args_element_name_7 = par_errors;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_28851acbd132ef03bca5d0de27db3244->m_frame.f_lineno = 505;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 505;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_28851acbd132ef03bca5d0de27db3244->m_frame.f_lineno = 505;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 505;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_28851acbd132ef03bca5d0de27db3244->m_frame.f_lineno = 504;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 504;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_28851acbd132ef03bca5d0de27db3244 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_28851acbd132ef03bca5d0de27db3244 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_28851acbd132ef03bca5d0de27db3244 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_28851acbd132ef03bca5d0de27db3244, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_28851acbd132ef03bca5d0de27db3244->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_28851acbd132ef03bca5d0de27db3244, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_28851acbd132ef03bca5d0de27db3244,
        type_description_1,
        par_a,
        par_encoding,
        par_errors
    );


    // Release cached frame.
    if ( frame_28851acbd132ef03bca5d0de27db3244 == cache_frame_28851acbd132ef03bca5d0de27db3244 )
    {
        Py_DECREF( frame_28851acbd132ef03bca5d0de27db3244 );
    }
    cache_frame_28851acbd132ef03bca5d0de27db3244 = NULL;

    assertFrameObject( frame_28851acbd132ef03bca5d0de27db3244 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_18_decode );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_18_decode );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_19_encode( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_encoding = python_pars[ 1 ];
    PyObject *par_errors = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_588064e3a7be0dcd8519d813292f6995 = NULL;

    struct Nuitka_FrameObject *frame_588064e3a7be0dcd8519d813292f6995;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_588064e3a7be0dcd8519d813292f6995, codeobj_588064e3a7be0dcd8519d813292f6995, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_588064e3a7be0dcd8519d813292f6995 = cache_frame_588064e3a7be0dcd8519d813292f6995;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_588064e3a7be0dcd8519d813292f6995 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_588064e3a7be0dcd8519d813292f6995 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_to_string_or_unicode_array" );
        exception_tb = NULL;

        exception_lineno = 539;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 540;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_a;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 540;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain_encode;
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 540;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = par_encoding;

    CHECK_OBJECT( tmp_args_element_name_6 );
    tmp_args_element_name_7 = par_errors;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_588064e3a7be0dcd8519d813292f6995->m_frame.f_lineno = 540;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 540;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_588064e3a7be0dcd8519d813292f6995->m_frame.f_lineno = 540;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 540;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_588064e3a7be0dcd8519d813292f6995->m_frame.f_lineno = 539;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 539;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_588064e3a7be0dcd8519d813292f6995 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_588064e3a7be0dcd8519d813292f6995 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_588064e3a7be0dcd8519d813292f6995 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_588064e3a7be0dcd8519d813292f6995, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_588064e3a7be0dcd8519d813292f6995->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_588064e3a7be0dcd8519d813292f6995, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_588064e3a7be0dcd8519d813292f6995,
        type_description_1,
        par_a,
        par_encoding,
        par_errors
    );


    // Release cached frame.
    if ( frame_588064e3a7be0dcd8519d813292f6995 == cache_frame_588064e3a7be0dcd8519d813292f6995 )
    {
        Py_DECREF( frame_588064e3a7be0dcd8519d813292f6995 );
    }
    cache_frame_588064e3a7be0dcd8519d813292f6995 = NULL;

    assertFrameObject( frame_588064e3a7be0dcd8519d813292f6995 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_19_encode );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_19_encode );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_20_endswith( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_suffix = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_499280535e79e0de38c6d6803da02d0b = NULL;

    struct Nuitka_FrameObject *frame_499280535e79e0de38c6d6803da02d0b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_499280535e79e0de38c6d6803da02d0b, codeobj_499280535e79e0de38c6d6803da02d0b, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_499280535e79e0de38c6d6803da02d0b = cache_frame_499280535e79e0de38c6d6803da02d0b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_499280535e79e0de38c6d6803da02d0b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_499280535e79e0de38c6d6803da02d0b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 583;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 584;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_endswith;
    tmp_left_name_1 = PyList_New( 2 );
    tmp_list_element_1 = par_suffix;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_start;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 1, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 584;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_end;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_499280535e79e0de38c6d6803da02d0b->m_frame.f_lineno = 584;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 584;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_499280535e79e0de38c6d6803da02d0b->m_frame.f_lineno = 583;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 583;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_499280535e79e0de38c6d6803da02d0b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_499280535e79e0de38c6d6803da02d0b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_499280535e79e0de38c6d6803da02d0b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_499280535e79e0de38c6d6803da02d0b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_499280535e79e0de38c6d6803da02d0b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_499280535e79e0de38c6d6803da02d0b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_499280535e79e0de38c6d6803da02d0b,
        type_description_1,
        par_a,
        par_suffix,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_499280535e79e0de38c6d6803da02d0b == cache_frame_499280535e79e0de38c6d6803da02d0b )
    {
        Py_DECREF( frame_499280535e79e0de38c6d6803da02d0b );
    }
    cache_frame_499280535e79e0de38c6d6803da02d0b = NULL;

    assertFrameObject( frame_499280535e79e0de38c6d6803da02d0b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_20_endswith );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_suffix );
    Py_DECREF( par_suffix );
    par_suffix = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_suffix );
    Py_DECREF( par_suffix );
    par_suffix = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_20_endswith );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_21_expandtabs( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_tabsize = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_6fe73b3fe2f8f84f354e24ac81a03f85 = NULL;

    struct Nuitka_FrameObject *frame_6fe73b3fe2f8f84f354e24ac81a03f85;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6fe73b3fe2f8f84f354e24ac81a03f85, codeobj_6fe73b3fe2f8f84f354e24ac81a03f85, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_6fe73b3fe2f8f84f354e24ac81a03f85 = cache_frame_6fe73b3fe2f8f84f354e24ac81a03f85;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6fe73b3fe2f8f84f354e24ac81a03f85 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6fe73b3fe2f8f84f354e24ac81a03f85 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_to_string_or_unicode_array" );
        exception_tb = NULL;

        exception_lineno = 618;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 619;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_a;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 619;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain_expandtabs;
    tmp_args_element_name_5 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_tabsize;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_1 );
    frame_6fe73b3fe2f8f84f354e24ac81a03f85->m_frame.f_lineno = 619;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 619;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_6fe73b3fe2f8f84f354e24ac81a03f85->m_frame.f_lineno = 618;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 618;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6fe73b3fe2f8f84f354e24ac81a03f85 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6fe73b3fe2f8f84f354e24ac81a03f85 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6fe73b3fe2f8f84f354e24ac81a03f85 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6fe73b3fe2f8f84f354e24ac81a03f85, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6fe73b3fe2f8f84f354e24ac81a03f85->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6fe73b3fe2f8f84f354e24ac81a03f85, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6fe73b3fe2f8f84f354e24ac81a03f85,
        type_description_1,
        par_a,
        par_tabsize
    );


    // Release cached frame.
    if ( frame_6fe73b3fe2f8f84f354e24ac81a03f85 == cache_frame_6fe73b3fe2f8f84f354e24ac81a03f85 )
    {
        Py_DECREF( frame_6fe73b3fe2f8f84f354e24ac81a03f85 );
    }
    cache_frame_6fe73b3fe2f8f84f354e24ac81a03f85 = NULL;

    assertFrameObject( frame_6fe73b3fe2f8f84f354e24ac81a03f85 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_21_expandtabs );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_tabsize );
    Py_DECREF( par_tabsize );
    par_tabsize = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_tabsize );
    Py_DECREF( par_tabsize );
    par_tabsize = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_21_expandtabs );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_22_find( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_88e0f8f43136d7979decf04e4c999b27 = NULL;

    struct Nuitka_FrameObject *frame_88e0f8f43136d7979decf04e4c999b27;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_88e0f8f43136d7979decf04e4c999b27, codeobj_88e0f8f43136d7979decf04e4c999b27, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_88e0f8f43136d7979decf04e4c999b27 = cache_frame_88e0f8f43136d7979decf04e4c999b27;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_88e0f8f43136d7979decf04e4c999b27 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_88e0f8f43136d7979decf04e4c999b27 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 653;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_integer );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_integer );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "integer" );
        exception_tb = NULL;

        exception_lineno = 654;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_find;
    tmp_left_name_1 = PyList_New( 2 );
    tmp_list_element_1 = par_sub;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_start;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 1, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 654;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_end;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_88e0f8f43136d7979decf04e4c999b27->m_frame.f_lineno = 654;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 654;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 654;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_88e0f8f43136d7979decf04e4c999b27->m_frame.f_lineno = 653;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 653;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_88e0f8f43136d7979decf04e4c999b27 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_88e0f8f43136d7979decf04e4c999b27 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_88e0f8f43136d7979decf04e4c999b27 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_88e0f8f43136d7979decf04e4c999b27, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_88e0f8f43136d7979decf04e4c999b27->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_88e0f8f43136d7979decf04e4c999b27, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_88e0f8f43136d7979decf04e4c999b27,
        type_description_1,
        par_a,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_88e0f8f43136d7979decf04e4c999b27 == cache_frame_88e0f8f43136d7979decf04e4c999b27 )
    {
        Py_DECREF( frame_88e0f8f43136d7979decf04e4c999b27 );
    }
    cache_frame_88e0f8f43136d7979decf04e4c999b27 = NULL;

    assertFrameObject( frame_88e0f8f43136d7979decf04e4c999b27 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_22_find );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_22_find );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_23_index( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_30d4ccf81c35f1488e7ccd275079f794 = NULL;

    struct Nuitka_FrameObject *frame_30d4ccf81c35f1488e7ccd275079f794;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_30d4ccf81c35f1488e7ccd275079f794, codeobj_30d4ccf81c35f1488e7ccd275079f794, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_30d4ccf81c35f1488e7ccd275079f794 = cache_frame_30d4ccf81c35f1488e7ccd275079f794;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_30d4ccf81c35f1488e7ccd275079f794 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_30d4ccf81c35f1488e7ccd275079f794 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 681;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_integer );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_integer );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "integer" );
        exception_tb = NULL;

        exception_lineno = 682;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_index;
    tmp_left_name_1 = PyList_New( 2 );
    tmp_list_element_1 = par_sub;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_start;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 1, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 682;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_end;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_30d4ccf81c35f1488e7ccd275079f794->m_frame.f_lineno = 682;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 682;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 682;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_30d4ccf81c35f1488e7ccd275079f794->m_frame.f_lineno = 681;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 681;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_30d4ccf81c35f1488e7ccd275079f794 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_30d4ccf81c35f1488e7ccd275079f794 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_30d4ccf81c35f1488e7ccd275079f794 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_30d4ccf81c35f1488e7ccd275079f794, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_30d4ccf81c35f1488e7ccd275079f794->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_30d4ccf81c35f1488e7ccd275079f794, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_30d4ccf81c35f1488e7ccd275079f794,
        type_description_1,
        par_a,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_30d4ccf81c35f1488e7ccd275079f794 == cache_frame_30d4ccf81c35f1488e7ccd275079f794 )
    {
        Py_DECREF( frame_30d4ccf81c35f1488e7ccd275079f794 );
    }
    cache_frame_30d4ccf81c35f1488e7ccd275079f794 = NULL;

    assertFrameObject( frame_30d4ccf81c35f1488e7ccd275079f794 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_23_index );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_23_index );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_24_isalnum( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_e0fe49472ffe0143c5b58fdd3dbf0414 = NULL;

    struct Nuitka_FrameObject *frame_e0fe49472ffe0143c5b58fdd3dbf0414;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e0fe49472ffe0143c5b58fdd3dbf0414, codeobj_e0fe49472ffe0143c5b58fdd3dbf0414, module_numpy$core$defchararray, sizeof(void *) );
    frame_e0fe49472ffe0143c5b58fdd3dbf0414 = cache_frame_e0fe49472ffe0143c5b58fdd3dbf0414;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e0fe49472ffe0143c5b58fdd3dbf0414 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e0fe49472ffe0143c5b58fdd3dbf0414 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 706;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 706;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_isalnum;
    frame_e0fe49472ffe0143c5b58fdd3dbf0414->m_frame.f_lineno = 706;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 706;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e0fe49472ffe0143c5b58fdd3dbf0414 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e0fe49472ffe0143c5b58fdd3dbf0414 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e0fe49472ffe0143c5b58fdd3dbf0414 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e0fe49472ffe0143c5b58fdd3dbf0414, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e0fe49472ffe0143c5b58fdd3dbf0414->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e0fe49472ffe0143c5b58fdd3dbf0414, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e0fe49472ffe0143c5b58fdd3dbf0414,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_e0fe49472ffe0143c5b58fdd3dbf0414 == cache_frame_e0fe49472ffe0143c5b58fdd3dbf0414 )
    {
        Py_DECREF( frame_e0fe49472ffe0143c5b58fdd3dbf0414 );
    }
    cache_frame_e0fe49472ffe0143c5b58fdd3dbf0414 = NULL;

    assertFrameObject( frame_e0fe49472ffe0143c5b58fdd3dbf0414 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_24_isalnum );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_24_isalnum );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_25_isalpha( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_33e5bbf7b23584dd76e269a4abc2ffae = NULL;

    struct Nuitka_FrameObject *frame_33e5bbf7b23584dd76e269a4abc2ffae;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_33e5bbf7b23584dd76e269a4abc2ffae, codeobj_33e5bbf7b23584dd76e269a4abc2ffae, module_numpy$core$defchararray, sizeof(void *) );
    frame_33e5bbf7b23584dd76e269a4abc2ffae = cache_frame_33e5bbf7b23584dd76e269a4abc2ffae;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_33e5bbf7b23584dd76e269a4abc2ffae );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_33e5bbf7b23584dd76e269a4abc2ffae ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 730;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 730;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_isalpha;
    frame_33e5bbf7b23584dd76e269a4abc2ffae->m_frame.f_lineno = 730;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 730;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_33e5bbf7b23584dd76e269a4abc2ffae );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_33e5bbf7b23584dd76e269a4abc2ffae );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_33e5bbf7b23584dd76e269a4abc2ffae );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_33e5bbf7b23584dd76e269a4abc2ffae, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_33e5bbf7b23584dd76e269a4abc2ffae->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_33e5bbf7b23584dd76e269a4abc2ffae, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_33e5bbf7b23584dd76e269a4abc2ffae,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_33e5bbf7b23584dd76e269a4abc2ffae == cache_frame_33e5bbf7b23584dd76e269a4abc2ffae )
    {
        Py_DECREF( frame_33e5bbf7b23584dd76e269a4abc2ffae );
    }
    cache_frame_33e5bbf7b23584dd76e269a4abc2ffae = NULL;

    assertFrameObject( frame_33e5bbf7b23584dd76e269a4abc2ffae );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_25_isalpha );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_25_isalpha );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_26_isdigit( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_3577fc4023390a81aa4eff2a58433ed5 = NULL;

    struct Nuitka_FrameObject *frame_3577fc4023390a81aa4eff2a58433ed5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3577fc4023390a81aa4eff2a58433ed5, codeobj_3577fc4023390a81aa4eff2a58433ed5, module_numpy$core$defchararray, sizeof(void *) );
    frame_3577fc4023390a81aa4eff2a58433ed5 = cache_frame_3577fc4023390a81aa4eff2a58433ed5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3577fc4023390a81aa4eff2a58433ed5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3577fc4023390a81aa4eff2a58433ed5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 754;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 754;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_isdigit;
    frame_3577fc4023390a81aa4eff2a58433ed5->m_frame.f_lineno = 754;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 754;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3577fc4023390a81aa4eff2a58433ed5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3577fc4023390a81aa4eff2a58433ed5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3577fc4023390a81aa4eff2a58433ed5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3577fc4023390a81aa4eff2a58433ed5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3577fc4023390a81aa4eff2a58433ed5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3577fc4023390a81aa4eff2a58433ed5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3577fc4023390a81aa4eff2a58433ed5,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_3577fc4023390a81aa4eff2a58433ed5 == cache_frame_3577fc4023390a81aa4eff2a58433ed5 )
    {
        Py_DECREF( frame_3577fc4023390a81aa4eff2a58433ed5 );
    }
    cache_frame_3577fc4023390a81aa4eff2a58433ed5 = NULL;

    assertFrameObject( frame_3577fc4023390a81aa4eff2a58433ed5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_26_isdigit );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_26_isdigit );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_27_islower( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_adeed44f735add38605bab572a71d063 = NULL;

    struct Nuitka_FrameObject *frame_adeed44f735add38605bab572a71d063;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_adeed44f735add38605bab572a71d063, codeobj_adeed44f735add38605bab572a71d063, module_numpy$core$defchararray, sizeof(void *) );
    frame_adeed44f735add38605bab572a71d063 = cache_frame_adeed44f735add38605bab572a71d063;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_adeed44f735add38605bab572a71d063 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_adeed44f735add38605bab572a71d063 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 779;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 779;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_islower;
    frame_adeed44f735add38605bab572a71d063->m_frame.f_lineno = 779;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 779;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_adeed44f735add38605bab572a71d063 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_adeed44f735add38605bab572a71d063 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_adeed44f735add38605bab572a71d063 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_adeed44f735add38605bab572a71d063, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_adeed44f735add38605bab572a71d063->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_adeed44f735add38605bab572a71d063, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_adeed44f735add38605bab572a71d063,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_adeed44f735add38605bab572a71d063 == cache_frame_adeed44f735add38605bab572a71d063 )
    {
        Py_DECREF( frame_adeed44f735add38605bab572a71d063 );
    }
    cache_frame_adeed44f735add38605bab572a71d063 = NULL;

    assertFrameObject( frame_adeed44f735add38605bab572a71d063 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_27_islower );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_27_islower );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_28_isspace( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_ddb064337cc3a965e3b69a6ea5b851c7 = NULL;

    struct Nuitka_FrameObject *frame_ddb064337cc3a965e3b69a6ea5b851c7;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ddb064337cc3a965e3b69a6ea5b851c7, codeobj_ddb064337cc3a965e3b69a6ea5b851c7, module_numpy$core$defchararray, sizeof(void *) );
    frame_ddb064337cc3a965e3b69a6ea5b851c7 = cache_frame_ddb064337cc3a965e3b69a6ea5b851c7;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ddb064337cc3a965e3b69a6ea5b851c7 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ddb064337cc3a965e3b69a6ea5b851c7 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 804;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 804;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_isspace;
    frame_ddb064337cc3a965e3b69a6ea5b851c7->m_frame.f_lineno = 804;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 804;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ddb064337cc3a965e3b69a6ea5b851c7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ddb064337cc3a965e3b69a6ea5b851c7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ddb064337cc3a965e3b69a6ea5b851c7 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ddb064337cc3a965e3b69a6ea5b851c7, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ddb064337cc3a965e3b69a6ea5b851c7->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ddb064337cc3a965e3b69a6ea5b851c7, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ddb064337cc3a965e3b69a6ea5b851c7,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_ddb064337cc3a965e3b69a6ea5b851c7 == cache_frame_ddb064337cc3a965e3b69a6ea5b851c7 )
    {
        Py_DECREF( frame_ddb064337cc3a965e3b69a6ea5b851c7 );
    }
    cache_frame_ddb064337cc3a965e3b69a6ea5b851c7 = NULL;

    assertFrameObject( frame_ddb064337cc3a965e3b69a6ea5b851c7 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_28_isspace );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_28_isspace );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_29_istitle( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8eac18f632e8e14a5437dc0a7a03a1b6 = NULL;

    struct Nuitka_FrameObject *frame_8eac18f632e8e14a5437dc0a7a03a1b6;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8eac18f632e8e14a5437dc0a7a03a1b6, codeobj_8eac18f632e8e14a5437dc0a7a03a1b6, module_numpy$core$defchararray, sizeof(void *) );
    frame_8eac18f632e8e14a5437dc0a7a03a1b6 = cache_frame_8eac18f632e8e14a5437dc0a7a03a1b6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8eac18f632e8e14a5437dc0a7a03a1b6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8eac18f632e8e14a5437dc0a7a03a1b6 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 828;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 828;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_istitle;
    frame_8eac18f632e8e14a5437dc0a7a03a1b6->m_frame.f_lineno = 828;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 828;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8eac18f632e8e14a5437dc0a7a03a1b6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8eac18f632e8e14a5437dc0a7a03a1b6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8eac18f632e8e14a5437dc0a7a03a1b6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8eac18f632e8e14a5437dc0a7a03a1b6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8eac18f632e8e14a5437dc0a7a03a1b6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8eac18f632e8e14a5437dc0a7a03a1b6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8eac18f632e8e14a5437dc0a7a03a1b6,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_8eac18f632e8e14a5437dc0a7a03a1b6 == cache_frame_8eac18f632e8e14a5437dc0a7a03a1b6 )
    {
        Py_DECREF( frame_8eac18f632e8e14a5437dc0a7a03a1b6 );
    }
    cache_frame_8eac18f632e8e14a5437dc0a7a03a1b6 = NULL;

    assertFrameObject( frame_8eac18f632e8e14a5437dc0a7a03a1b6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_29_istitle );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_29_istitle );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_30_isupper( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_637036ff19bcab39432111ea43ddfbc3 = NULL;

    struct Nuitka_FrameObject *frame_637036ff19bcab39432111ea43ddfbc3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_637036ff19bcab39432111ea43ddfbc3, codeobj_637036ff19bcab39432111ea43ddfbc3, module_numpy$core$defchararray, sizeof(void *) );
    frame_637036ff19bcab39432111ea43ddfbc3 = cache_frame_637036ff19bcab39432111ea43ddfbc3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_637036ff19bcab39432111ea43ddfbc3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_637036ff19bcab39432111ea43ddfbc3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 853;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 853;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_isupper;
    frame_637036ff19bcab39432111ea43ddfbc3->m_frame.f_lineno = 853;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 853;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_637036ff19bcab39432111ea43ddfbc3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_637036ff19bcab39432111ea43ddfbc3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_637036ff19bcab39432111ea43ddfbc3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_637036ff19bcab39432111ea43ddfbc3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_637036ff19bcab39432111ea43ddfbc3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_637036ff19bcab39432111ea43ddfbc3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_637036ff19bcab39432111ea43ddfbc3,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_637036ff19bcab39432111ea43ddfbc3 == cache_frame_637036ff19bcab39432111ea43ddfbc3 )
    {
        Py_DECREF( frame_637036ff19bcab39432111ea43ddfbc3 );
    }
    cache_frame_637036ff19bcab39432111ea43ddfbc3 = NULL;

    assertFrameObject( frame_637036ff19bcab39432111ea43ddfbc3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_30_isupper );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_30_isupper );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_31_join( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_sep = python_pars[ 0 ];
    PyObject *par_seq = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_365ab4b3be9dfc5d97040071c47d4bce = NULL;

    struct Nuitka_FrameObject *frame_365ab4b3be9dfc5d97040071c47d4bce;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_365ab4b3be9dfc5d97040071c47d4bce, codeobj_365ab4b3be9dfc5d97040071c47d4bce, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_365ab4b3be9dfc5d97040071c47d4bce = cache_frame_365ab4b3be9dfc5d97040071c47d4bce;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_365ab4b3be9dfc5d97040071c47d4bce );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_365ab4b3be9dfc5d97040071c47d4bce ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_to_string_or_unicode_array" );
        exception_tb = NULL;

        exception_lineno = 876;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 877;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_sep;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 877;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain_join;
    tmp_args_element_name_5 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_seq;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_1 );
    frame_365ab4b3be9dfc5d97040071c47d4bce->m_frame.f_lineno = 877;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 877;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_365ab4b3be9dfc5d97040071c47d4bce->m_frame.f_lineno = 876;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 876;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_365ab4b3be9dfc5d97040071c47d4bce );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_365ab4b3be9dfc5d97040071c47d4bce );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_365ab4b3be9dfc5d97040071c47d4bce );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_365ab4b3be9dfc5d97040071c47d4bce, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_365ab4b3be9dfc5d97040071c47d4bce->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_365ab4b3be9dfc5d97040071c47d4bce, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_365ab4b3be9dfc5d97040071c47d4bce,
        type_description_1,
        par_sep,
        par_seq
    );


    // Release cached frame.
    if ( frame_365ab4b3be9dfc5d97040071c47d4bce == cache_frame_365ab4b3be9dfc5d97040071c47d4bce )
    {
        Py_DECREF( frame_365ab4b3be9dfc5d97040071c47d4bce );
    }
    cache_frame_365ab4b3be9dfc5d97040071c47d4bce = NULL;

    assertFrameObject( frame_365ab4b3be9dfc5d97040071c47d4bce );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_31_join );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_seq );
    Py_DECREF( par_seq );
    par_seq = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_seq );
    Py_DECREF( par_seq );
    par_seq = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_31_join );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_32_ljust( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_width = python_pars[ 1 ];
    PyObject *par_fillchar = python_pars[ 2 ];
    PyObject *var_a_arr = NULL;
    PyObject *var_width_arr = NULL;
    PyObject *var_size = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    static struct Nuitka_FrameObject *cache_frame_5e64cb2ec01dab57518ea6d6f92f8fcd = NULL;

    struct Nuitka_FrameObject *frame_5e64cb2ec01dab57518ea6d6f92f8fcd;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5e64cb2ec01dab57518ea6d6f92f8fcd, codeobj_5e64cb2ec01dab57518ea6d6f92f8fcd, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_5e64cb2ec01dab57518ea6d6f92f8fcd = cache_frame_5e64cb2ec01dab57518ea6d6f92f8fcd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5e64cb2ec01dab57518ea6d6f92f8fcd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5e64cb2ec01dab57518ea6d6f92f8fcd ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 906;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_5e64cb2ec01dab57518ea6d6f92f8fcd->m_frame.f_lineno = 906;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 906;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 907;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_width;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_5e64cb2ec01dab57518ea6d6f92f8fcd->m_frame.f_lineno = 907;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 907;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_width_arr == NULL );
    var_width_arr = tmp_assign_source_2;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_long );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_long );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "long" );
        exception_tb = NULL;

        exception_lineno = 908;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 908;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_max );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = var_width_arr;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_flat );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 908;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_5e64cb2ec01dab57518ea6d6f92f8fcd->m_frame.f_lineno = 908;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_5e64cb2ec01dab57518ea6d6f92f8fcd->m_frame.f_lineno = 908;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_size == NULL );
    var_size = tmp_assign_source_3;

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 909;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_issubdtype );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 909;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_dtype );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 909;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 909;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_string_ );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 909;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_5e64cb2ec01dab57518ea6d6f92f8fcd->m_frame.f_lineno = 909;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 909;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 909;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asbytes" );
        exception_tb = NULL;

        exception_lineno = 910;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_fillchar;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_5e64cb2ec01dab57518ea6d6f92f8fcd->m_frame.f_lineno = 910;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 910;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_fillchar;
        assert( old != NULL );
        par_fillchar = tmp_assign_source_4;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 911;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_args_element_name_9 = PyTuple_New( 2 );
    tmp_source_name_7 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_dtype );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 912;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_type );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 912;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_9, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_size;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_9, 1, tmp_tuple_element_1 );
    tmp_args_element_name_10 = const_str_plain_ljust;
    tmp_args_element_name_11 = PyTuple_New( 2 );
    tmp_tuple_element_2 = var_width_arr;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_fillchar;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 1, tmp_tuple_element_2 );
    frame_5e64cb2ec01dab57518ea6d6f92f8fcd->m_frame.f_lineno = 911;
    {
        PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_args_element_name_9 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 911;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5e64cb2ec01dab57518ea6d6f92f8fcd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5e64cb2ec01dab57518ea6d6f92f8fcd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5e64cb2ec01dab57518ea6d6f92f8fcd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5e64cb2ec01dab57518ea6d6f92f8fcd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5e64cb2ec01dab57518ea6d6f92f8fcd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5e64cb2ec01dab57518ea6d6f92f8fcd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5e64cb2ec01dab57518ea6d6f92f8fcd,
        type_description_1,
        par_a,
        par_width,
        par_fillchar,
        var_a_arr,
        var_width_arr,
        var_size
    );


    // Release cached frame.
    if ( frame_5e64cb2ec01dab57518ea6d6f92f8fcd == cache_frame_5e64cb2ec01dab57518ea6d6f92f8fcd )
    {
        Py_DECREF( frame_5e64cb2ec01dab57518ea6d6f92f8fcd );
    }
    cache_frame_5e64cb2ec01dab57518ea6d6f92f8fcd = NULL;

    assertFrameObject( frame_5e64cb2ec01dab57518ea6d6f92f8fcd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_32_ljust );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)par_fillchar );
    Py_DECREF( par_fillchar );
    par_fillchar = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_width_arr );
    Py_DECREF( var_width_arr );
    var_width_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_size );
    Py_DECREF( var_size );
    var_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    Py_XDECREF( par_fillchar );
    par_fillchar = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    Py_XDECREF( var_width_arr );
    var_width_arr = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_32_ljust );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_33_lower( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *var_a_arr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_694d2203ed8fa6e6dccfbba5f077e0e1 = NULL;

    struct Nuitka_FrameObject *frame_694d2203ed8fa6e6dccfbba5f077e0e1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_694d2203ed8fa6e6dccfbba5f077e0e1, codeobj_694d2203ed8fa6e6dccfbba5f077e0e1, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_694d2203ed8fa6e6dccfbba5f077e0e1 = cache_frame_694d2203ed8fa6e6dccfbba5f077e0e1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_694d2203ed8fa6e6dccfbba5f077e0e1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_694d2203ed8fa6e6dccfbba5f077e0e1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 947;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_694d2203ed8fa6e6dccfbba5f077e0e1->m_frame.f_lineno = 947;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 947;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 948;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_1 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dtype );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_str_plain_lower;
    frame_694d2203ed8fa6e6dccfbba5f077e0e1->m_frame.f_lineno = 948;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_694d2203ed8fa6e6dccfbba5f077e0e1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_694d2203ed8fa6e6dccfbba5f077e0e1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_694d2203ed8fa6e6dccfbba5f077e0e1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_694d2203ed8fa6e6dccfbba5f077e0e1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_694d2203ed8fa6e6dccfbba5f077e0e1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_694d2203ed8fa6e6dccfbba5f077e0e1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_694d2203ed8fa6e6dccfbba5f077e0e1,
        type_description_1,
        par_a,
        var_a_arr
    );


    // Release cached frame.
    if ( frame_694d2203ed8fa6e6dccfbba5f077e0e1 == cache_frame_694d2203ed8fa6e6dccfbba5f077e0e1 )
    {
        Py_DECREF( frame_694d2203ed8fa6e6dccfbba5f077e0e1 );
    }
    cache_frame_694d2203ed8fa6e6dccfbba5f077e0e1 = NULL;

    assertFrameObject( frame_694d2203ed8fa6e6dccfbba5f077e0e1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_33_lower );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_33_lower );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_34_lstrip( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_chars = python_pars[ 1 ];
    PyObject *var_a_arr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_3d386d9af9641b5c81db0327962c2ec9 = NULL;

    struct Nuitka_FrameObject *frame_3d386d9af9641b5c81db0327962c2ec9;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3d386d9af9641b5c81db0327962c2ec9, codeobj_3d386d9af9641b5c81db0327962c2ec9, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3d386d9af9641b5c81db0327962c2ec9 = cache_frame_3d386d9af9641b5c81db0327962c2ec9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3d386d9af9641b5c81db0327962c2ec9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3d386d9af9641b5c81db0327962c2ec9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1004;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_3d386d9af9641b5c81db0327962c2ec9->m_frame.f_lineno = 1004;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1004;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1005;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_1 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dtype );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1005;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_str_plain_lstrip;
    tmp_args_element_name_5 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_chars;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_1 );
    frame_3d386d9af9641b5c81db0327962c2ec9->m_frame.f_lineno = 1005;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1005;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3d386d9af9641b5c81db0327962c2ec9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3d386d9af9641b5c81db0327962c2ec9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3d386d9af9641b5c81db0327962c2ec9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3d386d9af9641b5c81db0327962c2ec9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3d386d9af9641b5c81db0327962c2ec9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3d386d9af9641b5c81db0327962c2ec9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3d386d9af9641b5c81db0327962c2ec9,
        type_description_1,
        par_a,
        par_chars,
        var_a_arr
    );


    // Release cached frame.
    if ( frame_3d386d9af9641b5c81db0327962c2ec9 == cache_frame_3d386d9af9641b5c81db0327962c2ec9 )
    {
        Py_DECREF( frame_3d386d9af9641b5c81db0327962c2ec9 );
    }
    cache_frame_3d386d9af9641b5c81db0327962c2ec9 = NULL;

    assertFrameObject( frame_3d386d9af9641b5c81db0327962c2ec9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_34_lstrip );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_34_lstrip );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_35_partition( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_sep = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_c493b0b68f8b70f3627e36844027d783 = NULL;

    struct Nuitka_FrameObject *frame_c493b0b68f8b70f3627e36844027d783;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c493b0b68f8b70f3627e36844027d783, codeobj_c493b0b68f8b70f3627e36844027d783, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_c493b0b68f8b70f3627e36844027d783 = cache_frame_c493b0b68f8b70f3627e36844027d783;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c493b0b68f8b70f3627e36844027d783 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c493b0b68f8b70f3627e36844027d783 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_to_string_or_unicode_array" );
        exception_tb = NULL;

        exception_lineno = 1039;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1040;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_a;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 1040;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain_partition;
    tmp_args_element_name_5 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_sep;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_1 );
    frame_c493b0b68f8b70f3627e36844027d783->m_frame.f_lineno = 1040;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1040;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_c493b0b68f8b70f3627e36844027d783->m_frame.f_lineno = 1039;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1039;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c493b0b68f8b70f3627e36844027d783 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c493b0b68f8b70f3627e36844027d783 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c493b0b68f8b70f3627e36844027d783 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c493b0b68f8b70f3627e36844027d783, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c493b0b68f8b70f3627e36844027d783->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c493b0b68f8b70f3627e36844027d783, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c493b0b68f8b70f3627e36844027d783,
        type_description_1,
        par_a,
        par_sep
    );


    // Release cached frame.
    if ( frame_c493b0b68f8b70f3627e36844027d783 == cache_frame_c493b0b68f8b70f3627e36844027d783 )
    {
        Py_DECREF( frame_c493b0b68f8b70f3627e36844027d783 );
    }
    cache_frame_c493b0b68f8b70f3627e36844027d783 = NULL;

    assertFrameObject( frame_c493b0b68f8b70f3627e36844027d783 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_35_partition );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_35_partition );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_36_replace( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_old = python_pars[ 1 ];
    PyObject *par_new = python_pars[ 2 ];
    PyObject *par_count = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_e0555e0e1ddabfd6d9df168c6e2c8763 = NULL;

    struct Nuitka_FrameObject *frame_e0555e0e1ddabfd6d9df168c6e2c8763;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e0555e0e1ddabfd6d9df168c6e2c8763, codeobj_e0555e0e1ddabfd6d9df168c6e2c8763, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e0555e0e1ddabfd6d9df168c6e2c8763 = cache_frame_e0555e0e1ddabfd6d9df168c6e2c8763;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e0555e0e1ddabfd6d9df168c6e2c8763 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e0555e0e1ddabfd6d9df168c6e2c8763 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_to_string_or_unicode_array" );
        exception_tb = NULL;

        exception_lineno = 1070;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1071;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_a;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 1072;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain_replace;
    tmp_left_name_1 = PyList_New( 2 );
    tmp_list_element_1 = par_old;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_new;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 1, tmp_list_element_1 );
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_3 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 1072;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = par_count;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_e0555e0e1ddabfd6d9df168c6e2c8763->m_frame.f_lineno = 1072;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 1072;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1072;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_e0555e0e1ddabfd6d9df168c6e2c8763->m_frame.f_lineno = 1071;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1071;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_e0555e0e1ddabfd6d9df168c6e2c8763->m_frame.f_lineno = 1070;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1070;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e0555e0e1ddabfd6d9df168c6e2c8763 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e0555e0e1ddabfd6d9df168c6e2c8763 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e0555e0e1ddabfd6d9df168c6e2c8763 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e0555e0e1ddabfd6d9df168c6e2c8763, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e0555e0e1ddabfd6d9df168c6e2c8763->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e0555e0e1ddabfd6d9df168c6e2c8763, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e0555e0e1ddabfd6d9df168c6e2c8763,
        type_description_1,
        par_a,
        par_old,
        par_new,
        par_count
    );


    // Release cached frame.
    if ( frame_e0555e0e1ddabfd6d9df168c6e2c8763 == cache_frame_e0555e0e1ddabfd6d9df168c6e2c8763 )
    {
        Py_DECREF( frame_e0555e0e1ddabfd6d9df168c6e2c8763 );
    }
    cache_frame_e0555e0e1ddabfd6d9df168c6e2c8763 = NULL;

    assertFrameObject( frame_e0555e0e1ddabfd6d9df168c6e2c8763 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_36_replace );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_old );
    Py_DECREF( par_old );
    par_old = NULL;

    CHECK_OBJECT( (PyObject *)par_new );
    Py_DECREF( par_new );
    par_new = NULL;

    CHECK_OBJECT( (PyObject *)par_count );
    Py_DECREF( par_count );
    par_count = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_old );
    Py_DECREF( par_old );
    par_old = NULL;

    CHECK_OBJECT( (PyObject *)par_new );
    Py_DECREF( par_new );
    par_new = NULL;

    CHECK_OBJECT( (PyObject *)par_count );
    Py_DECREF( par_count );
    par_count = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_36_replace );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_37_rfind( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_bcd40bd792ee2e41d66e4c54d40bd52e = NULL;

    struct Nuitka_FrameObject *frame_bcd40bd792ee2e41d66e4c54d40bd52e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bcd40bd792ee2e41d66e4c54d40bd52e, codeobj_bcd40bd792ee2e41d66e4c54d40bd52e, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_bcd40bd792ee2e41d66e4c54d40bd52e = cache_frame_bcd40bd792ee2e41d66e4c54d40bd52e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bcd40bd792ee2e41d66e4c54d40bd52e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bcd40bd792ee2e41d66e4c54d40bd52e ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1103;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_integer );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_integer );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "integer" );
        exception_tb = NULL;

        exception_lineno = 1104;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_rfind;
    tmp_left_name_1 = PyList_New( 2 );
    tmp_list_element_1 = par_sub;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_start;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 1, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 1104;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_end;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_bcd40bd792ee2e41d66e4c54d40bd52e->m_frame.f_lineno = 1104;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 1104;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1104;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_bcd40bd792ee2e41d66e4c54d40bd52e->m_frame.f_lineno = 1103;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1103;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bcd40bd792ee2e41d66e4c54d40bd52e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bcd40bd792ee2e41d66e4c54d40bd52e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bcd40bd792ee2e41d66e4c54d40bd52e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bcd40bd792ee2e41d66e4c54d40bd52e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bcd40bd792ee2e41d66e4c54d40bd52e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bcd40bd792ee2e41d66e4c54d40bd52e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bcd40bd792ee2e41d66e4c54d40bd52e,
        type_description_1,
        par_a,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_bcd40bd792ee2e41d66e4c54d40bd52e == cache_frame_bcd40bd792ee2e41d66e4c54d40bd52e )
    {
        Py_DECREF( frame_bcd40bd792ee2e41d66e4c54d40bd52e );
    }
    cache_frame_bcd40bd792ee2e41d66e4c54d40bd52e = NULL;

    assertFrameObject( frame_bcd40bd792ee2e41d66e4c54d40bd52e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_37_rfind );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_37_rfind );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_38_rindex( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_bffd6034ddf21eabb1869abc674519b6 = NULL;

    struct Nuitka_FrameObject *frame_bffd6034ddf21eabb1869abc674519b6;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bffd6034ddf21eabb1869abc674519b6, codeobj_bffd6034ddf21eabb1869abc674519b6, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_bffd6034ddf21eabb1869abc674519b6 = cache_frame_bffd6034ddf21eabb1869abc674519b6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bffd6034ddf21eabb1869abc674519b6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bffd6034ddf21eabb1869abc674519b6 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1132;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_integer );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_integer );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "integer" );
        exception_tb = NULL;

        exception_lineno = 1133;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_rindex;
    tmp_left_name_1 = PyList_New( 2 );
    tmp_list_element_1 = par_sub;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_start;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 1, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 1133;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_end;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_bffd6034ddf21eabb1869abc674519b6->m_frame.f_lineno = 1133;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 1133;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1133;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_bffd6034ddf21eabb1869abc674519b6->m_frame.f_lineno = 1132;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1132;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bffd6034ddf21eabb1869abc674519b6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bffd6034ddf21eabb1869abc674519b6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bffd6034ddf21eabb1869abc674519b6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bffd6034ddf21eabb1869abc674519b6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bffd6034ddf21eabb1869abc674519b6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bffd6034ddf21eabb1869abc674519b6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bffd6034ddf21eabb1869abc674519b6,
        type_description_1,
        par_a,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_bffd6034ddf21eabb1869abc674519b6 == cache_frame_bffd6034ddf21eabb1869abc674519b6 )
    {
        Py_DECREF( frame_bffd6034ddf21eabb1869abc674519b6 );
    }
    cache_frame_bffd6034ddf21eabb1869abc674519b6 = NULL;

    assertFrameObject( frame_bffd6034ddf21eabb1869abc674519b6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_38_rindex );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_38_rindex );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_39_rjust( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_width = python_pars[ 1 ];
    PyObject *par_fillchar = python_pars[ 2 ];
    PyObject *var_a_arr = NULL;
    PyObject *var_width_arr = NULL;
    PyObject *var_size = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    static struct Nuitka_FrameObject *cache_frame_404ee8dc1f02878c01ed4adc97ade7b1 = NULL;

    struct Nuitka_FrameObject *frame_404ee8dc1f02878c01ed4adc97ade7b1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_404ee8dc1f02878c01ed4adc97ade7b1, codeobj_404ee8dc1f02878c01ed4adc97ade7b1, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_404ee8dc1f02878c01ed4adc97ade7b1 = cache_frame_404ee8dc1f02878c01ed4adc97ade7b1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_404ee8dc1f02878c01ed4adc97ade7b1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_404ee8dc1f02878c01ed4adc97ade7b1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1162;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_404ee8dc1f02878c01ed4adc97ade7b1->m_frame.f_lineno = 1162;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1162;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1163;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_width;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_404ee8dc1f02878c01ed4adc97ade7b1->m_frame.f_lineno = 1163;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1163;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_width_arr == NULL );
    var_width_arr = tmp_assign_source_2;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_long );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_long );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "long" );
        exception_tb = NULL;

        exception_lineno = 1164;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1164;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_max );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1164;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = var_width_arr;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_flat );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 1164;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_404ee8dc1f02878c01ed4adc97ade7b1->m_frame.f_lineno = 1164;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1164;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_404ee8dc1f02878c01ed4adc97ade7b1->m_frame.f_lineno = 1164;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1164;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_size == NULL );
    var_size = tmp_assign_source_3;

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1165;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_issubdtype );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1165;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_dtype );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 1165;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1165;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_string_ );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 1165;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_404ee8dc1f02878c01ed4adc97ade7b1->m_frame.f_lineno = 1165;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1165;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1165;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asbytes );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asbytes );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asbytes" );
        exception_tb = NULL;

        exception_lineno = 1166;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_fillchar;

    CHECK_OBJECT( tmp_args_element_name_7 );
    frame_404ee8dc1f02878c01ed4adc97ade7b1->m_frame.f_lineno = 1166;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1166;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_fillchar;
        assert( old != NULL );
        par_fillchar = tmp_assign_source_4;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1167;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_args_element_name_9 = PyTuple_New( 2 );
    tmp_source_name_7 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_dtype );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 1168;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_type );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 1168;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_9, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_size;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_9, 1, tmp_tuple_element_1 );
    tmp_args_element_name_10 = const_str_plain_rjust;
    tmp_args_element_name_11 = PyTuple_New( 2 );
    tmp_tuple_element_2 = var_width_arr;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_fillchar;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 1, tmp_tuple_element_2 );
    frame_404ee8dc1f02878c01ed4adc97ade7b1->m_frame.f_lineno = 1167;
    {
        PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_args_element_name_9 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1167;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_404ee8dc1f02878c01ed4adc97ade7b1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_404ee8dc1f02878c01ed4adc97ade7b1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_404ee8dc1f02878c01ed4adc97ade7b1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_404ee8dc1f02878c01ed4adc97ade7b1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_404ee8dc1f02878c01ed4adc97ade7b1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_404ee8dc1f02878c01ed4adc97ade7b1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_404ee8dc1f02878c01ed4adc97ade7b1,
        type_description_1,
        par_a,
        par_width,
        par_fillchar,
        var_a_arr,
        var_width_arr,
        var_size
    );


    // Release cached frame.
    if ( frame_404ee8dc1f02878c01ed4adc97ade7b1 == cache_frame_404ee8dc1f02878c01ed4adc97ade7b1 )
    {
        Py_DECREF( frame_404ee8dc1f02878c01ed4adc97ade7b1 );
    }
    cache_frame_404ee8dc1f02878c01ed4adc97ade7b1 = NULL;

    assertFrameObject( frame_404ee8dc1f02878c01ed4adc97ade7b1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_39_rjust );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)par_fillchar );
    Py_DECREF( par_fillchar );
    par_fillchar = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_width_arr );
    Py_DECREF( var_width_arr );
    var_width_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_size );
    Py_DECREF( var_size );
    var_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    Py_XDECREF( par_fillchar );
    par_fillchar = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    Py_XDECREF( var_width_arr );
    var_width_arr = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_39_rjust );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_40_rpartition( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_sep = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_5b75276146c4260a652059461937a08b = NULL;

    struct Nuitka_FrameObject *frame_5b75276146c4260a652059461937a08b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5b75276146c4260a652059461937a08b, codeobj_5b75276146c4260a652059461937a08b, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_5b75276146c4260a652059461937a08b = cache_frame_5b75276146c4260a652059461937a08b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5b75276146c4260a652059461937a08b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5b75276146c4260a652059461937a08b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_to_string_or_unicode_array" );
        exception_tb = NULL;

        exception_lineno = 1202;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1203;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_a;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 1203;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain_rpartition;
    tmp_args_element_name_5 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_sep;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_1 );
    frame_5b75276146c4260a652059461937a08b->m_frame.f_lineno = 1203;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1203;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_5b75276146c4260a652059461937a08b->m_frame.f_lineno = 1202;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1202;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5b75276146c4260a652059461937a08b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5b75276146c4260a652059461937a08b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5b75276146c4260a652059461937a08b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5b75276146c4260a652059461937a08b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5b75276146c4260a652059461937a08b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5b75276146c4260a652059461937a08b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5b75276146c4260a652059461937a08b,
        type_description_1,
        par_a,
        par_sep
    );


    // Release cached frame.
    if ( frame_5b75276146c4260a652059461937a08b == cache_frame_5b75276146c4260a652059461937a08b )
    {
        Py_DECREF( frame_5b75276146c4260a652059461937a08b );
    }
    cache_frame_5b75276146c4260a652059461937a08b = NULL;

    assertFrameObject( frame_5b75276146c4260a652059461937a08b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_40_rpartition );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_40_rpartition );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_41_rsplit( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_sep = python_pars[ 1 ];
    PyObject *par_maxsplit = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_d26bd3cf9e512fbf422f4610b79f09b3 = NULL;

    struct Nuitka_FrameObject *frame_d26bd3cf9e512fbf422f4610b79f09b3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d26bd3cf9e512fbf422f4610b79f09b3, codeobj_d26bd3cf9e512fbf422f4610b79f09b3, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d26bd3cf9e512fbf422f4610b79f09b3 = cache_frame_d26bd3cf9e512fbf422f4610b79f09b3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d26bd3cf9e512fbf422f4610b79f09b3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d26bd3cf9e512fbf422f4610b79f09b3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1239;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 1240;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_rsplit;
    tmp_left_name_1 = PyList_New( 1 );
    tmp_list_element_1 = par_sep;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 1240;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_maxsplit;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_d26bd3cf9e512fbf422f4610b79f09b3->m_frame.f_lineno = 1240;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 1240;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1240;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_d26bd3cf9e512fbf422f4610b79f09b3->m_frame.f_lineno = 1239;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1239;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d26bd3cf9e512fbf422f4610b79f09b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d26bd3cf9e512fbf422f4610b79f09b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d26bd3cf9e512fbf422f4610b79f09b3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d26bd3cf9e512fbf422f4610b79f09b3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d26bd3cf9e512fbf422f4610b79f09b3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d26bd3cf9e512fbf422f4610b79f09b3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d26bd3cf9e512fbf422f4610b79f09b3,
        type_description_1,
        par_a,
        par_sep,
        par_maxsplit
    );


    // Release cached frame.
    if ( frame_d26bd3cf9e512fbf422f4610b79f09b3 == cache_frame_d26bd3cf9e512fbf422f4610b79f09b3 )
    {
        Py_DECREF( frame_d26bd3cf9e512fbf422f4610b79f09b3 );
    }
    cache_frame_d26bd3cf9e512fbf422f4610b79f09b3 = NULL;

    assertFrameObject( frame_d26bd3cf9e512fbf422f4610b79f09b3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_41_rsplit );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_maxsplit );
    Py_DECREF( par_maxsplit );
    par_maxsplit = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_maxsplit );
    Py_DECREF( par_maxsplit );
    par_maxsplit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_41_rsplit );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_42_rstrip( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_chars = python_pars[ 1 ];
    PyObject *var_a_arr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_423c1e0595b4ad94043eb23c3ecf9ed4 = NULL;

    struct Nuitka_FrameObject *frame_423c1e0595b4ad94043eb23c3ecf9ed4;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_423c1e0595b4ad94043eb23c3ecf9ed4, codeobj_423c1e0595b4ad94043eb23c3ecf9ed4, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_423c1e0595b4ad94043eb23c3ecf9ed4 = cache_frame_423c1e0595b4ad94043eb23c3ecf9ed4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_423c1e0595b4ad94043eb23c3ecf9ed4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_423c1e0595b4ad94043eb23c3ecf9ed4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1283;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_423c1e0595b4ad94043eb23c3ecf9ed4->m_frame.f_lineno = 1283;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1283;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1284;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_1 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dtype );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1284;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_str_plain_rstrip;
    tmp_args_element_name_5 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_chars;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_1 );
    frame_423c1e0595b4ad94043eb23c3ecf9ed4->m_frame.f_lineno = 1284;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1284;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_423c1e0595b4ad94043eb23c3ecf9ed4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_423c1e0595b4ad94043eb23c3ecf9ed4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_423c1e0595b4ad94043eb23c3ecf9ed4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_423c1e0595b4ad94043eb23c3ecf9ed4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_423c1e0595b4ad94043eb23c3ecf9ed4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_423c1e0595b4ad94043eb23c3ecf9ed4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_423c1e0595b4ad94043eb23c3ecf9ed4,
        type_description_1,
        par_a,
        par_chars,
        var_a_arr
    );


    // Release cached frame.
    if ( frame_423c1e0595b4ad94043eb23c3ecf9ed4 == cache_frame_423c1e0595b4ad94043eb23c3ecf9ed4 )
    {
        Py_DECREF( frame_423c1e0595b4ad94043eb23c3ecf9ed4 );
    }
    cache_frame_423c1e0595b4ad94043eb23c3ecf9ed4 = NULL;

    assertFrameObject( frame_423c1e0595b4ad94043eb23c3ecf9ed4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_42_rstrip );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_42_rstrip );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_43_split( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_sep = python_pars[ 1 ];
    PyObject *par_maxsplit = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_0d4838be6d467b6a234a6112fb67ce70 = NULL;

    struct Nuitka_FrameObject *frame_0d4838be6d467b6a234a6112fb67ce70;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0d4838be6d467b6a234a6112fb67ce70, codeobj_0d4838be6d467b6a234a6112fb67ce70, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0d4838be6d467b6a234a6112fb67ce70 = cache_frame_0d4838be6d467b6a234a6112fb67ce70;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0d4838be6d467b6a234a6112fb67ce70 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0d4838be6d467b6a234a6112fb67ce70 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1317;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 1318;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_split;
    tmp_left_name_1 = PyList_New( 1 );
    tmp_list_element_1 = par_sep;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 1318;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_maxsplit;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_0d4838be6d467b6a234a6112fb67ce70->m_frame.f_lineno = 1318;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 1318;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1318;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_0d4838be6d467b6a234a6112fb67ce70->m_frame.f_lineno = 1317;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1317;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d4838be6d467b6a234a6112fb67ce70 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d4838be6d467b6a234a6112fb67ce70 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d4838be6d467b6a234a6112fb67ce70 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0d4838be6d467b6a234a6112fb67ce70, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0d4838be6d467b6a234a6112fb67ce70->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0d4838be6d467b6a234a6112fb67ce70, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0d4838be6d467b6a234a6112fb67ce70,
        type_description_1,
        par_a,
        par_sep,
        par_maxsplit
    );


    // Release cached frame.
    if ( frame_0d4838be6d467b6a234a6112fb67ce70 == cache_frame_0d4838be6d467b6a234a6112fb67ce70 )
    {
        Py_DECREF( frame_0d4838be6d467b6a234a6112fb67ce70 );
    }
    cache_frame_0d4838be6d467b6a234a6112fb67ce70 = NULL;

    assertFrameObject( frame_0d4838be6d467b6a234a6112fb67ce70 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_43_split );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_maxsplit );
    Py_DECREF( par_maxsplit );
    par_maxsplit = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_maxsplit );
    Py_DECREF( par_maxsplit );
    par_maxsplit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_43_split );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_44_splitlines( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_keepends = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_9668953ae50b0b755273b9db8a84d4cf = NULL;

    struct Nuitka_FrameObject *frame_9668953ae50b0b755273b9db8a84d4cf;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9668953ae50b0b755273b9db8a84d4cf, codeobj_9668953ae50b0b755273b9db8a84d4cf, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_9668953ae50b0b755273b9db8a84d4cf = cache_frame_9668953ae50b0b755273b9db8a84d4cf;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9668953ae50b0b755273b9db8a84d4cf );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9668953ae50b0b755273b9db8a84d4cf ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1346;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_object_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "object_" );
        exception_tb = NULL;

        exception_lineno = 1347;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_splitlines;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 1347;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_keepends;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_9668953ae50b0b755273b9db8a84d4cf->m_frame.f_lineno = 1347;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1347;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_9668953ae50b0b755273b9db8a84d4cf->m_frame.f_lineno = 1346;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1346;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9668953ae50b0b755273b9db8a84d4cf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9668953ae50b0b755273b9db8a84d4cf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9668953ae50b0b755273b9db8a84d4cf );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9668953ae50b0b755273b9db8a84d4cf, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9668953ae50b0b755273b9db8a84d4cf->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9668953ae50b0b755273b9db8a84d4cf, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9668953ae50b0b755273b9db8a84d4cf,
        type_description_1,
        par_a,
        par_keepends
    );


    // Release cached frame.
    if ( frame_9668953ae50b0b755273b9db8a84d4cf == cache_frame_9668953ae50b0b755273b9db8a84d4cf )
    {
        Py_DECREF( frame_9668953ae50b0b755273b9db8a84d4cf );
    }
    cache_frame_9668953ae50b0b755273b9db8a84d4cf = NULL;

    assertFrameObject( frame_9668953ae50b0b755273b9db8a84d4cf );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_44_splitlines );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_keepends );
    Py_DECREF( par_keepends );
    par_keepends = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_keepends );
    Py_DECREF( par_keepends );
    par_keepends = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_44_splitlines );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_45_startswith( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_prefix = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    static struct Nuitka_FrameObject *cache_frame_44b8d7e087a364c55d7746dcae95b39b = NULL;

    struct Nuitka_FrameObject *frame_44b8d7e087a364c55d7746dcae95b39b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_44b8d7e087a364c55d7746dcae95b39b, codeobj_44b8d7e087a364c55d7746dcae95b39b, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_44b8d7e087a364c55d7746dcae95b39b = cache_frame_44b8d7e087a364c55d7746dcae95b39b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_44b8d7e087a364c55d7746dcae95b39b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_44b8d7e087a364c55d7746dcae95b39b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1377;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = const_str_plain_startswith;
    tmp_left_name_1 = PyList_New( 2 );
    tmp_list_element_1 = par_prefix;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_list_element_1 = par_start;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 1, tmp_list_element_1 );
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_end;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_44b8d7e087a364c55d7746dcae95b39b->m_frame.f_lineno = 1378;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1378;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_44b8d7e087a364c55d7746dcae95b39b->m_frame.f_lineno = 1377;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1377;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_44b8d7e087a364c55d7746dcae95b39b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_44b8d7e087a364c55d7746dcae95b39b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_44b8d7e087a364c55d7746dcae95b39b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_44b8d7e087a364c55d7746dcae95b39b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_44b8d7e087a364c55d7746dcae95b39b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_44b8d7e087a364c55d7746dcae95b39b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_44b8d7e087a364c55d7746dcae95b39b,
        type_description_1,
        par_a,
        par_prefix,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_44b8d7e087a364c55d7746dcae95b39b == cache_frame_44b8d7e087a364c55d7746dcae95b39b )
    {
        Py_DECREF( frame_44b8d7e087a364c55d7746dcae95b39b );
    }
    cache_frame_44b8d7e087a364c55d7746dcae95b39b = NULL;

    assertFrameObject( frame_44b8d7e087a364c55d7746dcae95b39b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_45_startswith );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_prefix );
    Py_DECREF( par_prefix );
    par_prefix = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_prefix );
    Py_DECREF( par_prefix );
    par_prefix = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_45_startswith );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_46_strip( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_chars = python_pars[ 1 ];
    PyObject *var_a_arr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_95fd8319b5a538d898c475ee4ae67aee = NULL;

    struct Nuitka_FrameObject *frame_95fd8319b5a538d898c475ee4ae67aee;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_95fd8319b5a538d898c475ee4ae67aee, codeobj_95fd8319b5a538d898c475ee4ae67aee, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_95fd8319b5a538d898c475ee4ae67aee = cache_frame_95fd8319b5a538d898c475ee4ae67aee;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_95fd8319b5a538d898c475ee4ae67aee );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_95fd8319b5a538d898c475ee4ae67aee ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_95fd8319b5a538d898c475ee4ae67aee->m_frame.f_lineno = 1425;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1426;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_1 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dtype );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1426;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_str_plain_strip;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 1426;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = par_chars;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_95fd8319b5a538d898c475ee4ae67aee->m_frame.f_lineno = 1426;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 1426;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_95fd8319b5a538d898c475ee4ae67aee->m_frame.f_lineno = 1426;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1426;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_95fd8319b5a538d898c475ee4ae67aee );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_95fd8319b5a538d898c475ee4ae67aee );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_95fd8319b5a538d898c475ee4ae67aee );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_95fd8319b5a538d898c475ee4ae67aee, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_95fd8319b5a538d898c475ee4ae67aee->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_95fd8319b5a538d898c475ee4ae67aee, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_95fd8319b5a538d898c475ee4ae67aee,
        type_description_1,
        par_a,
        par_chars,
        var_a_arr
    );


    // Release cached frame.
    if ( frame_95fd8319b5a538d898c475ee4ae67aee == cache_frame_95fd8319b5a538d898c475ee4ae67aee )
    {
        Py_DECREF( frame_95fd8319b5a538d898c475ee4ae67aee );
    }
    cache_frame_95fd8319b5a538d898c475ee4ae67aee = NULL;

    assertFrameObject( frame_95fd8319b5a538d898c475ee4ae67aee );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_46_strip );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_46_strip );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_47_swapcase( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *var_a_arr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_5693c0907afdc65b955814b62aa42e89 = NULL;

    struct Nuitka_FrameObject *frame_5693c0907afdc65b955814b62aa42e89;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5693c0907afdc65b955814b62aa42e89, codeobj_5693c0907afdc65b955814b62aa42e89, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_5693c0907afdc65b955814b62aa42e89 = cache_frame_5693c0907afdc65b955814b62aa42e89;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5693c0907afdc65b955814b62aa42e89 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5693c0907afdc65b955814b62aa42e89 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1462;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_5693c0907afdc65b955814b62aa42e89->m_frame.f_lineno = 1462;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1462;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1463;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_1 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dtype );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1463;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_str_plain_swapcase;
    frame_5693c0907afdc65b955814b62aa42e89->m_frame.f_lineno = 1463;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1463;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5693c0907afdc65b955814b62aa42e89 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5693c0907afdc65b955814b62aa42e89 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5693c0907afdc65b955814b62aa42e89 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5693c0907afdc65b955814b62aa42e89, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5693c0907afdc65b955814b62aa42e89->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5693c0907afdc65b955814b62aa42e89, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5693c0907afdc65b955814b62aa42e89,
        type_description_1,
        par_a,
        var_a_arr
    );


    // Release cached frame.
    if ( frame_5693c0907afdc65b955814b62aa42e89 == cache_frame_5693c0907afdc65b955814b62aa42e89 )
    {
        Py_DECREF( frame_5693c0907afdc65b955814b62aa42e89 );
    }
    cache_frame_5693c0907afdc65b955814b62aa42e89 = NULL;

    assertFrameObject( frame_5693c0907afdc65b955814b62aa42e89 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_47_swapcase );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_47_swapcase );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_48_title( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *var_a_arr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_93e3ce98d20b6216dc9532150c84f84a = NULL;

    struct Nuitka_FrameObject *frame_93e3ce98d20b6216dc9532150c84f84a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_93e3ce98d20b6216dc9532150c84f84a, codeobj_93e3ce98d20b6216dc9532150c84f84a, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_93e3ce98d20b6216dc9532150c84f84a = cache_frame_93e3ce98d20b6216dc9532150c84f84a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_93e3ce98d20b6216dc9532150c84f84a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_93e3ce98d20b6216dc9532150c84f84a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1501;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_93e3ce98d20b6216dc9532150c84f84a->m_frame.f_lineno = 1501;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1501;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1502;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_1 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dtype );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1502;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_str_plain_title;
    frame_93e3ce98d20b6216dc9532150c84f84a->m_frame.f_lineno = 1502;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1502;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_93e3ce98d20b6216dc9532150c84f84a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_93e3ce98d20b6216dc9532150c84f84a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_93e3ce98d20b6216dc9532150c84f84a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_93e3ce98d20b6216dc9532150c84f84a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_93e3ce98d20b6216dc9532150c84f84a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_93e3ce98d20b6216dc9532150c84f84a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_93e3ce98d20b6216dc9532150c84f84a,
        type_description_1,
        par_a,
        var_a_arr
    );


    // Release cached frame.
    if ( frame_93e3ce98d20b6216dc9532150c84f84a == cache_frame_93e3ce98d20b6216dc9532150c84f84a )
    {
        Py_DECREF( frame_93e3ce98d20b6216dc9532150c84f84a );
    }
    cache_frame_93e3ce98d20b6216dc9532150c84f84a = NULL;

    assertFrameObject( frame_93e3ce98d20b6216dc9532150c84f84a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_48_title );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_48_title );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_49_translate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_table = python_pars[ 1 ];
    PyObject *par_deletechars = python_pars[ 2 ];
    PyObject *var_a_arr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_9f34a63a280259c577f6484a1d87048a = NULL;

    struct Nuitka_FrameObject *frame_9f34a63a280259c577f6484a1d87048a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9f34a63a280259c577f6484a1d87048a, codeobj_9f34a63a280259c577f6484a1d87048a, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_9f34a63a280259c577f6484a1d87048a = cache_frame_9f34a63a280259c577f6484a1d87048a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9f34a63a280259c577f6484a1d87048a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9f34a63a280259c577f6484a1d87048a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1532;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_9f34a63a280259c577f6484a1d87048a->m_frame.f_lineno = 1532;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1532;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    assert( tmp_called_name_1 != NULL );
    tmp_source_name_2 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_dtype );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1533;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_type );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1533;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 1533;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    frame_9f34a63a280259c577f6484a1d87048a->m_frame.f_lineno = 1533;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1533;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1533;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1534;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_source_name_3 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_dtype );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1535;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_str_plain_translate;
    tmp_args_element_name_7 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_table;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_7, 0, tmp_tuple_element_1 );
    frame_9f34a63a280259c577f6484a1d87048a->m_frame.f_lineno = 1534;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1534;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1537;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_source_name_4 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_args_element_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_dtype );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1538;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_10 = const_str_plain_translate;
    tmp_left_name_1 = PyList_New( 1 );
    tmp_list_element_1 = par_table;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__clean_args );
    }

    if ( tmp_called_name_4 == NULL )
    {
        Py_DECREF( tmp_args_element_name_9 );
        Py_DECREF( tmp_left_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_clean_args" );
        exception_tb = NULL;

        exception_lineno = 1538;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_12 = par_deletechars;

    CHECK_OBJECT( tmp_args_element_name_12 );
    frame_9f34a63a280259c577f6484a1d87048a->m_frame.f_lineno = 1538;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_9 );
        Py_DECREF( tmp_left_name_1 );

        exception_lineno = 1538;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_11 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 1538;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_9f34a63a280259c577f6484a1d87048a->m_frame.f_lineno = 1537;
    {
        PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_9 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1537;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f34a63a280259c577f6484a1d87048a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f34a63a280259c577f6484a1d87048a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f34a63a280259c577f6484a1d87048a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9f34a63a280259c577f6484a1d87048a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9f34a63a280259c577f6484a1d87048a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9f34a63a280259c577f6484a1d87048a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9f34a63a280259c577f6484a1d87048a,
        type_description_1,
        par_a,
        par_table,
        par_deletechars,
        var_a_arr
    );


    // Release cached frame.
    if ( frame_9f34a63a280259c577f6484a1d87048a == cache_frame_9f34a63a280259c577f6484a1d87048a )
    {
        Py_DECREF( frame_9f34a63a280259c577f6484a1d87048a );
    }
    cache_frame_9f34a63a280259c577f6484a1d87048a = NULL;

    assertFrameObject( frame_9f34a63a280259c577f6484a1d87048a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_49_translate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_table );
    Py_DECREF( par_table );
    par_table = NULL;

    CHECK_OBJECT( (PyObject *)par_deletechars );
    Py_DECREF( par_deletechars );
    par_deletechars = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_table );
    Py_DECREF( par_table );
    par_table = NULL;

    CHECK_OBJECT( (PyObject *)par_deletechars );
    Py_DECREF( par_deletechars );
    par_deletechars = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_49_translate );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_50_upper( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *var_a_arr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_848f92def2c6b3a6dc8e1eb3a065acdc = NULL;

    struct Nuitka_FrameObject *frame_848f92def2c6b3a6dc8e1eb3a065acdc;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_848f92def2c6b3a6dc8e1eb3a065acdc, codeobj_848f92def2c6b3a6dc8e1eb3a065acdc, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_848f92def2c6b3a6dc8e1eb3a065acdc = cache_frame_848f92def2c6b3a6dc8e1eb3a065acdc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_848f92def2c6b3a6dc8e1eb3a065acdc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_848f92def2c6b3a6dc8e1eb3a065acdc ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1573;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_848f92def2c6b3a6dc8e1eb3a065acdc->m_frame.f_lineno = 1573;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1573;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1574;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_1 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dtype );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1574;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = const_str_plain_upper;
    frame_848f92def2c6b3a6dc8e1eb3a065acdc->m_frame.f_lineno = 1574;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1574;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_848f92def2c6b3a6dc8e1eb3a065acdc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_848f92def2c6b3a6dc8e1eb3a065acdc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_848f92def2c6b3a6dc8e1eb3a065acdc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_848f92def2c6b3a6dc8e1eb3a065acdc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_848f92def2c6b3a6dc8e1eb3a065acdc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_848f92def2c6b3a6dc8e1eb3a065acdc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_848f92def2c6b3a6dc8e1eb3a065acdc,
        type_description_1,
        par_a,
        var_a_arr
    );


    // Release cached frame.
    if ( frame_848f92def2c6b3a6dc8e1eb3a065acdc == cache_frame_848f92def2c6b3a6dc8e1eb3a065acdc )
    {
        Py_DECREF( frame_848f92def2c6b3a6dc8e1eb3a065acdc );
    }
    cache_frame_848f92def2c6b3a6dc8e1eb3a065acdc = NULL;

    assertFrameObject( frame_848f92def2c6b3a6dc8e1eb3a065acdc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_50_upper );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_50_upper );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_51_zfill( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_width = python_pars[ 1 ];
    PyObject *var_a_arr = NULL;
    PyObject *var_width_arr = NULL;
    PyObject *var_size = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    static struct Nuitka_FrameObject *cache_frame_cbf724c45ff30f9dd8ccb28b307825ee = NULL;

    struct Nuitka_FrameObject *frame_cbf724c45ff30f9dd8ccb28b307825ee;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cbf724c45ff30f9dd8ccb28b307825ee, codeobj_cbf724c45ff30f9dd8ccb28b307825ee, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_cbf724c45ff30f9dd8ccb28b307825ee = cache_frame_cbf724c45ff30f9dd8ccb28b307825ee;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cbf724c45ff30f9dd8ccb28b307825ee );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cbf724c45ff30f9dd8ccb28b307825ee ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1600;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_cbf724c45ff30f9dd8ccb28b307825ee->m_frame.f_lineno = 1600;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1600;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_a_arr == NULL );
    var_a_arr = tmp_assign_source_1;

    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1601;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_width;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_cbf724c45ff30f9dd8ccb28b307825ee->m_frame.f_lineno = 1601;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1601;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_width_arr == NULL );
    var_width_arr = tmp_assign_source_2;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_long );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_long );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "long" );
        exception_tb = NULL;

        exception_lineno = 1602;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1602;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_max );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1602;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = var_width_arr;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_flat );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 1602;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_cbf724c45ff30f9dd8ccb28b307825ee->m_frame.f_lineno = 1602;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1602;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_cbf724c45ff30f9dd8ccb28b307825ee->m_frame.f_lineno = 1602;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1602;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_size == NULL );
    var_size = tmp_assign_source_3;

    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1603;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = var_a_arr;

    CHECK_OBJECT( tmp_args_element_name_5 );
    tmp_args_element_name_6 = PyTuple_New( 2 );
    tmp_source_name_4 = var_a_arr;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_dtype );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_6 );

        exception_lineno = 1604;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_type );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_6 );

        exception_lineno = 1604;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_6, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_size;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_6, 1, tmp_tuple_element_1 );
    tmp_args_element_name_7 = const_str_plain_zfill;
    tmp_args_element_name_8 = PyTuple_New( 1 );
    tmp_tuple_element_2 = var_width_arr;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_8, 0, tmp_tuple_element_2 );
    frame_cbf724c45ff30f9dd8ccb28b307825ee->m_frame.f_lineno = 1603;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_6 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1603;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cbf724c45ff30f9dd8ccb28b307825ee );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_cbf724c45ff30f9dd8ccb28b307825ee );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cbf724c45ff30f9dd8ccb28b307825ee );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cbf724c45ff30f9dd8ccb28b307825ee, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cbf724c45ff30f9dd8ccb28b307825ee->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cbf724c45ff30f9dd8ccb28b307825ee, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cbf724c45ff30f9dd8ccb28b307825ee,
        type_description_1,
        par_a,
        par_width,
        var_a_arr,
        var_width_arr,
        var_size
    );


    // Release cached frame.
    if ( frame_cbf724c45ff30f9dd8ccb28b307825ee == cache_frame_cbf724c45ff30f9dd8ccb28b307825ee )
    {
        Py_DECREF( frame_cbf724c45ff30f9dd8ccb28b307825ee );
    }
    cache_frame_cbf724c45ff30f9dd8ccb28b307825ee = NULL;

    assertFrameObject( frame_cbf724c45ff30f9dd8ccb28b307825ee );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_51_zfill );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)var_a_arr );
    Py_DECREF( var_a_arr );
    var_a_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_width_arr );
    Py_DECREF( var_width_arr );
    var_width_arr = NULL;

    CHECK_OBJECT( (PyObject *)var_size );
    Py_DECREF( var_size );
    var_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    Py_XDECREF( var_a_arr );
    var_a_arr = NULL;

    Py_XDECREF( var_width_arr );
    var_width_arr = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_51_zfill );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_52_isnumeric( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_bc3700ed0ff25e17c78f6812b46a1a55 = NULL;

    struct Nuitka_FrameObject *frame_bc3700ed0ff25e17c78f6812b46a1a55;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bc3700ed0ff25e17c78f6812b46a1a55, codeobj_bc3700ed0ff25e17c78f6812b46a1a55, module_numpy$core$defchararray, sizeof(void *) );
    frame_bc3700ed0ff25e17c78f6812b46a1a55 = cache_frame_bc3700ed0ff25e17c78f6812b46a1a55;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bc3700ed0ff25e17c78f6812b46a1a55 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bc3700ed0ff25e17c78f6812b46a1a55 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__use_unicode );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__use_unicode );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_use_unicode" );
        exception_tb = NULL;

        exception_lineno = 1633;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_bc3700ed0ff25e17c78f6812b46a1a55->m_frame.f_lineno = 1633;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_compare_left_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1633;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_compare_right_1 == NULL ))
    {
        tmp_compare_right_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_compare_right_1 == NULL )
    {
        Py_DECREF( tmp_compare_left_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 1633;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 1633;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_str_digest_0fa7cdb2bd564dc1afddba0ed189171c;
    frame_bc3700ed0ff25e17c78f6812b46a1a55->m_frame.f_lineno = 1634;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 1634;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "o";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1635;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_a;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 1635;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain_isnumeric;
    frame_bc3700ed0ff25e17c78f6812b46a1a55->m_frame.f_lineno = 1635;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1635;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bc3700ed0ff25e17c78f6812b46a1a55 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bc3700ed0ff25e17c78f6812b46a1a55 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bc3700ed0ff25e17c78f6812b46a1a55 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bc3700ed0ff25e17c78f6812b46a1a55, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bc3700ed0ff25e17c78f6812b46a1a55->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bc3700ed0ff25e17c78f6812b46a1a55, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bc3700ed0ff25e17c78f6812b46a1a55,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_bc3700ed0ff25e17c78f6812b46a1a55 == cache_frame_bc3700ed0ff25e17c78f6812b46a1a55 )
    {
        Py_DECREF( frame_bc3700ed0ff25e17c78f6812b46a1a55 );
    }
    cache_frame_bc3700ed0ff25e17c78f6812b46a1a55 = NULL;

    assertFrameObject( frame_bc3700ed0ff25e17c78f6812b46a1a55 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_52_isnumeric );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_52_isnumeric );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_53_isdecimal( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_40775d40770d1c61759195a5097b5f63 = NULL;

    struct Nuitka_FrameObject *frame_40775d40770d1c61759195a5097b5f63;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_40775d40770d1c61759195a5097b5f63, codeobj_40775d40770d1c61759195a5097b5f63, module_numpy$core$defchararray, sizeof(void *) );
    frame_40775d40770d1c61759195a5097b5f63 = cache_frame_40775d40770d1c61759195a5097b5f63;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_40775d40770d1c61759195a5097b5f63 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_40775d40770d1c61759195a5097b5f63 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__use_unicode );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__use_unicode );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_use_unicode" );
        exception_tb = NULL;

        exception_lineno = 1664;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_a;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_40775d40770d1c61759195a5097b5f63->m_frame.f_lineno = 1664;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_compare_left_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1664;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_compare_right_1 == NULL ))
    {
        tmp_compare_right_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_compare_right_1 == NULL )
    {
        Py_DECREF( tmp_compare_left_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 1664;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 1664;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_str_digest_0fa7cdb2bd564dc1afddba0ed189171c;
    frame_40775d40770d1c61759195a5097b5f63->m_frame.f_lineno = 1665;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 1665;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "o";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__vec_string );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_vec_string" );
        exception_tb = NULL;

        exception_lineno = 1666;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_a;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_ );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bool_ );
    }

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "bool_" );
        exception_tb = NULL;

        exception_lineno = 1666;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = const_str_plain_isdecimal;
    frame_40775d40770d1c61759195a5097b5f63->m_frame.f_lineno = 1666;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1666;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_40775d40770d1c61759195a5097b5f63 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_40775d40770d1c61759195a5097b5f63 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_40775d40770d1c61759195a5097b5f63 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_40775d40770d1c61759195a5097b5f63, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_40775d40770d1c61759195a5097b5f63->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_40775d40770d1c61759195a5097b5f63, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_40775d40770d1c61759195a5097b5f63,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_40775d40770d1c61759195a5097b5f63 == cache_frame_40775d40770d1c61759195a5097b5f63 )
    {
        Py_DECREF( frame_40775d40770d1c61759195a5097b5f63 );
    }
    cache_frame_40775d40770d1c61759195a5097b5f63 = NULL;

    assertFrameObject( frame_40775d40770d1c61759195a5097b5f63 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_53_isdecimal );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_53_isdecimal );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_54___new__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_subtype = python_pars[ 0 ];
    PyObject *par_shape = python_pars[ 1 ];
    PyObject *par_itemsize = python_pars[ 2 ];
    PyObject *par_unicode = python_pars[ 3 ];
    PyObject *par_buffer = python_pars[ 4 ];
    PyObject *par_offset = python_pars[ 5 ];
    PyObject *par_strides = python_pars[ 6 ];
    PyObject *par_order = python_pars[ 7 ];
    PyObject *var_dtype = NULL;
    PyObject *var_filler = NULL;
    PyObject *var_self = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    bool tmp_is_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    static struct Nuitka_FrameObject *cache_frame_25dae428e2315d2543638fd560bc6019 = NULL;

    struct Nuitka_FrameObject *frame_25dae428e2315d2543638fd560bc6019;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_25dae428e2315d2543638fd560bc6019, codeobj_25dae428e2315d2543638fd560bc6019, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_25dae428e2315d2543638fd560bc6019 = cache_frame_25dae428e2315d2543638fd560bc6019;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_25dae428e2315d2543638fd560bc6019 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_25dae428e2315d2543638fd560bc6019 ) == 2 ); // Frame stack

    // Framed code:
    tmp_cond_value_1 = par_unicode;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1815;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_assign_source_1 == NULL ))
    {
        tmp_assign_source_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_assign_source_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 1816;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }

    assert( var_dtype == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_dtype = tmp_assign_source_1;

    goto branch_end_1;
    branch_no_1:;
    tmp_assign_source_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_string_ );

    if (unlikely( tmp_assign_source_2 == NULL ))
    {
        tmp_assign_source_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_string_ );
    }

    if ( tmp_assign_source_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "string_" );
        exception_tb = NULL;

        exception_lineno = 1818;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }

    assert( var_dtype == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_dtype = tmp_assign_source_2;

    branch_end_1:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_long );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_long );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "long" );
        exception_tb = NULL;

        exception_lineno = 1823;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_itemsize;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_25dae428e2315d2543638fd560bc6019->m_frame.f_lineno = 1823;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1823;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_itemsize;
        assert( old != NULL );
        par_itemsize = tmp_assign_source_3;
        Py_DECREF( old );
    }

    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 1825;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version_info );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1825;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = const_int_0;
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1825;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = const_int_pos_3;
    tmp_and_left_value_1 = RICH_COMPARE_GE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1825;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 1825;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_isinstance_inst_1 = par_buffer;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__unicode );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__unicode );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_unicode" );
        exception_tb = NULL;

        exception_lineno = 1825;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_right_value_1 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1825;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_and_right_value_1 );
    tmp_cond_value_2 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_2 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 1825;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_4 = par_buffer;

    CHECK_OBJECT( tmp_assign_source_4 );
    assert( var_filler == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var_filler = tmp_assign_source_4;

    tmp_assign_source_5 = Py_None;
    {
        PyObject *old = par_buffer;
        assert( old != NULL );
        par_buffer = tmp_assign_source_5;
        Py_INCREF( par_buffer );
        Py_DECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_assign_source_6 = Py_None;
    assert( var_filler == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_filler = tmp_assign_source_6;

    branch_end_2:;
    tmp_assign_source_7 = const_int_pos_1;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__globalvar, tmp_assign_source_7 );
    tmp_compare_left_1 = par_buffer;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ndarray );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ndarray );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ndarray" );
        exception_tb = NULL;

        exception_lineno = 1834;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___new__ );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1834;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_1 = PyTuple_New( 3 );
    tmp_tuple_element_1 = par_subtype;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_shape;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_tuple_element_1 = PyTuple_New( 2 );
    tmp_tuple_element_2 = var_dtype;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_tuple_element_1, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = par_itemsize;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_tuple_element_1, 1, tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_value_1 = par_order;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_order;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_25dae428e2315d2543638fd560bc6019->m_frame.f_lineno = 1834;
    tmp_assign_source_8 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1834;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_self == NULL );
    var_self = tmp_assign_source_8;

    goto branch_end_3;
    branch_no_3:;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ndarray );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ndarray );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ndarray" );
        exception_tb = NULL;

        exception_lineno = 1837;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___new__ );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1837;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_2 = PyTuple_New( 3 );
    tmp_tuple_element_3 = par_subtype;

    CHECK_OBJECT( tmp_tuple_element_3 );
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = par_shape;

    CHECK_OBJECT( tmp_tuple_element_3 );
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_3 );
    tmp_tuple_element_3 = PyTuple_New( 2 );
    tmp_tuple_element_4 = var_dtype;

    CHECK_OBJECT( tmp_tuple_element_4 );
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_tuple_element_3, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = par_itemsize;

    CHECK_OBJECT( tmp_tuple_element_4 );
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_tuple_element_3, 1, tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_name_2, 2, tmp_tuple_element_3 );
    tmp_kw_name_2 = _PyDict_NewPresized( 4 );
    tmp_dict_value_2 = par_buffer;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain_buffer;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_3 = par_offset;

    CHECK_OBJECT( tmp_dict_value_3 );
    tmp_dict_key_3 = const_str_plain_offset;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_4 = par_strides;

    CHECK_OBJECT( tmp_dict_value_4 );
    tmp_dict_key_4 = const_str_plain_strides;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_5 = par_order;

    CHECK_OBJECT( tmp_dict_value_5 );
    tmp_dict_key_5 = const_str_plain_order;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_25dae428e2315d2543638fd560bc6019->m_frame.f_lineno = 1837;
    tmp_assign_source_9 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1837;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_self == NULL );
    var_self = tmp_assign_source_9;

    branch_end_3:;
    tmp_compare_left_2 = var_filler;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_ass_subvalue_1 = var_filler;

    CHECK_OBJECT( tmp_ass_subvalue_1 );
    tmp_ass_subscribed_1 = var_self;

    CHECK_OBJECT( tmp_ass_subscribed_1 );
    tmp_ass_subscript_1 = Py_Ellipsis;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1842;
        type_description_1 = "ooooooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_4:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_25dae428e2315d2543638fd560bc6019 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_25dae428e2315d2543638fd560bc6019 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_25dae428e2315d2543638fd560bc6019, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_25dae428e2315d2543638fd560bc6019->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_25dae428e2315d2543638fd560bc6019, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_25dae428e2315d2543638fd560bc6019,
        type_description_1,
        par_subtype,
        par_shape,
        par_itemsize,
        par_unicode,
        par_buffer,
        par_offset,
        par_strides,
        par_order,
        var_dtype,
        var_filler,
        var_self
    );


    // Release cached frame.
    if ( frame_25dae428e2315d2543638fd560bc6019 == cache_frame_25dae428e2315d2543638fd560bc6019 )
    {
        Py_DECREF( frame_25dae428e2315d2543638fd560bc6019 );
    }
    cache_frame_25dae428e2315d2543638fd560bc6019 = NULL;

    assertFrameObject( frame_25dae428e2315d2543638fd560bc6019 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_assign_source_10 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__globalvar, tmp_assign_source_10 );
    tmp_return_value = var_self;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_54___new__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_subtype );
    Py_DECREF( par_subtype );
    par_subtype = NULL;

    CHECK_OBJECT( (PyObject *)par_shape );
    Py_DECREF( par_shape );
    par_shape = NULL;

    CHECK_OBJECT( (PyObject *)par_itemsize );
    Py_DECREF( par_itemsize );
    par_itemsize = NULL;

    CHECK_OBJECT( (PyObject *)par_unicode );
    Py_DECREF( par_unicode );
    par_unicode = NULL;

    CHECK_OBJECT( (PyObject *)par_buffer );
    Py_DECREF( par_buffer );
    par_buffer = NULL;

    CHECK_OBJECT( (PyObject *)par_offset );
    Py_DECREF( par_offset );
    par_offset = NULL;

    CHECK_OBJECT( (PyObject *)par_strides );
    Py_DECREF( par_strides );
    par_strides = NULL;

    CHECK_OBJECT( (PyObject *)par_order );
    Py_DECREF( par_order );
    par_order = NULL;

    CHECK_OBJECT( (PyObject *)var_dtype );
    Py_DECREF( var_dtype );
    var_dtype = NULL;

    CHECK_OBJECT( (PyObject *)var_filler );
    Py_DECREF( var_filler );
    var_filler = NULL;

    CHECK_OBJECT( (PyObject *)var_self );
    Py_DECREF( var_self );
    var_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_subtype );
    Py_DECREF( par_subtype );
    par_subtype = NULL;

    CHECK_OBJECT( (PyObject *)par_shape );
    Py_DECREF( par_shape );
    par_shape = NULL;

    CHECK_OBJECT( (PyObject *)par_itemsize );
    Py_DECREF( par_itemsize );
    par_itemsize = NULL;

    CHECK_OBJECT( (PyObject *)par_unicode );
    Py_DECREF( par_unicode );
    par_unicode = NULL;

    Py_XDECREF( par_buffer );
    par_buffer = NULL;

    CHECK_OBJECT( (PyObject *)par_offset );
    Py_DECREF( par_offset );
    par_offset = NULL;

    CHECK_OBJECT( (PyObject *)par_strides );
    Py_DECREF( par_strides );
    par_strides = NULL;

    CHECK_OBJECT( (PyObject *)par_order );
    Py_DECREF( par_order );
    par_order = NULL;

    Py_XDECREF( var_dtype );
    var_dtype = NULL;

    Py_XDECREF( var_filler );
    var_filler = NULL;

    Py_XDECREF( var_self );
    var_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_54___new__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_55___array_finalize__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_obj = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_bda0219e7285bf31e37d43f1e90536db = NULL;

    struct Nuitka_FrameObject *frame_bda0219e7285bf31e37d43f1e90536db;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bda0219e7285bf31e37d43f1e90536db, codeobj_bda0219e7285bf31e37d43f1e90536db, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_bda0219e7285bf31e37d43f1e90536db = cache_frame_bda0219e7285bf31e37d43f1e90536db;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bda0219e7285bf31e37d43f1e90536db );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bda0219e7285bf31e37d43f1e90536db ) == 2 ); // Frame stack

    // Framed code:
    tmp_operand_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__globalvar );

    if (unlikely( tmp_operand_name_1 == NULL ))
    {
        tmp_operand_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__globalvar );
    }

    if ( tmp_operand_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_globalvar" );
        exception_tb = NULL;

        exception_lineno = 1848;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1848;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1848;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_dtype );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1848;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_char );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1848;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = const_str_plain_SUbc;
    tmp_and_right_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1848;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1848;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_str_digest_4cd970d8c7925c19e8311aabe268064c;
    frame_bda0219e7285bf31e37d43f1e90536db->m_frame.f_lineno = 1849;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 1849;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bda0219e7285bf31e37d43f1e90536db );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bda0219e7285bf31e37d43f1e90536db );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bda0219e7285bf31e37d43f1e90536db, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bda0219e7285bf31e37d43f1e90536db->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bda0219e7285bf31e37d43f1e90536db, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bda0219e7285bf31e37d43f1e90536db,
        type_description_1,
        par_self,
        par_obj
    );


    // Release cached frame.
    if ( frame_bda0219e7285bf31e37d43f1e90536db == cache_frame_bda0219e7285bf31e37d43f1e90536db )
    {
        Py_DECREF( frame_bda0219e7285bf31e37d43f1e90536db );
    }
    cache_frame_bda0219e7285bf31e37d43f1e90536db = NULL;

    assertFrameObject( frame_bda0219e7285bf31e37d43f1e90536db );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_55___array_finalize__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_55___array_finalize__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_56___getitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_obj = python_pars[ 1 ];
    PyObject *var_val = NULL;
    PyObject *var_temp = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_c0a69ffdf5ce79add418a0c03300670a = NULL;

    struct Nuitka_FrameObject *frame_c0a69ffdf5ce79add418a0c03300670a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c0a69ffdf5ce79add418a0c03300670a, codeobj_c0a69ffdf5ce79add418a0c03300670a, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_c0a69ffdf5ce79add418a0c03300670a = cache_frame_c0a69ffdf5ce79add418a0c03300670a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c0a69ffdf5ce79add418a0c03300670a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c0a69ffdf5ce79add418a0c03300670a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ndarray );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ndarray );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ndarray" );
        exception_tb = NULL;

        exception_lineno = 1852;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_obj;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_c0a69ffdf5ce79add418a0c03300670a->m_frame.f_lineno = 1852;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain___getitem__, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1852;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_val == NULL );
    var_val = tmp_assign_source_1;

    tmp_isinstance_inst_1 = var_val;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_character );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_character );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "character" );
        exception_tb = NULL;

        exception_lineno = 1854;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1854;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_instance_2 = var_val;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_c0a69ffdf5ce79add418a0c03300670a->m_frame.f_lineno = 1855;
    tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_rstrip );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1855;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_temp == NULL );
    var_temp = tmp_assign_source_2;

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__len );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__len );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_len" );
        exception_tb = NULL;

        exception_lineno = 1856;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = var_temp;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_c0a69ffdf5ce79add418a0c03300670a->m_frame.f_lineno = 1856;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_compare_left_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1856;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_int_0;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 1856;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_3 = const_str_empty;
    {
        PyObject *old = var_val;
        assert( old != NULL );
        var_val = tmp_assign_source_3;
        Py_INCREF( var_val );
        Py_DECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_assign_source_4 = var_temp;

    CHECK_OBJECT( tmp_assign_source_4 );
    {
        PyObject *old = var_val;
        assert( old != NULL );
        var_val = tmp_assign_source_4;
        Py_INCREF( var_val );
        Py_DECREF( old );
    }

    branch_end_2:;
    branch_no_1:;
    tmp_return_value = var_val;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "val" );
        exception_tb = NULL;

        exception_lineno = 1861;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c0a69ffdf5ce79add418a0c03300670a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c0a69ffdf5ce79add418a0c03300670a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c0a69ffdf5ce79add418a0c03300670a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c0a69ffdf5ce79add418a0c03300670a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c0a69ffdf5ce79add418a0c03300670a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c0a69ffdf5ce79add418a0c03300670a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c0a69ffdf5ce79add418a0c03300670a,
        type_description_1,
        par_self,
        par_obj,
        var_val,
        var_temp
    );


    // Release cached frame.
    if ( frame_c0a69ffdf5ce79add418a0c03300670a == cache_frame_c0a69ffdf5ce79add418a0c03300670a )
    {
        Py_DECREF( frame_c0a69ffdf5ce79add418a0c03300670a );
    }
    cache_frame_c0a69ffdf5ce79add418a0c03300670a = NULL;

    assertFrameObject( frame_c0a69ffdf5ce79add418a0c03300670a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_56___getitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    Py_XDECREF( var_temp );
    var_temp = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    Py_XDECREF( var_temp );
    var_temp = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_56___getitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_57___eq__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_20d0a8878f014db189b88ee053662d0d = NULL;

    struct Nuitka_FrameObject *frame_20d0a8878f014db189b88ee053662d0d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_20d0a8878f014db189b88ee053662d0d, codeobj_20d0a8878f014db189b88ee053662d0d, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_20d0a8878f014db189b88ee053662d0d = cache_frame_20d0a8878f014db189b88ee053662d0d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_20d0a8878f014db189b88ee053662d0d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_20d0a8878f014db189b88ee053662d0d ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_equal );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_equal );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "equal" );
        exception_tb = NULL;

        exception_lineno = 1876;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_other;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_20d0a8878f014db189b88ee053662d0d->m_frame.f_lineno = 1876;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1876;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_20d0a8878f014db189b88ee053662d0d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_20d0a8878f014db189b88ee053662d0d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_20d0a8878f014db189b88ee053662d0d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_20d0a8878f014db189b88ee053662d0d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_20d0a8878f014db189b88ee053662d0d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_20d0a8878f014db189b88ee053662d0d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_20d0a8878f014db189b88ee053662d0d,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_20d0a8878f014db189b88ee053662d0d == cache_frame_20d0a8878f014db189b88ee053662d0d )
    {
        Py_DECREF( frame_20d0a8878f014db189b88ee053662d0d );
    }
    cache_frame_20d0a8878f014db189b88ee053662d0d = NULL;

    assertFrameObject( frame_20d0a8878f014db189b88ee053662d0d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_57___eq__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_57___eq__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_58___ne__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_4753bc977a57cb311c7c1807611ea60b = NULL;

    struct Nuitka_FrameObject *frame_4753bc977a57cb311c7c1807611ea60b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4753bc977a57cb311c7c1807611ea60b, codeobj_4753bc977a57cb311c7c1807611ea60b, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_4753bc977a57cb311c7c1807611ea60b = cache_frame_4753bc977a57cb311c7c1807611ea60b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4753bc977a57cb311c7c1807611ea60b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4753bc977a57cb311c7c1807611ea60b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_not_equal );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_not_equal );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "not_equal" );
        exception_tb = NULL;

        exception_lineno = 1886;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_other;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_4753bc977a57cb311c7c1807611ea60b->m_frame.f_lineno = 1886;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1886;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4753bc977a57cb311c7c1807611ea60b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4753bc977a57cb311c7c1807611ea60b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4753bc977a57cb311c7c1807611ea60b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4753bc977a57cb311c7c1807611ea60b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4753bc977a57cb311c7c1807611ea60b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4753bc977a57cb311c7c1807611ea60b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4753bc977a57cb311c7c1807611ea60b,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_4753bc977a57cb311c7c1807611ea60b == cache_frame_4753bc977a57cb311c7c1807611ea60b )
    {
        Py_DECREF( frame_4753bc977a57cb311c7c1807611ea60b );
    }
    cache_frame_4753bc977a57cb311c7c1807611ea60b = NULL;

    assertFrameObject( frame_4753bc977a57cb311c7c1807611ea60b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_58___ne__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_58___ne__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_59___ge__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_5e13668a626a54c131f2447b766b1118 = NULL;

    struct Nuitka_FrameObject *frame_5e13668a626a54c131f2447b766b1118;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5e13668a626a54c131f2447b766b1118, codeobj_5e13668a626a54c131f2447b766b1118, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_5e13668a626a54c131f2447b766b1118 = cache_frame_5e13668a626a54c131f2447b766b1118;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5e13668a626a54c131f2447b766b1118 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5e13668a626a54c131f2447b766b1118 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_greater_equal );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_greater_equal );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "greater_equal" );
        exception_tb = NULL;

        exception_lineno = 1896;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_other;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_5e13668a626a54c131f2447b766b1118->m_frame.f_lineno = 1896;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1896;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5e13668a626a54c131f2447b766b1118 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5e13668a626a54c131f2447b766b1118 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5e13668a626a54c131f2447b766b1118 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5e13668a626a54c131f2447b766b1118, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5e13668a626a54c131f2447b766b1118->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5e13668a626a54c131f2447b766b1118, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5e13668a626a54c131f2447b766b1118,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_5e13668a626a54c131f2447b766b1118 == cache_frame_5e13668a626a54c131f2447b766b1118 )
    {
        Py_DECREF( frame_5e13668a626a54c131f2447b766b1118 );
    }
    cache_frame_5e13668a626a54c131f2447b766b1118 = NULL;

    assertFrameObject( frame_5e13668a626a54c131f2447b766b1118 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_59___ge__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_59___ge__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_60___le__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_d320c62af8b20d6ff18fbff8b5a3eaec = NULL;

    struct Nuitka_FrameObject *frame_d320c62af8b20d6ff18fbff8b5a3eaec;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d320c62af8b20d6ff18fbff8b5a3eaec, codeobj_d320c62af8b20d6ff18fbff8b5a3eaec, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_d320c62af8b20d6ff18fbff8b5a3eaec = cache_frame_d320c62af8b20d6ff18fbff8b5a3eaec;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d320c62af8b20d6ff18fbff8b5a3eaec );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d320c62af8b20d6ff18fbff8b5a3eaec ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_less_equal );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_less_equal );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "less_equal" );
        exception_tb = NULL;

        exception_lineno = 1906;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_other;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_d320c62af8b20d6ff18fbff8b5a3eaec->m_frame.f_lineno = 1906;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1906;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d320c62af8b20d6ff18fbff8b5a3eaec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d320c62af8b20d6ff18fbff8b5a3eaec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d320c62af8b20d6ff18fbff8b5a3eaec );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d320c62af8b20d6ff18fbff8b5a3eaec, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d320c62af8b20d6ff18fbff8b5a3eaec->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d320c62af8b20d6ff18fbff8b5a3eaec, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d320c62af8b20d6ff18fbff8b5a3eaec,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_d320c62af8b20d6ff18fbff8b5a3eaec == cache_frame_d320c62af8b20d6ff18fbff8b5a3eaec )
    {
        Py_DECREF( frame_d320c62af8b20d6ff18fbff8b5a3eaec );
    }
    cache_frame_d320c62af8b20d6ff18fbff8b5a3eaec = NULL;

    assertFrameObject( frame_d320c62af8b20d6ff18fbff8b5a3eaec );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_60___le__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_60___le__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_61___gt__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_45ef090305b99884415fa07d407849b9 = NULL;

    struct Nuitka_FrameObject *frame_45ef090305b99884415fa07d407849b9;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_45ef090305b99884415fa07d407849b9, codeobj_45ef090305b99884415fa07d407849b9, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_45ef090305b99884415fa07d407849b9 = cache_frame_45ef090305b99884415fa07d407849b9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_45ef090305b99884415fa07d407849b9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_45ef090305b99884415fa07d407849b9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_greater );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_greater );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "greater" );
        exception_tb = NULL;

        exception_lineno = 1916;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_other;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_45ef090305b99884415fa07d407849b9->m_frame.f_lineno = 1916;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1916;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_45ef090305b99884415fa07d407849b9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_45ef090305b99884415fa07d407849b9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_45ef090305b99884415fa07d407849b9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_45ef090305b99884415fa07d407849b9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_45ef090305b99884415fa07d407849b9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_45ef090305b99884415fa07d407849b9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_45ef090305b99884415fa07d407849b9,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_45ef090305b99884415fa07d407849b9 == cache_frame_45ef090305b99884415fa07d407849b9 )
    {
        Py_DECREF( frame_45ef090305b99884415fa07d407849b9 );
    }
    cache_frame_45ef090305b99884415fa07d407849b9 = NULL;

    assertFrameObject( frame_45ef090305b99884415fa07d407849b9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_61___gt__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_61___gt__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_62___lt__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_f4cc993b938c0b7b72ca23ebe3807d3a = NULL;

    struct Nuitka_FrameObject *frame_f4cc993b938c0b7b72ca23ebe3807d3a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f4cc993b938c0b7b72ca23ebe3807d3a, codeobj_f4cc993b938c0b7b72ca23ebe3807d3a, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_f4cc993b938c0b7b72ca23ebe3807d3a = cache_frame_f4cc993b938c0b7b72ca23ebe3807d3a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f4cc993b938c0b7b72ca23ebe3807d3a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f4cc993b938c0b7b72ca23ebe3807d3a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_less );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_less );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "less" );
        exception_tb = NULL;

        exception_lineno = 1926;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_other;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_f4cc993b938c0b7b72ca23ebe3807d3a->m_frame.f_lineno = 1926;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1926;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4cc993b938c0b7b72ca23ebe3807d3a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4cc993b938c0b7b72ca23ebe3807d3a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4cc993b938c0b7b72ca23ebe3807d3a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f4cc993b938c0b7b72ca23ebe3807d3a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f4cc993b938c0b7b72ca23ebe3807d3a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f4cc993b938c0b7b72ca23ebe3807d3a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f4cc993b938c0b7b72ca23ebe3807d3a,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_f4cc993b938c0b7b72ca23ebe3807d3a == cache_frame_f4cc993b938c0b7b72ca23ebe3807d3a )
    {
        Py_DECREF( frame_f4cc993b938c0b7b72ca23ebe3807d3a );
    }
    cache_frame_f4cc993b938c0b7b72ca23ebe3807d3a = NULL;

    assertFrameObject( frame_f4cc993b938c0b7b72ca23ebe3807d3a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_62___lt__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_62___lt__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_63___add__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8bc8671318c3e8989fd49a83a4043e3a = NULL;

    struct Nuitka_FrameObject *frame_8bc8671318c3e8989fd49a83a4043e3a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8bc8671318c3e8989fd49a83a4043e3a, codeobj_8bc8671318c3e8989fd49a83a4043e3a, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_8bc8671318c3e8989fd49a83a4043e3a = cache_frame_8bc8671318c3e8989fd49a83a4043e3a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8bc8671318c3e8989fd49a83a4043e3a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8bc8671318c3e8989fd49a83a4043e3a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 1937;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_add );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_add );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "add" );
        exception_tb = NULL;

        exception_lineno = 1937;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_other;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_8bc8671318c3e8989fd49a83a4043e3a->m_frame.f_lineno = 1937;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1937;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_8bc8671318c3e8989fd49a83a4043e3a->m_frame.f_lineno = 1937;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1937;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8bc8671318c3e8989fd49a83a4043e3a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8bc8671318c3e8989fd49a83a4043e3a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8bc8671318c3e8989fd49a83a4043e3a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8bc8671318c3e8989fd49a83a4043e3a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8bc8671318c3e8989fd49a83a4043e3a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8bc8671318c3e8989fd49a83a4043e3a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8bc8671318c3e8989fd49a83a4043e3a,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_8bc8671318c3e8989fd49a83a4043e3a == cache_frame_8bc8671318c3e8989fd49a83a4043e3a )
    {
        Py_DECREF( frame_8bc8671318c3e8989fd49a83a4043e3a );
    }
    cache_frame_8bc8671318c3e8989fd49a83a4043e3a = NULL;

    assertFrameObject( frame_8bc8671318c3e8989fd49a83a4043e3a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_63___add__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_63___add__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_64___radd__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_37091ca58ae6294a8a6cccb443f967b4 = NULL;

    struct Nuitka_FrameObject *frame_37091ca58ae6294a8a6cccb443f967b4;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_37091ca58ae6294a8a6cccb443f967b4, codeobj_37091ca58ae6294a8a6cccb443f967b4, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_37091ca58ae6294a8a6cccb443f967b4 = cache_frame_37091ca58ae6294a8a6cccb443f967b4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_37091ca58ae6294a8a6cccb443f967b4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_37091ca58ae6294a8a6cccb443f967b4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 1948;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_add );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_add );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "add" );
        exception_tb = NULL;

        exception_lineno = 1948;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 1948;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = par_other;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_37091ca58ae6294a8a6cccb443f967b4->m_frame.f_lineno = 1948;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_asarray, call_args );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1948;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_self;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_37091ca58ae6294a8a6cccb443f967b4->m_frame.f_lineno = 1948;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_4 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1948;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_37091ca58ae6294a8a6cccb443f967b4->m_frame.f_lineno = 1948;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1948;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_37091ca58ae6294a8a6cccb443f967b4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_37091ca58ae6294a8a6cccb443f967b4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_37091ca58ae6294a8a6cccb443f967b4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_37091ca58ae6294a8a6cccb443f967b4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_37091ca58ae6294a8a6cccb443f967b4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_37091ca58ae6294a8a6cccb443f967b4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_37091ca58ae6294a8a6cccb443f967b4,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_37091ca58ae6294a8a6cccb443f967b4 == cache_frame_37091ca58ae6294a8a6cccb443f967b4 )
    {
        Py_DECREF( frame_37091ca58ae6294a8a6cccb443f967b4 );
    }
    cache_frame_37091ca58ae6294a8a6cccb443f967b4 = NULL;

    assertFrameObject( frame_37091ca58ae6294a8a6cccb443f967b4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_64___radd__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_64___radd__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_65___mul__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_i = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_66cd3ddfbe20b66729d1ba150aaabf3c = NULL;

    struct Nuitka_FrameObject *frame_66cd3ddfbe20b66729d1ba150aaabf3c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_66cd3ddfbe20b66729d1ba150aaabf3c, codeobj_66cd3ddfbe20b66729d1ba150aaabf3c, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_66cd3ddfbe20b66729d1ba150aaabf3c = cache_frame_66cd3ddfbe20b66729d1ba150aaabf3c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_66cd3ddfbe20b66729d1ba150aaabf3c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_66cd3ddfbe20b66729d1ba150aaabf3c ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 1959;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_multiply );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_multiply );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "multiply" );
        exception_tb = NULL;

        exception_lineno = 1959;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_i;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_66cd3ddfbe20b66729d1ba150aaabf3c->m_frame.f_lineno = 1959;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1959;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_66cd3ddfbe20b66729d1ba150aaabf3c->m_frame.f_lineno = 1959;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1959;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_66cd3ddfbe20b66729d1ba150aaabf3c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_66cd3ddfbe20b66729d1ba150aaabf3c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_66cd3ddfbe20b66729d1ba150aaabf3c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_66cd3ddfbe20b66729d1ba150aaabf3c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_66cd3ddfbe20b66729d1ba150aaabf3c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_66cd3ddfbe20b66729d1ba150aaabf3c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_66cd3ddfbe20b66729d1ba150aaabf3c,
        type_description_1,
        par_self,
        par_i
    );


    // Release cached frame.
    if ( frame_66cd3ddfbe20b66729d1ba150aaabf3c == cache_frame_66cd3ddfbe20b66729d1ba150aaabf3c )
    {
        Py_DECREF( frame_66cd3ddfbe20b66729d1ba150aaabf3c );
    }
    cache_frame_66cd3ddfbe20b66729d1ba150aaabf3c = NULL;

    assertFrameObject( frame_66cd3ddfbe20b66729d1ba150aaabf3c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_65___mul__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_65___mul__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_66___rmul__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_i = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_7fb7e8527695449f6de27c712df761f6 = NULL;

    struct Nuitka_FrameObject *frame_7fb7e8527695449f6de27c712df761f6;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7fb7e8527695449f6de27c712df761f6, codeobj_7fb7e8527695449f6de27c712df761f6, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_7fb7e8527695449f6de27c712df761f6 = cache_frame_7fb7e8527695449f6de27c712df761f6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7fb7e8527695449f6de27c712df761f6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7fb7e8527695449f6de27c712df761f6 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 1970;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_multiply );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_multiply );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "multiply" );
        exception_tb = NULL;

        exception_lineno = 1970;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_i;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_7fb7e8527695449f6de27c712df761f6->m_frame.f_lineno = 1970;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1970;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_7fb7e8527695449f6de27c712df761f6->m_frame.f_lineno = 1970;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1970;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7fb7e8527695449f6de27c712df761f6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7fb7e8527695449f6de27c712df761f6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7fb7e8527695449f6de27c712df761f6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7fb7e8527695449f6de27c712df761f6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7fb7e8527695449f6de27c712df761f6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7fb7e8527695449f6de27c712df761f6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7fb7e8527695449f6de27c712df761f6,
        type_description_1,
        par_self,
        par_i
    );


    // Release cached frame.
    if ( frame_7fb7e8527695449f6de27c712df761f6 == cache_frame_7fb7e8527695449f6de27c712df761f6 )
    {
        Py_DECREF( frame_7fb7e8527695449f6de27c712df761f6 );
    }
    cache_frame_7fb7e8527695449f6de27c712df761f6 = NULL;

    assertFrameObject( frame_7fb7e8527695449f6de27c712df761f6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_66___rmul__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_66___rmul__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_67___mod__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_i = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_2427f0df1a99ee54052d98522a28ade7 = NULL;

    struct Nuitka_FrameObject *frame_2427f0df1a99ee54052d98522a28ade7;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2427f0df1a99ee54052d98522a28ade7, codeobj_2427f0df1a99ee54052d98522a28ade7, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_2427f0df1a99ee54052d98522a28ade7 = cache_frame_2427f0df1a99ee54052d98522a28ade7;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2427f0df1a99ee54052d98522a28ade7 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2427f0df1a99ee54052d98522a28ade7 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 1982;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_mod );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mod );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "mod" );
        exception_tb = NULL;

        exception_lineno = 1982;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_i;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_2427f0df1a99ee54052d98522a28ade7->m_frame.f_lineno = 1982;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1982;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_2427f0df1a99ee54052d98522a28ade7->m_frame.f_lineno = 1982;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1982;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2427f0df1a99ee54052d98522a28ade7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2427f0df1a99ee54052d98522a28ade7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2427f0df1a99ee54052d98522a28ade7 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2427f0df1a99ee54052d98522a28ade7, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2427f0df1a99ee54052d98522a28ade7->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2427f0df1a99ee54052d98522a28ade7, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2427f0df1a99ee54052d98522a28ade7,
        type_description_1,
        par_self,
        par_i
    );


    // Release cached frame.
    if ( frame_2427f0df1a99ee54052d98522a28ade7 == cache_frame_2427f0df1a99ee54052d98522a28ade7 )
    {
        Py_DECREF( frame_2427f0df1a99ee54052d98522a28ade7 );
    }
    cache_frame_2427f0df1a99ee54052d98522a28ade7 = NULL;

    assertFrameObject( frame_2427f0df1a99ee54052d98522a28ade7 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_67___mod__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_67___mod__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_68___rmod__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = Py_NotImplemented;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_68___rmod__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_68___rmod__ );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_69_argsort( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_axis = python_pars[ 1 ];
    PyObject *par_kind = python_pars[ 2 ];
    PyObject *par_order = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_f02cfc4e0202eba5cb46a13022dda3ce = NULL;

    struct Nuitka_FrameObject *frame_f02cfc4e0202eba5cb46a13022dda3ce;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f02cfc4e0202eba5cb46a13022dda3ce, codeobj_f02cfc4e0202eba5cb46a13022dda3ce, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f02cfc4e0202eba5cb46a13022dda3ce = cache_frame_f02cfc4e0202eba5cb46a13022dda3ce;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f02cfc4e0202eba5cb46a13022dda3ce );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f02cfc4e0202eba5cb46a13022dda3ce ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_2 = par_self;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_f02cfc4e0202eba5cb46a13022dda3ce->m_frame.f_lineno = 2005;
    tmp_called_instance_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain___array__ );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2005;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_axis;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_kind;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_order;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_f02cfc4e0202eba5cb46a13022dda3ce->m_frame.f_lineno = 2005;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_METHOD_WITH_ARGS3( tmp_called_instance_1, const_str_plain_argsort, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2005;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f02cfc4e0202eba5cb46a13022dda3ce );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f02cfc4e0202eba5cb46a13022dda3ce );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f02cfc4e0202eba5cb46a13022dda3ce );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f02cfc4e0202eba5cb46a13022dda3ce, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f02cfc4e0202eba5cb46a13022dda3ce->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f02cfc4e0202eba5cb46a13022dda3ce, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f02cfc4e0202eba5cb46a13022dda3ce,
        type_description_1,
        par_self,
        par_axis,
        par_kind,
        par_order
    );


    // Release cached frame.
    if ( frame_f02cfc4e0202eba5cb46a13022dda3ce == cache_frame_f02cfc4e0202eba5cb46a13022dda3ce )
    {
        Py_DECREF( frame_f02cfc4e0202eba5cb46a13022dda3ce );
    }
    cache_frame_f02cfc4e0202eba5cb46a13022dda3ce = NULL;

    assertFrameObject( frame_f02cfc4e0202eba5cb46a13022dda3ce );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_69_argsort );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_axis );
    Py_DECREF( par_axis );
    par_axis = NULL;

    CHECK_OBJECT( (PyObject *)par_kind );
    Py_DECREF( par_kind );
    par_kind = NULL;

    CHECK_OBJECT( (PyObject *)par_order );
    Py_DECREF( par_order );
    par_order = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_axis );
    Py_DECREF( par_axis );
    par_axis = NULL;

    CHECK_OBJECT( (PyObject *)par_kind );
    Py_DECREF( par_kind );
    par_kind = NULL;

    CHECK_OBJECT( (PyObject *)par_order );
    Py_DECREF( par_order );
    par_order = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_69_argsort );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_70_capitalize( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_543d5953ba54135ed4fa712de1ff9905 = NULL;

    struct Nuitka_FrameObject *frame_543d5953ba54135ed4fa712de1ff9905;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_543d5953ba54135ed4fa712de1ff9905, codeobj_543d5953ba54135ed4fa712de1ff9905, module_numpy$core$defchararray, sizeof(void *) );
    frame_543d5953ba54135ed4fa712de1ff9905 = cache_frame_543d5953ba54135ed4fa712de1ff9905;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_543d5953ba54135ed4fa712de1ff9905 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_543d5953ba54135ed4fa712de1ff9905 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2018;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_capitalize );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_capitalize );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "capitalize" );
        exception_tb = NULL;

        exception_lineno = 2018;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_543d5953ba54135ed4fa712de1ff9905->m_frame.f_lineno = 2018;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2018;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_543d5953ba54135ed4fa712de1ff9905->m_frame.f_lineno = 2018;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2018;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_543d5953ba54135ed4fa712de1ff9905 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_543d5953ba54135ed4fa712de1ff9905 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_543d5953ba54135ed4fa712de1ff9905 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_543d5953ba54135ed4fa712de1ff9905, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_543d5953ba54135ed4fa712de1ff9905->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_543d5953ba54135ed4fa712de1ff9905, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_543d5953ba54135ed4fa712de1ff9905,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_543d5953ba54135ed4fa712de1ff9905 == cache_frame_543d5953ba54135ed4fa712de1ff9905 )
    {
        Py_DECREF( frame_543d5953ba54135ed4fa712de1ff9905 );
    }
    cache_frame_543d5953ba54135ed4fa712de1ff9905 = NULL;

    assertFrameObject( frame_543d5953ba54135ed4fa712de1ff9905 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_70_capitalize );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_70_capitalize );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_71_center( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_width = python_pars[ 1 ];
    PyObject *par_fillchar = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_5d45817cc62062fd3ad531eef011b11d = NULL;

    struct Nuitka_FrameObject *frame_5d45817cc62062fd3ad531eef011b11d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5d45817cc62062fd3ad531eef011b11d, codeobj_5d45817cc62062fd3ad531eef011b11d, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_5d45817cc62062fd3ad531eef011b11d = cache_frame_5d45817cc62062fd3ad531eef011b11d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5d45817cc62062fd3ad531eef011b11d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5d45817cc62062fd3ad531eef011b11d ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2029;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_center );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_center );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "center" );
        exception_tb = NULL;

        exception_lineno = 2029;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_width;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_fillchar;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_5d45817cc62062fd3ad531eef011b11d->m_frame.f_lineno = 2029;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2029;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_5d45817cc62062fd3ad531eef011b11d->m_frame.f_lineno = 2029;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2029;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5d45817cc62062fd3ad531eef011b11d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5d45817cc62062fd3ad531eef011b11d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5d45817cc62062fd3ad531eef011b11d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5d45817cc62062fd3ad531eef011b11d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5d45817cc62062fd3ad531eef011b11d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5d45817cc62062fd3ad531eef011b11d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5d45817cc62062fd3ad531eef011b11d,
        type_description_1,
        par_self,
        par_width,
        par_fillchar
    );


    // Release cached frame.
    if ( frame_5d45817cc62062fd3ad531eef011b11d == cache_frame_5d45817cc62062fd3ad531eef011b11d )
    {
        Py_DECREF( frame_5d45817cc62062fd3ad531eef011b11d );
    }
    cache_frame_5d45817cc62062fd3ad531eef011b11d = NULL;

    assertFrameObject( frame_5d45817cc62062fd3ad531eef011b11d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_71_center );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)par_fillchar );
    Py_DECREF( par_fillchar );
    par_fillchar = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)par_fillchar );
    Py_DECREF( par_fillchar );
    par_fillchar = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_71_center );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_72_count( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_97ea5dfb81ca0967a6f5ed3f4d101cbb = NULL;

    struct Nuitka_FrameObject *frame_97ea5dfb81ca0967a6f5ed3f4d101cbb;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_97ea5dfb81ca0967a6f5ed3f4d101cbb, codeobj_97ea5dfb81ca0967a6f5ed3f4d101cbb, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_97ea5dfb81ca0967a6f5ed3f4d101cbb = cache_frame_97ea5dfb81ca0967a6f5ed3f4d101cbb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_97ea5dfb81ca0967a6f5ed3f4d101cbb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_97ea5dfb81ca0967a6f5ed3f4d101cbb ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_count );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_count );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "count" );
        exception_tb = NULL;

        exception_lineno = 2041;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_sub;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_start;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_end;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_97ea5dfb81ca0967a6f5ed3f4d101cbb->m_frame.f_lineno = 2041;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2041;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_97ea5dfb81ca0967a6f5ed3f4d101cbb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_97ea5dfb81ca0967a6f5ed3f4d101cbb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_97ea5dfb81ca0967a6f5ed3f4d101cbb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_97ea5dfb81ca0967a6f5ed3f4d101cbb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_97ea5dfb81ca0967a6f5ed3f4d101cbb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_97ea5dfb81ca0967a6f5ed3f4d101cbb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_97ea5dfb81ca0967a6f5ed3f4d101cbb,
        type_description_1,
        par_self,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_97ea5dfb81ca0967a6f5ed3f4d101cbb == cache_frame_97ea5dfb81ca0967a6f5ed3f4d101cbb )
    {
        Py_DECREF( frame_97ea5dfb81ca0967a6f5ed3f4d101cbb );
    }
    cache_frame_97ea5dfb81ca0967a6f5ed3f4d101cbb = NULL;

    assertFrameObject( frame_97ea5dfb81ca0967a6f5ed3f4d101cbb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_72_count );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_72_count );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_73_decode( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_encoding = python_pars[ 1 ];
    PyObject *par_errors = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 = NULL;

    struct Nuitka_FrameObject *frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4, codeobj_e7e8f9e5c59869d0ab8a9b0c8ebe52e4, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 = cache_frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_decode );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_decode );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "decode" );
        exception_tb = NULL;

        exception_lineno = 2052;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_encoding;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_errors;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4->m_frame.f_lineno = 2052;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2052;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4,
        type_description_1,
        par_self,
        par_encoding,
        par_errors
    );


    // Release cached frame.
    if ( frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 == cache_frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 )
    {
        Py_DECREF( frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 );
    }
    cache_frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 = NULL;

    assertFrameObject( frame_e7e8f9e5c59869d0ab8a9b0c8ebe52e4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_73_decode );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_73_decode );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_74_encode( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_encoding = python_pars[ 1 ];
    PyObject *par_errors = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_104a62994edb93f0d06a56f0871a742b = NULL;

    struct Nuitka_FrameObject *frame_104a62994edb93f0d06a56f0871a742b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_104a62994edb93f0d06a56f0871a742b, codeobj_104a62994edb93f0d06a56f0871a742b, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_104a62994edb93f0d06a56f0871a742b = cache_frame_104a62994edb93f0d06a56f0871a742b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_104a62994edb93f0d06a56f0871a742b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_104a62994edb93f0d06a56f0871a742b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_encode );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_encode );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "encode" );
        exception_tb = NULL;

        exception_lineno = 2063;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_encoding;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_errors;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_104a62994edb93f0d06a56f0871a742b->m_frame.f_lineno = 2063;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2063;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_104a62994edb93f0d06a56f0871a742b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_104a62994edb93f0d06a56f0871a742b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_104a62994edb93f0d06a56f0871a742b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_104a62994edb93f0d06a56f0871a742b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_104a62994edb93f0d06a56f0871a742b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_104a62994edb93f0d06a56f0871a742b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_104a62994edb93f0d06a56f0871a742b,
        type_description_1,
        par_self,
        par_encoding,
        par_errors
    );


    // Release cached frame.
    if ( frame_104a62994edb93f0d06a56f0871a742b == cache_frame_104a62994edb93f0d06a56f0871a742b )
    {
        Py_DECREF( frame_104a62994edb93f0d06a56f0871a742b );
    }
    cache_frame_104a62994edb93f0d06a56f0871a742b = NULL;

    assertFrameObject( frame_104a62994edb93f0d06a56f0871a742b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_74_encode );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_74_encode );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_75_endswith( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_suffix = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_0d30f15cc026a899b931a0d57179712a = NULL;

    struct Nuitka_FrameObject *frame_0d30f15cc026a899b931a0d57179712a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0d30f15cc026a899b931a0d57179712a, codeobj_0d30f15cc026a899b931a0d57179712a, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0d30f15cc026a899b931a0d57179712a = cache_frame_0d30f15cc026a899b931a0d57179712a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0d30f15cc026a899b931a0d57179712a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0d30f15cc026a899b931a0d57179712a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_endswith );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_endswith );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "endswith" );
        exception_tb = NULL;

        exception_lineno = 2075;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_suffix;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_start;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_end;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_0d30f15cc026a899b931a0d57179712a->m_frame.f_lineno = 2075;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2075;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d30f15cc026a899b931a0d57179712a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d30f15cc026a899b931a0d57179712a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d30f15cc026a899b931a0d57179712a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0d30f15cc026a899b931a0d57179712a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0d30f15cc026a899b931a0d57179712a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0d30f15cc026a899b931a0d57179712a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0d30f15cc026a899b931a0d57179712a,
        type_description_1,
        par_self,
        par_suffix,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_0d30f15cc026a899b931a0d57179712a == cache_frame_0d30f15cc026a899b931a0d57179712a )
    {
        Py_DECREF( frame_0d30f15cc026a899b931a0d57179712a );
    }
    cache_frame_0d30f15cc026a899b931a0d57179712a = NULL;

    assertFrameObject( frame_0d30f15cc026a899b931a0d57179712a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_75_endswith );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_suffix );
    Py_DECREF( par_suffix );
    par_suffix = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_suffix );
    Py_DECREF( par_suffix );
    par_suffix = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_75_endswith );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_76_expandtabs( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tabsize = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_caac05b022afd18238cd38826ed6a2c1 = NULL;

    struct Nuitka_FrameObject *frame_caac05b022afd18238cd38826ed6a2c1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_caac05b022afd18238cd38826ed6a2c1, codeobj_caac05b022afd18238cd38826ed6a2c1, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_caac05b022afd18238cd38826ed6a2c1 = cache_frame_caac05b022afd18238cd38826ed6a2c1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_caac05b022afd18238cd38826ed6a2c1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_caac05b022afd18238cd38826ed6a2c1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2087;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_expandtabs );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_expandtabs );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "expandtabs" );
        exception_tb = NULL;

        exception_lineno = 2087;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_tabsize;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_caac05b022afd18238cd38826ed6a2c1->m_frame.f_lineno = 2087;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2087;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_caac05b022afd18238cd38826ed6a2c1->m_frame.f_lineno = 2087;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2087;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_caac05b022afd18238cd38826ed6a2c1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_caac05b022afd18238cd38826ed6a2c1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_caac05b022afd18238cd38826ed6a2c1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_caac05b022afd18238cd38826ed6a2c1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_caac05b022afd18238cd38826ed6a2c1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_caac05b022afd18238cd38826ed6a2c1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_caac05b022afd18238cd38826ed6a2c1,
        type_description_1,
        par_self,
        par_tabsize
    );


    // Release cached frame.
    if ( frame_caac05b022afd18238cd38826ed6a2c1 == cache_frame_caac05b022afd18238cd38826ed6a2c1 )
    {
        Py_DECREF( frame_caac05b022afd18238cd38826ed6a2c1 );
    }
    cache_frame_caac05b022afd18238cd38826ed6a2c1 = NULL;

    assertFrameObject( frame_caac05b022afd18238cd38826ed6a2c1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_76_expandtabs );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tabsize );
    Py_DECREF( par_tabsize );
    par_tabsize = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tabsize );
    Py_DECREF( par_tabsize );
    par_tabsize = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_76_expandtabs );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_77_find( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_0871a0020464419ae8b946a41de7898c = NULL;

    struct Nuitka_FrameObject *frame_0871a0020464419ae8b946a41de7898c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0871a0020464419ae8b946a41de7898c, codeobj_0871a0020464419ae8b946a41de7898c, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0871a0020464419ae8b946a41de7898c = cache_frame_0871a0020464419ae8b946a41de7898c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0871a0020464419ae8b946a41de7898c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0871a0020464419ae8b946a41de7898c ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_find );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_find );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "find" );
        exception_tb = NULL;

        exception_lineno = 2099;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_sub;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_start;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_end;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_0871a0020464419ae8b946a41de7898c->m_frame.f_lineno = 2099;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2099;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0871a0020464419ae8b946a41de7898c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0871a0020464419ae8b946a41de7898c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0871a0020464419ae8b946a41de7898c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0871a0020464419ae8b946a41de7898c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0871a0020464419ae8b946a41de7898c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0871a0020464419ae8b946a41de7898c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0871a0020464419ae8b946a41de7898c,
        type_description_1,
        par_self,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_0871a0020464419ae8b946a41de7898c == cache_frame_0871a0020464419ae8b946a41de7898c )
    {
        Py_DECREF( frame_0871a0020464419ae8b946a41de7898c );
    }
    cache_frame_0871a0020464419ae8b946a41de7898c = NULL;

    assertFrameObject( frame_0871a0020464419ae8b946a41de7898c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_77_find );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_77_find );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_78_index( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_e1a3fb523f8c337d7116eb81109c2049 = NULL;

    struct Nuitka_FrameObject *frame_e1a3fb523f8c337d7116eb81109c2049;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e1a3fb523f8c337d7116eb81109c2049, codeobj_e1a3fb523f8c337d7116eb81109c2049, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e1a3fb523f8c337d7116eb81109c2049 = cache_frame_e1a3fb523f8c337d7116eb81109c2049;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e1a3fb523f8c337d7116eb81109c2049 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e1a3fb523f8c337d7116eb81109c2049 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_index );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_index );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "index" );
        exception_tb = NULL;

        exception_lineno = 2110;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_sub;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_start;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_end;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_e1a3fb523f8c337d7116eb81109c2049->m_frame.f_lineno = 2110;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2110;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e1a3fb523f8c337d7116eb81109c2049 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e1a3fb523f8c337d7116eb81109c2049 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e1a3fb523f8c337d7116eb81109c2049 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e1a3fb523f8c337d7116eb81109c2049, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e1a3fb523f8c337d7116eb81109c2049->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e1a3fb523f8c337d7116eb81109c2049, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e1a3fb523f8c337d7116eb81109c2049,
        type_description_1,
        par_self,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_e1a3fb523f8c337d7116eb81109c2049 == cache_frame_e1a3fb523f8c337d7116eb81109c2049 )
    {
        Py_DECREF( frame_e1a3fb523f8c337d7116eb81109c2049 );
    }
    cache_frame_e1a3fb523f8c337d7116eb81109c2049 = NULL;

    assertFrameObject( frame_e1a3fb523f8c337d7116eb81109c2049 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_78_index );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_78_index );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_79_isalnum( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_6994a26c43346cc9dd240ad9437bc86b = NULL;

    struct Nuitka_FrameObject *frame_6994a26c43346cc9dd240ad9437bc86b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6994a26c43346cc9dd240ad9437bc86b, codeobj_6994a26c43346cc9dd240ad9437bc86b, module_numpy$core$defchararray, sizeof(void *) );
    frame_6994a26c43346cc9dd240ad9437bc86b = cache_frame_6994a26c43346cc9dd240ad9437bc86b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6994a26c43346cc9dd240ad9437bc86b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6994a26c43346cc9dd240ad9437bc86b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isalnum );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isalnum );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isalnum" );
        exception_tb = NULL;

        exception_lineno = 2123;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_6994a26c43346cc9dd240ad9437bc86b->m_frame.f_lineno = 2123;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2123;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6994a26c43346cc9dd240ad9437bc86b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6994a26c43346cc9dd240ad9437bc86b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6994a26c43346cc9dd240ad9437bc86b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6994a26c43346cc9dd240ad9437bc86b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6994a26c43346cc9dd240ad9437bc86b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6994a26c43346cc9dd240ad9437bc86b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6994a26c43346cc9dd240ad9437bc86b,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_6994a26c43346cc9dd240ad9437bc86b == cache_frame_6994a26c43346cc9dd240ad9437bc86b )
    {
        Py_DECREF( frame_6994a26c43346cc9dd240ad9437bc86b );
    }
    cache_frame_6994a26c43346cc9dd240ad9437bc86b = NULL;

    assertFrameObject( frame_6994a26c43346cc9dd240ad9437bc86b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_79_isalnum );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_79_isalnum );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_80_isalpha( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_741cb7608c756f759e751a414255e2eb = NULL;

    struct Nuitka_FrameObject *frame_741cb7608c756f759e751a414255e2eb;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_741cb7608c756f759e751a414255e2eb, codeobj_741cb7608c756f759e751a414255e2eb, module_numpy$core$defchararray, sizeof(void *) );
    frame_741cb7608c756f759e751a414255e2eb = cache_frame_741cb7608c756f759e751a414255e2eb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_741cb7608c756f759e751a414255e2eb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_741cb7608c756f759e751a414255e2eb ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isalpha );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isalpha );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isalpha" );
        exception_tb = NULL;

        exception_lineno = 2136;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_741cb7608c756f759e751a414255e2eb->m_frame.f_lineno = 2136;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2136;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_741cb7608c756f759e751a414255e2eb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_741cb7608c756f759e751a414255e2eb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_741cb7608c756f759e751a414255e2eb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_741cb7608c756f759e751a414255e2eb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_741cb7608c756f759e751a414255e2eb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_741cb7608c756f759e751a414255e2eb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_741cb7608c756f759e751a414255e2eb,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_741cb7608c756f759e751a414255e2eb == cache_frame_741cb7608c756f759e751a414255e2eb )
    {
        Py_DECREF( frame_741cb7608c756f759e751a414255e2eb );
    }
    cache_frame_741cb7608c756f759e751a414255e2eb = NULL;

    assertFrameObject( frame_741cb7608c756f759e751a414255e2eb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_80_isalpha );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_80_isalpha );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_81_isdigit( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_c0017a4efffe109afd364d75388dbf86 = NULL;

    struct Nuitka_FrameObject *frame_c0017a4efffe109afd364d75388dbf86;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c0017a4efffe109afd364d75388dbf86, codeobj_c0017a4efffe109afd364d75388dbf86, module_numpy$core$defchararray, sizeof(void *) );
    frame_c0017a4efffe109afd364d75388dbf86 = cache_frame_c0017a4efffe109afd364d75388dbf86;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c0017a4efffe109afd364d75388dbf86 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c0017a4efffe109afd364d75388dbf86 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isdigit );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdigit );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isdigit" );
        exception_tb = NULL;

        exception_lineno = 2148;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_c0017a4efffe109afd364d75388dbf86->m_frame.f_lineno = 2148;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2148;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c0017a4efffe109afd364d75388dbf86 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c0017a4efffe109afd364d75388dbf86 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c0017a4efffe109afd364d75388dbf86 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c0017a4efffe109afd364d75388dbf86, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c0017a4efffe109afd364d75388dbf86->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c0017a4efffe109afd364d75388dbf86, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c0017a4efffe109afd364d75388dbf86,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_c0017a4efffe109afd364d75388dbf86 == cache_frame_c0017a4efffe109afd364d75388dbf86 )
    {
        Py_DECREF( frame_c0017a4efffe109afd364d75388dbf86 );
    }
    cache_frame_c0017a4efffe109afd364d75388dbf86 = NULL;

    assertFrameObject( frame_c0017a4efffe109afd364d75388dbf86 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_81_isdigit );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_81_isdigit );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_82_islower( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_e6d1c5649234c28bb760d91df8840c44 = NULL;

    struct Nuitka_FrameObject *frame_e6d1c5649234c28bb760d91df8840c44;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e6d1c5649234c28bb760d91df8840c44, codeobj_e6d1c5649234c28bb760d91df8840c44, module_numpy$core$defchararray, sizeof(void *) );
    frame_e6d1c5649234c28bb760d91df8840c44 = cache_frame_e6d1c5649234c28bb760d91df8840c44;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e6d1c5649234c28bb760d91df8840c44 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e6d1c5649234c28bb760d91df8840c44 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_islower );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_islower );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "islower" );
        exception_tb = NULL;

        exception_lineno = 2161;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_e6d1c5649234c28bb760d91df8840c44->m_frame.f_lineno = 2161;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2161;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e6d1c5649234c28bb760d91df8840c44 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e6d1c5649234c28bb760d91df8840c44 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e6d1c5649234c28bb760d91df8840c44 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e6d1c5649234c28bb760d91df8840c44, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e6d1c5649234c28bb760d91df8840c44->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e6d1c5649234c28bb760d91df8840c44, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e6d1c5649234c28bb760d91df8840c44,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_e6d1c5649234c28bb760d91df8840c44 == cache_frame_e6d1c5649234c28bb760d91df8840c44 )
    {
        Py_DECREF( frame_e6d1c5649234c28bb760d91df8840c44 );
    }
    cache_frame_e6d1c5649234c28bb760d91df8840c44 = NULL;

    assertFrameObject( frame_e6d1c5649234c28bb760d91df8840c44 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_82_islower );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_82_islower );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_83_isspace( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 = NULL;

    struct Nuitka_FrameObject *frame_f5d9b1ad3c36acd0ebc11aa2666d45f5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f5d9b1ad3c36acd0ebc11aa2666d45f5, codeobj_f5d9b1ad3c36acd0ebc11aa2666d45f5, module_numpy$core$defchararray, sizeof(void *) );
    frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 = cache_frame_f5d9b1ad3c36acd0ebc11aa2666d45f5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isspace );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isspace );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isspace" );
        exception_tb = NULL;

        exception_lineno = 2174;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_f5d9b1ad3c36acd0ebc11aa2666d45f5->m_frame.f_lineno = 2174;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2174;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f5d9b1ad3c36acd0ebc11aa2666d45f5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f5d9b1ad3c36acd0ebc11aa2666d45f5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f5d9b1ad3c36acd0ebc11aa2666d45f5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f5d9b1ad3c36acd0ebc11aa2666d45f5,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 == cache_frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 )
    {
        Py_DECREF( frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 );
    }
    cache_frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 = NULL;

    assertFrameObject( frame_f5d9b1ad3c36acd0ebc11aa2666d45f5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_83_isspace );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_83_isspace );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_84_istitle( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_3015e538c1d7d423270b75f9dc03ded5 = NULL;

    struct Nuitka_FrameObject *frame_3015e538c1d7d423270b75f9dc03ded5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3015e538c1d7d423270b75f9dc03ded5, codeobj_3015e538c1d7d423270b75f9dc03ded5, module_numpy$core$defchararray, sizeof(void *) );
    frame_3015e538c1d7d423270b75f9dc03ded5 = cache_frame_3015e538c1d7d423270b75f9dc03ded5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3015e538c1d7d423270b75f9dc03ded5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3015e538c1d7d423270b75f9dc03ded5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_istitle );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_istitle );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "istitle" );
        exception_tb = NULL;

        exception_lineno = 2186;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_3015e538c1d7d423270b75f9dc03ded5->m_frame.f_lineno = 2186;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2186;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3015e538c1d7d423270b75f9dc03ded5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3015e538c1d7d423270b75f9dc03ded5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3015e538c1d7d423270b75f9dc03ded5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3015e538c1d7d423270b75f9dc03ded5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3015e538c1d7d423270b75f9dc03ded5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3015e538c1d7d423270b75f9dc03ded5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3015e538c1d7d423270b75f9dc03ded5,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_3015e538c1d7d423270b75f9dc03ded5 == cache_frame_3015e538c1d7d423270b75f9dc03ded5 )
    {
        Py_DECREF( frame_3015e538c1d7d423270b75f9dc03ded5 );
    }
    cache_frame_3015e538c1d7d423270b75f9dc03ded5 = NULL;

    assertFrameObject( frame_3015e538c1d7d423270b75f9dc03ded5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_84_istitle );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_84_istitle );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_85_isupper( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_897a16cf34fb0033047f914b606ea635 = NULL;

    struct Nuitka_FrameObject *frame_897a16cf34fb0033047f914b606ea635;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_897a16cf34fb0033047f914b606ea635, codeobj_897a16cf34fb0033047f914b606ea635, module_numpy$core$defchararray, sizeof(void *) );
    frame_897a16cf34fb0033047f914b606ea635 = cache_frame_897a16cf34fb0033047f914b606ea635;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_897a16cf34fb0033047f914b606ea635 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_897a16cf34fb0033047f914b606ea635 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isupper );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isupper );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isupper" );
        exception_tb = NULL;

        exception_lineno = 2199;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_897a16cf34fb0033047f914b606ea635->m_frame.f_lineno = 2199;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2199;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_897a16cf34fb0033047f914b606ea635 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_897a16cf34fb0033047f914b606ea635 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_897a16cf34fb0033047f914b606ea635 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_897a16cf34fb0033047f914b606ea635, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_897a16cf34fb0033047f914b606ea635->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_897a16cf34fb0033047f914b606ea635, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_897a16cf34fb0033047f914b606ea635,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_897a16cf34fb0033047f914b606ea635 == cache_frame_897a16cf34fb0033047f914b606ea635 )
    {
        Py_DECREF( frame_897a16cf34fb0033047f914b606ea635 );
    }
    cache_frame_897a16cf34fb0033047f914b606ea635 = NULL;

    assertFrameObject( frame_897a16cf34fb0033047f914b606ea635 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_85_isupper );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_85_isupper );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_86_join( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_seq = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_4224454610916188eafe4f5e79b58080 = NULL;

    struct Nuitka_FrameObject *frame_4224454610916188eafe4f5e79b58080;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4224454610916188eafe4f5e79b58080, codeobj_4224454610916188eafe4f5e79b58080, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_4224454610916188eafe4f5e79b58080 = cache_frame_4224454610916188eafe4f5e79b58080;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4224454610916188eafe4f5e79b58080 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4224454610916188eafe4f5e79b58080 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_join );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_join );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "join" );
        exception_tb = NULL;

        exception_lineno = 2211;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_seq;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_4224454610916188eafe4f5e79b58080->m_frame.f_lineno = 2211;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2211;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4224454610916188eafe4f5e79b58080 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4224454610916188eafe4f5e79b58080 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4224454610916188eafe4f5e79b58080 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4224454610916188eafe4f5e79b58080, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4224454610916188eafe4f5e79b58080->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4224454610916188eafe4f5e79b58080, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4224454610916188eafe4f5e79b58080,
        type_description_1,
        par_self,
        par_seq
    );


    // Release cached frame.
    if ( frame_4224454610916188eafe4f5e79b58080 == cache_frame_4224454610916188eafe4f5e79b58080 )
    {
        Py_DECREF( frame_4224454610916188eafe4f5e79b58080 );
    }
    cache_frame_4224454610916188eafe4f5e79b58080 = NULL;

    assertFrameObject( frame_4224454610916188eafe4f5e79b58080 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_86_join );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_seq );
    Py_DECREF( par_seq );
    par_seq = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_seq );
    Py_DECREF( par_seq );
    par_seq = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_86_join );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_87_ljust( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_width = python_pars[ 1 ];
    PyObject *par_fillchar = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_a33a371a5c7cce89c3c05c68bcfd008c = NULL;

    struct Nuitka_FrameObject *frame_a33a371a5c7cce89c3c05c68bcfd008c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a33a371a5c7cce89c3c05c68bcfd008c, codeobj_a33a371a5c7cce89c3c05c68bcfd008c, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a33a371a5c7cce89c3c05c68bcfd008c = cache_frame_a33a371a5c7cce89c3c05c68bcfd008c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a33a371a5c7cce89c3c05c68bcfd008c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a33a371a5c7cce89c3c05c68bcfd008c ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2223;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ljust );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ljust );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ljust" );
        exception_tb = NULL;

        exception_lineno = 2223;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_width;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_fillchar;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_a33a371a5c7cce89c3c05c68bcfd008c->m_frame.f_lineno = 2223;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2223;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_a33a371a5c7cce89c3c05c68bcfd008c->m_frame.f_lineno = 2223;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2223;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a33a371a5c7cce89c3c05c68bcfd008c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a33a371a5c7cce89c3c05c68bcfd008c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a33a371a5c7cce89c3c05c68bcfd008c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a33a371a5c7cce89c3c05c68bcfd008c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a33a371a5c7cce89c3c05c68bcfd008c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a33a371a5c7cce89c3c05c68bcfd008c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a33a371a5c7cce89c3c05c68bcfd008c,
        type_description_1,
        par_self,
        par_width,
        par_fillchar
    );


    // Release cached frame.
    if ( frame_a33a371a5c7cce89c3c05c68bcfd008c == cache_frame_a33a371a5c7cce89c3c05c68bcfd008c )
    {
        Py_DECREF( frame_a33a371a5c7cce89c3c05c68bcfd008c );
    }
    cache_frame_a33a371a5c7cce89c3c05c68bcfd008c = NULL;

    assertFrameObject( frame_a33a371a5c7cce89c3c05c68bcfd008c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_87_ljust );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)par_fillchar );
    Py_DECREF( par_fillchar );
    par_fillchar = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)par_fillchar );
    Py_DECREF( par_fillchar );
    par_fillchar = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_87_ljust );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_88_lower( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_5a2a1c32e5d2c6de6354d66048ea1609 = NULL;

    struct Nuitka_FrameObject *frame_5a2a1c32e5d2c6de6354d66048ea1609;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5a2a1c32e5d2c6de6354d66048ea1609, codeobj_5a2a1c32e5d2c6de6354d66048ea1609, module_numpy$core$defchararray, sizeof(void *) );
    frame_5a2a1c32e5d2c6de6354d66048ea1609 = cache_frame_5a2a1c32e5d2c6de6354d66048ea1609;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5a2a1c32e5d2c6de6354d66048ea1609 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5a2a1c32e5d2c6de6354d66048ea1609 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2235;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_lower );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_lower );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "lower" );
        exception_tb = NULL;

        exception_lineno = 2235;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_5a2a1c32e5d2c6de6354d66048ea1609->m_frame.f_lineno = 2235;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2235;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_5a2a1c32e5d2c6de6354d66048ea1609->m_frame.f_lineno = 2235;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2235;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5a2a1c32e5d2c6de6354d66048ea1609 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5a2a1c32e5d2c6de6354d66048ea1609 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5a2a1c32e5d2c6de6354d66048ea1609 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5a2a1c32e5d2c6de6354d66048ea1609, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5a2a1c32e5d2c6de6354d66048ea1609->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5a2a1c32e5d2c6de6354d66048ea1609, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5a2a1c32e5d2c6de6354d66048ea1609,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_5a2a1c32e5d2c6de6354d66048ea1609 == cache_frame_5a2a1c32e5d2c6de6354d66048ea1609 )
    {
        Py_DECREF( frame_5a2a1c32e5d2c6de6354d66048ea1609 );
    }
    cache_frame_5a2a1c32e5d2c6de6354d66048ea1609 = NULL;

    assertFrameObject( frame_5a2a1c32e5d2c6de6354d66048ea1609 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_88_lower );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_88_lower );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_89_lstrip( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_chars = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_017c7b87a7e7ce81cb5ee90076c85b49 = NULL;

    struct Nuitka_FrameObject *frame_017c7b87a7e7ce81cb5ee90076c85b49;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_017c7b87a7e7ce81cb5ee90076c85b49, codeobj_017c7b87a7e7ce81cb5ee90076c85b49, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_017c7b87a7e7ce81cb5ee90076c85b49 = cache_frame_017c7b87a7e7ce81cb5ee90076c85b49;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_017c7b87a7e7ce81cb5ee90076c85b49 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_017c7b87a7e7ce81cb5ee90076c85b49 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2247;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_lstrip );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_lstrip );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "lstrip" );
        exception_tb = NULL;

        exception_lineno = 2247;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_chars;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_017c7b87a7e7ce81cb5ee90076c85b49->m_frame.f_lineno = 2247;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2247;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_017c7b87a7e7ce81cb5ee90076c85b49->m_frame.f_lineno = 2247;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2247;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_017c7b87a7e7ce81cb5ee90076c85b49 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_017c7b87a7e7ce81cb5ee90076c85b49 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_017c7b87a7e7ce81cb5ee90076c85b49 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_017c7b87a7e7ce81cb5ee90076c85b49, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_017c7b87a7e7ce81cb5ee90076c85b49->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_017c7b87a7e7ce81cb5ee90076c85b49, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_017c7b87a7e7ce81cb5ee90076c85b49,
        type_description_1,
        par_self,
        par_chars
    );


    // Release cached frame.
    if ( frame_017c7b87a7e7ce81cb5ee90076c85b49 == cache_frame_017c7b87a7e7ce81cb5ee90076c85b49 )
    {
        Py_DECREF( frame_017c7b87a7e7ce81cb5ee90076c85b49 );
    }
    cache_frame_017c7b87a7e7ce81cb5ee90076c85b49 = NULL;

    assertFrameObject( frame_017c7b87a7e7ce81cb5ee90076c85b49 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_89_lstrip );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_89_lstrip );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_90_partition( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sep = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8a447f71fb09204701238ffe8b83a234 = NULL;

    struct Nuitka_FrameObject *frame_8a447f71fb09204701238ffe8b83a234;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8a447f71fb09204701238ffe8b83a234, codeobj_8a447f71fb09204701238ffe8b83a234, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_8a447f71fb09204701238ffe8b83a234 = cache_frame_8a447f71fb09204701238ffe8b83a234;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8a447f71fb09204701238ffe8b83a234 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8a447f71fb09204701238ffe8b83a234 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2257;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_partition );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_partition );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "partition" );
        exception_tb = NULL;

        exception_lineno = 2257;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_sep;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_8a447f71fb09204701238ffe8b83a234->m_frame.f_lineno = 2257;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2257;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_8a447f71fb09204701238ffe8b83a234->m_frame.f_lineno = 2257;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2257;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8a447f71fb09204701238ffe8b83a234 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8a447f71fb09204701238ffe8b83a234 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8a447f71fb09204701238ffe8b83a234 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8a447f71fb09204701238ffe8b83a234, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8a447f71fb09204701238ffe8b83a234->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8a447f71fb09204701238ffe8b83a234, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8a447f71fb09204701238ffe8b83a234,
        type_description_1,
        par_self,
        par_sep
    );


    // Release cached frame.
    if ( frame_8a447f71fb09204701238ffe8b83a234 == cache_frame_8a447f71fb09204701238ffe8b83a234 )
    {
        Py_DECREF( frame_8a447f71fb09204701238ffe8b83a234 );
    }
    cache_frame_8a447f71fb09204701238ffe8b83a234 = NULL;

    assertFrameObject( frame_8a447f71fb09204701238ffe8b83a234 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_90_partition );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_90_partition );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_91_replace( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_old = python_pars[ 1 ];
    PyObject *par_new = python_pars[ 2 ];
    PyObject *par_count = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_ef1dfe6672a95b9b92d91227adb1536b = NULL;

    struct Nuitka_FrameObject *frame_ef1dfe6672a95b9b92d91227adb1536b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ef1dfe6672a95b9b92d91227adb1536b, codeobj_ef1dfe6672a95b9b92d91227adb1536b, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ef1dfe6672a95b9b92d91227adb1536b = cache_frame_ef1dfe6672a95b9b92d91227adb1536b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ef1dfe6672a95b9b92d91227adb1536b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ef1dfe6672a95b9b92d91227adb1536b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2269;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_replace );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_replace );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "replace" );
        exception_tb = NULL;

        exception_lineno = 2269;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_old;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_new;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_args_element_name_5 = par_count;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_ef1dfe6672a95b9b92d91227adb1536b->m_frame.f_lineno = 2269;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2269;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_ef1dfe6672a95b9b92d91227adb1536b->m_frame.f_lineno = 2269;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2269;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ef1dfe6672a95b9b92d91227adb1536b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ef1dfe6672a95b9b92d91227adb1536b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ef1dfe6672a95b9b92d91227adb1536b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ef1dfe6672a95b9b92d91227adb1536b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ef1dfe6672a95b9b92d91227adb1536b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ef1dfe6672a95b9b92d91227adb1536b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ef1dfe6672a95b9b92d91227adb1536b,
        type_description_1,
        par_self,
        par_old,
        par_new,
        par_count
    );


    // Release cached frame.
    if ( frame_ef1dfe6672a95b9b92d91227adb1536b == cache_frame_ef1dfe6672a95b9b92d91227adb1536b )
    {
        Py_DECREF( frame_ef1dfe6672a95b9b92d91227adb1536b );
    }
    cache_frame_ef1dfe6672a95b9b92d91227adb1536b = NULL;

    assertFrameObject( frame_ef1dfe6672a95b9b92d91227adb1536b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_91_replace );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_old );
    Py_DECREF( par_old );
    par_old = NULL;

    CHECK_OBJECT( (PyObject *)par_new );
    Py_DECREF( par_new );
    par_new = NULL;

    CHECK_OBJECT( (PyObject *)par_count );
    Py_DECREF( par_count );
    par_count = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_old );
    Py_DECREF( par_old );
    par_old = NULL;

    CHECK_OBJECT( (PyObject *)par_new );
    Py_DECREF( par_new );
    par_new = NULL;

    CHECK_OBJECT( (PyObject *)par_count );
    Py_DECREF( par_count );
    par_count = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_91_replace );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_92_rfind( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_60745dc77ca2193582f31aff43d635d8 = NULL;

    struct Nuitka_FrameObject *frame_60745dc77ca2193582f31aff43d635d8;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_60745dc77ca2193582f31aff43d635d8, codeobj_60745dc77ca2193582f31aff43d635d8, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_60745dc77ca2193582f31aff43d635d8 = cache_frame_60745dc77ca2193582f31aff43d635d8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_60745dc77ca2193582f31aff43d635d8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_60745dc77ca2193582f31aff43d635d8 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rfind );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_rfind );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "rfind" );
        exception_tb = NULL;

        exception_lineno = 2282;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_sub;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_start;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_end;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_60745dc77ca2193582f31aff43d635d8->m_frame.f_lineno = 2282;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2282;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_60745dc77ca2193582f31aff43d635d8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_60745dc77ca2193582f31aff43d635d8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_60745dc77ca2193582f31aff43d635d8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_60745dc77ca2193582f31aff43d635d8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_60745dc77ca2193582f31aff43d635d8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_60745dc77ca2193582f31aff43d635d8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_60745dc77ca2193582f31aff43d635d8,
        type_description_1,
        par_self,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_60745dc77ca2193582f31aff43d635d8 == cache_frame_60745dc77ca2193582f31aff43d635d8 )
    {
        Py_DECREF( frame_60745dc77ca2193582f31aff43d635d8 );
    }
    cache_frame_60745dc77ca2193582f31aff43d635d8 = NULL;

    assertFrameObject( frame_60745dc77ca2193582f31aff43d635d8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_92_rfind );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_92_rfind );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_93_rindex( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sub = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_618f403d0495af6f4868b03c97179f61 = NULL;

    struct Nuitka_FrameObject *frame_618f403d0495af6f4868b03c97179f61;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_618f403d0495af6f4868b03c97179f61, codeobj_618f403d0495af6f4868b03c97179f61, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_618f403d0495af6f4868b03c97179f61 = cache_frame_618f403d0495af6f4868b03c97179f61;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_618f403d0495af6f4868b03c97179f61 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_618f403d0495af6f4868b03c97179f61 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rindex );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_rindex );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "rindex" );
        exception_tb = NULL;

        exception_lineno = 2294;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_sub;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_start;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_end;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_618f403d0495af6f4868b03c97179f61->m_frame.f_lineno = 2294;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2294;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_618f403d0495af6f4868b03c97179f61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_618f403d0495af6f4868b03c97179f61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_618f403d0495af6f4868b03c97179f61 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_618f403d0495af6f4868b03c97179f61, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_618f403d0495af6f4868b03c97179f61->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_618f403d0495af6f4868b03c97179f61, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_618f403d0495af6f4868b03c97179f61,
        type_description_1,
        par_self,
        par_sub,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_618f403d0495af6f4868b03c97179f61 == cache_frame_618f403d0495af6f4868b03c97179f61 )
    {
        Py_DECREF( frame_618f403d0495af6f4868b03c97179f61 );
    }
    cache_frame_618f403d0495af6f4868b03c97179f61 = NULL;

    assertFrameObject( frame_618f403d0495af6f4868b03c97179f61 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_93_rindex );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sub );
    Py_DECREF( par_sub );
    par_sub = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_93_rindex );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_94_rjust( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_width = python_pars[ 1 ];
    PyObject *par_fillchar = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_912b1fbc0b5de9c6d0ee7e7209ec7eba = NULL;

    struct Nuitka_FrameObject *frame_912b1fbc0b5de9c6d0ee7e7209ec7eba;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_912b1fbc0b5de9c6d0ee7e7209ec7eba, codeobj_912b1fbc0b5de9c6d0ee7e7209ec7eba, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_912b1fbc0b5de9c6d0ee7e7209ec7eba = cache_frame_912b1fbc0b5de9c6d0ee7e7209ec7eba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_912b1fbc0b5de9c6d0ee7e7209ec7eba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_912b1fbc0b5de9c6d0ee7e7209ec7eba ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2306;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rjust );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_rjust );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "rjust" );
        exception_tb = NULL;

        exception_lineno = 2306;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_width;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_fillchar;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_912b1fbc0b5de9c6d0ee7e7209ec7eba->m_frame.f_lineno = 2306;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2306;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_912b1fbc0b5de9c6d0ee7e7209ec7eba->m_frame.f_lineno = 2306;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2306;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_912b1fbc0b5de9c6d0ee7e7209ec7eba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_912b1fbc0b5de9c6d0ee7e7209ec7eba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_912b1fbc0b5de9c6d0ee7e7209ec7eba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_912b1fbc0b5de9c6d0ee7e7209ec7eba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_912b1fbc0b5de9c6d0ee7e7209ec7eba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_912b1fbc0b5de9c6d0ee7e7209ec7eba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_912b1fbc0b5de9c6d0ee7e7209ec7eba,
        type_description_1,
        par_self,
        par_width,
        par_fillchar
    );


    // Release cached frame.
    if ( frame_912b1fbc0b5de9c6d0ee7e7209ec7eba == cache_frame_912b1fbc0b5de9c6d0ee7e7209ec7eba )
    {
        Py_DECREF( frame_912b1fbc0b5de9c6d0ee7e7209ec7eba );
    }
    cache_frame_912b1fbc0b5de9c6d0ee7e7209ec7eba = NULL;

    assertFrameObject( frame_912b1fbc0b5de9c6d0ee7e7209ec7eba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_94_rjust );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)par_fillchar );
    Py_DECREF( par_fillchar );
    par_fillchar = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    CHECK_OBJECT( (PyObject *)par_fillchar );
    Py_DECREF( par_fillchar );
    par_fillchar = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_94_rjust );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_95_rpartition( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sep = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_6a889823890a0accecaf46020b433d3c = NULL;

    struct Nuitka_FrameObject *frame_6a889823890a0accecaf46020b433d3c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6a889823890a0accecaf46020b433d3c, codeobj_6a889823890a0accecaf46020b433d3c, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_6a889823890a0accecaf46020b433d3c = cache_frame_6a889823890a0accecaf46020b433d3c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6a889823890a0accecaf46020b433d3c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6a889823890a0accecaf46020b433d3c ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2316;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rpartition );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_rpartition );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "rpartition" );
        exception_tb = NULL;

        exception_lineno = 2316;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_sep;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_6a889823890a0accecaf46020b433d3c->m_frame.f_lineno = 2316;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2316;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_6a889823890a0accecaf46020b433d3c->m_frame.f_lineno = 2316;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2316;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6a889823890a0accecaf46020b433d3c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6a889823890a0accecaf46020b433d3c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6a889823890a0accecaf46020b433d3c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6a889823890a0accecaf46020b433d3c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6a889823890a0accecaf46020b433d3c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6a889823890a0accecaf46020b433d3c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6a889823890a0accecaf46020b433d3c,
        type_description_1,
        par_self,
        par_sep
    );


    // Release cached frame.
    if ( frame_6a889823890a0accecaf46020b433d3c == cache_frame_6a889823890a0accecaf46020b433d3c )
    {
        Py_DECREF( frame_6a889823890a0accecaf46020b433d3c );
    }
    cache_frame_6a889823890a0accecaf46020b433d3c = NULL;

    assertFrameObject( frame_6a889823890a0accecaf46020b433d3c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_95_rpartition );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_95_rpartition );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_96_rsplit( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sep = python_pars[ 1 ];
    PyObject *par_maxsplit = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_ed77619f7e9393d02f500e9957f60750 = NULL;

    struct Nuitka_FrameObject *frame_ed77619f7e9393d02f500e9957f60750;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ed77619f7e9393d02f500e9957f60750, codeobj_ed77619f7e9393d02f500e9957f60750, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ed77619f7e9393d02f500e9957f60750 = cache_frame_ed77619f7e9393d02f500e9957f60750;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ed77619f7e9393d02f500e9957f60750 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ed77619f7e9393d02f500e9957f60750 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rsplit );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_rsplit );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "rsplit" );
        exception_tb = NULL;

        exception_lineno = 2328;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_sep;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_maxsplit;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_ed77619f7e9393d02f500e9957f60750->m_frame.f_lineno = 2328;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2328;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ed77619f7e9393d02f500e9957f60750 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ed77619f7e9393d02f500e9957f60750 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ed77619f7e9393d02f500e9957f60750 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ed77619f7e9393d02f500e9957f60750, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ed77619f7e9393d02f500e9957f60750->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ed77619f7e9393d02f500e9957f60750, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ed77619f7e9393d02f500e9957f60750,
        type_description_1,
        par_self,
        par_sep,
        par_maxsplit
    );


    // Release cached frame.
    if ( frame_ed77619f7e9393d02f500e9957f60750 == cache_frame_ed77619f7e9393d02f500e9957f60750 )
    {
        Py_DECREF( frame_ed77619f7e9393d02f500e9957f60750 );
    }
    cache_frame_ed77619f7e9393d02f500e9957f60750 = NULL;

    assertFrameObject( frame_ed77619f7e9393d02f500e9957f60750 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_96_rsplit );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_maxsplit );
    Py_DECREF( par_maxsplit );
    par_maxsplit = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_maxsplit );
    Py_DECREF( par_maxsplit );
    par_maxsplit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_96_rsplit );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_97_rstrip( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_chars = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_f7141c9ab5a4fa7fe787dcbd7418a753 = NULL;

    struct Nuitka_FrameObject *frame_f7141c9ab5a4fa7fe787dcbd7418a753;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f7141c9ab5a4fa7fe787dcbd7418a753, codeobj_f7141c9ab5a4fa7fe787dcbd7418a753, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_f7141c9ab5a4fa7fe787dcbd7418a753 = cache_frame_f7141c9ab5a4fa7fe787dcbd7418a753;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f7141c9ab5a4fa7fe787dcbd7418a753 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f7141c9ab5a4fa7fe787dcbd7418a753 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2340;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rstrip );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_rstrip );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "rstrip" );
        exception_tb = NULL;

        exception_lineno = 2340;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_chars;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_f7141c9ab5a4fa7fe787dcbd7418a753->m_frame.f_lineno = 2340;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2340;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_f7141c9ab5a4fa7fe787dcbd7418a753->m_frame.f_lineno = 2340;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2340;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f7141c9ab5a4fa7fe787dcbd7418a753 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f7141c9ab5a4fa7fe787dcbd7418a753 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f7141c9ab5a4fa7fe787dcbd7418a753 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f7141c9ab5a4fa7fe787dcbd7418a753, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f7141c9ab5a4fa7fe787dcbd7418a753->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f7141c9ab5a4fa7fe787dcbd7418a753, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f7141c9ab5a4fa7fe787dcbd7418a753,
        type_description_1,
        par_self,
        par_chars
    );


    // Release cached frame.
    if ( frame_f7141c9ab5a4fa7fe787dcbd7418a753 == cache_frame_f7141c9ab5a4fa7fe787dcbd7418a753 )
    {
        Py_DECREF( frame_f7141c9ab5a4fa7fe787dcbd7418a753 );
    }
    cache_frame_f7141c9ab5a4fa7fe787dcbd7418a753 = NULL;

    assertFrameObject( frame_f7141c9ab5a4fa7fe787dcbd7418a753 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_97_rstrip );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_97_rstrip );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_98_split( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sep = python_pars[ 1 ];
    PyObject *par_maxsplit = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_c85b09eda9b23a3c6d3f4166ad2bd603 = NULL;

    struct Nuitka_FrameObject *frame_c85b09eda9b23a3c6d3f4166ad2bd603;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c85b09eda9b23a3c6d3f4166ad2bd603, codeobj_c85b09eda9b23a3c6d3f4166ad2bd603, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_c85b09eda9b23a3c6d3f4166ad2bd603 = cache_frame_c85b09eda9b23a3c6d3f4166ad2bd603;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c85b09eda9b23a3c6d3f4166ad2bd603 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c85b09eda9b23a3c6d3f4166ad2bd603 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_split );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_split );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "split" );
        exception_tb = NULL;

        exception_lineno = 2352;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_sep;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_maxsplit;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_c85b09eda9b23a3c6d3f4166ad2bd603->m_frame.f_lineno = 2352;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2352;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c85b09eda9b23a3c6d3f4166ad2bd603 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c85b09eda9b23a3c6d3f4166ad2bd603 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c85b09eda9b23a3c6d3f4166ad2bd603 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c85b09eda9b23a3c6d3f4166ad2bd603, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c85b09eda9b23a3c6d3f4166ad2bd603->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c85b09eda9b23a3c6d3f4166ad2bd603, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c85b09eda9b23a3c6d3f4166ad2bd603,
        type_description_1,
        par_self,
        par_sep,
        par_maxsplit
    );


    // Release cached frame.
    if ( frame_c85b09eda9b23a3c6d3f4166ad2bd603 == cache_frame_c85b09eda9b23a3c6d3f4166ad2bd603 )
    {
        Py_DECREF( frame_c85b09eda9b23a3c6d3f4166ad2bd603 );
    }
    cache_frame_c85b09eda9b23a3c6d3f4166ad2bd603 = NULL;

    assertFrameObject( frame_c85b09eda9b23a3c6d3f4166ad2bd603 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_98_split );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_maxsplit );
    Py_DECREF( par_maxsplit );
    par_maxsplit = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sep );
    Py_DECREF( par_sep );
    par_sep = NULL;

    CHECK_OBJECT( (PyObject *)par_maxsplit );
    Py_DECREF( par_maxsplit );
    par_maxsplit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_98_split );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_99_splitlines( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_keepends = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_d42a129d212d4614eab0b37513fc4b5a = NULL;

    struct Nuitka_FrameObject *frame_d42a129d212d4614eab0b37513fc4b5a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d42a129d212d4614eab0b37513fc4b5a, codeobj_d42a129d212d4614eab0b37513fc4b5a, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_d42a129d212d4614eab0b37513fc4b5a = cache_frame_d42a129d212d4614eab0b37513fc4b5a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d42a129d212d4614eab0b37513fc4b5a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d42a129d212d4614eab0b37513fc4b5a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_splitlines );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_splitlines );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "splitlines" );
        exception_tb = NULL;

        exception_lineno = 2364;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_keepends;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_d42a129d212d4614eab0b37513fc4b5a->m_frame.f_lineno = 2364;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2364;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d42a129d212d4614eab0b37513fc4b5a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d42a129d212d4614eab0b37513fc4b5a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d42a129d212d4614eab0b37513fc4b5a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d42a129d212d4614eab0b37513fc4b5a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d42a129d212d4614eab0b37513fc4b5a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d42a129d212d4614eab0b37513fc4b5a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d42a129d212d4614eab0b37513fc4b5a,
        type_description_1,
        par_self,
        par_keepends
    );


    // Release cached frame.
    if ( frame_d42a129d212d4614eab0b37513fc4b5a == cache_frame_d42a129d212d4614eab0b37513fc4b5a )
    {
        Py_DECREF( frame_d42a129d212d4614eab0b37513fc4b5a );
    }
    cache_frame_d42a129d212d4614eab0b37513fc4b5a = NULL;

    assertFrameObject( frame_d42a129d212d4614eab0b37513fc4b5a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_99_splitlines );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_keepends );
    Py_DECREF( par_keepends );
    par_keepends = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_keepends );
    Py_DECREF( par_keepends );
    par_keepends = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_99_splitlines );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_100_startswith( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_prefix = python_pars[ 1 ];
    PyObject *par_start = python_pars[ 2 ];
    PyObject *par_end = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_0220ac5545ae11b2be02eadc492d3787 = NULL;

    struct Nuitka_FrameObject *frame_0220ac5545ae11b2be02eadc492d3787;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0220ac5545ae11b2be02eadc492d3787, codeobj_0220ac5545ae11b2be02eadc492d3787, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0220ac5545ae11b2be02eadc492d3787 = cache_frame_0220ac5545ae11b2be02eadc492d3787;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0220ac5545ae11b2be02eadc492d3787 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0220ac5545ae11b2be02eadc492d3787 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_startswith );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_startswith );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "startswith" );
        exception_tb = NULL;

        exception_lineno = 2376;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_prefix;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_start;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_end;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_0220ac5545ae11b2be02eadc492d3787->m_frame.f_lineno = 2376;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2376;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0220ac5545ae11b2be02eadc492d3787 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0220ac5545ae11b2be02eadc492d3787 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0220ac5545ae11b2be02eadc492d3787 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0220ac5545ae11b2be02eadc492d3787, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0220ac5545ae11b2be02eadc492d3787->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0220ac5545ae11b2be02eadc492d3787, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0220ac5545ae11b2be02eadc492d3787,
        type_description_1,
        par_self,
        par_prefix,
        par_start,
        par_end
    );


    // Release cached frame.
    if ( frame_0220ac5545ae11b2be02eadc492d3787 == cache_frame_0220ac5545ae11b2be02eadc492d3787 )
    {
        Py_DECREF( frame_0220ac5545ae11b2be02eadc492d3787 );
    }
    cache_frame_0220ac5545ae11b2be02eadc492d3787 = NULL;

    assertFrameObject( frame_0220ac5545ae11b2be02eadc492d3787 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_100_startswith );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_prefix );
    Py_DECREF( par_prefix );
    par_prefix = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_prefix );
    Py_DECREF( par_prefix );
    par_prefix = NULL;

    CHECK_OBJECT( (PyObject *)par_start );
    Py_DECREF( par_start );
    par_start = NULL;

    CHECK_OBJECT( (PyObject *)par_end );
    Py_DECREF( par_end );
    par_end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_100_startswith );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_101_strip( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_chars = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_5284241698763c6ec090a47a6bf7e174 = NULL;

    struct Nuitka_FrameObject *frame_5284241698763c6ec090a47a6bf7e174;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5284241698763c6ec090a47a6bf7e174, codeobj_5284241698763c6ec090a47a6bf7e174, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_5284241698763c6ec090a47a6bf7e174 = cache_frame_5284241698763c6ec090a47a6bf7e174;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5284241698763c6ec090a47a6bf7e174 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5284241698763c6ec090a47a6bf7e174 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2388;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_strip );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_strip );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "strip" );
        exception_tb = NULL;

        exception_lineno = 2388;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_chars;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_5284241698763c6ec090a47a6bf7e174->m_frame.f_lineno = 2388;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2388;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_5284241698763c6ec090a47a6bf7e174->m_frame.f_lineno = 2388;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2388;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5284241698763c6ec090a47a6bf7e174 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5284241698763c6ec090a47a6bf7e174 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5284241698763c6ec090a47a6bf7e174 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5284241698763c6ec090a47a6bf7e174, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5284241698763c6ec090a47a6bf7e174->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5284241698763c6ec090a47a6bf7e174, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5284241698763c6ec090a47a6bf7e174,
        type_description_1,
        par_self,
        par_chars
    );


    // Release cached frame.
    if ( frame_5284241698763c6ec090a47a6bf7e174 == cache_frame_5284241698763c6ec090a47a6bf7e174 )
    {
        Py_DECREF( frame_5284241698763c6ec090a47a6bf7e174 );
    }
    cache_frame_5284241698763c6ec090a47a6bf7e174 = NULL;

    assertFrameObject( frame_5284241698763c6ec090a47a6bf7e174 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_101_strip );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_chars );
    Py_DECREF( par_chars );
    par_chars = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_101_strip );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_102_swapcase( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 = NULL;

    struct Nuitka_FrameObject *frame_9c0b3de3cdff3e1e82ebd2a45dd1a148;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9c0b3de3cdff3e1e82ebd2a45dd1a148, codeobj_9c0b3de3cdff3e1e82ebd2a45dd1a148, module_numpy$core$defchararray, sizeof(void *) );
    frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 = cache_frame_9c0b3de3cdff3e1e82ebd2a45dd1a148;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2400;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_swapcase );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_swapcase );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "swapcase" );
        exception_tb = NULL;

        exception_lineno = 2400;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_9c0b3de3cdff3e1e82ebd2a45dd1a148->m_frame.f_lineno = 2400;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2400;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_9c0b3de3cdff3e1e82ebd2a45dd1a148->m_frame.f_lineno = 2400;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2400;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9c0b3de3cdff3e1e82ebd2a45dd1a148, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9c0b3de3cdff3e1e82ebd2a45dd1a148->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9c0b3de3cdff3e1e82ebd2a45dd1a148, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9c0b3de3cdff3e1e82ebd2a45dd1a148,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 == cache_frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 )
    {
        Py_DECREF( frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 );
    }
    cache_frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 = NULL;

    assertFrameObject( frame_9c0b3de3cdff3e1e82ebd2a45dd1a148 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_102_swapcase );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_102_swapcase );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_103_title( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_fb50cb70987423fb24ab028fff37a8ec = NULL;

    struct Nuitka_FrameObject *frame_fb50cb70987423fb24ab028fff37a8ec;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fb50cb70987423fb24ab028fff37a8ec, codeobj_fb50cb70987423fb24ab028fff37a8ec, module_numpy$core$defchararray, sizeof(void *) );
    frame_fb50cb70987423fb24ab028fff37a8ec = cache_frame_fb50cb70987423fb24ab028fff37a8ec;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fb50cb70987423fb24ab028fff37a8ec );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fb50cb70987423fb24ab028fff37a8ec ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2413;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_title );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_title );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "title" );
        exception_tb = NULL;

        exception_lineno = 2413;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_fb50cb70987423fb24ab028fff37a8ec->m_frame.f_lineno = 2413;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2413;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_fb50cb70987423fb24ab028fff37a8ec->m_frame.f_lineno = 2413;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2413;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fb50cb70987423fb24ab028fff37a8ec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fb50cb70987423fb24ab028fff37a8ec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fb50cb70987423fb24ab028fff37a8ec );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fb50cb70987423fb24ab028fff37a8ec, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fb50cb70987423fb24ab028fff37a8ec->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fb50cb70987423fb24ab028fff37a8ec, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fb50cb70987423fb24ab028fff37a8ec,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_fb50cb70987423fb24ab028fff37a8ec == cache_frame_fb50cb70987423fb24ab028fff37a8ec )
    {
        Py_DECREF( frame_fb50cb70987423fb24ab028fff37a8ec );
    }
    cache_frame_fb50cb70987423fb24ab028fff37a8ec = NULL;

    assertFrameObject( frame_fb50cb70987423fb24ab028fff37a8ec );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_103_title );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_103_title );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_104_translate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_table = python_pars[ 1 ];
    PyObject *par_deletechars = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 = NULL;

    struct Nuitka_FrameObject *frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6, codeobj_d49a57bbf3a7bddb8cc1aeb12aa4f9a6, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 = cache_frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2427;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_translate );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_translate );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "translate" );
        exception_tb = NULL;

        exception_lineno = 2427;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_table;

    CHECK_OBJECT( tmp_args_element_name_3 );
    tmp_args_element_name_4 = par_deletechars;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6->m_frame.f_lineno = 2427;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2427;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6->m_frame.f_lineno = 2427;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2427;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6,
        type_description_1,
        par_self,
        par_table,
        par_deletechars
    );


    // Release cached frame.
    if ( frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 == cache_frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 )
    {
        Py_DECREF( frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 );
    }
    cache_frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 = NULL;

    assertFrameObject( frame_d49a57bbf3a7bddb8cc1aeb12aa4f9a6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_104_translate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_table );
    Py_DECREF( par_table );
    par_table = NULL;

    CHECK_OBJECT( (PyObject *)par_deletechars );
    Py_DECREF( par_deletechars );
    par_deletechars = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_table );
    Py_DECREF( par_table );
    par_table = NULL;

    CHECK_OBJECT( (PyObject *)par_deletechars );
    Py_DECREF( par_deletechars );
    par_deletechars = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_104_translate );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_105_upper( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_4a0e56a9b171c76c9e491cb1aadecaab = NULL;

    struct Nuitka_FrameObject *frame_4a0e56a9b171c76c9e491cb1aadecaab;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4a0e56a9b171c76c9e491cb1aadecaab, codeobj_4a0e56a9b171c76c9e491cb1aadecaab, module_numpy$core$defchararray, sizeof(void *) );
    frame_4a0e56a9b171c76c9e491cb1aadecaab = cache_frame_4a0e56a9b171c76c9e491cb1aadecaab;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4a0e56a9b171c76c9e491cb1aadecaab );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4a0e56a9b171c76c9e491cb1aadecaab ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2439;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_upper );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_upper );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "upper" );
        exception_tb = NULL;

        exception_lineno = 2439;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_4a0e56a9b171c76c9e491cb1aadecaab->m_frame.f_lineno = 2439;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2439;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_4a0e56a9b171c76c9e491cb1aadecaab->m_frame.f_lineno = 2439;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2439;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a0e56a9b171c76c9e491cb1aadecaab );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a0e56a9b171c76c9e491cb1aadecaab );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a0e56a9b171c76c9e491cb1aadecaab );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4a0e56a9b171c76c9e491cb1aadecaab, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4a0e56a9b171c76c9e491cb1aadecaab->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4a0e56a9b171c76c9e491cb1aadecaab, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4a0e56a9b171c76c9e491cb1aadecaab,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_4a0e56a9b171c76c9e491cb1aadecaab == cache_frame_4a0e56a9b171c76c9e491cb1aadecaab )
    {
        Py_DECREF( frame_4a0e56a9b171c76c9e491cb1aadecaab );
    }
    cache_frame_4a0e56a9b171c76c9e491cb1aadecaab = NULL;

    assertFrameObject( frame_4a0e56a9b171c76c9e491cb1aadecaab );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_105_upper );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_105_upper );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_106_zfill( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_width = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_465520d6587c2be356aa7de9b6a29342 = NULL;

    struct Nuitka_FrameObject *frame_465520d6587c2be356aa7de9b6a29342;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_465520d6587c2be356aa7de9b6a29342, codeobj_465520d6587c2be356aa7de9b6a29342, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *) );
    frame_465520d6587c2be356aa7de9b6a29342 = cache_frame_465520d6587c2be356aa7de9b6a29342;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_465520d6587c2be356aa7de9b6a29342 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_465520d6587c2be356aa7de9b6a29342 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_asarray );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "asarray" );
        exception_tb = NULL;

        exception_lineno = 2451;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_zfill );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_zfill );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "zfill" );
        exception_tb = NULL;

        exception_lineno = 2451;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = par_width;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_465520d6587c2be356aa7de9b6a29342->m_frame.f_lineno = 2451;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2451;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_465520d6587c2be356aa7de9b6a29342->m_frame.f_lineno = 2451;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2451;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_465520d6587c2be356aa7de9b6a29342 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_465520d6587c2be356aa7de9b6a29342 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_465520d6587c2be356aa7de9b6a29342 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_465520d6587c2be356aa7de9b6a29342, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_465520d6587c2be356aa7de9b6a29342->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_465520d6587c2be356aa7de9b6a29342, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_465520d6587c2be356aa7de9b6a29342,
        type_description_1,
        par_self,
        par_width
    );


    // Release cached frame.
    if ( frame_465520d6587c2be356aa7de9b6a29342 == cache_frame_465520d6587c2be356aa7de9b6a29342 )
    {
        Py_DECREF( frame_465520d6587c2be356aa7de9b6a29342 );
    }
    cache_frame_465520d6587c2be356aa7de9b6a29342 = NULL;

    assertFrameObject( frame_465520d6587c2be356aa7de9b6a29342 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_106_zfill );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_width );
    Py_DECREF( par_width );
    par_width = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_106_zfill );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_107_isnumeric( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_beadcf5e57018246f301aeb943e8a0b5 = NULL;

    struct Nuitka_FrameObject *frame_beadcf5e57018246f301aeb943e8a0b5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_beadcf5e57018246f301aeb943e8a0b5, codeobj_beadcf5e57018246f301aeb943e8a0b5, module_numpy$core$defchararray, sizeof(void *) );
    frame_beadcf5e57018246f301aeb943e8a0b5 = cache_frame_beadcf5e57018246f301aeb943e8a0b5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_beadcf5e57018246f301aeb943e8a0b5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_beadcf5e57018246f301aeb943e8a0b5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isnumeric );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isnumeric );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isnumeric" );
        exception_tb = NULL;

        exception_lineno = 2463;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_beadcf5e57018246f301aeb943e8a0b5->m_frame.f_lineno = 2463;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2463;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_beadcf5e57018246f301aeb943e8a0b5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_beadcf5e57018246f301aeb943e8a0b5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_beadcf5e57018246f301aeb943e8a0b5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_beadcf5e57018246f301aeb943e8a0b5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_beadcf5e57018246f301aeb943e8a0b5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_beadcf5e57018246f301aeb943e8a0b5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_beadcf5e57018246f301aeb943e8a0b5,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_beadcf5e57018246f301aeb943e8a0b5 == cache_frame_beadcf5e57018246f301aeb943e8a0b5 )
    {
        Py_DECREF( frame_beadcf5e57018246f301aeb943e8a0b5 );
    }
    cache_frame_beadcf5e57018246f301aeb943e8a0b5 = NULL;

    assertFrameObject( frame_beadcf5e57018246f301aeb943e8a0b5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_107_isnumeric );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_107_isnumeric );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_108_isdecimal( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_c74e4a912fe6802773715d4551429507 = NULL;

    struct Nuitka_FrameObject *frame_c74e4a912fe6802773715d4551429507;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c74e4a912fe6802773715d4551429507, codeobj_c74e4a912fe6802773715d4551429507, module_numpy$core$defchararray, sizeof(void *) );
    frame_c74e4a912fe6802773715d4551429507 = cache_frame_c74e4a912fe6802773715d4551429507;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c74e4a912fe6802773715d4551429507 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c74e4a912fe6802773715d4551429507 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isdecimal );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_isdecimal );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "isdecimal" );
        exception_tb = NULL;

        exception_lineno = 2475;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_c74e4a912fe6802773715d4551429507->m_frame.f_lineno = 2475;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2475;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c74e4a912fe6802773715d4551429507 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c74e4a912fe6802773715d4551429507 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c74e4a912fe6802773715d4551429507 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c74e4a912fe6802773715d4551429507, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c74e4a912fe6802773715d4551429507->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c74e4a912fe6802773715d4551429507, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c74e4a912fe6802773715d4551429507,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_c74e4a912fe6802773715d4551429507 == cache_frame_c74e4a912fe6802773715d4551429507 )
    {
        Py_DECREF( frame_c74e4a912fe6802773715d4551429507 );
    }
    cache_frame_c74e4a912fe6802773715d4551429507 = NULL;

    assertFrameObject( frame_c74e4a912fe6802773715d4551429507 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_108_isdecimal );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_108_isdecimal );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_109_array( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_obj = python_pars[ 0 ];
    PyObject *par_itemsize = python_pars[ 1 ];
    PyObject *par_copy = python_pars[ 2 ];
    PyObject *par_unicode = python_pars[ 3 ];
    PyObject *par_order = python_pars[ 4 ];
    PyObject *var_shape = NULL;
    PyObject *var_dtype = NULL;
    PyObject *var_val = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_args_name_3;
    PyObject *tmp_args_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    bool tmp_is_4;
    bool tmp_is_5;
    bool tmp_is_6;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_cls_4;
    PyObject *tmp_isinstance_cls_5;
    PyObject *tmp_isinstance_cls_6;
    PyObject *tmp_isinstance_cls_7;
    PyObject *tmp_isinstance_cls_8;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_isinstance_inst_4;
    PyObject *tmp_isinstance_inst_5;
    PyObject *tmp_isinstance_inst_6;
    PyObject *tmp_isinstance_inst_7;
    PyObject *tmp_isinstance_inst_8;
    bool tmp_isnot_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_operand_name_1;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    int tmp_or_left_truth_3;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_left_value_3;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_or_right_value_3;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    static struct Nuitka_FrameObject *cache_frame_d5fc4ec52582057fc26f94265f9704c9 = NULL;

    struct Nuitka_FrameObject *frame_d5fc4ec52582057fc26f94265f9704c9;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d5fc4ec52582057fc26f94265f9704c9, codeobj_d5fc4ec52582057fc26f94265f9704c9, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d5fc4ec52582057fc26f94265f9704c9 = cache_frame_d5fc4ec52582057fc26f94265f9704c9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d5fc4ec52582057fc26f94265f9704c9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d5fc4ec52582057fc26f94265f9704c9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_isinstance_inst_1 = par_obj;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__bytes );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__bytes );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_isinstance_cls_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_bytes" );
        exception_tb = NULL;

        exception_lineno = 2540;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__unicode );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__unicode );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_isinstance_cls_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_unicode" );
        exception_tb = NULL;

        exception_lineno = 2540;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_isinstance_cls_1, 1, tmp_tuple_element_1 );
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    Py_DECREF( tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2540;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = par_unicode;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_isinstance_inst_2 = par_obj;

    CHECK_OBJECT( tmp_isinstance_inst_2 );
    tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__unicode );

    if (unlikely( tmp_isinstance_cls_2 == NULL ))
    {
        tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__unicode );
    }

    if ( tmp_isinstance_cls_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_unicode" );
        exception_tb = NULL;

        exception_lineno = 2542;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2542;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_1 = Py_True;
    {
        PyObject *old = par_unicode;
        assert( old != NULL );
        par_unicode = tmp_assign_source_1;
        Py_INCREF( par_unicode );
        Py_DECREF( old );
    }

    goto branch_end_3;
    branch_no_3:;
    tmp_assign_source_2 = Py_False;
    {
        PyObject *old = par_unicode;
        assert( old != NULL );
        par_unicode = tmp_assign_source_2;
        Py_INCREF( par_unicode );
        Py_DECREF( old );
    }

    branch_end_3:;
    branch_no_2:;
    tmp_compare_left_2 = par_itemsize;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = Py_None;
    tmp_is_2 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if ( tmp_is_2 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__len );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__len );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_len" );
        exception_tb = NULL;

        exception_lineno = 2548;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_obj;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2548;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2548;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_itemsize;
        assert( old != NULL );
        par_itemsize = tmp_assign_source_3;
        Py_DECREF( old );
    }

    branch_no_4:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__len );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__len );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_len" );
        exception_tb = NULL;

        exception_lineno = 2549;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_obj;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2549;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_left_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2549;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = par_itemsize;

    CHECK_OBJECT( tmp_right_name_1 );
    tmp_assign_source_4 = BINARY_OPERATION_FLOORDIV( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2549;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_shape == NULL );
    var_shape = tmp_assign_source_4;

    tmp_cond_value_1 = par_unicode;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "unicode" );
        exception_tb = NULL;

        exception_lineno = 2551;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2551;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 2552;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_compare_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_maxunicode );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2552;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_3 = const_int_pos_65535;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_3 );

        exception_lineno = 2552;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_3 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_called_instance_1 = par_obj;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2562;
    tmp_assign_source_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_plain_utf_32_tuple, 0 ) );

    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2562;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_obj;
        assert( old != NULL );
        par_obj = tmp_assign_source_5;
        Py_DECREF( old );
    }

    goto branch_end_6;
    branch_no_6:;
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__unicode );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__unicode );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_unicode" );
        exception_tb = NULL;

        exception_lineno = 2564;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = par_obj;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2564;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2564;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_obj;
        assert( old != NULL );
        par_obj = tmp_assign_source_6;
        Py_DECREF( old );
    }

    branch_end_6:;
    goto branch_end_5;
    branch_no_5:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__bytes );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__bytes );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_bytes" );
        exception_tb = NULL;

        exception_lineno = 2568;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_obj;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2568;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2568;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_obj;
        assert( old != NULL );
        par_obj = tmp_assign_source_7;
        Py_DECREF( old );
    }

    branch_end_5:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_chararray );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_chararray );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "chararray" );
        exception_tb = NULL;

        exception_lineno = 2570;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_name_1 = PyTuple_New( 1 );
    tmp_tuple_element_2 = var_shape;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_value_1 = par_itemsize;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain_itemsize;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = par_unicode;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "unicode" );
        exception_tb = NULL;

        exception_lineno = 2570;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_dict_key_2 = const_str_plain_unicode;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_3 = par_obj;

    if ( tmp_dict_value_3 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2571;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_dict_key_3 = const_str_plain_buffer;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_4 = par_order;

    CHECK_OBJECT( tmp_dict_value_4 );
    tmp_dict_key_4 = const_str_plain_order;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2570;
    tmp_return_value = CALL_FUNCTION( tmp_called_name_5, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2570;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_isinstance_inst_3 = par_obj;

    CHECK_OBJECT( tmp_isinstance_inst_3 );
    tmp_isinstance_cls_3 = const_tuple_type_list_type_tuple_tuple;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2573;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 2574;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_obj;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2574;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_assign_source_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_asarray, call_args );
    }

    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2574;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_obj;
        assert( old != NULL );
        par_obj = tmp_assign_source_8;
        Py_DECREF( old );
    }

    branch_no_7:;
    tmp_isinstance_inst_4 = par_obj;

    CHECK_OBJECT( tmp_isinstance_inst_4 );
    tmp_isinstance_cls_4 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ndarray );

    if (unlikely( tmp_isinstance_cls_4 == NULL ))
    {
        tmp_isinstance_cls_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ndarray );
    }

    if ( tmp_isinstance_cls_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ndarray" );
        exception_tb = NULL;

        exception_lineno = 2576;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_value_1 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2576;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2576;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_called_name_6 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    assert( tmp_called_name_6 != NULL );
    tmp_source_name_3 = par_obj;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_dtype );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2576;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_type );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2576;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_7 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_character );

    if (unlikely( tmp_args_element_name_7 == NULL ))
    {
        tmp_args_element_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_character );
    }

    if ( tmp_args_element_name_7 == NULL )
    {
        Py_DECREF( tmp_args_element_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "character" );
        exception_tb = NULL;

        exception_lineno = 2576;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2576;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_and_right_value_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2576;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_2 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    Py_INCREF( tmp_and_left_value_1 );
    tmp_cond_value_2 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 2576;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_isinstance_inst_5 = par_obj;

    CHECK_OBJECT( tmp_isinstance_inst_5 );
    tmp_isinstance_cls_5 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_chararray );

    if (unlikely( tmp_isinstance_cls_5 == NULL ))
    {
        tmp_isinstance_cls_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_chararray );
    }

    if ( tmp_isinstance_cls_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "chararray" );
        exception_tb = NULL;

        exception_lineno = 2579;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2579;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_9;
    }
    else
    {
        goto branch_yes_9;
    }
    branch_yes_9:;
    tmp_source_name_4 = par_obj;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_view );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2580;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_chararray );

    if (unlikely( tmp_args_element_name_8 == NULL ))
    {
        tmp_args_element_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_chararray );
    }

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "chararray" );
        exception_tb = NULL;

        exception_lineno = 2580;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2580;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2580;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_obj;
        assert( old != NULL );
        par_obj = tmp_assign_source_9;
        Py_DECREF( old );
    }

    branch_no_9:;
    tmp_compare_left_4 = par_itemsize;

    CHECK_OBJECT( tmp_compare_left_4 );
    tmp_compare_right_4 = Py_None;
    tmp_is_3 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if ( tmp_is_3 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_5 = par_obj;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2583;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assign_source_10 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_itemsize );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2583;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_itemsize;
        assert( old != NULL );
        par_itemsize = tmp_assign_source_10;
        Py_DECREF( old );
    }

    tmp_called_name_8 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    assert( tmp_called_name_8 != NULL );
    tmp_source_name_7 = par_obj;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2587;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_dtype );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2587;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_type );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_args_element_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2587;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_10 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_args_element_name_10 == NULL ))
    {
        tmp_args_element_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_args_element_name_10 == NULL )
    {
        Py_DECREF( tmp_args_element_name_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 2587;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2587;
    {
        PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10 };
        tmp_cond_value_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2587;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 2587;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_left_name_2 = par_itemsize;

    CHECK_OBJECT( tmp_left_name_2 );
    tmp_right_name_2 = const_int_pos_4;
    tmp_result = BINARY_OPERATION_INPLACE( PyNumber_InPlaceFloorDivide, &tmp_left_name_2, tmp_right_name_2 );
    tmp_assign_source_11 = tmp_left_name_2;
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2588;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    par_itemsize = tmp_assign_source_11;

    branch_no_11:;
    branch_no_10:;
    tmp_compare_left_5 = par_unicode;

    CHECK_OBJECT( tmp_compare_left_5 );
    tmp_compare_right_5 = Py_None;
    tmp_is_4 = ( tmp_compare_left_5 == tmp_compare_right_5 );
    if ( tmp_is_4 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_called_name_9 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    assert( tmp_called_name_9 != NULL );
    tmp_source_name_9 = par_obj;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2591;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_dtype );
    if ( tmp_source_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2591;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_type );
    Py_DECREF( tmp_source_name_8 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2591;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_args_element_name_12 == NULL ))
    {
        tmp_args_element_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_args_element_name_12 == NULL )
    {
        Py_DECREF( tmp_args_element_name_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 2591;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2591;
    {
        PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_cond_value_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2591;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 2591;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_assign_source_12 = Py_True;
    {
        PyObject *old = par_unicode;
        assert( old != NULL );
        par_unicode = tmp_assign_source_12;
        Py_INCREF( par_unicode );
        Py_DECREF( old );
    }

    goto branch_end_13;
    branch_no_13:;
    tmp_assign_source_13 = Py_False;
    {
        PyObject *old = par_unicode;
        assert( old != NULL );
        par_unicode = tmp_assign_source_13;
        Py_INCREF( par_unicode );
        Py_DECREF( old );
    }

    branch_end_13:;
    branch_no_12:;
    tmp_cond_value_5 = par_unicode;

    if ( tmp_cond_value_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "unicode" );
        exception_tb = NULL;

        exception_lineno = 2596;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2596;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_assign_source_14 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_assign_source_14 == NULL ))
    {
        tmp_assign_source_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_assign_source_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 2597;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    assert( var_dtype == NULL );
    Py_INCREF( tmp_assign_source_14 );
    var_dtype = tmp_assign_source_14;

    goto branch_end_14;
    branch_no_14:;
    tmp_assign_source_15 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_string_ );

    if (unlikely( tmp_assign_source_15 == NULL ))
    {
        tmp_assign_source_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_string_ );
    }

    if ( tmp_assign_source_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "string_" );
        exception_tb = NULL;

        exception_lineno = 2599;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    assert( var_dtype == NULL );
    Py_INCREF( tmp_assign_source_15 );
    var_dtype = tmp_assign_source_15;

    branch_end_14:;
    tmp_compare_left_6 = par_order;

    CHECK_OBJECT( tmp_compare_left_6 );
    tmp_compare_right_6 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_6 != tmp_compare_right_6 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
    }

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "numpy" );
        exception_tb = NULL;

        exception_lineno = 2602;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_asarray );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2602;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_2 = PyTuple_New( 1 );
    tmp_tuple_element_3 = par_obj;

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2602;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_3 );
    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
    tmp_dict_value_5 = par_order;

    CHECK_OBJECT( tmp_dict_value_5 );
    tmp_dict_key_5 = const_str_plain_order;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2602;
    tmp_assign_source_16 = CALL_FUNCTION( tmp_called_name_10, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2602;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_obj;
        par_obj = tmp_assign_source_16;
        Py_XDECREF( old );
    }

    branch_no_15:;
    tmp_or_left_value_1 = par_copy;

    CHECK_OBJECT( tmp_or_left_value_1 );
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2606;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_compexpr_left_1 = par_itemsize;

    if ( tmp_compexpr_left_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "itemsize" );
        exception_tb = NULL;

        exception_lineno = 2604;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_11 = par_obj;

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2604;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_itemsize );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2604;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_value_2 = RICH_COMPARE_NE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_or_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2604;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    if ( tmp_or_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_2 );

        exception_lineno = 2606;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    Py_DECREF( tmp_or_left_value_2 );
    tmp_operand_name_1 = par_unicode;

    if ( tmp_operand_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "unicode" );
        exception_tb = NULL;

        exception_lineno = 2605;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_value_2 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2605;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2605;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_isinstance_inst_6 = par_obj;

    if ( tmp_isinstance_inst_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2605;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_6 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_isinstance_cls_6 == NULL ))
    {
        tmp_isinstance_cls_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_isinstance_cls_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 2605;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_right_value_2 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_6, tmp_isinstance_cls_6 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2605;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_value_3 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_or_left_value_3 = tmp_and_left_value_2;
    and_end_2:;
    tmp_or_left_truth_3 = CHECK_IF_TRUE( tmp_or_left_value_3 );
    if ( tmp_or_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2606;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_3 == 1 )
    {
        goto or_left_3;
    }
    else
    {
        goto or_right_3;
    }
    or_right_3:;
    tmp_and_left_value_3 = par_unicode;

    if ( tmp_and_left_value_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "unicode" );
        exception_tb = NULL;

        exception_lineno = 2606;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    if ( tmp_and_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2606;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    tmp_isinstance_inst_7 = par_obj;

    if ( tmp_isinstance_inst_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2606;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_7 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_string_ );

    if (unlikely( tmp_isinstance_cls_7 == NULL ))
    {
        tmp_isinstance_cls_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_string_ );
    }

    if ( tmp_isinstance_cls_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "string_" );
        exception_tb = NULL;

        exception_lineno = 2606;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_right_value_3 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_7, tmp_isinstance_cls_7 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2606;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_right_value_3 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_or_right_value_3 = tmp_and_left_value_3;
    and_end_3:;
    tmp_or_right_value_2 = tmp_or_right_value_3;
    goto or_end_3;
    or_left_3:;
    tmp_or_right_value_2 = tmp_or_left_value_3;
    or_end_3:;
    Py_INCREF( tmp_or_right_value_2 );
    tmp_or_right_value_1 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_or_right_value_1 = tmp_or_left_value_2;
    or_end_2:;
    tmp_cond_value_6 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    Py_INCREF( tmp_or_left_value_1 );
    tmp_cond_value_6 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 2606;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_source_name_12 = par_obj;

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2607;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_astype );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2607;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_13 = PyTuple_New( 2 );
    tmp_tuple_element_4 = var_dtype;

    CHECK_OBJECT( tmp_tuple_element_4 );
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_element_name_13, 0, tmp_tuple_element_4 );
    tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_long );

    if (unlikely( tmp_called_name_12 == NULL ))
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_long );
    }

    if ( tmp_called_name_12 == NULL )
    {
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "long" );
        exception_tb = NULL;

        exception_lineno = 2607;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_14 = par_itemsize;

    if ( tmp_args_element_name_14 == NULL )
    {
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_13 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "itemsize" );
        exception_tb = NULL;

        exception_lineno = 2607;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2607;
    {
        PyObject *call_args[] = { tmp_args_element_name_14 };
        tmp_tuple_element_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 2607;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_13, 1, tmp_tuple_element_4 );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2607;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2607;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_obj;
        par_obj = tmp_assign_source_17;
        Py_XDECREF( old );
    }

    branch_no_16:;
    tmp_return_value = par_obj;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2608;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_8:;
    tmp_isinstance_inst_8 = par_obj;

    CHECK_OBJECT( tmp_isinstance_inst_8 );
    tmp_isinstance_cls_8 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ndarray );

    if (unlikely( tmp_isinstance_cls_8 == NULL ))
    {
        tmp_isinstance_cls_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ndarray );
    }

    if ( tmp_isinstance_cls_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ndarray" );
        exception_tb = NULL;

        exception_lineno = 2610;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_value_4 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_8, tmp_isinstance_cls_8 );
    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2610;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    if ( tmp_and_left_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2610;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    tmp_called_name_13 = LOOKUP_BUILTIN( const_str_plain_issubclass );
    assert( tmp_called_name_13 != NULL );
    tmp_source_name_14 = par_obj;

    CHECK_OBJECT( tmp_source_name_14 );
    tmp_source_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_dtype );
    if ( tmp_source_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2610;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_type );
    Py_DECREF( tmp_source_name_13 );
    if ( tmp_args_element_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2610;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_16 = (PyObject *)&PyBaseObject_Type;
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2610;
    {
        PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16 };
        tmp_and_right_value_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_13, call_args );
    }

    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2610;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_7 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    Py_INCREF( tmp_and_left_value_4 );
    tmp_cond_value_7 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 2610;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_compare_left_7 = par_itemsize;

    CHECK_OBJECT( tmp_compare_left_7 );
    tmp_compare_right_7 = Py_None;
    tmp_is_5 = ( tmp_compare_left_7 == tmp_compare_right_7 );
    if ( tmp_is_5 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_called_instance_3 = par_obj;

    CHECK_OBJECT( tmp_called_instance_3 );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2615;
    tmp_assign_source_18 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_tolist );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2615;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_obj;
        assert( old != NULL );
        par_obj = tmp_assign_source_18;
        Py_DECREF( old );
    }

    branch_no_18:;
    branch_no_17:;
    tmp_cond_value_8 = par_unicode;

    CHECK_OBJECT( tmp_cond_value_8 );
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2618;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_assign_source_19 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_ );

    if (unlikely( tmp_assign_source_19 == NULL ))
    {
        tmp_assign_source_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode_ );
    }

    if ( tmp_assign_source_19 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "unicode_" );
        exception_tb = NULL;

        exception_lineno = 2619;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    assert( var_dtype == NULL );
    Py_INCREF( tmp_assign_source_19 );
    var_dtype = tmp_assign_source_19;

    goto branch_end_19;
    branch_no_19:;
    tmp_assign_source_20 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_string_ );

    if (unlikely( tmp_assign_source_20 == NULL ))
    {
        tmp_assign_source_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_string_ );
    }

    if ( tmp_assign_source_20 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "string_" );
        exception_tb = NULL;

        exception_lineno = 2621;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    assert( var_dtype == NULL );
    Py_INCREF( tmp_assign_source_20 );
    var_dtype = tmp_assign_source_20;

    branch_end_19:;
    tmp_compare_left_8 = par_itemsize;

    CHECK_OBJECT( tmp_compare_left_8 );
    tmp_compare_right_8 = Py_None;
    tmp_is_6 = ( tmp_compare_left_8 == tmp_compare_right_8 );
    if ( tmp_is_6 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_narray );

    if (unlikely( tmp_called_name_14 == NULL ))
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_narray );
    }

    if ( tmp_called_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "narray" );
        exception_tb = NULL;

        exception_lineno = 2624;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_name_3 = PyTuple_New( 1 );
    tmp_tuple_element_5 = par_obj;

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_args_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2624;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_5 );
    tmp_kw_name_3 = _PyDict_NewPresized( 3 );
    tmp_dict_value_6 = var_dtype;

    CHECK_OBJECT( tmp_dict_value_6 );
    tmp_dict_key_6 = const_str_plain_dtype;
    tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_7 = par_order;

    CHECK_OBJECT( tmp_dict_value_7 );
    tmp_dict_key_7 = const_str_plain_order;
    tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_8 = Py_True;
    tmp_dict_key_8 = const_str_plain_subok;
    tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_8, tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2624;
    tmp_assign_source_21 = CALL_FUNCTION( tmp_called_name_14, tmp_args_name_3, tmp_kw_name_3 );
    Py_DECREF( tmp_args_name_3 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2624;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_val == NULL );
    var_val = tmp_assign_source_21;

    goto branch_end_20;
    branch_no_20:;
    tmp_called_name_15 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_narray );

    if (unlikely( tmp_called_name_15 == NULL ))
    {
        tmp_called_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_narray );
    }

    if ( tmp_called_name_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "narray" );
        exception_tb = NULL;

        exception_lineno = 2626;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_name_4 = PyTuple_New( 1 );
    tmp_tuple_element_6 = par_obj;

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_args_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;

        exception_lineno = 2626;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_name_4, 0, tmp_tuple_element_6 );
    tmp_kw_name_4 = _PyDict_NewPresized( 3 );
    tmp_dict_value_9 = PyTuple_New( 2 );
    tmp_tuple_element_7 = var_dtype;

    CHECK_OBJECT( tmp_tuple_element_7 );
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_dict_value_9, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = par_itemsize;

    CHECK_OBJECT( tmp_tuple_element_7 );
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_dict_value_9, 1, tmp_tuple_element_7 );
    tmp_dict_key_9 = const_str_plain_dtype;
    tmp_res = PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_9, tmp_dict_value_9 );
    Py_DECREF( tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_10 = par_order;

    CHECK_OBJECT( tmp_dict_value_10 );
    tmp_dict_key_10 = const_str_plain_order;
    tmp_res = PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_10, tmp_dict_value_10 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_11 = Py_True;
    tmp_dict_key_11 = const_str_plain_subok;
    tmp_res = PyDict_SetItem( tmp_kw_name_4, tmp_dict_key_11, tmp_dict_value_11 );
    assert( !(tmp_res != 0) );
    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2626;
    tmp_assign_source_22 = CALL_FUNCTION( tmp_called_name_15, tmp_args_name_4, tmp_kw_name_4 );
    Py_DECREF( tmp_args_name_4 );
    Py_DECREF( tmp_kw_name_4 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2626;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_val == NULL );
    var_val = tmp_assign_source_22;

    branch_end_20:;
    tmp_source_name_15 = var_val;

    CHECK_OBJECT( tmp_source_name_15 );
    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_view );
    if ( tmp_called_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2627;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_17 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_chararray );

    if (unlikely( tmp_args_element_name_17 == NULL ))
    {
        tmp_args_element_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_chararray );
    }

    if ( tmp_args_element_name_17 == NULL )
    {
        Py_DECREF( tmp_called_name_16 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "chararray" );
        exception_tb = NULL;

        exception_lineno = 2627;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }

    frame_d5fc4ec52582057fc26f94265f9704c9->m_frame.f_lineno = 2627;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
    }

    Py_DECREF( tmp_called_name_16 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2627;
        type_description_1 = "oooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5fc4ec52582057fc26f94265f9704c9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5fc4ec52582057fc26f94265f9704c9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5fc4ec52582057fc26f94265f9704c9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d5fc4ec52582057fc26f94265f9704c9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d5fc4ec52582057fc26f94265f9704c9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d5fc4ec52582057fc26f94265f9704c9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d5fc4ec52582057fc26f94265f9704c9,
        type_description_1,
        par_obj,
        par_itemsize,
        par_copy,
        par_unicode,
        par_order,
        var_shape,
        var_dtype,
        var_val
    );


    // Release cached frame.
    if ( frame_d5fc4ec52582057fc26f94265f9704c9 == cache_frame_d5fc4ec52582057fc26f94265f9704c9 )
    {
        Py_DECREF( frame_d5fc4ec52582057fc26f94265f9704c9 );
    }
    cache_frame_d5fc4ec52582057fc26f94265f9704c9 = NULL;

    assertFrameObject( frame_d5fc4ec52582057fc26f94265f9704c9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_109_array );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_obj );
    par_obj = NULL;

    Py_XDECREF( par_itemsize );
    par_itemsize = NULL;

    CHECK_OBJECT( (PyObject *)par_copy );
    Py_DECREF( par_copy );
    par_copy = NULL;

    Py_XDECREF( par_unicode );
    par_unicode = NULL;

    CHECK_OBJECT( (PyObject *)par_order );
    Py_DECREF( par_order );
    par_order = NULL;

    Py_XDECREF( var_shape );
    var_shape = NULL;

    Py_XDECREF( var_dtype );
    var_dtype = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_obj );
    par_obj = NULL;

    Py_XDECREF( par_itemsize );
    par_itemsize = NULL;

    CHECK_OBJECT( (PyObject *)par_copy );
    Py_DECREF( par_copy );
    par_copy = NULL;

    Py_XDECREF( par_unicode );
    par_unicode = NULL;

    CHECK_OBJECT( (PyObject *)par_order );
    Py_DECREF( par_order );
    par_order = NULL;

    Py_XDECREF( var_shape );
    var_shape = NULL;

    Py_XDECREF( var_dtype );
    var_dtype = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_109_array );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_numpy$core$defchararray$$$function_110_asarray( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_obj = python_pars[ 0 ];
    PyObject *par_itemsize = python_pars[ 1 ];
    PyObject *par_unicode = python_pars[ 2 ];
    PyObject *par_order = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_c7d301a4af431c6d3f1b36270c95795a = NULL;

    struct Nuitka_FrameObject *frame_c7d301a4af431c6d3f1b36270c95795a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c7d301a4af431c6d3f1b36270c95795a, codeobj_c7d301a4af431c6d3f1b36270c95795a, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_c7d301a4af431c6d3f1b36270c95795a = cache_frame_c7d301a4af431c6d3f1b36270c95795a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c7d301a4af431c6d3f1b36270c95795a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c7d301a4af431c6d3f1b36270c95795a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_array );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_array );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "array" );
        exception_tb = NULL;

        exception_lineno = 2678;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_obj;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = par_itemsize;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 3 );
    tmp_dict_value_1 = Py_False;
    tmp_dict_key_1 = const_str_plain_copy;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = par_unicode;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain_unicode;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_3 = par_order;

    CHECK_OBJECT( tmp_dict_value_3 );
    tmp_dict_key_3 = const_str_plain_order;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    frame_c7d301a4af431c6d3f1b36270c95795a->m_frame.f_lineno = 2678;
    tmp_return_value = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2678;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c7d301a4af431c6d3f1b36270c95795a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c7d301a4af431c6d3f1b36270c95795a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c7d301a4af431c6d3f1b36270c95795a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c7d301a4af431c6d3f1b36270c95795a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c7d301a4af431c6d3f1b36270c95795a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c7d301a4af431c6d3f1b36270c95795a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c7d301a4af431c6d3f1b36270c95795a,
        type_description_1,
        par_obj,
        par_itemsize,
        par_unicode,
        par_order
    );


    // Release cached frame.
    if ( frame_c7d301a4af431c6d3f1b36270c95795a == cache_frame_c7d301a4af431c6d3f1b36270c95795a )
    {
        Py_DECREF( frame_c7d301a4af431c6d3f1b36270c95795a );
    }
    cache_frame_c7d301a4af431c6d3f1b36270c95795a = NULL;

    assertFrameObject( frame_c7d301a4af431c6d3f1b36270c95795a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_110_asarray );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    CHECK_OBJECT( (PyObject *)par_itemsize );
    Py_DECREF( par_itemsize );
    par_itemsize = NULL;

    CHECK_OBJECT( (PyObject *)par_unicode );
    Py_DECREF( par_unicode );
    par_unicode = NULL;

    CHECK_OBJECT( (PyObject *)par_order );
    Py_DECREF( par_order );
    par_order = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    CHECK_OBJECT( (PyObject *)par_itemsize );
    Py_DECREF( par_itemsize );
    par_itemsize = NULL;

    CHECK_OBJECT( (PyObject *)par_unicode );
    Py_DECREF( par_unicode );
    par_unicode = NULL;

    CHECK_OBJECT( (PyObject *)par_order );
    Py_DECREF( par_order );
    par_order = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray$$$function_110_asarray );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_100_startswith( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_100_startswith,
        const_str_plain_startswith,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0220ac5545ae11b2be02eadc492d3787,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_e8604e2c91fef4e251aa00b1bbd1c72c,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_101_strip( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_101_strip,
        const_str_plain_strip,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5284241698763c6ec090a47a6bf7e174,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_5c3af0d5a8e1b958c52cabd57c02af58,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_102_swapcase(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_102_swapcase,
        const_str_plain_swapcase,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9c0b3de3cdff3e1e82ebd2a45dd1a148,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_ac2cb96401e4f8223e7ec873c26c0a53,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_103_title(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_103_title,
        const_str_plain_title,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fb50cb70987423fb24ab028fff37a8ec,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_6af79caaca7254737a21b812370d540e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_104_translate( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_104_translate,
        const_str_plain_translate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d49a57bbf3a7bddb8cc1aeb12aa4f9a6,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_402dafb8652990c3e86f3f5f2231444b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_105_upper(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_105_upper,
        const_str_plain_upper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4a0e56a9b171c76c9e491cb1aadecaab,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_3a1b0c0ed61ae6c14954396ac72a23ba,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_106_zfill(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_106_zfill,
        const_str_plain_zfill,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_465520d6587c2be356aa7de9b6a29342,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_407032a58199a71589a95abccc19c001,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_107_isnumeric(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_107_isnumeric,
        const_str_plain_isnumeric,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_beadcf5e57018246f301aeb943e8a0b5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_d3a12212d5fa80f932a9ca89b20b1656,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_108_isdecimal(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_108_isdecimal,
        const_str_plain_isdecimal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c74e4a912fe6802773715d4551429507,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_3289aefeb1e46bff17ff2d10ff6f22b3,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_109_array( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_109_array,
        const_str_plain_array,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d5fc4ec52582057fc26f94265f9704c9,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_48cd9f4fe69db5e47bee578d876a3ce1,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_10_less(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_10_less,
        const_str_plain_less,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8d6d8c365abd2c16ac024728332f1e8c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_ff2cf54b495716821a5fbe07d44a5d63,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_110_asarray( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_110_asarray,
        const_str_plain_asarray,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c7d301a4af431c6d3f1b36270c95795a,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_20409f4d1b21d63adec44895ab020a67,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_11_str_len(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_11_str_len,
        const_str_plain_str_len,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8a282e2ea2d7fd9b44a9e69a7b5399e0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_0b427137de2178b66aa5df5a9ad5360e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_12_add(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_12_add,
        const_str_plain_add,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6023ff2c9d00d178df7e17c829cb08b2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_d73dd53e1a6282b2c8ba36b78aabf2f8,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_13_multiply(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_13_multiply,
        const_str_plain_multiply,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fdd005b3f8a7bd8c4037ef32f73a00f2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_fe502ff73f093b0097d0fd7194d05bdc,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_14_mod(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_14_mod,
        const_str_plain_mod,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_053886896c8be5490a1953eb20b44505,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_ff7d70dea987435520cfa46a01164736,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_15_capitalize(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_15_capitalize,
        const_str_plain_capitalize,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4e60b225f279257d5201da57dae5c27c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_8510ce82a61894dda614b077424f1c03,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_16_center( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_16_center,
        const_str_plain_center,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_82915ffb8cc23f090e41c3e7ce523fdb,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_d012651e0317365e959276935d450227,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_17_count( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_17_count,
        const_str_plain_count,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4a12094d77e46b0245aa74ffdf98ad29,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_1ea3df1363a47009ecddae9da26b5b9d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_18_decode( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_18_decode,
        const_str_plain_decode,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_28851acbd132ef03bca5d0de27db3244,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_166450b7aaeed3e1449ea7d0d219e082,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_19_encode( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_19_encode,
        const_str_plain_encode,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_588064e3a7be0dcd8519d813292f6995,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_1cbaac8f0091050f5ef63753f284202e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_1__use_unicode(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_1__use_unicode,
        const_str_plain__use_unicode,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_64922c851ec33ba7f840283582a5034b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_77dbf846f87dcbf6ed0c5f6020628507,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_20_endswith( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_20_endswith,
        const_str_plain_endswith,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_499280535e79e0de38c6d6803da02d0b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_b5e859ad63fb04fe89c31ec88642fe25,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_21_expandtabs( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_21_expandtabs,
        const_str_plain_expandtabs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6fe73b3fe2f8f84f354e24ac81a03f85,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_7b8d41440bc9fec644ed7b4bfdec0e2d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_22_find( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_22_find,
        const_str_plain_find,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_88e0f8f43136d7979decf04e4c999b27,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_3269842792070eceda2611a70de2c467,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_23_index( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_23_index,
        const_str_plain_index,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_30d4ccf81c35f1488e7ccd275079f794,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_a0e6581003ea295aece7cf0626572e38,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_24_isalnum(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_24_isalnum,
        const_str_plain_isalnum,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e0fe49472ffe0143c5b58fdd3dbf0414,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_01c8bea278c39e677484d0771ddce9af,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_25_isalpha(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_25_isalpha,
        const_str_plain_isalpha,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_33e5bbf7b23584dd76e269a4abc2ffae,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_d1a8fbd5951f097d7b5e23a9ce6f2e38,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_26_isdigit(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_26_isdigit,
        const_str_plain_isdigit,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3577fc4023390a81aa4eff2a58433ed5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_82790523a655292122ed96170eaac455,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_27_islower(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_27_islower,
        const_str_plain_islower,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_adeed44f735add38605bab572a71d063,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_564fa9aa65a17e01056893ccc9a72ac5,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_28_isspace(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_28_isspace,
        const_str_plain_isspace,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ddb064337cc3a965e3b69a6ea5b851c7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_0ed53d43c6f55caf5ff417ee969149e6,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_29_istitle(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_29_istitle,
        const_str_plain_istitle,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8eac18f632e8e14a5437dc0a7a03a1b6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_0efc402f724c6562070106da0759b49e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_2__to_string_or_unicode_array(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_2__to_string_or_unicode_array,
        const_str_plain__to_string_or_unicode_array,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_891591b6adb252391d9cd4f2d0074064,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_af5f3cc1ce60bcb35f35ba4b06e53e3c,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_30_isupper(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_30_isupper,
        const_str_plain_isupper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_637036ff19bcab39432111ea43ddfbc3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_c6291081ede3628eae8b561e3aa22d02,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_31_join(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_31_join,
        const_str_plain_join,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_365ab4b3be9dfc5d97040071c47d4bce,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_0b812166a1767359e46490bf0e9262cd,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_32_ljust( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_32_ljust,
        const_str_plain_ljust,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5e64cb2ec01dab57518ea6d6f92f8fcd,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_771db41ca94e6f1ea410a065e80903b0,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_33_lower(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_33_lower,
        const_str_plain_lower,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_694d2203ed8fa6e6dccfbba5f077e0e1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_669a3d36bb2d15388a6de410aab16c70,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_34_lstrip( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_34_lstrip,
        const_str_plain_lstrip,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3d386d9af9641b5c81db0327962c2ec9,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_68745b0e72d4cfd6a2910c4926bb4753,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_35_partition(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_35_partition,
        const_str_plain_partition,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c493b0b68f8b70f3627e36844027d783,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_40d317e05fcf700cc50781bbb3778576,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_36_replace( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_36_replace,
        const_str_plain_replace,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e0555e0e1ddabfd6d9df168c6e2c8763,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_1660bc17621154cff83c4b5b159ff78e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_37_rfind( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_37_rfind,
        const_str_plain_rfind,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bcd40bd792ee2e41d66e4c54d40bd52e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_27493340c1f269a1654bddf864a966df,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_38_rindex( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_38_rindex,
        const_str_plain_rindex,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bffd6034ddf21eabb1869abc674519b6,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_9aabf23e6cdfbaaa53cce6a8a354a57e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_39_rjust( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_39_rjust,
        const_str_plain_rjust,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_404ee8dc1f02878c01ed4adc97ade7b1,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_f34b7924920f137cb73c541bccd59d9e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_3__clean_args(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_3__clean_args,
        const_str_plain__clean_args,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_aef90ad19239083f1e0e5c2ada83d9ab,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_8521bce6d515eb30d285d8425ec0464b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_40_rpartition(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_40_rpartition,
        const_str_plain_rpartition,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5b75276146c4260a652059461937a08b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_8a55f70ff88c306b6733977d716cf867,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_41_rsplit( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_41_rsplit,
        const_str_plain_rsplit,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d26bd3cf9e512fbf422f4610b79f09b3,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_5eef8220b28eedd6ef54e0fccc930225,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_42_rstrip( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_42_rstrip,
        const_str_plain_rstrip,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_423c1e0595b4ad94043eb23c3ecf9ed4,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_31dc6a288c0d4a4e7b2aec82225ac633,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_43_split( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_43_split,
        const_str_plain_split,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0d4838be6d467b6a234a6112fb67ce70,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_1a3e79c74aa19ef7b4ae553d0015f69b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_44_splitlines( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_44_splitlines,
        const_str_plain_splitlines,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9668953ae50b0b755273b9db8a84d4cf,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_a186b542d1544119c6bf394d570c4cc9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_45_startswith( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_45_startswith,
        const_str_plain_startswith,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_44b8d7e087a364c55d7746dcae95b39b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_9995e845f48eeba9d2fb71e5b560ab77,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_46_strip( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_46_strip,
        const_str_plain_strip,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_95fd8319b5a538d898c475ee4ae67aee,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_45e55f7ec5f130d0205a09e6d808ad1f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_47_swapcase(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_47_swapcase,
        const_str_plain_swapcase,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5693c0907afdc65b955814b62aa42e89,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_1b57ba42cb2c7e3f89f6d65425840a19,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_48_title(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_48_title,
        const_str_plain_title,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_93e3ce98d20b6216dc9532150c84f84a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_34665efa5bc130b23d97cf4475f926ec,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_49_translate( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_49_translate,
        const_str_plain_translate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9f34a63a280259c577f6484a1d87048a,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_ee566550407ac0b309e45bcfe9af28d1,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_4__get_num_chars(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_4__get_num_chars,
        const_str_plain__get_num_chars,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9f326743c7b38e0dac7eda79a5fb5220,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_0109c0829411c3b4b003a0403894c15e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_50_upper(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_50_upper,
        const_str_plain_upper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_848f92def2c6b3a6dc8e1eb3a065acdc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_da05527f9d5c7354019c3798f1a6a21c,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_51_zfill(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_51_zfill,
        const_str_plain_zfill,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_cbf724c45ff30f9dd8ccb28b307825ee,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_31f0660a9923d86045b29d08da811f11,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_52_isnumeric(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_52_isnumeric,
        const_str_plain_isnumeric,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bc3700ed0ff25e17c78f6812b46a1a55,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_be4dc9f635f0fab9b717c832a2782f99,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_53_isdecimal(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_53_isdecimal,
        const_str_plain_isdecimal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_40775d40770d1c61759195a5097b5f63,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_d64bb34d36fc1221935b64697c3efb1a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_54___new__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_54___new__,
        const_str_plain___new__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_25dae428e2315d2543638fd560bc6019,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_55___array_finalize__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_55___array_finalize__,
        const_str_plain___array_finalize__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bda0219e7285bf31e37d43f1e90536db,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_56___getitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_56___getitem__,
        const_str_plain___getitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c0a69ffdf5ce79add418a0c03300670a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_57___eq__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_57___eq__,
        const_str_plain___eq__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_20d0a8878f014db189b88ee053662d0d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_35146008002b011fcbcff42d0aacc4f3,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_58___ne__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_58___ne__,
        const_str_plain___ne__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4753bc977a57cb311c7c1807611ea60b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_18a90f3ec57ce65c30fee1abaa129783,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_59___ge__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_59___ge__,
        const_str_plain___ge__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5e13668a626a54c131f2447b766b1118,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_c2e1433d5cd52b123171db4613a50562,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_5_equal(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_5_equal,
        const_str_plain_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_483dc6ad41367c020fd5ad6c5a95801e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_b6d6bb22a164c3a643d1b4c41154ad1d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_60___le__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_60___le__,
        const_str_plain___le__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d320c62af8b20d6ff18fbff8b5a3eaec,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_ddacf7199b10a54bd8a6e4839404b560,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_61___gt__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_61___gt__,
        const_str_plain___gt__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_45ef090305b99884415fa07d407849b9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_5d23d111c507bcd3f3ad472825ffdb2d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_62___lt__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_62___lt__,
        const_str_plain___lt__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f4cc993b938c0b7b72ca23ebe3807d3a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_0f3615246f6268254fc342fe93c15124,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_63___add__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_63___add__,
        const_str_plain___add__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8bc8671318c3e8989fd49a83a4043e3a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_bf1a718b48ab74200a93a085eed2aa7b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_64___radd__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_64___radd__,
        const_str_plain___radd__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_37091ca58ae6294a8a6cccb443f967b4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_fccf63ccb9c4c444f4ae8ad7ea53e3c3,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_65___mul__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_65___mul__,
        const_str_plain___mul__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_66cd3ddfbe20b66729d1ba150aaabf3c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_0fd92dba6d696db84e85b6712be8c51c,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_66___rmul__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_66___rmul__,
        const_str_plain___rmul__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7fb7e8527695449f6de27c712df761f6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_0fd92dba6d696db84e85b6712be8c51c,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_67___mod__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_67___mod__,
        const_str_plain___mod__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2427f0df1a99ee54052d98522a28ade7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_932904e8b8f191665952523663b31823,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_68___rmod__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_68___rmod__,
        const_str_plain___rmod__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e9a9a11c880fb9a95ef87a375624c8ae,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_69_argsort( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_69_argsort,
        const_str_plain_argsort,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f02cfc4e0202eba5cb46a13022dda3ce,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_13a3d281e8ff695dfc1265ae7a401e42,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_6_not_equal(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_6_not_equal,
        const_str_plain_not_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6d8e00b68557c53182dbc320ad8510ba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_10e1ae4f452855d1730a4c791fc7c4a9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_70_capitalize(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_70_capitalize,
        const_str_plain_capitalize,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_543d5953ba54135ed4fa712de1ff9905,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_27f654082810eb666260649805133d75,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_71_center( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_71_center,
        const_str_plain_center,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5d45817cc62062fd3ad531eef011b11d,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_c6559b7101568cfc54038b280a964a69,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_72_count( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_72_count,
        const_str_plain_count,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_97ea5dfb81ca0967a6f5ed3f4d101cbb,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_dfb78de7c946c46d1803aff4e8d69ee7,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_73_decode( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_73_decode,
        const_str_plain_decode,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e7e8f9e5c59869d0ab8a9b0c8ebe52e4,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_5eb0425a464ed8a2a9065933de402e8b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_74_encode( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_74_encode,
        const_str_plain_encode,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_104a62994edb93f0d06a56f0871a742b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_6579a68a1d639c52e7586ab3d39caf7e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_75_endswith( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_75_endswith,
        const_str_plain_endswith,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0d30f15cc026a899b931a0d57179712a,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_313b2fc9a8dbd2e0429362347b1b0b0a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_76_expandtabs( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_76_expandtabs,
        const_str_plain_expandtabs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_caac05b022afd18238cd38826ed6a2c1,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_ce6e7791833d63412553bd63afe3b68a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_77_find( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_77_find,
        const_str_plain_find,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0871a0020464419ae8b946a41de7898c,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_860001e6dde8a3df67b917047395594f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_78_index( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_78_index,
        const_str_plain_index,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e1a3fb523f8c337d7116eb81109c2049,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_ea87c37d5d9f29b85383fe507438082b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_79_isalnum(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_79_isalnum,
        const_str_plain_isalnum,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6994a26c43346cc9dd240ad9437bc86b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_120767f4a935a1531601d197d1737bf5,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_7_greater_equal(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_7_greater_equal,
        const_str_plain_greater_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_66fb799fc3f51a21c78c3b13b0b353f3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_4f9e3534f82f4d696fcbb87af335efd9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_80_isalpha(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_80_isalpha,
        const_str_plain_isalpha,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_741cb7608c756f759e751a414255e2eb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_4341a35a56eeab0b9477e620f04aa452,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_81_isdigit(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_81_isdigit,
        const_str_plain_isdigit,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c0017a4efffe109afd364d75388dbf86,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_866313d66dea37b2e1a4c34e0ecc35f7,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_82_islower(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_82_islower,
        const_str_plain_islower,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e6d1c5649234c28bb760d91df8840c44,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_94099384fade5787f5d909b7d86c447f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_83_isspace(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_83_isspace,
        const_str_plain_isspace,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f5d9b1ad3c36acd0ebc11aa2666d45f5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_db9f783c5770e04bd216384b187bee51,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_84_istitle(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_84_istitle,
        const_str_plain_istitle,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3015e538c1d7d423270b75f9dc03ded5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_3fa40698fa6a6f051f625e2c2267861d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_85_isupper(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_85_isupper,
        const_str_plain_isupper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_897a16cf34fb0033047f914b606ea635,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_bfe91af571aeeb0d4790c1cdf89f61ad,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_86_join(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_86_join,
        const_str_plain_join,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4224454610916188eafe4f5e79b58080,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_89b68cae8e406047e4189d31c89ee40e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_87_ljust( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_87_ljust,
        const_str_plain_ljust,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a33a371a5c7cce89c3c05c68bcfd008c,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_f4a6849e556660b5efeac92d5392f237,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_88_lower(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_88_lower,
        const_str_plain_lower,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5a2a1c32e5d2c6de6354d66048ea1609,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_f381d04127027c5c531e71b761e287b4,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_89_lstrip( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_89_lstrip,
        const_str_plain_lstrip,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_017c7b87a7e7ce81cb5ee90076c85b49,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_06d026467411edebb0ee7ea28f9a5216,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_8_less_equal(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_8_less_equal,
        const_str_plain_less_equal,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_72444349480dc98d3a7d0201ecc81973,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_c8898c6da55c00b3c87ca2091a9df6b4,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_90_partition(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_90_partition,
        const_str_plain_partition,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8a447f71fb09204701238ffe8b83a234,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_ed597c0c0dc1af08d05b24404e8edbee,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_91_replace( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_91_replace,
        const_str_plain_replace,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ef1dfe6672a95b9b92d91227adb1536b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_c754d1f17e66e1ac194aaf4d979da935,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_92_rfind( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_92_rfind,
        const_str_plain_rfind,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_60745dc77ca2193582f31aff43d635d8,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_bdfe461b26b9f24bffd00ff8bfe2e36b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_93_rindex( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_93_rindex,
        const_str_plain_rindex,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_618f403d0495af6f4868b03c97179f61,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_520a6033be9967222d1db657312d51b3,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_94_rjust( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_94_rjust,
        const_str_plain_rjust,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_912b1fbc0b5de9c6d0ee7e7209ec7eba,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_74e5597ad0b09fcbe56c7d593efefeae,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_95_rpartition(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_95_rpartition,
        const_str_plain_rpartition,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6a889823890a0accecaf46020b433d3c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_59d16de3818bb11ef313375a43d6cb26,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_96_rsplit( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_96_rsplit,
        const_str_plain_rsplit,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ed77619f7e9393d02f500e9957f60750,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_a5a29403df10201d5a15acf254142f51,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_97_rstrip( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_97_rstrip,
        const_str_plain_rstrip,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f7141c9ab5a4fa7fe787dcbd7418a753,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_b0bc7306e41c75e3d731d556d1adf767,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_98_split( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_98_split,
        const_str_plain_split,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c85b09eda9b23a3c6d3f4166ad2bd603,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_0b67f0d361a6beaf6a5ab909ea0038c0,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_99_splitlines( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_99_splitlines,
        const_str_plain_splitlines,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d42a129d212d4614eab0b37513fc4b5a,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_eedf17debea1eff4671fe2e9c404b399,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numpy$core$defchararray$$$function_9_greater(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numpy$core$defchararray$$$function_9_greater,
        const_str_plain_greater,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f9f994554fa5bbcb468c1526eace8370,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_numpy$core$defchararray,
        const_str_digest_8de4f2b16d5ed5253b454e343eaf00b9,
        0
    );


    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_numpy$core$defchararray =
{
    PyModuleDef_HEAD_INIT,
    "numpy.core.defchararray",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#if PYTHON_VERSION >= 300
extern PyObject *metapath_based_loader;
#endif
#if PYTHON_VERSION >= 330
extern PyObject *const_str_plain___loader__;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( numpy$core$defchararray )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_numpy$core$defchararray );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("numpy.core.defchararray: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("numpy.core.defchararray: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initnumpy$core$defchararray" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_numpy$core$defchararray = Py_InitModule4(
        "numpy.core.defchararray",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_numpy$core$defchararray = PyModule_Create( &mdef_numpy$core$defchararray );
#endif

    moduledict_numpy$core$defchararray = MODULE_DICT( module_numpy$core$defchararray );

    CHECK_OBJECT( module_numpy$core$defchararray );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_28967138fa1cdbae9c3af9308a03d7af, module_numpy$core$defchararray );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 330
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain___loader__, metapath_based_loader );
#endif

    // Temp variables if any
    PyObject *outline_0_var___module__ = NULL;
    PyObject *outline_0_var___doc__ = NULL;
    PyObject *outline_0_var___new__ = NULL;
    PyObject *outline_0_var___array_finalize__ = NULL;
    PyObject *outline_0_var___getitem__ = NULL;
    PyObject *outline_0_var___eq__ = NULL;
    PyObject *outline_0_var___ne__ = NULL;
    PyObject *outline_0_var___ge__ = NULL;
    PyObject *outline_0_var___le__ = NULL;
    PyObject *outline_0_var___gt__ = NULL;
    PyObject *outline_0_var___lt__ = NULL;
    PyObject *outline_0_var___add__ = NULL;
    PyObject *outline_0_var___radd__ = NULL;
    PyObject *outline_0_var___mul__ = NULL;
    PyObject *outline_0_var___rmul__ = NULL;
    PyObject *outline_0_var___mod__ = NULL;
    PyObject *outline_0_var___rmod__ = NULL;
    PyObject *outline_0_var_argsort = NULL;
    PyObject *outline_0_var_capitalize = NULL;
    PyObject *outline_0_var_center = NULL;
    PyObject *outline_0_var_count = NULL;
    PyObject *outline_0_var_decode = NULL;
    PyObject *outline_0_var_encode = NULL;
    PyObject *outline_0_var_endswith = NULL;
    PyObject *outline_0_var_expandtabs = NULL;
    PyObject *outline_0_var_find = NULL;
    PyObject *outline_0_var_index = NULL;
    PyObject *outline_0_var_isalnum = NULL;
    PyObject *outline_0_var_isalpha = NULL;
    PyObject *outline_0_var_isdigit = NULL;
    PyObject *outline_0_var_islower = NULL;
    PyObject *outline_0_var_isspace = NULL;
    PyObject *outline_0_var_istitle = NULL;
    PyObject *outline_0_var_isupper = NULL;
    PyObject *outline_0_var_join = NULL;
    PyObject *outline_0_var_ljust = NULL;
    PyObject *outline_0_var_lower = NULL;
    PyObject *outline_0_var_lstrip = NULL;
    PyObject *outline_0_var_partition = NULL;
    PyObject *outline_0_var_replace = NULL;
    PyObject *outline_0_var_rfind = NULL;
    PyObject *outline_0_var_rindex = NULL;
    PyObject *outline_0_var_rjust = NULL;
    PyObject *outline_0_var_rpartition = NULL;
    PyObject *outline_0_var_rsplit = NULL;
    PyObject *outline_0_var_rstrip = NULL;
    PyObject *outline_0_var_split = NULL;
    PyObject *outline_0_var_splitlines = NULL;
    PyObject *outline_0_var_startswith = NULL;
    PyObject *outline_0_var_strip = NULL;
    PyObject *outline_0_var_swapcase = NULL;
    PyObject *outline_0_var_title = NULL;
    PyObject *outline_0_var_translate = NULL;
    PyObject *outline_0_var_upper = NULL;
    PyObject *outline_0_var_zfill = NULL;
    PyObject *outline_0_var_isnumeric = NULL;
    PyObject *outline_0_var_isdecimal = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_import_from_2__module = NULL;
    PyObject *tmp_import_from_3__module = NULL;
    PyObject *tmp_import_from_4__module = NULL;
    PyObject *tmp_select_metaclass_1__base = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_called_name_1;
    int tmp_cmp_GtE_1;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_defaults_3;
    PyObject *tmp_defaults_4;
    PyObject *tmp_defaults_5;
    PyObject *tmp_defaults_6;
    PyObject *tmp_defaults_7;
    PyObject *tmp_defaults_8;
    PyObject *tmp_defaults_9;
    PyObject *tmp_defaults_10;
    PyObject *tmp_defaults_11;
    PyObject *tmp_defaults_12;
    PyObject *tmp_defaults_13;
    PyObject *tmp_defaults_14;
    PyObject *tmp_defaults_15;
    PyObject *tmp_defaults_16;
    PyObject *tmp_defaults_17;
    PyObject *tmp_defaults_18;
    PyObject *tmp_defaults_19;
    PyObject *tmp_defaults_20;
    PyObject *tmp_defaults_21;
    PyObject *tmp_defaults_22;
    PyObject *tmp_defaults_23;
    PyObject *tmp_defaults_24;
    PyObject *tmp_defaults_25;
    PyObject *tmp_defaults_26;
    PyObject *tmp_defaults_27;
    PyObject *tmp_defaults_28;
    PyObject *tmp_defaults_29;
    PyObject *tmp_defaults_30;
    PyObject *tmp_defaults_31;
    PyObject *tmp_defaults_32;
    PyObject *tmp_defaults_33;
    PyObject *tmp_defaults_34;
    PyObject *tmp_defaults_35;
    PyObject *tmp_defaults_36;
    PyObject *tmp_defaults_37;
    PyObject *tmp_defaults_38;
    PyObject *tmp_defaults_39;
    PyObject *tmp_defaults_40;
    PyObject *tmp_defaults_41;
    PyObject *tmp_defaults_42;
    PyObject *tmp_defaults_43;
    PyObject *tmp_defaults_44;
    PyObject *tmp_defaults_45;
    PyObject *tmp_defaults_46;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_key_14;
    PyObject *tmp_dict_key_15;
    PyObject *tmp_dict_key_16;
    PyObject *tmp_dict_key_17;
    PyObject *tmp_dict_key_18;
    PyObject *tmp_dict_key_19;
    PyObject *tmp_dict_key_20;
    PyObject *tmp_dict_key_21;
    PyObject *tmp_dict_key_22;
    PyObject *tmp_dict_key_23;
    PyObject *tmp_dict_key_24;
    PyObject *tmp_dict_key_25;
    PyObject *tmp_dict_key_26;
    PyObject *tmp_dict_key_27;
    PyObject *tmp_dict_key_28;
    PyObject *tmp_dict_key_29;
    PyObject *tmp_dict_key_30;
    PyObject *tmp_dict_key_31;
    PyObject *tmp_dict_key_32;
    PyObject *tmp_dict_key_33;
    PyObject *tmp_dict_key_34;
    PyObject *tmp_dict_key_35;
    PyObject *tmp_dict_key_36;
    PyObject *tmp_dict_key_37;
    PyObject *tmp_dict_key_38;
    PyObject *tmp_dict_key_39;
    PyObject *tmp_dict_key_40;
    PyObject *tmp_dict_key_41;
    PyObject *tmp_dict_key_42;
    PyObject *tmp_dict_key_43;
    PyObject *tmp_dict_key_44;
    PyObject *tmp_dict_key_45;
    PyObject *tmp_dict_key_46;
    PyObject *tmp_dict_key_47;
    PyObject *tmp_dict_key_48;
    PyObject *tmp_dict_key_49;
    PyObject *tmp_dict_key_50;
    PyObject *tmp_dict_key_51;
    PyObject *tmp_dict_key_52;
    PyObject *tmp_dict_key_53;
    PyObject *tmp_dict_key_54;
    PyObject *tmp_dict_key_55;
    PyObject *tmp_dict_key_56;
    PyObject *tmp_dict_key_57;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_dict_value_14;
    PyObject *tmp_dict_value_15;
    PyObject *tmp_dict_value_16;
    PyObject *tmp_dict_value_17;
    PyObject *tmp_dict_value_18;
    PyObject *tmp_dict_value_19;
    PyObject *tmp_dict_value_20;
    PyObject *tmp_dict_value_21;
    PyObject *tmp_dict_value_22;
    PyObject *tmp_dict_value_23;
    PyObject *tmp_dict_value_24;
    PyObject *tmp_dict_value_25;
    PyObject *tmp_dict_value_26;
    PyObject *tmp_dict_value_27;
    PyObject *tmp_dict_value_28;
    PyObject *tmp_dict_value_29;
    PyObject *tmp_dict_value_30;
    PyObject *tmp_dict_value_31;
    PyObject *tmp_dict_value_32;
    PyObject *tmp_dict_value_33;
    PyObject *tmp_dict_value_34;
    PyObject *tmp_dict_value_35;
    PyObject *tmp_dict_value_36;
    PyObject *tmp_dict_value_37;
    PyObject *tmp_dict_value_38;
    PyObject *tmp_dict_value_39;
    PyObject *tmp_dict_value_40;
    PyObject *tmp_dict_value_41;
    PyObject *tmp_dict_value_42;
    PyObject *tmp_dict_value_43;
    PyObject *tmp_dict_value_44;
    PyObject *tmp_dict_value_45;
    PyObject *tmp_dict_value_46;
    PyObject *tmp_dict_value_47;
    PyObject *tmp_dict_value_48;
    PyObject *tmp_dict_value_49;
    PyObject *tmp_dict_value_50;
    PyObject *tmp_dict_value_51;
    PyObject *tmp_dict_value_52;
    PyObject *tmp_dict_value_53;
    PyObject *tmp_dict_value_54;
    PyObject *tmp_dict_value_55;
    PyObject *tmp_dict_value_56;
    PyObject *tmp_dict_value_57;
    PyObject *tmp_fromlist_name_1;
    PyObject *tmp_fromlist_name_2;
    PyObject *tmp_fromlist_name_3;
    PyObject *tmp_fromlist_name_4;
    PyObject *tmp_fromlist_name_5;
    PyObject *tmp_fromlist_name_6;
    PyObject *tmp_fromlist_name_7;
    PyObject *tmp_globals_name_1;
    PyObject *tmp_globals_name_2;
    PyObject *tmp_globals_name_3;
    PyObject *tmp_globals_name_4;
    PyObject *tmp_globals_name_5;
    PyObject *tmp_globals_name_6;
    PyObject *tmp_globals_name_7;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_import_name_from_7;
    PyObject *tmp_import_name_from_8;
    PyObject *tmp_import_name_from_9;
    PyObject *tmp_import_name_from_10;
    PyObject *tmp_import_name_from_11;
    PyObject *tmp_import_name_from_12;
    PyObject *tmp_import_name_from_13;
    PyObject *tmp_import_name_from_14;
    PyObject *tmp_import_name_from_15;
    PyObject *tmp_key_name_1;
    PyObject *tmp_level_name_1;
    PyObject *tmp_level_name_2;
    PyObject *tmp_level_name_3;
    PyObject *tmp_level_name_4;
    PyObject *tmp_level_name_5;
    PyObject *tmp_level_name_6;
    PyObject *tmp_level_name_7;
    PyObject *tmp_locals_name_1;
    PyObject *tmp_locals_name_2;
    PyObject *tmp_locals_name_3;
    PyObject *tmp_locals_name_4;
    PyObject *tmp_locals_name_5;
    PyObject *tmp_locals_name_6;
    PyObject *tmp_locals_name_7;
    PyObject *tmp_name_name_1;
    PyObject *tmp_name_name_2;
    PyObject *tmp_name_name_3;
    PyObject *tmp_name_name_4;
    PyObject *tmp_name_name_5;
    PyObject *tmp_name_name_6;
    PyObject *tmp_name_name_7;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_outline_return_value_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_staticmethod_arg_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_type_arg_1;
    static struct Nuitka_FrameObject *cache_frame_576c7c8954aaddcd3581abf50f1c4036_2 = NULL;

    struct Nuitka_FrameObject *frame_576c7c8954aaddcd3581abf50f1c4036_2;

    struct Nuitka_FrameObject *frame_3e0fa734728f3e91ed6b5b4357299490;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    tmp_outline_return_value_1 = NULL;
    tmp_outline_return_value_2 = NULL;

    // Module code.
    tmp_assign_source_1 = const_str_digest_bb0962fef816a978c383a795a3ab79df;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_3d8c57f7219b74162633beae5001d2ea;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    tmp_assign_source_3 = Py_None;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_3 );
    tmp_assign_source_4 = PyImport_ImportModule("__future__");
    assert( tmp_assign_source_4 != NULL );
    assert( tmp_import_from_1__module == NULL );
    Py_INCREF( tmp_assign_source_4 );
    tmp_import_from_1__module = tmp_assign_source_4;

    // Frame without reuse.
    frame_3e0fa734728f3e91ed6b5b4357299490 = MAKE_MODULE_FRAME( codeobj_3e0fa734728f3e91ed6b5b4357299490, module_numpy$core$defchararray );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_3e0fa734728f3e91ed6b5b4357299490 );
    assert( Py_REFCNT( frame_3e0fa734728f3e91ed6b5b4357299490 ) == 2 );

    // Framed code:
    // Tried code:
    tmp_import_name_from_1 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_1 );
    tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_division );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_division, tmp_assign_source_5 );
    tmp_import_name_from_2 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_2 );
    tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_absolute_import );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_absolute_import, tmp_assign_source_6 );
    tmp_import_name_from_3 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_3 );
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_print_function );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_print_function, tmp_assign_source_7 );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    tmp_name_name_1 = const_str_plain_sys;
    tmp_globals_name_1 = (PyObject *)moduledict_numpy$core$defchararray;
    tmp_locals_name_1 = Py_None;
    tmp_fromlist_name_1 = Py_None;
    tmp_level_name_1 = const_int_0;
    frame_3e0fa734728f3e91ed6b5b4357299490->m_frame.f_lineno = 20;
    tmp_assign_source_8 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
    assert( tmp_assign_source_8 != NULL );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_8 );
    tmp_name_name_2 = const_str_plain_numerictypes;
    tmp_globals_name_2 = (PyObject *)moduledict_numpy$core$defchararray;
    tmp_locals_name_2 = Py_None;
    tmp_fromlist_name_2 = const_tuple_ff1096385b6e9ecbb3d8e7346195ef08_tuple;
    tmp_level_name_2 = const_int_pos_1;
    frame_3e0fa734728f3e91ed6b5b4357299490->m_frame.f_lineno = 21;
    tmp_assign_source_9 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;

        goto frame_exception_exit_1;
    }
    assert( tmp_import_from_2__module == NULL );
    tmp_import_from_2__module = tmp_assign_source_9;

    // Tried code:
    tmp_import_name_from_4 = tmp_import_from_2__module;

    CHECK_OBJECT( tmp_import_name_from_4 );
    tmp_assign_source_10 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_string_ );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;

        goto try_except_handler_2;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_string_, tmp_assign_source_10 );
    tmp_import_name_from_5 = tmp_import_from_2__module;

    CHECK_OBJECT( tmp_import_name_from_5 );
    tmp_assign_source_11 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_unicode_ );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;

        goto try_except_handler_2;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_unicode_, tmp_assign_source_11 );
    tmp_import_name_from_6 = tmp_import_from_2__module;

    CHECK_OBJECT( tmp_import_name_from_6 );
    tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_integer );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;

        goto try_except_handler_2;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_integer, tmp_assign_source_12 );
    tmp_import_name_from_7 = tmp_import_from_2__module;

    CHECK_OBJECT( tmp_import_name_from_7 );
    tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_object_ );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;

        goto try_except_handler_2;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_object_, tmp_assign_source_13 );
    tmp_import_name_from_8 = tmp_import_from_2__module;

    CHECK_OBJECT( tmp_import_name_from_8 );
    tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_bool_ );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;

        goto try_except_handler_2;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_bool_, tmp_assign_source_14 );
    tmp_import_name_from_9 = tmp_import_from_2__module;

    CHECK_OBJECT( tmp_import_name_from_9 );
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_character );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 21;

        goto try_except_handler_2;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_character, tmp_assign_source_15 );
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_2__module );
    Py_DECREF( tmp_import_from_2__module );
    tmp_import_from_2__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_2__module );
    Py_DECREF( tmp_import_from_2__module );
    tmp_import_from_2__module = NULL;

    tmp_name_name_3 = const_str_plain_numeric;
    tmp_globals_name_3 = (PyObject *)moduledict_numpy$core$defchararray;
    tmp_locals_name_3 = Py_None;
    tmp_fromlist_name_3 = const_tuple_str_plain_ndarray_str_plain_compare_chararrays_tuple;
    tmp_level_name_3 = const_int_pos_1;
    frame_3e0fa734728f3e91ed6b5b4357299490->m_frame.f_lineno = 22;
    tmp_assign_source_16 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 22;

        goto frame_exception_exit_1;
    }
    assert( tmp_import_from_3__module == NULL );
    tmp_import_from_3__module = tmp_assign_source_16;

    // Tried code:
    tmp_import_name_from_10 = tmp_import_from_3__module;

    CHECK_OBJECT( tmp_import_name_from_10 );
    tmp_assign_source_17 = IMPORT_NAME( tmp_import_name_from_10, const_str_plain_ndarray );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 22;

        goto try_except_handler_3;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ndarray, tmp_assign_source_17 );
    tmp_import_name_from_11 = tmp_import_from_3__module;

    CHECK_OBJECT( tmp_import_name_from_11 );
    tmp_assign_source_18 = IMPORT_NAME( tmp_import_name_from_11, const_str_plain_compare_chararrays );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 22;

        goto try_except_handler_3;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_compare_chararrays, tmp_assign_source_18 );
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_3__module );
    Py_DECREF( tmp_import_from_3__module );
    tmp_import_from_3__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_3__module );
    Py_DECREF( tmp_import_from_3__module );
    tmp_import_from_3__module = NULL;

    tmp_name_name_4 = const_str_plain_numeric;
    tmp_globals_name_4 = (PyObject *)moduledict_numpy$core$defchararray;
    tmp_locals_name_4 = Py_None;
    tmp_fromlist_name_4 = const_tuple_str_plain_array_tuple;
    tmp_level_name_4 = const_int_pos_1;
    frame_3e0fa734728f3e91ed6b5b4357299490->m_frame.f_lineno = 23;
    tmp_import_name_from_12 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
    if ( tmp_import_name_from_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_19 = IMPORT_NAME( tmp_import_name_from_12, const_str_plain_array );
    Py_DECREF( tmp_import_name_from_12 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_narray, tmp_assign_source_19 );
    tmp_name_name_5 = const_str_digest_f104ae7867dfcd3f38891fc4f1b7cd57;
    tmp_globals_name_5 = (PyObject *)moduledict_numpy$core$defchararray;
    tmp_locals_name_5 = Py_None;
    tmp_fromlist_name_5 = const_tuple_str_plain__vec_string_tuple;
    tmp_level_name_5 = const_int_0;
    frame_3e0fa734728f3e91ed6b5b4357299490->m_frame.f_lineno = 24;
    tmp_import_name_from_13 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
    if ( tmp_import_name_from_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 24;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_20 = IMPORT_NAME( tmp_import_name_from_13, const_str_plain__vec_string );
    Py_DECREF( tmp_import_name_from_13 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 24;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__vec_string, tmp_assign_source_20 );
    tmp_name_name_6 = const_str_digest_ff5b71fb1b4d9fcd10c8725add9c701b;
    tmp_globals_name_6 = (PyObject *)moduledict_numpy$core$defchararray;
    tmp_locals_name_6 = Py_None;
    tmp_fromlist_name_6 = const_tuple_str_plain_asbytes_str_plain_long_tuple;
    tmp_level_name_6 = const_int_0;
    frame_3e0fa734728f3e91ed6b5b4357299490->m_frame.f_lineno = 25;
    tmp_assign_source_21 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 25;

        goto frame_exception_exit_1;
    }
    assert( tmp_import_from_4__module == NULL );
    tmp_import_from_4__module = tmp_assign_source_21;

    // Tried code:
    tmp_import_name_from_14 = tmp_import_from_4__module;

    CHECK_OBJECT( tmp_import_name_from_14 );
    tmp_assign_source_22 = IMPORT_NAME( tmp_import_name_from_14, const_str_plain_asbytes );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 25;

        goto try_except_handler_4;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asbytes, tmp_assign_source_22 );
    tmp_import_name_from_15 = tmp_import_from_4__module;

    CHECK_OBJECT( tmp_import_name_from_15 );
    tmp_assign_source_23 = IMPORT_NAME( tmp_import_name_from_15, const_str_plain_long );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 25;

        goto try_except_handler_4;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_long, tmp_assign_source_23 );
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_4__module );
    Py_DECREF( tmp_import_from_4__module );
    tmp_import_from_4__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_4__module );
    Py_DECREF( tmp_import_from_4__module );
    tmp_import_from_4__module = NULL;

    tmp_name_name_7 = const_str_plain_numpy;
    tmp_globals_name_7 = (PyObject *)moduledict_numpy$core$defchararray;
    tmp_locals_name_7 = Py_None;
    tmp_fromlist_name_7 = Py_None;
    tmp_level_name_7 = const_int_0;
    frame_3e0fa734728f3e91ed6b5b4357299490->m_frame.f_lineno = 26;
    tmp_assign_source_24 = IMPORT_MODULE5( tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_7 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_numpy, tmp_assign_source_24 );
    tmp_assign_source_25 = LIST_COPY( const_list_96cf61cd2e2d20d9090d7cb54c76aa45_list );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain___all__, tmp_assign_source_25 );
    tmp_assign_source_26 = const_int_0;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__globalvar, tmp_assign_source_26 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 42;

        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version_info );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;

        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = const_int_0;
    tmp_compare_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 42;

        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_int_pos_3;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 42;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_GtE_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_27 = (PyObject *)&PyString_Type;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__unicode, tmp_assign_source_27 );
    tmp_assign_source_28 = (PyObject *)&PyString_Type;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__bytes, tmp_assign_source_28 );
    goto branch_end_1;
    branch_no_1:;
    tmp_assign_source_29 = (PyObject *)&PyUnicode_Type;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__unicode, tmp_assign_source_29 );
    tmp_assign_source_30 = (PyObject *)&PyString_Type;
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__bytes, tmp_assign_source_30 );
    branch_end_1:;
    tmp_assign_source_31 = LOOKUP_BUILTIN( const_str_plain_len );
    assert( tmp_assign_source_31 != NULL );
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__len, tmp_assign_source_31 );
    tmp_assign_source_32 = MAKE_FUNCTION_numpy$core$defchararray$$$function_1__use_unicode(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__use_unicode, tmp_assign_source_32 );
    tmp_assign_source_33 = MAKE_FUNCTION_numpy$core$defchararray$$$function_2__to_string_or_unicode_array(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__to_string_or_unicode_array, tmp_assign_source_33 );
    tmp_assign_source_34 = MAKE_FUNCTION_numpy$core$defchararray$$$function_3__clean_args(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__clean_args, tmp_assign_source_34 );
    tmp_assign_source_35 = MAKE_FUNCTION_numpy$core$defchararray$$$function_4__get_num_chars(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain__get_num_chars, tmp_assign_source_35 );
    tmp_assign_source_36 = MAKE_FUNCTION_numpy$core$defchararray$$$function_5_equal(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_equal, tmp_assign_source_36 );
    tmp_assign_source_37 = MAKE_FUNCTION_numpy$core$defchararray$$$function_6_not_equal(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_not_equal, tmp_assign_source_37 );
    tmp_assign_source_38 = MAKE_FUNCTION_numpy$core$defchararray$$$function_7_greater_equal(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_greater_equal, tmp_assign_source_38 );
    tmp_assign_source_39 = MAKE_FUNCTION_numpy$core$defchararray$$$function_8_less_equal(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_less_equal, tmp_assign_source_39 );
    tmp_assign_source_40 = MAKE_FUNCTION_numpy$core$defchararray$$$function_9_greater(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_greater, tmp_assign_source_40 );
    tmp_assign_source_41 = MAKE_FUNCTION_numpy$core$defchararray$$$function_10_less(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_less, tmp_assign_source_41 );
    tmp_assign_source_42 = MAKE_FUNCTION_numpy$core$defchararray$$$function_11_str_len(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_str_len, tmp_assign_source_42 );
    tmp_assign_source_43 = MAKE_FUNCTION_numpy$core$defchararray$$$function_12_add(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_add, tmp_assign_source_43 );
    tmp_assign_source_44 = MAKE_FUNCTION_numpy$core$defchararray$$$function_13_multiply(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_multiply, tmp_assign_source_44 );
    tmp_assign_source_45 = MAKE_FUNCTION_numpy$core$defchararray$$$function_14_mod(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_mod, tmp_assign_source_45 );
    tmp_assign_source_46 = MAKE_FUNCTION_numpy$core$defchararray$$$function_15_capitalize(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_capitalize, tmp_assign_source_46 );
    tmp_defaults_1 = const_tuple_str_space_tuple;
    Py_INCREF( tmp_defaults_1 );
    tmp_assign_source_47 = MAKE_FUNCTION_numpy$core$defchararray$$$function_16_center( tmp_defaults_1 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_center, tmp_assign_source_47 );
    tmp_defaults_2 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_2 );
    tmp_assign_source_48 = MAKE_FUNCTION_numpy$core$defchararray$$$function_17_count( tmp_defaults_2 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_count, tmp_assign_source_48 );
    tmp_defaults_3 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_3 );
    tmp_assign_source_49 = MAKE_FUNCTION_numpy$core$defchararray$$$function_18_decode( tmp_defaults_3 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_decode, tmp_assign_source_49 );
    tmp_defaults_4 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_4 );
    tmp_assign_source_50 = MAKE_FUNCTION_numpy$core$defchararray$$$function_19_encode( tmp_defaults_4 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_encode, tmp_assign_source_50 );
    tmp_defaults_5 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_5 );
    tmp_assign_source_51 = MAKE_FUNCTION_numpy$core$defchararray$$$function_20_endswith( tmp_defaults_5 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_endswith, tmp_assign_source_51 );
    tmp_defaults_6 = const_tuple_int_pos_8_tuple;
    Py_INCREF( tmp_defaults_6 );
    tmp_assign_source_52 = MAKE_FUNCTION_numpy$core$defchararray$$$function_21_expandtabs( tmp_defaults_6 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_expandtabs, tmp_assign_source_52 );
    tmp_defaults_7 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_7 );
    tmp_assign_source_53 = MAKE_FUNCTION_numpy$core$defchararray$$$function_22_find( tmp_defaults_7 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_find, tmp_assign_source_53 );
    tmp_defaults_8 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_8 );
    tmp_assign_source_54 = MAKE_FUNCTION_numpy$core$defchararray$$$function_23_index( tmp_defaults_8 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_index, tmp_assign_source_54 );
    tmp_assign_source_55 = MAKE_FUNCTION_numpy$core$defchararray$$$function_24_isalnum(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isalnum, tmp_assign_source_55 );
    tmp_assign_source_56 = MAKE_FUNCTION_numpy$core$defchararray$$$function_25_isalpha(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isalpha, tmp_assign_source_56 );
    tmp_assign_source_57 = MAKE_FUNCTION_numpy$core$defchararray$$$function_26_isdigit(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isdigit, tmp_assign_source_57 );
    tmp_assign_source_58 = MAKE_FUNCTION_numpy$core$defchararray$$$function_27_islower(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_islower, tmp_assign_source_58 );
    tmp_assign_source_59 = MAKE_FUNCTION_numpy$core$defchararray$$$function_28_isspace(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isspace, tmp_assign_source_59 );
    tmp_assign_source_60 = MAKE_FUNCTION_numpy$core$defchararray$$$function_29_istitle(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_istitle, tmp_assign_source_60 );
    tmp_assign_source_61 = MAKE_FUNCTION_numpy$core$defchararray$$$function_30_isupper(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isupper, tmp_assign_source_61 );
    tmp_assign_source_62 = MAKE_FUNCTION_numpy$core$defchararray$$$function_31_join(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_join, tmp_assign_source_62 );
    tmp_defaults_9 = const_tuple_str_space_tuple;
    Py_INCREF( tmp_defaults_9 );
    tmp_assign_source_63 = MAKE_FUNCTION_numpy$core$defchararray$$$function_32_ljust( tmp_defaults_9 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ljust, tmp_assign_source_63 );
    tmp_assign_source_64 = MAKE_FUNCTION_numpy$core$defchararray$$$function_33_lower(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_lower, tmp_assign_source_64 );
    tmp_defaults_10 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_10 );
    tmp_assign_source_65 = MAKE_FUNCTION_numpy$core$defchararray$$$function_34_lstrip( tmp_defaults_10 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_lstrip, tmp_assign_source_65 );
    tmp_assign_source_66 = MAKE_FUNCTION_numpy$core$defchararray$$$function_35_partition(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_partition, tmp_assign_source_66 );
    tmp_defaults_11 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_11 );
    tmp_assign_source_67 = MAKE_FUNCTION_numpy$core$defchararray$$$function_36_replace( tmp_defaults_11 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_replace, tmp_assign_source_67 );
    tmp_defaults_12 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_12 );
    tmp_assign_source_68 = MAKE_FUNCTION_numpy$core$defchararray$$$function_37_rfind( tmp_defaults_12 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rfind, tmp_assign_source_68 );
    tmp_defaults_13 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_13 );
    tmp_assign_source_69 = MAKE_FUNCTION_numpy$core$defchararray$$$function_38_rindex( tmp_defaults_13 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rindex, tmp_assign_source_69 );
    tmp_defaults_14 = const_tuple_str_space_tuple;
    Py_INCREF( tmp_defaults_14 );
    tmp_assign_source_70 = MAKE_FUNCTION_numpy$core$defchararray$$$function_39_rjust( tmp_defaults_14 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rjust, tmp_assign_source_70 );
    tmp_assign_source_71 = MAKE_FUNCTION_numpy$core$defchararray$$$function_40_rpartition(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rpartition, tmp_assign_source_71 );
    tmp_defaults_15 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_15 );
    tmp_assign_source_72 = MAKE_FUNCTION_numpy$core$defchararray$$$function_41_rsplit( tmp_defaults_15 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rsplit, tmp_assign_source_72 );
    tmp_defaults_16 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_16 );
    tmp_assign_source_73 = MAKE_FUNCTION_numpy$core$defchararray$$$function_42_rstrip( tmp_defaults_16 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_rstrip, tmp_assign_source_73 );
    tmp_defaults_17 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_17 );
    tmp_assign_source_74 = MAKE_FUNCTION_numpy$core$defchararray$$$function_43_split( tmp_defaults_17 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_split, tmp_assign_source_74 );
    tmp_defaults_18 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_18 );
    tmp_assign_source_75 = MAKE_FUNCTION_numpy$core$defchararray$$$function_44_splitlines( tmp_defaults_18 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_splitlines, tmp_assign_source_75 );
    tmp_defaults_19 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_19 );
    tmp_assign_source_76 = MAKE_FUNCTION_numpy$core$defchararray$$$function_45_startswith( tmp_defaults_19 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_startswith, tmp_assign_source_76 );
    tmp_defaults_20 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_20 );
    tmp_assign_source_77 = MAKE_FUNCTION_numpy$core$defchararray$$$function_46_strip( tmp_defaults_20 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_strip, tmp_assign_source_77 );
    tmp_assign_source_78 = MAKE_FUNCTION_numpy$core$defchararray$$$function_47_swapcase(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_swapcase, tmp_assign_source_78 );
    tmp_assign_source_79 = MAKE_FUNCTION_numpy$core$defchararray$$$function_48_title(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_title, tmp_assign_source_79 );
    tmp_defaults_21 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_21 );
    tmp_assign_source_80 = MAKE_FUNCTION_numpy$core$defchararray$$$function_49_translate( tmp_defaults_21 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_translate, tmp_assign_source_80 );
    tmp_assign_source_81 = MAKE_FUNCTION_numpy$core$defchararray$$$function_50_upper(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_upper, tmp_assign_source_81 );
    tmp_assign_source_82 = MAKE_FUNCTION_numpy$core$defchararray$$$function_51_zfill(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_zfill, tmp_assign_source_82 );
    tmp_assign_source_83 = MAKE_FUNCTION_numpy$core$defchararray$$$function_52_isnumeric(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isnumeric, tmp_assign_source_83 );
    tmp_assign_source_84 = MAKE_FUNCTION_numpy$core$defchararray$$$function_53_isdecimal(  );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_isdecimal, tmp_assign_source_84 );
    // Tried code:
    tmp_assign_source_85 = PyTuple_New( 1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ndarray );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ndarray );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_85 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ndarray" );
        exception_tb = NULL;

        exception_lineno = 1669;

        goto try_except_handler_5;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_85, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases == NULL );
    tmp_class_creation_1__bases = tmp_assign_source_85;

    tmp_assign_source_87 = const_str_digest_28967138fa1cdbae9c3af9308a03d7af;
    assert( outline_0_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_87 );
    outline_0_var___module__ = tmp_assign_source_87;

    tmp_assign_source_88 = const_str_digest_370db36e0f092f4c33948c6a0a8a7c0c;
    assert( outline_0_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_88 );
    outline_0_var___doc__ = tmp_assign_source_88;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_576c7c8954aaddcd3581abf50f1c4036_2, codeobj_576c7c8954aaddcd3581abf50f1c4036, module_numpy$core$defchararray, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_576c7c8954aaddcd3581abf50f1c4036_2 = cache_frame_576c7c8954aaddcd3581abf50f1c4036_2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_576c7c8954aaddcd3581abf50f1c4036_2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_576c7c8954aaddcd3581abf50f1c4036_2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_defaults_22 = const_tuple_int_pos_1_false_none_int_0_none_str_plain_C_tuple;
    Py_INCREF( tmp_defaults_22 );
    tmp_staticmethod_arg_1 = MAKE_FUNCTION_numpy$core$defchararray$$$function_54___new__( tmp_defaults_22 );
    tmp_assign_source_89 = BUILTIN_STATICMETHOD( tmp_staticmethod_arg_1 );
    Py_DECREF( tmp_staticmethod_arg_1 );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1811;
        type_description_2 = "ooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var___new__ == NULL );
    outline_0_var___new__ = tmp_assign_source_89;

    tmp_assign_source_90 = MAKE_FUNCTION_numpy$core$defchararray$$$function_55___array_finalize__(  );
    assert( outline_0_var___array_finalize__ == NULL );
    outline_0_var___array_finalize__ = tmp_assign_source_90;

    tmp_assign_source_91 = MAKE_FUNCTION_numpy$core$defchararray$$$function_56___getitem__(  );
    assert( outline_0_var___getitem__ == NULL );
    outline_0_var___getitem__ = tmp_assign_source_91;

    tmp_assign_source_92 = MAKE_FUNCTION_numpy$core$defchararray$$$function_57___eq__(  );
    assert( outline_0_var___eq__ == NULL );
    outline_0_var___eq__ = tmp_assign_source_92;

    tmp_assign_source_93 = MAKE_FUNCTION_numpy$core$defchararray$$$function_58___ne__(  );
    assert( outline_0_var___ne__ == NULL );
    outline_0_var___ne__ = tmp_assign_source_93;

    tmp_assign_source_94 = MAKE_FUNCTION_numpy$core$defchararray$$$function_59___ge__(  );
    assert( outline_0_var___ge__ == NULL );
    outline_0_var___ge__ = tmp_assign_source_94;

    tmp_assign_source_95 = MAKE_FUNCTION_numpy$core$defchararray$$$function_60___le__(  );
    assert( outline_0_var___le__ == NULL );
    outline_0_var___le__ = tmp_assign_source_95;

    tmp_assign_source_96 = MAKE_FUNCTION_numpy$core$defchararray$$$function_61___gt__(  );
    assert( outline_0_var___gt__ == NULL );
    outline_0_var___gt__ = tmp_assign_source_96;

    tmp_assign_source_97 = MAKE_FUNCTION_numpy$core$defchararray$$$function_62___lt__(  );
    assert( outline_0_var___lt__ == NULL );
    outline_0_var___lt__ = tmp_assign_source_97;

    tmp_assign_source_98 = MAKE_FUNCTION_numpy$core$defchararray$$$function_63___add__(  );
    assert( outline_0_var___add__ == NULL );
    outline_0_var___add__ = tmp_assign_source_98;

    tmp_assign_source_99 = MAKE_FUNCTION_numpy$core$defchararray$$$function_64___radd__(  );
    assert( outline_0_var___radd__ == NULL );
    outline_0_var___radd__ = tmp_assign_source_99;

    tmp_assign_source_100 = MAKE_FUNCTION_numpy$core$defchararray$$$function_65___mul__(  );
    assert( outline_0_var___mul__ == NULL );
    outline_0_var___mul__ = tmp_assign_source_100;

    tmp_assign_source_101 = MAKE_FUNCTION_numpy$core$defchararray$$$function_66___rmul__(  );
    assert( outline_0_var___rmul__ == NULL );
    outline_0_var___rmul__ = tmp_assign_source_101;

    tmp_assign_source_102 = MAKE_FUNCTION_numpy$core$defchararray$$$function_67___mod__(  );
    assert( outline_0_var___mod__ == NULL );
    outline_0_var___mod__ = tmp_assign_source_102;

    tmp_assign_source_103 = MAKE_FUNCTION_numpy$core$defchararray$$$function_68___rmod__(  );
    assert( outline_0_var___rmod__ == NULL );
    outline_0_var___rmod__ = tmp_assign_source_103;

    tmp_defaults_23 = const_tuple_int_neg_1_str_plain_quicksort_none_tuple;
    Py_INCREF( tmp_defaults_23 );
    tmp_assign_source_104 = MAKE_FUNCTION_numpy$core$defchararray$$$function_69_argsort( tmp_defaults_23 );
    assert( outline_0_var_argsort == NULL );
    outline_0_var_argsort = tmp_assign_source_104;

    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_ndarray );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ndarray );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "ndarray" );
        exception_tb = NULL;

        exception_lineno = 2006;
        type_description_2 = "ooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_argsort );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2006;
        type_description_2 = "ooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___doc__ );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2006;
        type_description_2 = "ooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    tmp_assattr_target_1 = outline_0_var_argsort;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___doc__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 2006;
        type_description_2 = "ooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    Py_DECREF( tmp_assattr_name_1 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_576c7c8954aaddcd3581abf50f1c4036_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_576c7c8954aaddcd3581abf50f1c4036_2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_576c7c8954aaddcd3581abf50f1c4036_2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_576c7c8954aaddcd3581abf50f1c4036_2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_576c7c8954aaddcd3581abf50f1c4036_2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_576c7c8954aaddcd3581abf50f1c4036_2,
        type_description_2,
        outline_0_var___module__,
        outline_0_var___doc__,
        outline_0_var___new__,
        outline_0_var___array_finalize__,
        outline_0_var___getitem__,
        outline_0_var___eq__,
        outline_0_var___ne__,
        outline_0_var___ge__,
        outline_0_var___le__,
        outline_0_var___gt__,
        outline_0_var___lt__,
        outline_0_var___add__,
        outline_0_var___radd__,
        outline_0_var___mul__,
        outline_0_var___rmul__,
        outline_0_var___mod__,
        outline_0_var___rmod__,
        outline_0_var_argsort,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL
    );


    // Release cached frame.
    if ( frame_576c7c8954aaddcd3581abf50f1c4036_2 == cache_frame_576c7c8954aaddcd3581abf50f1c4036_2 )
    {
        Py_DECREF( frame_576c7c8954aaddcd3581abf50f1c4036_2 );
    }
    cache_frame_576c7c8954aaddcd3581abf50f1c4036_2 = NULL;

    assertFrameObject( frame_576c7c8954aaddcd3581abf50f1c4036_2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_1;

    frame_no_exception_1:;

    goto skip_nested_handling_1;
    nested_frame_exit_1:;

    goto try_except_handler_6;
    skip_nested_handling_1:;
    tmp_assign_source_105 = MAKE_FUNCTION_numpy$core$defchararray$$$function_70_capitalize(  );
    assert( outline_0_var_capitalize == NULL );
    outline_0_var_capitalize = tmp_assign_source_105;

    tmp_defaults_24 = const_tuple_str_space_tuple;
    Py_INCREF( tmp_defaults_24 );
    tmp_assign_source_106 = MAKE_FUNCTION_numpy$core$defchararray$$$function_71_center( tmp_defaults_24 );
    assert( outline_0_var_center == NULL );
    outline_0_var_center = tmp_assign_source_106;

    tmp_defaults_25 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_25 );
    tmp_assign_source_107 = MAKE_FUNCTION_numpy$core$defchararray$$$function_72_count( tmp_defaults_25 );
    assert( outline_0_var_count == NULL );
    outline_0_var_count = tmp_assign_source_107;

    tmp_defaults_26 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_26 );
    tmp_assign_source_108 = MAKE_FUNCTION_numpy$core$defchararray$$$function_73_decode( tmp_defaults_26 );
    assert( outline_0_var_decode == NULL );
    outline_0_var_decode = tmp_assign_source_108;

    tmp_defaults_27 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_27 );
    tmp_assign_source_109 = MAKE_FUNCTION_numpy$core$defchararray$$$function_74_encode( tmp_defaults_27 );
    assert( outline_0_var_encode == NULL );
    outline_0_var_encode = tmp_assign_source_109;

    tmp_defaults_28 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_28 );
    tmp_assign_source_110 = MAKE_FUNCTION_numpy$core$defchararray$$$function_75_endswith( tmp_defaults_28 );
    assert( outline_0_var_endswith == NULL );
    outline_0_var_endswith = tmp_assign_source_110;

    tmp_defaults_29 = const_tuple_int_pos_8_tuple;
    Py_INCREF( tmp_defaults_29 );
    tmp_assign_source_111 = MAKE_FUNCTION_numpy$core$defchararray$$$function_76_expandtabs( tmp_defaults_29 );
    assert( outline_0_var_expandtabs == NULL );
    outline_0_var_expandtabs = tmp_assign_source_111;

    tmp_defaults_30 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_30 );
    tmp_assign_source_112 = MAKE_FUNCTION_numpy$core$defchararray$$$function_77_find( tmp_defaults_30 );
    assert( outline_0_var_find == NULL );
    outline_0_var_find = tmp_assign_source_112;

    tmp_defaults_31 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_31 );
    tmp_assign_source_113 = MAKE_FUNCTION_numpy$core$defchararray$$$function_78_index( tmp_defaults_31 );
    assert( outline_0_var_index == NULL );
    outline_0_var_index = tmp_assign_source_113;

    tmp_assign_source_114 = MAKE_FUNCTION_numpy$core$defchararray$$$function_79_isalnum(  );
    assert( outline_0_var_isalnum == NULL );
    outline_0_var_isalnum = tmp_assign_source_114;

    tmp_assign_source_115 = MAKE_FUNCTION_numpy$core$defchararray$$$function_80_isalpha(  );
    assert( outline_0_var_isalpha == NULL );
    outline_0_var_isalpha = tmp_assign_source_115;

    tmp_assign_source_116 = MAKE_FUNCTION_numpy$core$defchararray$$$function_81_isdigit(  );
    assert( outline_0_var_isdigit == NULL );
    outline_0_var_isdigit = tmp_assign_source_116;

    tmp_assign_source_117 = MAKE_FUNCTION_numpy$core$defchararray$$$function_82_islower(  );
    assert( outline_0_var_islower == NULL );
    outline_0_var_islower = tmp_assign_source_117;

    tmp_assign_source_118 = MAKE_FUNCTION_numpy$core$defchararray$$$function_83_isspace(  );
    assert( outline_0_var_isspace == NULL );
    outline_0_var_isspace = tmp_assign_source_118;

    tmp_assign_source_119 = MAKE_FUNCTION_numpy$core$defchararray$$$function_84_istitle(  );
    assert( outline_0_var_istitle == NULL );
    outline_0_var_istitle = tmp_assign_source_119;

    tmp_assign_source_120 = MAKE_FUNCTION_numpy$core$defchararray$$$function_85_isupper(  );
    assert( outline_0_var_isupper == NULL );
    outline_0_var_isupper = tmp_assign_source_120;

    tmp_assign_source_121 = MAKE_FUNCTION_numpy$core$defchararray$$$function_86_join(  );
    assert( outline_0_var_join == NULL );
    outline_0_var_join = tmp_assign_source_121;

    tmp_defaults_32 = const_tuple_str_space_tuple;
    Py_INCREF( tmp_defaults_32 );
    tmp_assign_source_122 = MAKE_FUNCTION_numpy$core$defchararray$$$function_87_ljust( tmp_defaults_32 );
    assert( outline_0_var_ljust == NULL );
    outline_0_var_ljust = tmp_assign_source_122;

    tmp_assign_source_123 = MAKE_FUNCTION_numpy$core$defchararray$$$function_88_lower(  );
    assert( outline_0_var_lower == NULL );
    outline_0_var_lower = tmp_assign_source_123;

    tmp_defaults_33 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_33 );
    tmp_assign_source_124 = MAKE_FUNCTION_numpy$core$defchararray$$$function_89_lstrip( tmp_defaults_33 );
    assert( outline_0_var_lstrip == NULL );
    outline_0_var_lstrip = tmp_assign_source_124;

    tmp_assign_source_125 = MAKE_FUNCTION_numpy$core$defchararray$$$function_90_partition(  );
    assert( outline_0_var_partition == NULL );
    outline_0_var_partition = tmp_assign_source_125;

    tmp_defaults_34 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_34 );
    tmp_assign_source_126 = MAKE_FUNCTION_numpy$core$defchararray$$$function_91_replace( tmp_defaults_34 );
    assert( outline_0_var_replace == NULL );
    outline_0_var_replace = tmp_assign_source_126;

    tmp_defaults_35 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_35 );
    tmp_assign_source_127 = MAKE_FUNCTION_numpy$core$defchararray$$$function_92_rfind( tmp_defaults_35 );
    assert( outline_0_var_rfind == NULL );
    outline_0_var_rfind = tmp_assign_source_127;

    tmp_defaults_36 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_36 );
    tmp_assign_source_128 = MAKE_FUNCTION_numpy$core$defchararray$$$function_93_rindex( tmp_defaults_36 );
    assert( outline_0_var_rindex == NULL );
    outline_0_var_rindex = tmp_assign_source_128;

    tmp_defaults_37 = const_tuple_str_space_tuple;
    Py_INCREF( tmp_defaults_37 );
    tmp_assign_source_129 = MAKE_FUNCTION_numpy$core$defchararray$$$function_94_rjust( tmp_defaults_37 );
    assert( outline_0_var_rjust == NULL );
    outline_0_var_rjust = tmp_assign_source_129;

    tmp_assign_source_130 = MAKE_FUNCTION_numpy$core$defchararray$$$function_95_rpartition(  );
    assert( outline_0_var_rpartition == NULL );
    outline_0_var_rpartition = tmp_assign_source_130;

    tmp_defaults_38 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_38 );
    tmp_assign_source_131 = MAKE_FUNCTION_numpy$core$defchararray$$$function_96_rsplit( tmp_defaults_38 );
    assert( outline_0_var_rsplit == NULL );
    outline_0_var_rsplit = tmp_assign_source_131;

    tmp_defaults_39 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_39 );
    tmp_assign_source_132 = MAKE_FUNCTION_numpy$core$defchararray$$$function_97_rstrip( tmp_defaults_39 );
    assert( outline_0_var_rstrip == NULL );
    outline_0_var_rstrip = tmp_assign_source_132;

    tmp_defaults_40 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_40 );
    tmp_assign_source_133 = MAKE_FUNCTION_numpy$core$defchararray$$$function_98_split( tmp_defaults_40 );
    assert( outline_0_var_split == NULL );
    outline_0_var_split = tmp_assign_source_133;

    tmp_defaults_41 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_41 );
    tmp_assign_source_134 = MAKE_FUNCTION_numpy$core$defchararray$$$function_99_splitlines( tmp_defaults_41 );
    assert( outline_0_var_splitlines == NULL );
    outline_0_var_splitlines = tmp_assign_source_134;

    tmp_defaults_42 = const_tuple_int_0_none_tuple;
    Py_INCREF( tmp_defaults_42 );
    tmp_assign_source_135 = MAKE_FUNCTION_numpy$core$defchararray$$$function_100_startswith( tmp_defaults_42 );
    assert( outline_0_var_startswith == NULL );
    outline_0_var_startswith = tmp_assign_source_135;

    tmp_defaults_43 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_43 );
    tmp_assign_source_136 = MAKE_FUNCTION_numpy$core$defchararray$$$function_101_strip( tmp_defaults_43 );
    assert( outline_0_var_strip == NULL );
    outline_0_var_strip = tmp_assign_source_136;

    tmp_assign_source_137 = MAKE_FUNCTION_numpy$core$defchararray$$$function_102_swapcase(  );
    assert( outline_0_var_swapcase == NULL );
    outline_0_var_swapcase = tmp_assign_source_137;

    tmp_assign_source_138 = MAKE_FUNCTION_numpy$core$defchararray$$$function_103_title(  );
    assert( outline_0_var_title == NULL );
    outline_0_var_title = tmp_assign_source_138;

    tmp_defaults_44 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_44 );
    tmp_assign_source_139 = MAKE_FUNCTION_numpy$core$defchararray$$$function_104_translate( tmp_defaults_44 );
    assert( outline_0_var_translate == NULL );
    outline_0_var_translate = tmp_assign_source_139;

    tmp_assign_source_140 = MAKE_FUNCTION_numpy$core$defchararray$$$function_105_upper(  );
    assert( outline_0_var_upper == NULL );
    outline_0_var_upper = tmp_assign_source_140;

    tmp_assign_source_141 = MAKE_FUNCTION_numpy$core$defchararray$$$function_106_zfill(  );
    assert( outline_0_var_zfill == NULL );
    outline_0_var_zfill = tmp_assign_source_141;

    tmp_assign_source_142 = MAKE_FUNCTION_numpy$core$defchararray$$$function_107_isnumeric(  );
    assert( outline_0_var_isnumeric == NULL );
    outline_0_var_isnumeric = tmp_assign_source_142;

    tmp_assign_source_143 = MAKE_FUNCTION_numpy$core$defchararray$$$function_108_isdecimal(  );
    assert( outline_0_var_isdecimal == NULL );
    outline_0_var_isdecimal = tmp_assign_source_143;

    tmp_outline_return_value_1 = _PyDict_NewPresized( 57 );
    tmp_dict_value_1 = outline_0_var___module__;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = outline_0_var___doc__;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_3 = outline_0_var___new__;

    CHECK_OBJECT( tmp_dict_value_3 );
    tmp_dict_key_3 = const_str_plain___new__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_4 = outline_0_var___array_finalize__;

    CHECK_OBJECT( tmp_dict_value_4 );
    tmp_dict_key_4 = const_str_plain___array_finalize__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_5 = outline_0_var___getitem__;

    CHECK_OBJECT( tmp_dict_value_5 );
    tmp_dict_key_5 = const_str_plain___getitem__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_6 = outline_0_var___eq__;

    CHECK_OBJECT( tmp_dict_value_6 );
    tmp_dict_key_6 = const_str_plain___eq__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_7 = outline_0_var___ne__;

    CHECK_OBJECT( tmp_dict_value_7 );
    tmp_dict_key_7 = const_str_plain___ne__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_8 = outline_0_var___ge__;

    CHECK_OBJECT( tmp_dict_value_8 );
    tmp_dict_key_8 = const_str_plain___ge__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_8, tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_9 = outline_0_var___le__;

    CHECK_OBJECT( tmp_dict_value_9 );
    tmp_dict_key_9 = const_str_plain___le__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_9, tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_10 = outline_0_var___gt__;

    CHECK_OBJECT( tmp_dict_value_10 );
    tmp_dict_key_10 = const_str_plain___gt__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_10, tmp_dict_value_10 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_11 = outline_0_var___lt__;

    CHECK_OBJECT( tmp_dict_value_11 );
    tmp_dict_key_11 = const_str_plain___lt__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_11, tmp_dict_value_11 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_12 = outline_0_var___add__;

    CHECK_OBJECT( tmp_dict_value_12 );
    tmp_dict_key_12 = const_str_plain___add__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_12, tmp_dict_value_12 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_13 = outline_0_var___radd__;

    CHECK_OBJECT( tmp_dict_value_13 );
    tmp_dict_key_13 = const_str_plain___radd__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_13, tmp_dict_value_13 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_14 = outline_0_var___mul__;

    CHECK_OBJECT( tmp_dict_value_14 );
    tmp_dict_key_14 = const_str_plain___mul__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_14, tmp_dict_value_14 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_15 = outline_0_var___rmul__;

    CHECK_OBJECT( tmp_dict_value_15 );
    tmp_dict_key_15 = const_str_plain___rmul__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_15, tmp_dict_value_15 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_16 = outline_0_var___mod__;

    CHECK_OBJECT( tmp_dict_value_16 );
    tmp_dict_key_16 = const_str_plain___mod__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_16, tmp_dict_value_16 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_17 = outline_0_var___rmod__;

    CHECK_OBJECT( tmp_dict_value_17 );
    tmp_dict_key_17 = const_str_plain___rmod__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_17, tmp_dict_value_17 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_18 = outline_0_var_argsort;

    CHECK_OBJECT( tmp_dict_value_18 );
    tmp_dict_key_18 = const_str_plain_argsort;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_18, tmp_dict_value_18 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_19 = outline_0_var_capitalize;

    CHECK_OBJECT( tmp_dict_value_19 );
    tmp_dict_key_19 = const_str_plain_capitalize;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_19, tmp_dict_value_19 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_20 = outline_0_var_center;

    CHECK_OBJECT( tmp_dict_value_20 );
    tmp_dict_key_20 = const_str_plain_center;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_20, tmp_dict_value_20 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_21 = outline_0_var_count;

    CHECK_OBJECT( tmp_dict_value_21 );
    tmp_dict_key_21 = const_str_plain_count;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_21, tmp_dict_value_21 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_22 = outline_0_var_decode;

    CHECK_OBJECT( tmp_dict_value_22 );
    tmp_dict_key_22 = const_str_plain_decode;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_22, tmp_dict_value_22 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_23 = outline_0_var_encode;

    CHECK_OBJECT( tmp_dict_value_23 );
    tmp_dict_key_23 = const_str_plain_encode;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_23, tmp_dict_value_23 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_24 = outline_0_var_endswith;

    CHECK_OBJECT( tmp_dict_value_24 );
    tmp_dict_key_24 = const_str_plain_endswith;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_24, tmp_dict_value_24 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_25 = outline_0_var_expandtabs;

    CHECK_OBJECT( tmp_dict_value_25 );
    tmp_dict_key_25 = const_str_plain_expandtabs;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_25, tmp_dict_value_25 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_26 = outline_0_var_find;

    CHECK_OBJECT( tmp_dict_value_26 );
    tmp_dict_key_26 = const_str_plain_find;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_26, tmp_dict_value_26 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_27 = outline_0_var_index;

    CHECK_OBJECT( tmp_dict_value_27 );
    tmp_dict_key_27 = const_str_plain_index;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_27, tmp_dict_value_27 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_28 = outline_0_var_isalnum;

    CHECK_OBJECT( tmp_dict_value_28 );
    tmp_dict_key_28 = const_str_plain_isalnum;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_28, tmp_dict_value_28 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_29 = outline_0_var_isalpha;

    CHECK_OBJECT( tmp_dict_value_29 );
    tmp_dict_key_29 = const_str_plain_isalpha;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_29, tmp_dict_value_29 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_30 = outline_0_var_isdigit;

    CHECK_OBJECT( tmp_dict_value_30 );
    tmp_dict_key_30 = const_str_plain_isdigit;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_30, tmp_dict_value_30 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_31 = outline_0_var_islower;

    CHECK_OBJECT( tmp_dict_value_31 );
    tmp_dict_key_31 = const_str_plain_islower;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_31, tmp_dict_value_31 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_32 = outline_0_var_isspace;

    CHECK_OBJECT( tmp_dict_value_32 );
    tmp_dict_key_32 = const_str_plain_isspace;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_32, tmp_dict_value_32 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_33 = outline_0_var_istitle;

    CHECK_OBJECT( tmp_dict_value_33 );
    tmp_dict_key_33 = const_str_plain_istitle;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_33, tmp_dict_value_33 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_34 = outline_0_var_isupper;

    CHECK_OBJECT( tmp_dict_value_34 );
    tmp_dict_key_34 = const_str_plain_isupper;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_34, tmp_dict_value_34 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_35 = outline_0_var_join;

    CHECK_OBJECT( tmp_dict_value_35 );
    tmp_dict_key_35 = const_str_plain_join;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_35, tmp_dict_value_35 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_36 = outline_0_var_ljust;

    CHECK_OBJECT( tmp_dict_value_36 );
    tmp_dict_key_36 = const_str_plain_ljust;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_36, tmp_dict_value_36 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_37 = outline_0_var_lower;

    CHECK_OBJECT( tmp_dict_value_37 );
    tmp_dict_key_37 = const_str_plain_lower;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_37, tmp_dict_value_37 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_38 = outline_0_var_lstrip;

    CHECK_OBJECT( tmp_dict_value_38 );
    tmp_dict_key_38 = const_str_plain_lstrip;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_38, tmp_dict_value_38 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_39 = outline_0_var_partition;

    CHECK_OBJECT( tmp_dict_value_39 );
    tmp_dict_key_39 = const_str_plain_partition;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_39, tmp_dict_value_39 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_40 = outline_0_var_replace;

    CHECK_OBJECT( tmp_dict_value_40 );
    tmp_dict_key_40 = const_str_plain_replace;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_40, tmp_dict_value_40 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_41 = outline_0_var_rfind;

    CHECK_OBJECT( tmp_dict_value_41 );
    tmp_dict_key_41 = const_str_plain_rfind;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_41, tmp_dict_value_41 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_42 = outline_0_var_rindex;

    CHECK_OBJECT( tmp_dict_value_42 );
    tmp_dict_key_42 = const_str_plain_rindex;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_42, tmp_dict_value_42 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_43 = outline_0_var_rjust;

    CHECK_OBJECT( tmp_dict_value_43 );
    tmp_dict_key_43 = const_str_plain_rjust;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_43, tmp_dict_value_43 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_44 = outline_0_var_rpartition;

    CHECK_OBJECT( tmp_dict_value_44 );
    tmp_dict_key_44 = const_str_plain_rpartition;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_44, tmp_dict_value_44 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_45 = outline_0_var_rsplit;

    CHECK_OBJECT( tmp_dict_value_45 );
    tmp_dict_key_45 = const_str_plain_rsplit;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_45, tmp_dict_value_45 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_46 = outline_0_var_rstrip;

    CHECK_OBJECT( tmp_dict_value_46 );
    tmp_dict_key_46 = const_str_plain_rstrip;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_46, tmp_dict_value_46 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_47 = outline_0_var_split;

    CHECK_OBJECT( tmp_dict_value_47 );
    tmp_dict_key_47 = const_str_plain_split;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_47, tmp_dict_value_47 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_48 = outline_0_var_splitlines;

    CHECK_OBJECT( tmp_dict_value_48 );
    tmp_dict_key_48 = const_str_plain_splitlines;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_48, tmp_dict_value_48 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_49 = outline_0_var_startswith;

    CHECK_OBJECT( tmp_dict_value_49 );
    tmp_dict_key_49 = const_str_plain_startswith;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_49, tmp_dict_value_49 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_50 = outline_0_var_strip;

    CHECK_OBJECT( tmp_dict_value_50 );
    tmp_dict_key_50 = const_str_plain_strip;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_50, tmp_dict_value_50 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_51 = outline_0_var_swapcase;

    CHECK_OBJECT( tmp_dict_value_51 );
    tmp_dict_key_51 = const_str_plain_swapcase;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_51, tmp_dict_value_51 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_52 = outline_0_var_title;

    CHECK_OBJECT( tmp_dict_value_52 );
    tmp_dict_key_52 = const_str_plain_title;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_52, tmp_dict_value_52 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_53 = outline_0_var_translate;

    CHECK_OBJECT( tmp_dict_value_53 );
    tmp_dict_key_53 = const_str_plain_translate;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_53, tmp_dict_value_53 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_54 = outline_0_var_upper;

    CHECK_OBJECT( tmp_dict_value_54 );
    tmp_dict_key_54 = const_str_plain_upper;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_54, tmp_dict_value_54 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_55 = outline_0_var_zfill;

    CHECK_OBJECT( tmp_dict_value_55 );
    tmp_dict_key_55 = const_str_plain_zfill;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_55, tmp_dict_value_55 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_56 = outline_0_var_isnumeric;

    CHECK_OBJECT( tmp_dict_value_56 );
    tmp_dict_key_56 = const_str_plain_isnumeric;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_56, tmp_dict_value_56 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_57 = outline_0_var_isdecimal;

    CHECK_OBJECT( tmp_dict_value_57 );
    tmp_dict_key_57 = const_str_plain_isdecimal;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_57, tmp_dict_value_57 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_6;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_6:;
    CHECK_OBJECT( (PyObject *)outline_0_var___module__ );
    Py_DECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___doc__ );
    Py_DECREF( outline_0_var___doc__ );
    outline_0_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___new__ );
    Py_DECREF( outline_0_var___new__ );
    outline_0_var___new__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___array_finalize__ );
    Py_DECREF( outline_0_var___array_finalize__ );
    outline_0_var___array_finalize__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___getitem__ );
    Py_DECREF( outline_0_var___getitem__ );
    outline_0_var___getitem__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___eq__ );
    Py_DECREF( outline_0_var___eq__ );
    outline_0_var___eq__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___ne__ );
    Py_DECREF( outline_0_var___ne__ );
    outline_0_var___ne__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___ge__ );
    Py_DECREF( outline_0_var___ge__ );
    outline_0_var___ge__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___le__ );
    Py_DECREF( outline_0_var___le__ );
    outline_0_var___le__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___gt__ );
    Py_DECREF( outline_0_var___gt__ );
    outline_0_var___gt__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___lt__ );
    Py_DECREF( outline_0_var___lt__ );
    outline_0_var___lt__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___add__ );
    Py_DECREF( outline_0_var___add__ );
    outline_0_var___add__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___radd__ );
    Py_DECREF( outline_0_var___radd__ );
    outline_0_var___radd__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___mul__ );
    Py_DECREF( outline_0_var___mul__ );
    outline_0_var___mul__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___rmul__ );
    Py_DECREF( outline_0_var___rmul__ );
    outline_0_var___rmul__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___mod__ );
    Py_DECREF( outline_0_var___mod__ );
    outline_0_var___mod__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___rmod__ );
    Py_DECREF( outline_0_var___rmod__ );
    outline_0_var___rmod__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_argsort );
    Py_DECREF( outline_0_var_argsort );
    outline_0_var_argsort = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_capitalize );
    Py_DECREF( outline_0_var_capitalize );
    outline_0_var_capitalize = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_center );
    Py_DECREF( outline_0_var_center );
    outline_0_var_center = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_count );
    Py_DECREF( outline_0_var_count );
    outline_0_var_count = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_decode );
    Py_DECREF( outline_0_var_decode );
    outline_0_var_decode = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_encode );
    Py_DECREF( outline_0_var_encode );
    outline_0_var_encode = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_endswith );
    Py_DECREF( outline_0_var_endswith );
    outline_0_var_endswith = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_expandtabs );
    Py_DECREF( outline_0_var_expandtabs );
    outline_0_var_expandtabs = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_find );
    Py_DECREF( outline_0_var_find );
    outline_0_var_find = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_index );
    Py_DECREF( outline_0_var_index );
    outline_0_var_index = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_isalnum );
    Py_DECREF( outline_0_var_isalnum );
    outline_0_var_isalnum = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_isalpha );
    Py_DECREF( outline_0_var_isalpha );
    outline_0_var_isalpha = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_isdigit );
    Py_DECREF( outline_0_var_isdigit );
    outline_0_var_isdigit = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_islower );
    Py_DECREF( outline_0_var_islower );
    outline_0_var_islower = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_isspace );
    Py_DECREF( outline_0_var_isspace );
    outline_0_var_isspace = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_istitle );
    Py_DECREF( outline_0_var_istitle );
    outline_0_var_istitle = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_isupper );
    Py_DECREF( outline_0_var_isupper );
    outline_0_var_isupper = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_join );
    Py_DECREF( outline_0_var_join );
    outline_0_var_join = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_ljust );
    Py_DECREF( outline_0_var_ljust );
    outline_0_var_ljust = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_lower );
    Py_DECREF( outline_0_var_lower );
    outline_0_var_lower = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_lstrip );
    Py_DECREF( outline_0_var_lstrip );
    outline_0_var_lstrip = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_partition );
    Py_DECREF( outline_0_var_partition );
    outline_0_var_partition = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_replace );
    Py_DECREF( outline_0_var_replace );
    outline_0_var_replace = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_rfind );
    Py_DECREF( outline_0_var_rfind );
    outline_0_var_rfind = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_rindex );
    Py_DECREF( outline_0_var_rindex );
    outline_0_var_rindex = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_rjust );
    Py_DECREF( outline_0_var_rjust );
    outline_0_var_rjust = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_rpartition );
    Py_DECREF( outline_0_var_rpartition );
    outline_0_var_rpartition = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_rsplit );
    Py_DECREF( outline_0_var_rsplit );
    outline_0_var_rsplit = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_rstrip );
    Py_DECREF( outline_0_var_rstrip );
    outline_0_var_rstrip = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_split );
    Py_DECREF( outline_0_var_split );
    outline_0_var_split = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_splitlines );
    Py_DECREF( outline_0_var_splitlines );
    outline_0_var_splitlines = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_startswith );
    Py_DECREF( outline_0_var_startswith );
    outline_0_var_startswith = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_strip );
    Py_DECREF( outline_0_var_strip );
    outline_0_var_strip = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_swapcase );
    Py_DECREF( outline_0_var_swapcase );
    outline_0_var_swapcase = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_title );
    Py_DECREF( outline_0_var_title );
    outline_0_var_title = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_translate );
    Py_DECREF( outline_0_var_translate );
    outline_0_var_translate = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_upper );
    Py_DECREF( outline_0_var_upper );
    outline_0_var_upper = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_zfill );
    Py_DECREF( outline_0_var_zfill );
    outline_0_var_zfill = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_isnumeric );
    Py_DECREF( outline_0_var_isnumeric );
    outline_0_var_isnumeric = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var_isdecimal );
    Py_DECREF( outline_0_var_isdecimal );
    outline_0_var_isdecimal = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_0_var___module__ );
    Py_DECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___doc__ );
    Py_DECREF( outline_0_var___doc__ );
    outline_0_var___doc__ = NULL;

    Py_XDECREF( outline_0_var___new__ );
    outline_0_var___new__ = NULL;

    Py_XDECREF( outline_0_var___array_finalize__ );
    outline_0_var___array_finalize__ = NULL;

    Py_XDECREF( outline_0_var___getitem__ );
    outline_0_var___getitem__ = NULL;

    Py_XDECREF( outline_0_var___eq__ );
    outline_0_var___eq__ = NULL;

    Py_XDECREF( outline_0_var___ne__ );
    outline_0_var___ne__ = NULL;

    Py_XDECREF( outline_0_var___ge__ );
    outline_0_var___ge__ = NULL;

    Py_XDECREF( outline_0_var___le__ );
    outline_0_var___le__ = NULL;

    Py_XDECREF( outline_0_var___gt__ );
    outline_0_var___gt__ = NULL;

    Py_XDECREF( outline_0_var___lt__ );
    outline_0_var___lt__ = NULL;

    Py_XDECREF( outline_0_var___add__ );
    outline_0_var___add__ = NULL;

    Py_XDECREF( outline_0_var___radd__ );
    outline_0_var___radd__ = NULL;

    Py_XDECREF( outline_0_var___mul__ );
    outline_0_var___mul__ = NULL;

    Py_XDECREF( outline_0_var___rmul__ );
    outline_0_var___rmul__ = NULL;

    Py_XDECREF( outline_0_var___mod__ );
    outline_0_var___mod__ = NULL;

    Py_XDECREF( outline_0_var___rmod__ );
    outline_0_var___rmod__ = NULL;

    Py_XDECREF( outline_0_var_argsort );
    outline_0_var_argsort = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto outline_exception_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_1:;
    exception_lineno = 1669;
    goto try_except_handler_5;
    outline_result_1:;
    tmp_assign_source_86 = tmp_outline_return_value_1;
    assert( tmp_class_creation_1__class_dict == NULL );
    tmp_class_creation_1__class_dict = tmp_assign_source_86;

    tmp_compare_left_2 = const_str_plain___metaclass__;
    tmp_compare_right_2 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_compare_right_2 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_dict_name_1 );
    tmp_key_name_1 = const_str_plain___metaclass__;
    tmp_assign_source_144 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_assign_source_144 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1669;

        goto try_except_handler_5;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_subscribed_name_2 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_subscribed_name_2 );
    tmp_subscript_name_2 = const_int_0;
    tmp_assign_source_145 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_assign_source_145 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1669;

        goto try_except_handler_5;
    }
    assert( tmp_select_metaclass_1__base == NULL );
    tmp_select_metaclass_1__base = tmp_assign_source_145;

    // Tried code:
    // Tried code:
    tmp_source_name_4 = tmp_select_metaclass_1__base;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_outline_return_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_4 );
    if ( tmp_outline_return_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1669;

        goto try_except_handler_8;
    }
    goto try_return_handler_7;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_6 );
    Py_XDECREF( exception_keeper_value_6 );
    Py_XDECREF( exception_keeper_tb_6 );
    tmp_type_arg_1 = tmp_select_metaclass_1__base;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_outline_return_value_2 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_outline_return_value_2 != NULL );
    goto try_return_handler_7;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_7:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_1__base );
    Py_DECREF( tmp_select_metaclass_1__base );
    tmp_select_metaclass_1__base = NULL;

    goto outline_result_2;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_1__base );
    Py_DECREF( tmp_select_metaclass_1__base );
    tmp_select_metaclass_1__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( numpy$core$defchararray );
    return MOD_RETURN_VALUE( NULL );
    outline_result_2:;
    tmp_assign_source_144 = tmp_outline_return_value_2;
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_144;

    tmp_called_name_1 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_called_name_1 );
    tmp_args_element_name_1 = const_str_plain_chararray;
    tmp_args_element_name_2 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_3e0fa734728f3e91ed6b5b4357299490->m_frame.f_lineno = 1669;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_assign_source_146 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_146 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1669;

        goto try_except_handler_5;
    }
    assert( tmp_class_creation_1__class == NULL );
    tmp_class_creation_1__class = tmp_assign_source_146;

    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e0fa734728f3e91ed6b5b4357299490 );
#endif
    popFrameStack();

    assertFrameObject( frame_3e0fa734728f3e91ed6b5b4357299490 );

    goto frame_no_exception_2;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e0fa734728f3e91ed6b5b4357299490 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3e0fa734728f3e91ed6b5b4357299490, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3e0fa734728f3e91ed6b5b4357299490->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3e0fa734728f3e91ed6b5b4357299490, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_2:;
    tmp_assign_source_147 = tmp_class_creation_1__class;

    CHECK_OBJECT( tmp_assign_source_147 );
    UPDATE_STRING_DICT0( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_chararray, tmp_assign_source_147 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class );
    Py_DECREF( tmp_class_creation_1__class );
    tmp_class_creation_1__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    tmp_defaults_45 = const_tuple_none_true_none_none_tuple;
    Py_INCREF( tmp_defaults_45 );
    tmp_assign_source_148 = MAKE_FUNCTION_numpy$core$defchararray$$$function_109_array( tmp_defaults_45 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_array, tmp_assign_source_148 );
    tmp_defaults_46 = const_tuple_none_none_none_tuple;
    Py_INCREF( tmp_defaults_46 );
    tmp_assign_source_149 = MAKE_FUNCTION_numpy$core$defchararray$$$function_110_asarray( tmp_defaults_46 );
    UPDATE_STRING_DICT1( moduledict_numpy$core$defchararray, (Nuitka_StringObject *)const_str_plain_asarray, tmp_assign_source_149 );

    return MOD_RETURN_VALUE( module_numpy$core$defchararray );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
