/* Generated code for Python source for module 'six'
 * created by Nuitka version 0.5.28.1
 *
 * This code is in part copyright 2017 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The _module_six is a Python object pointer of module type. */

/* Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_six;
PyDictObject *moduledict_six;

/* The module constants used, if any. */
static PyObject *const_str_plain___closure__;
extern PyObject *const_str_plain_get;
static PyObject *const_str_digest_937e23fd1af2ef7336d82295a1301f51;
static PyObject *const_str_plain_HTTPRedirectHandler;
extern PyObject *const_str_plain_data;
static PyObject *const_tuple_str_plain___spec___tuple;
static PyObject *const_str_plain__print;
static PyObject *const_tuple_str_plain_viewvalues_tuple;
static PyObject *const_str_plain_slots;
static PyObject *const_tuple_str_digest_d8d4f5e440c7f01129293c18f6555af5_tuple;
static PyObject *const_str_digest_fa9629ad3e56524d94051e9d7ab9b735;
static PyObject *const_str_plain_urlencode;
static PyObject *const_str_plain_OpenerDirector;
extern PyObject *const_str_plain_startswith;
extern PyObject *const_str_plain_pickle;
extern PyObject *const_tuple_str_plain_java_tuple;
static PyObject *const_tuple_02f51975eddf6871d90b3972207564b4_tuple;
static PyObject *const_tuple_46f723d6309298cb06eb75b900616e85_tuple;
static PyObject *const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple;
static PyObject *const_str_digest_cce73c34157ad7a21f7265310a153ec1;
static PyObject *const_str_plain_SimpleXMLRPCServer;
extern PyObject *const_str_plain___func__;
extern PyObject *const_tuple_type_int_tuple;
static PyObject *const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple;
static PyObject *const_str_plain_tb;
extern PyObject *const_str_plain_unicode_escape;
static PyObject *const_tuple_251221e54a5302daeb82388ea082ec95_tuple;
static PyObject *const_str_plain_assigned;
static PyObject *const_tuple_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38_tuple;
static PyObject *const_str_plain_unichr;
static PyObject *const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple;
static PyObject *const_str_plain_urldefrag;
static PyObject *const_str_digest_c075052d723d6707083e869a0e3659bb;
extern PyObject *const_str_plain___path__;
extern PyObject *const_str_plain_i;
static PyObject *const_tuple_4690034a949ab9ca5f391d7593b67689_tuple;
extern PyObject *const_str_plain_cls;
static PyObject *const_tuple_104a70332acb2b4496703dc266a2c27c_tuple;
extern PyObject *const_str_plain_iteritems;
static PyObject *const_str_digest_f5862b11e62dc1382b5d1226dd5ff379;
static PyObject *const_str_plain_imap;
static PyObject *const_tuple_str_plain___slots___tuple;
extern PyObject *const_str_plain_args;
extern PyObject *const_str_plain_f;
static PyObject *const_str_digest_1a0157fa26ba10861f95514e25366c69;
static PyObject *const_str_plain_FancyURLopener;
static PyObject *const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple;
extern PyObject *const_str_plain_write;
static PyObject *const_tuple_type_basestring_tuple;
static PyObject *const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple;
static PyObject *const_tuple_45353a5ecbb9971e49387253d02aa926_tuple;
static PyObject *const_str_plain_im_func;
extern PyObject *const_str_plain_itertools;
extern PyObject *const_str_plain_b;
static PyObject *const_str_digest_3f74da80d70054f566244d16961c095c;
static PyObject *const_str_plain_text_type;
extern PyObject *const_str_plain_copyreg;
static PyObject *const_tuple_type_type_tuple;
static PyObject *const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple;
static PyObject *const_str_plain_ifilterfalse;
extern PyObject *const_str_plain_sep;
static PyObject *const_str_plain_proxy_bypass;
static PyObject *const_tuple_str_digest_345fae18cb5b2b245881e77b200cffe5_tuple;
extern PyObject *const_str_plain___file__;
static PyObject *const_str_plain_is_package;
static PyObject *const_str_plain_Request;
static PyObject *const_str_plain_tkinter;
static PyObject *const_str_digest_f4d3a600a6e16b82e3f10867b851d5a1;
static PyObject *const_str_plain_meta_path;
static PyObject *const_str_plain__func_defaults;
static PyObject *const_str_plain_get_source;
extern PyObject *const_str_plain_encoding;
static PyObject *const_str_plain_izip;
static PyObject *const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple;
static PyObject *const_str_digest_2a7b3d36c635f4688c336c8ee8000e51;
static PyObject *const_tuple_411972e912d706a64e285af8aa597505_tuple;
static PyObject *const_str_plain___slots__;
static PyObject *const_tuple_str_digest_3f74da80d70054f566244d16961c095c_tuple;
static PyObject *const_str_plain_httplib;
static PyObject *const_str_plain_get_function_code;
static PyObject *const_str_digest_4082068f02f117842a4eba60151ac8c5;
static PyObject *const_str_plain_addbase;
static PyObject *const_str_plain__assertRegex;
static PyObject *const_str_plain_temporary_class;
static PyObject *const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple;
extern PyObject *const_str_plain___init__;
extern PyObject *const_str_plain_s;
static PyObject *const_str_plain_SimpleDialog;
static PyObject *const_str_plain__module;
extern PyObject *const_str_plain_items;
static PyObject *const_str_digest_44b5a94106b8a7650b1be1b19e45a62a;
extern PyObject *const_str_plain_new;
static PyObject *const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple;
static PyObject *const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple;
static PyObject *const_str_digest_8cc5006936e02b61706e4ff874fb2042;
static PyObject *const_str_digest_dc51ca580cc759241b93115ce34bf24c;
static PyObject *const_str_digest_dc2910a6e816441d866e674df51d57ac;
static PyObject *const_str_plain___traceback__;
static PyObject *const_str_plain_HTMLParser;
static PyObject *const_tuple_5fefbced8180c1de12054109841aa2ac_tuple;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_str_plain_StringIO;
extern PyObject *const_str_plain___name__;
static PyObject *const_str_plain_addinfo;
static PyObject *const_str_digest_813378a9c91048d7990696da82a61814;
static PyObject *const_str_digest_f2936f958cb3c1b034c6b02cfe0f019b;
static PyObject *const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple;
static PyObject *const_str_digest_a13cea3eac144232780ec70fab3f1816;
static PyObject *const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple;
static PyObject *const_str_plain_updated;
static PyObject *const_tuple_187fbe928d64ead4410a5c32362e3350_tuple;
static PyObject *const_str_digest_4c46721e9886c5db124415a36253d572;
extern PyObject *const_str_plain___dir__;
static PyObject *const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple;
static PyObject *const_str_plain_tkinter_filedialog;
static PyObject *const_str_plain_tkinter_scrolledtext;
static PyObject *const_str_plain__urllib_response_moved_attributes;
static PyObject *const_str_plain_HTTPCookieProcessor;
static PyObject *const_tuple_5992db94de979792d5ee74224566d5a1_tuple;
static PyObject *const_tuple_1a887db86b993bc5af6452d60025b66a_tuple;
extern PyObject *const_str_plain_map;
static PyObject *const_tuple_str_digest_377bbfde508aa04103b00d9192b3b50d_tuple;
static PyObject *const_str_plain_BaseHTTPServer;
static PyObject *const_tuple_str_plain_klass_tuple;
static PyObject *const_str_plain_assertRegexpMatches;
static PyObject *const_str_plain_getitem;
static PyObject *const_str_plain_html_entities;
extern PyObject *const_str_plain_integer_types;
static PyObject *const_str_digest_ef5ae5746ab9ada338d738fcd9ef185d;
static PyObject *const_tuple_str_plain_func_str_plain_doc_tuple;
static PyObject *const_str_digest_a4e649f6214f3135948e9d5aa86ed118;
extern PyObject *const_str_plain_kw;
static PyObject *const_str_plain_viewvalues;
static PyObject *const_str_digest_98007d19004f11322e99f7f66acdf51d;
extern PyObject *const_str_plain_klass;
static PyObject *const_str_plain_orig_vars;
static PyObject *const_tuple_str_plain_self_str_plain_six_module_name_tuple;
static PyObject *const_str_digest_6fdf710e7d63e48e68391e1f587ae0a5;
static PyObject *const_str_plain_tkinter_simpledialog;
static PyObject *const_str_plain_FileHandler;
static PyObject *const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple;
static PyObject *const_str_digest_64f81132823110b66a668f94ef3217ac;
static PyObject *const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple;
static PyObject *const_str_plain_importer;
static PyObject *const_tuple_str_plain_flush_false_tuple;
static PyObject *const_str_plain_raw_input;
static PyObject *const_str_plain_HTTPPasswordMgrWithDefaultRealm;
static PyObject *const_str_plain_old_attr;
static PyObject *const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple;
static PyObject *const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple;
extern PyObject *const_str_plain_module;
static PyObject *const_str_plain_func_defaults;
static PyObject *const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple;
extern PyObject *const_str_plain_sys;
extern PyObject *const_str_digest_04991ea695faff4a76e4efb6a8a8593f;
static PyObject *const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple;
static PyObject *const_tuple_586a1339d35425b5e4ad734e75b48193_tuple;
static PyObject *const_tuple_str_plain_viewitems_tuple;
static PyObject *const_str_plain_python_2_unicode_compatible;
extern PyObject *const_str_plain_winreg;
static PyObject *const_tuple_str_plain_six_tuple;
static PyObject *const_str_digest_d0401b822b5416e385c0ccdc99657532;
static PyObject *const_str_plain__moved_attributes;
static PyObject *const_str_plain_xmlrpc_client;
static PyObject *const_str_plain___unicode__;
static PyObject *const_str_plain_reload_module;
extern PyObject *const_str_plain_copy_reg;
static PyObject *const_tuple_424b5876d9142cfd116cee7c287158fe_tuple;
static PyObject *const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple;
static PyObject *const_str_digest_36b48fae7858438c9796c3d30c76579f;
static PyObject *const_str_digest_8f714300b54df1f07c5ea6ab3e1ef1e0;
extern PyObject *const_str_plain_self;
static PyObject *const_tuple_bb96d7dab96c950426bed873db7c315f_tuple;
static PyObject *const_str_digest_0796df54888fe073ef078d402adc4fc3;
static PyObject *const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple;
extern PyObject *const_str_plain_PY3;
static PyObject *const_str_plain_remove_move;
static PyObject *const_str_plain_wrapped;
static PyObject *const_str_digest_41c64468a0c9e92d8eea5f7e817937e8;
static PyObject *const_str_plain_func_globals;
static PyObject *const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple;
extern PyObject *const_str_plain_delattr;
extern PyObject *const_str_plain_operator;
static PyObject *const_tuple_str_plain_values_tuple;
static PyObject *const_str_digest_7cd96a434c5e7c2d0afa70c5bbed7be7;
static PyObject *const_str_digest_af06de2d225df4407b0a0ba06a331ccf;
extern PyObject *const_str_plain_mod;
static PyObject *const_str_plain_gdbm;
static PyObject *const_str_digest_377bbfde508aa04103b00d9192b3b50d;
static PyObject *const_str_plain_Queue;
static PyObject *const_tuple_str_digest_39084269160328bfe64f57e4e4ad6847_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_fullname_tuple;
static PyObject *const_tuple_320c4efc844604789134735e48a67fb0_tuple;
static PyObject *const_str_plain_urllib;
extern PyObject *const_str_plain___getattr__;
extern PyObject *const_str_digest_59bc9c95777e64e4720c3af0837aec42;
static PyObject *const_str_plain_indexbytes;
static PyObject *const_tuple_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8_tuple;
static PyObject *const_tuple_str_digest_813378a9c91048d7990696da82a61814_tuple;
static PyObject *const_str_plain_AbstractBasicAuthHandler;
static PyObject *const_str_plain_reload;
static PyObject *const_str_plain_quote;
static PyObject *const_tuple_str_plain_d_str_plain_kw_tuple;
static PyObject *const_str_plain__MovedItems;
extern PyObject *const_str_plain_urllib2;
static PyObject *const_str_plain___get_module;
extern PyObject *const_str_plain_encode;
extern PyObject *const_str_plain_platform;
static PyObject *const_str_plain___weakref__;
extern PyObject *const_str_plain_exec;
static PyObject *const_tuple_str_plain_func_str_plain_cls_tuple;
extern PyObject *const_str_plain_java;
static PyObject *const_str_plain__LazyModule;
static PyObject *const_str_plain_tkSimpleDialog;
static PyObject *const_str_plain_im_self;
static PyObject *const_str_plain_HTTPDigestAuthHandler;
static PyObject *const_str_plain_tkFont;
static PyObject *const_str_plain_quote_plus;
extern PyObject *const_tuple_empty;
static PyObject *const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple;
static PyObject *const_str_plain_metaclass;
static PyObject *const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple;
static PyObject *const_str_plain_byte2int;
static PyObject *const_str_plain_Tix;
static PyObject *const_str_digest_0f70f5ebb503ca09ef40fe7293d50ca9;
extern PyObject *const_str_plain_strict;
static PyObject *const_str_digest_36bd400ddf45050462a62a66cdace7eb;
extern PyObject *const_str_plain_kwargs;
static PyObject *const_str_plain__meth_self;
static PyObject *const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple;
static PyObject *const_str_digest_087d011e227804c37fa5a994ee918bbe;
static PyObject *const_str_digest_a13035c59d0f0e8c04a4feacc0004cd7;
static PyObject *const_str_plain_MAXSIZE;
static PyObject *const_str_plain_assertRegex;
static PyObject *const_str_plain_shlex_quote;
static PyObject *const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple;
static PyObject *const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple;
static PyObject *const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple;
static PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_klass_tuple;
extern PyObject *const_str_plain_ord;
extern PyObject *const_str_plain___next__;
static PyObject *const_str_digest_52da6974eceb6e05255f92901fc2e2f2;
static PyObject *const_str_digest_1e91aab42d00f04e391d84545f09e2f5;
static PyObject *const_str_digest_97d8b3849ccb4841962c7ac18f0af059;
static PyObject *const_str_digest_122cdcc1600da4a884855d78ecd7756a;
static PyObject *const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple;
static PyObject *const_str_plain_RobotFileParser;
static PyObject *const_str_plain_submodule_search_locations;
static PyObject *const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple;
static PyObject *const_str_plain_AbstractDigestAuthHandler;
static PyObject *const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple;
extern PyObject *const_str_plain_reduce;
static PyObject *const_tuple_389a28f291802cc0a0085952a3a22b60_tuple;
extern PyObject *const_str_plain_input;
static PyObject *const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple;
static PyObject *const_str_plain__get_module;
static PyObject *const_str_plain_tkFileDialog;
static PyObject *const_str_plain_ProxyHandler;
extern PyObject *const_str_plain_cPickle;
static PyObject *const_str_plain_get_function_globals;
static PyObject *const_str_plain_HTTPError;
static PyObject *const_str_digest_5b3beed978ba6433285f8986661c0d63;
static PyObject *const_str_plain_dbm_gnu;
static PyObject *const_str_plain__assertCountEqual;
static PyObject *const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple;
static PyObject *const_str_plain_tkinter_tksimpledialog;
static PyObject *const_str_plain_ClassType;
static PyObject *const_str_plain__func_code;
static PyObject *const_str_plain_slots_var;
static PyObject *const_str_digest_8ed3cb4f9a51eabd8e6addcef83694a3;
extern PyObject *const_str_plain_arg;
static PyObject *const_tuple_str_plain_sep_none_tuple;
extern PyObject *const_str_plain___metaclass__;
static PyObject *const_tuple_b95736e8f51c92667f5e42089a453e06_tuple;
static PyObject *const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple;
extern PyObject *const_str_plain__thread;
static PyObject *const_str_plain_tkinter_colorchooser;
static PyObject *const_str_plain_FTPHandler;
static PyObject *const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple;
static PyObject *const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a;
extern PyObject *const_str_plain_xrange;
extern PyObject *const_tuple_none_none_tuple;
static PyObject *const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple;
static PyObject *const_str_plain_tkinter_commondialog;
static PyObject *const_int_pos_2147483647;
extern PyObject *const_str_plain_newline;
static PyObject *const_tuple_str_digest_da28dd0fdfcf2d692298525ceb765fa8_tuple;
static PyObject *const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple;
extern PyObject *const_str_plain_replace;
static PyObject *const_str_plain_lists;
static PyObject *const_str_digest_7cb7e1a5659547478f12d8fe755efd75;
static PyObject *const_str_plain__func_closure;
extern PyObject *const_str_plain_path;
static PyObject *const_str_plain_assertRaisesRegex;
static PyObject *const_tuple_23e241754072378d4aca55ebd413fe81_tuple;
static PyObject *const_tuple_78e9781575bd6d8322d39e052488fa24_tuple;
extern PyObject *const_str_plain___new__;
static PyObject *const_str_digest_c18de21b4af59af9eda7ad848834774a;
static PyObject *const_str_plain_http_client;
static PyObject *const_str_plain_unquote;
static PyObject *const_str_plain_tkColorChooser;
static PyObject *const_str_plain___loader__;
static PyObject *const_str_plain_Cookie;
extern PyObject *const_str_plain_doc;
static PyObject *const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple;
extern PyObject *const_str_plain_name;
static PyObject *const_str_plain_tkinter_dnd;
static PyObject *const_str_digest_12251381889b9eebcd7998baa486eb86;
static PyObject *const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple;
extern PyObject *const_str_plain_collections;
extern PyObject *const_str_plain_wrapper;
static PyObject *const_str_digest_cc1200855d2ddc077676ac963b3ffc09;
static PyObject *const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple;
static PyObject *const_str_plain_chr;
static PyObject *const_str_plain_binary_type;
static PyObject *const_str_plain_getcwd;
extern PyObject *const_str_plain_f_globals;
static PyObject *const_str_digest_70a0120f28d7311f633323a6bfb46104;
static PyObject *const_str_plain_iterbytes;
static PyObject *const_tuple_str_digest_cc1200855d2ddc077676ac963b3ffc09_tuple;
static PyObject *const_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38;
static PyObject *const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple;
static PyObject *const_str_plain_email_mime_base;
static PyObject *const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple;
static PyObject *const_str_digest_6a93038d6d3774db54a1e6e70149bd98;
static PyObject *const_str_plain_UnknownHandler;
static PyObject *const_str_plain_add_metaclass;
static PyObject *const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple;
static PyObject *const_tuple_991a248aa1804f30822646929a31e57a_tuple;
extern PyObject *const_str_plain_bs;
static PyObject *const_str_plain___globals__;
static PyObject *const_str_plain_addinfourl;
static PyObject *const_str_plain_splitquery;
static PyObject *const_str_plain_uses_relative;
static PyObject *const_str_digest_c94e49aa6b31218158c33258bda42655;
static PyObject *const_str_plain_new_mod;
extern PyObject *const_str_plain_struct;
static PyObject *const_tuple_3587390c695a62b1bc9b3790076ef063_tuple;
static PyObject *const_str_plain_WRAPPER_ASSIGNMENTS;
extern PyObject *const_str_plain_itemgetter;
static PyObject *const_str_plain_getcwdu;
static PyObject *const_str_digest_096ca139beaf8ac5201071e235ad66b6;
static PyObject *const_str_plain_cookielib;
static PyObject *const_str_plain_SimpleHTTPServer;
static PyObject *const_str_plain_parse;
static PyObject *const_str_plain__assertRaisesRegex;
static PyObject *const_tuple_str_digest_f4d3a600a6e16b82e3f10867b851d5a1_tuple;
extern PyObject *const_str_plain_types;
static PyObject *const_str_plain_meta;
static PyObject *const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple;
extern PyObject *const_tuple_int_pos_1_tuple;
static PyObject *const_str_digest_a5f041d60ba724151c334293929df649;
static PyObject *const_str_digest_af845b30b77af5531a80edf50d295161;
static PyObject *const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple;
static PyObject *const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple;
static PyObject *const_str_plain_get_code;
static PyObject *const_str_digest_2f383546f01c636d68b29330ba99dcef;
static PyObject *const_tuple_str_plain_builtins_str_plain___builtin___tuple;
static PyObject *const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple;
static PyObject *const_str_plain_tkMessageBox;
extern PyObject *const_str_plain_print;
static PyObject *const_str_digest_1d2e267f2ccdeb84fbf4cb4191414e9f;
static PyObject *const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple;
static PyObject *const_str_plain_getproxies;
extern PyObject *const_str_plain_frame;
static PyObject *const_str_plain_http_cookies;
static PyObject *const_str_plain_xmlrpclib;
static PyObject *const_str_plain_Module_six_moves_urllib_error;
extern PyObject *const_str_plain_PY2;
static PyObject *const_str_plain_UserList;
static PyObject *const_tuple_547fe239a3216bb76fb01949941399cd_tuple;
static PyObject *const_str_plain_uses_params;
static PyObject *const_str_plain__urllib_parse_moved_attributes;
static PyObject *const_str_plain_WRAPPER_UPDATES;
static PyObject *const_str_plain_xmlrpc_server;
static PyObject *const_tuple_str_plain_reprlib_str_plain_repr_tuple;
static PyObject *const_str_plain_getcwdb;
static PyObject *const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple;
static PyObject *const_str_plain_htmlentitydefs;
static PyObject *const_tuple_str_plain_end_none_tuple;
static PyObject *const_str_plain_CGIHTTPServer;
extern PyObject *const_str_plain___call__;
extern PyObject *const_str_plain_ConfigParser;
static PyObject *const_str_digest_1a36329ae97c46a5978110ca53f2f5e7;
extern PyObject *const_str_plain_partial;
static PyObject *const_str_plain_urlsplit;
extern PyObject *const_str_plain_builtins;
extern PyObject *const_tuple_type_object_tuple;
static PyObject *const_str_plain__func_globals;
static PyObject *const_str_plain_six_module_name;
static PyObject *const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple;
static PyObject *const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple;
static PyObject *const_str_plain_Module_six_moves_urllib_parse;
extern PyObject *const_str_plain_tp;
static PyObject *const_str_plain_get_function_defaults;
static PyObject *const_long_pos_2147483648;
static PyObject *const_str_plain_tkinter_messagebox;
static PyObject *const_str_plain_ScrolledText;
static PyObject *const_tuple_str_plain_value_str_plain_from_value_tuple;
static PyObject *const_str_plain_email_mime_text;
static PyObject *const_str_digest_4f965162d0a8bf5d5b4136bee888b84b;
static PyObject *const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple;
static PyObject *const_str_plain_pipes;
static PyObject *const_str_digest_fcac682f3d9b9835f1b6816f54ff0830;
extern PyObject *const_str_plain_configparser;
static PyObject *const_str_plain__meth_func;
static PyObject *const_tuple_int_pos_3_int_pos_3_tuple;
static PyObject *const_str_digest_0e07ea38c4cf2fbcefc89e7de4db934c;
static PyObject *const_str_plain_dummy_thread;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_pack;
static PyObject *const_str_plain__urllib_request_moved_attributes;
static PyObject *const_tuple_efb9818f797f41ca8cd537504758b934_tuple;
extern PyObject *const_str_plain_it;
static PyObject *const_str_digest_89029d2dedfd3a97fd4d41a1b57a375b;
extern PyObject *const_str_plain_file;
static PyObject *const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple;
static PyObject *const_tuple_cf52b2b37e911829df5ff352b85be861_tuple;
static PyObject *const_str_plain_robotparser;
extern PyObject *const_str_plain_maxsize;
static PyObject *const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple;
static PyObject *const_str_plain_HTTPErrorProcessor;
static PyObject *const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple;
static PyObject *const_str_plain__SixMetaPathImporter__get_module;
static PyObject *const_str_plain_viewkeys;
static PyObject *const_str_plain_urlcleanup;
extern PyObject *const_str_plain_f_locals;
static PyObject *const_tuple_str_plain___dict___none_tuple;
static PyObject *const_long_pos_9223372036854775807;
extern PyObject *const_str_plain_value;
static PyObject *const_str_plain_tkCommonDialog;
static PyObject *const_str_plain__add_doc;
extern PyObject *const_str_plain_urlparse;
static PyObject *const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple;
static PyObject *const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple;
static PyObject *const_str_plain_MovedModule;
static PyObject *const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple;
static PyObject *const_str_plain_socketserver;
extern PyObject *const_str_plain_wraps;
static PyObject *const_tuple_str_plain_viewkeys_tuple;
static PyObject *const_str_digest_39084269160328bfe64f57e4e4ad6847;
static PyObject *const_tuple_str_digest_44b5a94106b8a7650b1be1b19e45a62a_tuple;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_str_plain_buf;
static PyObject *const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple;
static PyObject *const_str_plain_HTTPDefaultErrorHandler;
static PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain_error;
static PyObject *const_str_digest_0e7fae28a2f47cf9bbe813dcd6d34e25;
static PyObject *const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple;
static PyObject *const_str_plain_create_unbound_method;
static PyObject *const_str_plain__importer;
static PyObject *const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple;
static PyObject *const_str_plain_raise_from;
static PyObject *const_tuple_type_int_type_long_tuple;
static PyObject *const_str_digest_53317e6be879446851f4fe6f94b546e7;
static PyObject *const_str_plain_get_method_self;
extern PyObject *const_str_plain_errors;
static PyObject *const_str_digest_492eced51578a561806e20ae8ef1f867;
extern PyObject *const_str_plain_modules;
extern PyObject *const_int_pos_4;
extern PyObject *const_int_pos_2;
extern PyObject *const_int_pos_3;
extern PyObject *const_int_pos_1;
static PyObject *const_str_plain_class_types;
extern PyObject *const_str_plain_old;
static PyObject *const_str_plain_shlex;
static PyObject *const_str_plain_moves;
extern PyObject *const_str_plain_iter;
static PyObject *const_str_plain_get_function_closure;
static PyObject *const_str_plain___author__;
static PyObject *const_str_plain__globs_;
static PyObject *const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple;
static PyObject *const_str_digest_dde65581d0349b25365c94106df5eaa4;
static PyObject *const_str_plain_urlunsplit;
static PyObject *const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple;
extern PyObject *const_str_space;
static PyObject *const_str_plain_tkinter_constants;
static PyObject *const_str_digest_67aba58fab2484c4d294c8cbe1258e39;
static PyObject *const_str_plain__LazyDescr;
static PyObject *const_str_plain_email_mime_nonmultipart;
static PyObject *const_str_digest_1164690e1be4282a96b5a813ded7269b;
static PyObject *const_str_plain_cStringIO;
static PyObject *const_str_plain_get_method_function;
static PyObject *const_str_plain_space;
extern PyObject *const_str_plain_UserDict;
extern PyObject *const_str_plain_io;
static PyObject *const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple;
static PyObject *const_str_digest_13baab1dc3d5588a95d9291b1530e6c0;
static PyObject *const_str_plain_pathname2url;
static PyObject *const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple;
static PyObject *const_str_plain_tkinter_tkfiledialog;
static PyObject *const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple;
static PyObject *const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple;
extern PyObject *const_str_plain_functools;
static PyObject *const_str_plain_urljoin;
static PyObject *const_str_plain_assertRaisesRegexp;
extern PyObject *const_str_plain_attr;
static PyObject *const_str_plain_parse_qs;
static PyObject *const_str_plain_Tkdnd;
static PyObject *const_str_plain_Module_six_moves_urllib_response;
static PyObject *const_str_plain__locs_;
static PyObject *const_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8;
static PyObject *const_str_plain_string_types;
static PyObject *const_tuple_161fc844a072f0af4aef9f4d296def14_tuple;
static PyObject *const_tuple_str_digest_492eced51578a561806e20ae8ef1f867_tuple;
static PyObject *const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple;
static PyObject *const_tuple_90e06424913ba9ad885f60767479fe37_tuple;
extern PyObject *const_str_plain_result;
extern PyObject *const_str_plain_fp;
extern PyObject *const_str_plain_X;
static PyObject *const_str_plain_urlunparse;
static PyObject *const_tuple_type_str_tuple;
static PyObject *const_str_plain___self__;
static PyObject *const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple;
extern PyObject *const_str_plain_stdout;
static PyObject *const_str_plain_with_metaclass;
static PyObject *const_str_digest_d082ba711c791809312af019a50cc3ce;
static PyObject *const_tuple_str_plain_metaclass_str_plain_wrapper_tuple;
extern PyObject *const_str_plain_ModuleType;
static PyObject *const_str_digest_54cded0ef8d4888ef8d4539bd6707aa4;
extern PyObject *const_str_plain_d;
static PyObject *const_str_plain_int2byte;
extern PyObject *const_str_plain_iterkeys;
static PyObject *const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd;
static PyObject *const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple;
static PyObject *const_str_digest_836236e827883e9923f3b043ffe4640d;
extern PyObject *const_tuple_str_plain_s_tuple;
static PyObject *const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple;
extern PyObject *const_str_plain_u;
extern PyObject *const_str_plain___dict__;
extern PyObject *const_str_plain___defaults__;
static PyObject *const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple;
extern PyObject *const_str_plain_flush;
static PyObject *const_str_plain_urllib_error;
static PyObject *const_str_plain_unquote_plus;
static PyObject *const_str_plain_iterlists;
static PyObject *const_str_plain_tkinter_ttk;
static PyObject *const_str_plain_filterfalse;
static PyObject *const_str_plain_ttk;
static PyObject *const_tuple_str_plain_bs_tuple;
static PyObject *const_str_plain_ContentTooShortError;
static PyObject *const_str_plain_methodcaller;
static PyObject *const_tuple_45037418d37481db3e88817f5f3e75d5_tuple;
static PyObject *const_str_digest_0f0322cacec3a164468e788b6cf4cba4;
static PyObject *const_list_str_plain___doc___str_plain___name___list;
static PyObject *const_str_digest_b136a150499b95c9a0929c5fba6642cb;
static PyObject *const_str_plain_get_unbound_function;
extern PyObject *const_str_plain_win32;
static PyObject *const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple;
extern PyObject *const_str_plain_imp;
static PyObject *const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple;
static PyObject *const_tuple_str_digest_62b7e67e29e99420603c12d205222fa5_tuple;
static PyObject *const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple;
static PyObject *const_str_plain_viewitems;
static PyObject *const_str_plain_want_unicode;
static PyObject *const_str_plain_MovedAttribute;
extern PyObject *const_str_plain_zip;
extern PyObject *const_str_plain_load_module;
extern PyObject *const_str_plain_MethodType;
extern PyObject *const_int_0;
extern PyObject *const_str_plain_repr;
static PyObject *const_str_plain_html_parser;
static PyObject *const_str_plain_zip_longest;
static PyObject *const_str_plain_unbound;
static PyObject *const_str_plain_six;
static PyObject *const_tuple_b7e39273727f74459e3203a2be1ea787_tuple;
extern PyObject *const_str_plain___version__;
static PyObject *const_str_digest_7e4f7e7d87a44d0e81f11f08170c9bf6;
static PyObject *const_str_plain_uses_netloc;
extern PyObject *const_str_plain_callable;
static PyObject *const_str_plain_Iterator;
static PyObject *const_str_digest_a343d5bd65de7d15893f1a0d02d09f45;
extern PyObject *const_str_plain__getframe;
static PyObject *const_str_plain_Tkinter;
static PyObject *const_str_plain_url2pathname;
static PyObject *const_str_plain_reraise;
static PyObject *const_str_plain_tkinter_tix;
extern PyObject *const_str_plain_append;
static PyObject *const_str_plain_BytesIO;
static PyObject *const_tuple_e79d7f1b4734be0e37665951db297244_tuple;
static PyObject *const_str_plain_response;
static PyObject *const_str_plain_email_mime_multipart;
static PyObject *const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple;
static PyObject *const_str_plain_splituser;
extern PyObject *const_str_plain_thread;
static PyObject *const_str_digest_bdf07efe689edd815848f7ba41ea2eee;
extern PyObject *const_tuple_str_plain_name_tuple;
static PyObject *const_str_digest_a72c0d952f927fbb71c170425931b6ab;
static PyObject *const_str_plain_ProxyBasicAuthHandler;
static PyObject *const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple;
extern PyObject *const_str_angle_lambda;
extern PyObject *const_str_plain_copy;
static PyObject *const_str_plain_attrgetter;
static PyObject *const_str_plain_HTTPHandler;
static PyObject *const_str_digest_62b7e67e29e99420603c12d205222fa5;
static PyObject *const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple;
extern PyObject *const_str_plain___package__;
static PyObject *const_str_digest_2a86adf5a4eff7c85cf98b964b9653c8;
static PyObject *const_str_plain_splittag;
static PyObject *const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple;
extern PyObject *const_str_plain_func;
static PyObject *const_str_plain__code_;
static PyObject *const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple;
static PyObject *const_tuple_3adb059b24d1b9435823e57bdb130564_tuple;
static PyObject *const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple;
static PyObject *const_str_plain_izip_longest;
static PyObject *const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple;
static PyObject *const_str_digest_62c17ddfba14b5f942749b77083b82bc;
extern PyObject *const_dict_empty;
static PyObject *const_str_plain_ProxyDigestAuthHandler;
static PyObject *const_str_digest_0f169d7824efcd520f23c128909f68ee;
static PyObject *const_str_digest_72df134f8c83427ccf218c27297b8304;
static PyObject *const_str_plain_func_closure;
static PyObject *const_str_digest_745e67bb7def529140f256e556b67b38;
static PyObject *const_str_plain_queue;
static PyObject *const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple;
static PyObject *const_tuple_1a737763e143149741eebf35b19ac3f9_tuple;
static PyObject *const_str_digest_91987f05961643baf523130276babe51;
static PyObject *const_str_plain_new_attr;
extern PyObject *const_str_plain_next;
static PyObject *const_str_plain__add_module;
static PyObject *const_str_plain_intern;
static PyObject *const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple;
static PyObject *const_tuple_str_plain___module___str_plain___new___tuple;
static PyObject *const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple;
static PyObject *const_str_plain_Module_six_moves_urllib;
static PyObject *const_str_plain_parse_qsl;
static PyObject *const_str_plain_exec_;
static PyObject *const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple;
extern PyObject *const_str_plain___builtin__;
static PyObject *const_str_plain_urllib_robotparser;
static PyObject *const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple;
static PyObject *const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple;
static PyObject *const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple;
static PyObject *const_unicode_space;
extern PyObject *const_str_plain_range;
static PyObject *const_str_digest_bc859a90e4d9c0b4fce03f66d37f0cf6;
extern PyObject *const_unicode_newline;
static PyObject *const_tuple_a766c17241115f6922b493dfd444b3b5_tuple;
static PyObject *const_tuple_d573636f316e67f758ce3eddfc433d39_tuple;
static PyObject *const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple;
extern PyObject *const_str_plain___str__;
static PyObject *const_str_plain_move;
static PyObject *const_tuple_983a57efce70dcb41da6c64e832b9120_tuple;
static PyObject *const_str_plain__import_module;
static PyObject *const_str_plain_http_cookiejar;
static PyObject *const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple;
static PyObject *const_str_plain_with_traceback;
static PyObject *const_str_plain_add_move;
static PyObject *const_str_plain_SocketServer;
static PyObject *const_str_plain__urllib_error_moved_attributes;
extern PyObject *const_str_plain___len__;
static PyObject *const_str_plain_tkinter_font;
static PyObject *const_str_plain_uses_fragment;
static PyObject *const_str_plain__SixMetaPathImporter;
extern PyObject *const_str_plain__dummy_thread;
extern PyObject *const_tuple_int_0_tuple;
static PyObject *const_str_digest_f5cee510562e6ca85d00c7ce91a1eee8;
extern PyObject *const_str_plain_find_module;
static PyObject *const_str_digest_45c254f6a6153d392478fd2944a253a6;
static PyObject *const_str_plain__resolve;
static PyObject *const_str_plain_SplitResult;
static PyObject *const_tuple_str_plain_func_str_plain_obj_tuple;
static PyObject *const_str_digest_345fae18cb5b2b245881e77b200cffe5;
extern PyObject *const_str_plain_version_info;
static PyObject *const_str_plain_urlretrieve;
static PyObject *const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple;
static PyObject *const_str_plain_func_code;
static PyObject *const_tuple_5e662527879cefa60fbd95a7550cf311_tuple;
static PyObject *const_str_plain_fullnames;
static PyObject *const_str_plain_request;
static PyObject *const_str_plain_uses_query;
static PyObject *const_str_digest_b0187e473195d5f4e7f8d9079ea0b7b3;
extern PyObject *const_str_plain___module__;
static PyObject *const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple;
static PyObject *const_str_digest_d8d4f5e440c7f01129293c18f6555af5;
static PyObject *const_tuple_str_digest_666540d560c14e9851ed9be690845abf_tuple;
static PyObject *const_str_plain_build_opener;
static PyObject *const_str_plain_FileDialog;
static PyObject *const_str_digest_666540d560c14e9851ed9be690845abf;
static PyObject *const_str_plain_Tkconstants;
static PyObject *const_str_plain_HTTPSHandler;
static PyObject *const_str_plain_install_opener;
static PyObject *const_str_plain_CacheFTPHandler;
static PyObject *const_tuple_str_plain___weakref___none_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple;
static PyObject *const_str_plain_bases;
static PyObject *const_str_plain___get__;
static PyObject *const_tuple_str_digest_a5f041d60ba724151c334293929df649_tuple;
static PyObject *const_tuple_31e595002f80a39949775964212a97b9_tuple;
static PyObject *const_str_plain_Module_six_moves_urllib_robotparser;
extern PyObject *const_str_dot;
static PyObject *const_tuple_str_plain_keys_tuple;
static PyObject *const_str_plain_known_modules;
static PyObject *const_str_digest_da28dd0fdfcf2d692298525ceb765fa8;
static PyObject *const_tuple_15e64786f005915ad409681ea2752bf5_tuple;
extern PyObject *const_str_plain_pop;
static PyObject *const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple;
extern PyObject *const_str_plain_values;
static PyObject *const_str_plain_reprlib;
static PyObject *const_str_digest_f13c881fad34db50f71983f3aeb67682;
static PyObject *const_str_plain___wrapped__;
static PyObject *const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple;
static PyObject *const_str_plain_Module_six_moves_urllib_request;
static PyObject *const_str_plain_print_;
static PyObject *const_str_plain_BaseHandler;
static PyObject *const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple;
static PyObject *const_str_plain_this_bases;
static PyObject *const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple;
extern PyObject *const_str_plain_URLError;
static PyObject *const_str_plain__urllib_robotparser_moved_attributes;
static PyObject *const_str_plain_ifilter;
static PyObject *const_str_plain_HTTPPasswordMgr;
extern PyObject *const_str_newline;
static PyObject *const_str_plain_URLopener;
static PyObject *const_str_plain_filter;
static PyObject *const_tuple_str_plain_it_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_module_tuple;
static PyObject *const_list_1c82cc17d8f54cff757731adfdff677e_list;
extern PyObject *const_str_plain_urlopen;
extern PyObject *const_str_plain_obj;
extern PyObject *const_str_plain__winreg;
static PyObject *const_str_plain_tkinter_dialog;
static PyObject *const_str_plain_attrs;
static PyObject *const_tuple_str_plain_move_tuple;
static PyObject *const_tuple_str_plain_buf_str_plain_i_tuple;
extern PyObject *const_tuple_str_plain_obj_tuple;
static PyObject *const_tuple_str_plain_unbound_tuple;
static PyObject *const_str_plain_create_bound_method;
static PyObject *const_str_plain___mro__;
static PyObject *const_tuple_int_pos_3_int_pos_4_tuple;
static PyObject *const_tuple_int_pos_3_int_pos_2_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_name_tuple;
static PyObject *const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple;
static PyObject *const_str_plain_urllib_parse;
static PyObject *const_str_digest_ebf751844f7678efef5423dab5acd577;
static PyObject *const_str_plain_assertItemsEqual;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
static PyObject *const_str_digest_faf5973379f42e9b5528565b323f20e0;
static PyObject *const_str_plain_old_mod;
extern PyObject *const_str_plain___code__;
extern PyObject *const_str_digest_f1949150375e8b53443d58d93fe4f89e;
extern PyObject *const_str_plain_any;
extern PyObject *const_str_plain_absolute_import;
static PyObject *const_tuple_df925d4985bc969100774d9243b00230_tuple;
static PyObject *const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple;
static PyObject *const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple;
extern PyObject *const_str_plain___bases__;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_digest_c1940ed36d6c651776a6e3a34c7131e3;
static PyObject *const_str_plain_PY34;
static PyObject *const_tuple_str_plain_items_tuple;
static PyObject *const_tuple_097719e7086f8299513e74ca5958de16_tuple;
static PyObject *const_str_digest_49a9c7122d03f39309f825cb4f8684d5;
static PyObject *const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple;
static PyObject *const_tuple_1ca2df1302c361039c60608fe3780090_tuple;
static PyObject *const_str_plain_advance_iterator;
extern PyObject *const_str_plain_fullname;
static PyObject *const_str_plain_UserString;
static PyObject *const_tuple_str_plain_winreg_str_plain__winreg_tuple;
static PyObject *const_str_plain_addclosehook;
static PyObject *const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple;
extern PyObject *const_str_plain_keys;
extern PyObject *const_str_plain_end;
static PyObject *const_tuple_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd_tuple;
static PyObject *const_str_plain_from_value;
static PyObject *const_tuple_str_plain_queue_str_plain_Queue_tuple;
static PyObject *const_str_plain_itervalues;
static PyObject *const_str_plain_Struct;
extern PyObject *const_str_plain_importlib;
static PyObject *const_str_plain_assertCountEqual;
static PyObject *const_str_plain_ParseResult;
static PyObject *const_str_plain_HTTPBasicAuthHandler;
extern PyObject *const_tuple_none_tuple;
static PyObject *const_str_plain_Dialog;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_str_plain___closure__ = UNSTREAM_STRING( &constant_bin[ 1568772 ], 11, 1 );
    const_str_digest_937e23fd1af2ef7336d82295a1301f51 = UNSTREAM_STRING( &constant_bin[ 1568783 ], 7, 0 );
    const_str_plain_HTTPRedirectHandler = UNSTREAM_STRING( &constant_bin[ 1568790 ], 19, 1 );
    const_tuple_str_plain___spec___tuple = PyTuple_New( 1 );
    const_str_plain___spec__ = UNSTREAM_STRING( &constant_bin[ 1568809 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___spec___tuple, 0, const_str_plain___spec__ ); Py_INCREF( const_str_plain___spec__ );
    const_str_plain__print = UNSTREAM_STRING( &constant_bin[ 97260 ], 6, 1 );
    const_tuple_str_plain_viewvalues_tuple = PyTuple_New( 1 );
    const_str_plain_viewvalues = UNSTREAM_STRING( &constant_bin[ 1568817 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_viewvalues_tuple, 0, const_str_plain_viewvalues ); Py_INCREF( const_str_plain_viewvalues );
    const_str_plain_slots = UNSTREAM_STRING( &constant_bin[ 1568827 ], 5, 1 );
    const_tuple_str_digest_d8d4f5e440c7f01129293c18f6555af5_tuple = PyTuple_New( 1 );
    const_str_digest_d8d4f5e440c7f01129293c18f6555af5 = UNSTREAM_STRING( &constant_bin[ 1568832 ], 9, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_d8d4f5e440c7f01129293c18f6555af5_tuple, 0, const_str_digest_d8d4f5e440c7f01129293c18f6555af5 ); Py_INCREF( const_str_digest_d8d4f5e440c7f01129293c18f6555af5 );
    const_str_digest_fa9629ad3e56524d94051e9d7ab9b735 = UNSTREAM_STRING( &constant_bin[ 1568841 ], 29, 0 );
    const_str_plain_urlencode = UNSTREAM_STRING( &constant_bin[ 1568870 ], 9, 1 );
    const_str_plain_OpenerDirector = UNSTREAM_STRING( &constant_bin[ 1568879 ], 14, 1 );
    const_tuple_02f51975eddf6871d90b3972207564b4_tuple = PyTuple_New( 3 );
    const_str_plain_HTTPDigestAuthHandler = UNSTREAM_STRING( &constant_bin[ 1568893 ], 21, 1 );
    PyTuple_SET_ITEM( const_tuple_02f51975eddf6871d90b3972207564b4_tuple, 0, const_str_plain_HTTPDigestAuthHandler ); Py_INCREF( const_str_plain_HTTPDigestAuthHandler );
    PyTuple_SET_ITEM( const_tuple_02f51975eddf6871d90b3972207564b4_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_02f51975eddf6871d90b3972207564b4_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_46f723d6309298cb06eb75b900616e85_tuple = PyTuple_New( 3 );
    const_str_plain_HTTPErrorProcessor = UNSTREAM_STRING( &constant_bin[ 1568914 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_46f723d6309298cb06eb75b900616e85_tuple, 0, const_str_plain_HTTPErrorProcessor ); Py_INCREF( const_str_plain_HTTPErrorProcessor );
    PyTuple_SET_ITEM( const_tuple_46f723d6309298cb06eb75b900616e85_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_46f723d6309298cb06eb75b900616e85_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple = PyTuple_New( 3 );
    const_str_plain_tkinter_dialog = UNSTREAM_STRING( &constant_bin[ 1568932 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple, 0, const_str_plain_tkinter_dialog ); Py_INCREF( const_str_plain_tkinter_dialog );
    const_str_plain_Dialog = UNSTREAM_STRING( &constant_bin[ 1568946 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple, 1, const_str_plain_Dialog ); Py_INCREF( const_str_plain_Dialog );
    const_str_digest_49a9c7122d03f39309f825cb4f8684d5 = UNSTREAM_STRING( &constant_bin[ 1568952 ], 14, 0 );
    PyTuple_SET_ITEM( const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple, 2, const_str_digest_49a9c7122d03f39309f825cb4f8684d5 ); Py_INCREF( const_str_digest_49a9c7122d03f39309f825cb4f8684d5 );
    const_str_digest_cce73c34157ad7a21f7265310a153ec1 = UNSTREAM_STRING( &constant_bin[ 1568966 ], 32, 0 );
    const_str_plain_SimpleXMLRPCServer = UNSTREAM_STRING( &constant_bin[ 1568998 ], 18, 1 );
    const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple = PyTuple_New( 3 );
    const_str_plain_UserList = UNSTREAM_STRING( &constant_bin[ 1569016 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple, 0, const_str_plain_UserList ); Py_INCREF( const_str_plain_UserList );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple, 1, const_str_plain_UserList ); Py_INCREF( const_str_plain_UserList );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple, 2, const_str_plain_collections ); Py_INCREF( const_str_plain_collections );
    const_str_plain_tb = UNSTREAM_STRING( &constant_bin[ 2735 ], 2, 1 );
    const_tuple_251221e54a5302daeb82388ea082ec95_tuple = PyTuple_New( 3 );
    const_str_plain_urlunsplit = UNSTREAM_STRING( &constant_bin[ 1569024 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_251221e54a5302daeb82388ea082ec95_tuple, 0, const_str_plain_urlunsplit ); Py_INCREF( const_str_plain_urlunsplit );
    PyTuple_SET_ITEM( const_tuple_251221e54a5302daeb82388ea082ec95_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_251221e54a5302daeb82388ea082ec95_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_assigned = UNSTREAM_STRING( &constant_bin[ 40257 ], 8, 1 );
    const_tuple_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38_tuple = PyTuple_New( 1 );
    const_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38 = UNSTREAM_STRING( &constant_bin[ 1569034 ], 25, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38_tuple, 0, const_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38 ); Py_INCREF( const_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38 );
    const_str_plain_unichr = UNSTREAM_STRING( &constant_bin[ 1569059 ], 6, 1 );
    const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple = PyTuple_New( 3 );
    const_str_plain_AbstractBasicAuthHandler = UNSTREAM_STRING( &constant_bin[ 1569065 ], 24, 1 );
    PyTuple_SET_ITEM( const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple, 0, const_str_plain_AbstractBasicAuthHandler ); Py_INCREF( const_str_plain_AbstractBasicAuthHandler );
    PyTuple_SET_ITEM( const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_urldefrag = UNSTREAM_STRING( &constant_bin[ 1569089 ], 9, 1 );
    const_str_digest_c075052d723d6707083e869a0e3659bb = UNSTREAM_STRING( &constant_bin[ 1569098 ], 5, 0 );
    const_tuple_4690034a949ab9ca5f391d7593b67689_tuple = PyTuple_New( 3 );
    const_str_plain_xmlrpc_server = UNSTREAM_STRING( &constant_bin[ 1569103 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_4690034a949ab9ca5f391d7593b67689_tuple, 0, const_str_plain_xmlrpc_server ); Py_INCREF( const_str_plain_xmlrpc_server );
    PyTuple_SET_ITEM( const_tuple_4690034a949ab9ca5f391d7593b67689_tuple, 1, const_str_plain_SimpleXMLRPCServer ); Py_INCREF( const_str_plain_SimpleXMLRPCServer );
    const_str_digest_8ed3cb4f9a51eabd8e6addcef83694a3 = UNSTREAM_STRING( &constant_bin[ 1569116 ], 13, 0 );
    PyTuple_SET_ITEM( const_tuple_4690034a949ab9ca5f391d7593b67689_tuple, 2, const_str_digest_8ed3cb4f9a51eabd8e6addcef83694a3 ); Py_INCREF( const_str_digest_8ed3cb4f9a51eabd8e6addcef83694a3 );
    const_tuple_104a70332acb2b4496703dc266a2c27c_tuple = PyTuple_New( 3 );
    const_str_plain_addinfourl = UNSTREAM_STRING( &constant_bin[ 1569129 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_104a70332acb2b4496703dc266a2c27c_tuple, 0, const_str_plain_addinfourl ); Py_INCREF( const_str_plain_addinfourl );
    const_str_plain_urllib = UNSTREAM_STRING( &constant_bin[ 1569044 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_104a70332acb2b4496703dc266a2c27c_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    const_str_digest_45c254f6a6153d392478fd2944a253a6 = UNSTREAM_STRING( &constant_bin[ 1569044 ], 15, 0 );
    PyTuple_SET_ITEM( const_tuple_104a70332acb2b4496703dc266a2c27c_tuple, 2, const_str_digest_45c254f6a6153d392478fd2944a253a6 ); Py_INCREF( const_str_digest_45c254f6a6153d392478fd2944a253a6 );
    const_str_digest_f5862b11e62dc1382b5d1226dd5ff379 = UNSTREAM_STRING( &constant_bin[ 1569139 ], 13, 0 );
    const_str_plain_imap = UNSTREAM_STRING( &constant_bin[ 1569152 ], 4, 1 );
    const_tuple_str_plain___slots___tuple = PyTuple_New( 1 );
    const_str_plain___slots__ = UNSTREAM_STRING( &constant_bin[ 1569156 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___slots___tuple, 0, const_str_plain___slots__ ); Py_INCREF( const_str_plain___slots__ );
    const_str_digest_1a0157fa26ba10861f95514e25366c69 = UNSTREAM_STRING( &constant_bin[ 1569165 ], 52, 0 );
    const_str_plain_FancyURLopener = UNSTREAM_STRING( &constant_bin[ 1569217 ], 14, 1 );
    const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple = PyTuple_New( 3 );
    const_str_plain_unquote = UNSTREAM_STRING( &constant_bin[ 1569231 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple, 0, const_str_plain_unquote ); Py_INCREF( const_str_plain_unquote );
    PyTuple_SET_ITEM( const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_type_basestring_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_type_basestring_tuple, 0, (PyObject *)&PyBaseString_Type ); Py_INCREF( (PyObject *)&PyBaseString_Type );
    const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple, 0, const_str_plain_copyreg ); Py_INCREF( const_str_plain_copyreg );
    PyTuple_SET_ITEM( const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple, 1, const_str_plain_copy_reg ); Py_INCREF( const_str_plain_copy_reg );
    const_tuple_45353a5ecbb9971e49387253d02aa926_tuple = PyTuple_New( 3 );
    const_str_plain_xmlrpc_client = UNSTREAM_STRING( &constant_bin[ 1569238 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_45353a5ecbb9971e49387253d02aa926_tuple, 0, const_str_plain_xmlrpc_client ); Py_INCREF( const_str_plain_xmlrpc_client );
    const_str_plain_xmlrpclib = UNSTREAM_STRING( &constant_bin[ 1569251 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_45353a5ecbb9971e49387253d02aa926_tuple, 1, const_str_plain_xmlrpclib ); Py_INCREF( const_str_plain_xmlrpclib );
    const_str_digest_72df134f8c83427ccf218c27297b8304 = UNSTREAM_STRING( &constant_bin[ 1569260 ], 13, 0 );
    PyTuple_SET_ITEM( const_tuple_45353a5ecbb9971e49387253d02aa926_tuple, 2, const_str_digest_72df134f8c83427ccf218c27297b8304 ); Py_INCREF( const_str_digest_72df134f8c83427ccf218c27297b8304 );
    const_str_plain_im_func = UNSTREAM_STRING( &constant_bin[ 235712 ], 7, 1 );
    const_str_digest_3f74da80d70054f566244d16961c095c = UNSTREAM_STRING( &constant_bin[ 1569273 ], 24, 0 );
    const_str_plain_text_type = UNSTREAM_STRING( &constant_bin[ 1569297 ], 9, 1 );
    const_tuple_type_type_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_type_type_tuple, 0, (PyObject *)&PyType_Type ); Py_INCREF( (PyObject *)&PyType_Type );
    const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple, 0, const_str_plain_tp ); Py_INCREF( const_str_plain_tp );
    PyTuple_SET_ITEM( const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple, 2, const_str_plain_tb ); Py_INCREF( const_str_plain_tb );
    const_str_plain_ifilterfalse = UNSTREAM_STRING( &constant_bin[ 1569306 ], 12, 1 );
    const_str_plain_proxy_bypass = UNSTREAM_STRING( &constant_bin[ 1569318 ], 12, 1 );
    const_tuple_str_digest_345fae18cb5b2b245881e77b200cffe5_tuple = PyTuple_New( 1 );
    const_str_digest_345fae18cb5b2b245881e77b200cffe5 = UNSTREAM_STRING( &constant_bin[ 1569330 ], 22, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_345fae18cb5b2b245881e77b200cffe5_tuple, 0, const_str_digest_345fae18cb5b2b245881e77b200cffe5 ); Py_INCREF( const_str_digest_345fae18cb5b2b245881e77b200cffe5 );
    const_str_plain_is_package = UNSTREAM_STRING( &constant_bin[ 1569352 ], 10, 1 );
    const_str_plain_Request = UNSTREAM_STRING( &constant_bin[ 1569362 ], 7, 1 );
    const_str_plain_tkinter = UNSTREAM_STRING( &constant_bin[ 1568932 ], 7, 1 );
    const_str_digest_f4d3a600a6e16b82e3f10867b851d5a1 = UNSTREAM_STRING( &constant_bin[ 1569369 ], 67, 0 );
    const_str_plain_meta_path = UNSTREAM_STRING( &constant_bin[ 1569436 ], 9, 1 );
    const_str_plain__func_defaults = UNSTREAM_STRING( &constant_bin[ 1569445 ], 14, 1 );
    const_str_plain_get_source = UNSTREAM_STRING( &constant_bin[ 1569459 ], 10, 1 );
    const_str_plain_izip = UNSTREAM_STRING( &constant_bin[ 1569469 ], 4, 1 );
    const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple = PyTuple_New( 3 );
    const_str_plain_tkinter_colorchooser = UNSTREAM_STRING( &constant_bin[ 1569473 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple, 0, const_str_plain_tkinter_colorchooser ); Py_INCREF( const_str_plain_tkinter_colorchooser );
    const_str_plain_tkColorChooser = UNSTREAM_STRING( &constant_bin[ 1569493 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple, 1, const_str_plain_tkColorChooser ); Py_INCREF( const_str_plain_tkColorChooser );
    const_str_digest_745e67bb7def529140f256e556b67b38 = UNSTREAM_STRING( &constant_bin[ 1569507 ], 20, 0 );
    PyTuple_SET_ITEM( const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple, 2, const_str_digest_745e67bb7def529140f256e556b67b38 ); Py_INCREF( const_str_digest_745e67bb7def529140f256e556b67b38 );
    const_str_digest_2a7b3d36c635f4688c336c8ee8000e51 = UNSTREAM_STRING( &constant_bin[ 1569527 ], 24, 0 );
    const_tuple_411972e912d706a64e285af8aa597505_tuple = PyTuple_New( 4 );
    const_str_plain_cStringIO = UNSTREAM_STRING( &constant_bin[ 1569551 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 0, const_str_plain_cStringIO ); Py_INCREF( const_str_plain_cStringIO );
    PyTuple_SET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 1, const_str_plain_cStringIO ); Py_INCREF( const_str_plain_cStringIO );
    PyTuple_SET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 2, const_str_plain_io ); Py_INCREF( const_str_plain_io );
    PyTuple_SET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 3, const_str_plain_StringIO ); Py_INCREF( const_str_plain_StringIO );
    const_tuple_str_digest_3f74da80d70054f566244d16961c095c_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_3f74da80d70054f566244d16961c095c_tuple, 0, const_str_digest_3f74da80d70054f566244d16961c095c ); Py_INCREF( const_str_digest_3f74da80d70054f566244d16961c095c );
    const_str_plain_httplib = UNSTREAM_STRING( &constant_bin[ 1569560 ], 7, 1 );
    const_str_plain_get_function_code = UNSTREAM_STRING( &constant_bin[ 1569567 ], 17, 1 );
    const_str_digest_4082068f02f117842a4eba60151ac8c5 = UNSTREAM_STRING( &constant_bin[ 1569584 ], 14, 0 );
    const_str_plain_addbase = UNSTREAM_STRING( &constant_bin[ 1569598 ], 7, 1 );
    const_str_plain__assertRegex = UNSTREAM_STRING( &constant_bin[ 1569605 ], 12, 1 );
    const_str_plain_temporary_class = UNSTREAM_STRING( &constant_bin[ 1569617 ], 15, 1 );
    const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple, 0, const_str_plain__dummy_thread ); Py_INCREF( const_str_plain__dummy_thread );
    const_str_plain_dummy_thread = UNSTREAM_STRING( &constant_bin[ 1569632 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple, 1, const_str_plain_dummy_thread ); Py_INCREF( const_str_plain_dummy_thread );
    PyTuple_SET_ITEM( const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple, 2, const_str_plain__dummy_thread ); Py_INCREF( const_str_plain__dummy_thread );
    const_str_plain_SimpleDialog = UNSTREAM_STRING( &constant_bin[ 1569644 ], 12, 1 );
    const_str_plain__module = UNSTREAM_STRING( &constant_bin[ 16522 ], 7, 1 );
    const_str_digest_44b5a94106b8a7650b1be1b19e45a62a = UNSTREAM_STRING( &constant_bin[ 1569656 ], 20, 0 );
    const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple = PyTuple_New( 5 );
    const_str_plain_filter = UNSTREAM_STRING( &constant_bin[ 602234 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 0, const_str_plain_filter ); Py_INCREF( const_str_plain_filter );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    const_str_plain_ifilter = UNSTREAM_STRING( &constant_bin[ 1569306 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 3, const_str_plain_ifilter ); Py_INCREF( const_str_plain_ifilter );
    PyTuple_SET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 4, const_str_plain_filter ); Py_INCREF( const_str_plain_filter );
    const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple = PyTuple_New( 3 );
    const_str_plain_HTTPPasswordMgrWithDefaultRealm = UNSTREAM_STRING( &constant_bin[ 1569676 ], 31, 1 );
    PyTuple_SET_ITEM( const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple, 0, const_str_plain_HTTPPasswordMgrWithDefaultRealm ); Py_INCREF( const_str_plain_HTTPPasswordMgrWithDefaultRealm );
    PyTuple_SET_ITEM( const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_8cc5006936e02b61706e4ff874fb2042 = UNSTREAM_STRING( &constant_bin[ 1569707 ], 15, 0 );
    const_str_digest_dc51ca580cc759241b93115ce34bf24c = UNSTREAM_STRING( &constant_bin[ 1569722 ], 18, 0 );
    const_str_digest_dc2910a6e816441d866e674df51d57ac = UNSTREAM_STRING( &constant_bin[ 1569740 ], 16, 0 );
    const_str_plain___traceback__ = UNSTREAM_STRING( &constant_bin[ 1569756 ], 13, 1 );
    const_str_plain_HTMLParser = UNSTREAM_STRING( &constant_bin[ 1569769 ], 10, 1 );
    const_tuple_5fefbced8180c1de12054109841aa2ac_tuple = PyTuple_New( 3 );
    const_str_plain_CGIHTTPServer = UNSTREAM_STRING( &constant_bin[ 1569779 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_5fefbced8180c1de12054109841aa2ac_tuple, 0, const_str_plain_CGIHTTPServer ); Py_INCREF( const_str_plain_CGIHTTPServer );
    PyTuple_SET_ITEM( const_tuple_5fefbced8180c1de12054109841aa2ac_tuple, 1, const_str_plain_CGIHTTPServer ); Py_INCREF( const_str_plain_CGIHTTPServer );
    const_str_digest_a72c0d952f927fbb71c170425931b6ab = UNSTREAM_STRING( &constant_bin[ 1569792 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_5fefbced8180c1de12054109841aa2ac_tuple, 2, const_str_digest_a72c0d952f927fbb71c170425931b6ab ); Py_INCREF( const_str_digest_a72c0d952f927fbb71c170425931b6ab );
    const_str_plain_addinfo = UNSTREAM_STRING( &constant_bin[ 1569129 ], 7, 1 );
    const_str_digest_813378a9c91048d7990696da82a61814 = UNSTREAM_STRING( &constant_bin[ 1569803 ], 114, 0 );
    const_str_digest_f2936f958cb3c1b034c6b02cfe0f019b = UNSTREAM_STRING( &constant_bin[ 1569917 ], 11, 0 );
    const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple = PyTuple_New( 3 );
    const_str_plain_getproxies = UNSTREAM_STRING( &constant_bin[ 1569928 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple, 0, const_str_plain_getproxies ); Py_INCREF( const_str_plain_getproxies );
    PyTuple_SET_ITEM( const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 2, const_str_plain_old ); Py_INCREF( const_str_plain_old );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 3, const_str_plain_new ); Py_INCREF( const_str_plain_new );
    const_str_digest_a13cea3eac144232780ec70fab3f1816 = UNSTREAM_STRING( &constant_bin[ 1569938 ], 51, 0 );
    const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple = PyTuple_New( 3 );
    const_str_plain_ContentTooShortError = UNSTREAM_STRING( &constant_bin[ 1569989 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple, 0, const_str_plain_ContentTooShortError ); Py_INCREF( const_str_plain_ContentTooShortError );
    PyTuple_SET_ITEM( const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple, 2, const_str_digest_f1949150375e8b53443d58d93fe4f89e ); Py_INCREF( const_str_digest_f1949150375e8b53443d58d93fe4f89e );
    const_str_plain_updated = UNSTREAM_STRING( &constant_bin[ 32313 ], 7, 1 );
    const_tuple_187fbe928d64ead4410a5c32362e3350_tuple = PyTuple_New( 3 );
    const_str_plain_uses_query = UNSTREAM_STRING( &constant_bin[ 1570009 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_187fbe928d64ead4410a5c32362e3350_tuple, 0, const_str_plain_uses_query ); Py_INCREF( const_str_plain_uses_query );
    PyTuple_SET_ITEM( const_tuple_187fbe928d64ead4410a5c32362e3350_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_187fbe928d64ead4410a5c32362e3350_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_digest_4c46721e9886c5db124415a36253d572 = UNSTREAM_STRING( &constant_bin[ 1570019 ], 89, 0 );
    const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 0, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    const_str_plain_raw_input = UNSTREAM_STRING( &constant_bin[ 1570108 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 3, const_str_plain_raw_input ); Py_INCREF( const_str_plain_raw_input );
    PyTuple_SET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 4, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    const_str_plain_tkinter_filedialog = UNSTREAM_STRING( &constant_bin[ 1570117 ], 18, 1 );
    const_str_plain_tkinter_scrolledtext = UNSTREAM_STRING( &constant_bin[ 1570135 ], 20, 1 );
    const_str_plain__urllib_response_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1570155 ], 33, 1 );
    const_str_plain_HTTPCookieProcessor = UNSTREAM_STRING( &constant_bin[ 1570188 ], 19, 1 );
    const_tuple_5992db94de979792d5ee74224566d5a1_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 0, const_str_plain___module__ ); Py_INCREF( const_str_plain___module__ );
    PyTuple_SET_ITEM( const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 1, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyTuple_SET_ITEM( const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 2, const_str_plain___path__ ); Py_INCREF( const_str_plain___path__ );
    const_str_plain_parse = UNSTREAM_STRING( &constant_bin[ 15451 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 3, const_str_plain_parse ); Py_INCREF( const_str_plain_parse );
    PyTuple_SET_ITEM( const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 4, const_str_plain_error ); Py_INCREF( const_str_plain_error );
    const_str_plain_request = UNSTREAM_STRING( &constant_bin[ 14506 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 5, const_str_plain_request ); Py_INCREF( const_str_plain_request );
    const_str_plain_response = UNSTREAM_STRING( &constant_bin[ 741311 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 6, const_str_plain_response ); Py_INCREF( const_str_plain_response );
    const_str_plain_robotparser = UNSTREAM_STRING( &constant_bin[ 1569286 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 7, const_str_plain_robotparser ); Py_INCREF( const_str_plain_robotparser );
    PyTuple_SET_ITEM( const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 8, const_str_plain___dir__ ); Py_INCREF( const_str_plain___dir__ );
    const_tuple_1a887db86b993bc5af6452d60025b66a_tuple = PyTuple_New( 3 );
    const_str_plain_HTTPSHandler = UNSTREAM_STRING( &constant_bin[ 1570207 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_1a887db86b993bc5af6452d60025b66a_tuple, 0, const_str_plain_HTTPSHandler ); Py_INCREF( const_str_plain_HTTPSHandler );
    PyTuple_SET_ITEM( const_tuple_1a887db86b993bc5af6452d60025b66a_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_1a887db86b993bc5af6452d60025b66a_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_digest_377bbfde508aa04103b00d9192b3b50d_tuple = PyTuple_New( 1 );
    const_str_digest_377bbfde508aa04103b00d9192b3b50d = UNSTREAM_STRING( &constant_bin[ 1570219 ], 21, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_377bbfde508aa04103b00d9192b3b50d_tuple, 0, const_str_digest_377bbfde508aa04103b00d9192b3b50d ); Py_INCREF( const_str_digest_377bbfde508aa04103b00d9192b3b50d );
    const_str_plain_BaseHTTPServer = UNSTREAM_STRING( &constant_bin[ 1570240 ], 14, 1 );
    const_tuple_str_plain_klass_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_klass_tuple, 0, const_str_plain_klass ); Py_INCREF( const_str_plain_klass );
    const_str_plain_assertRegexpMatches = UNSTREAM_STRING( &constant_bin[ 1570254 ], 19, 1 );
    const_str_plain_getitem = UNSTREAM_STRING( &constant_bin[ 17039 ], 7, 1 );
    const_str_plain_html_entities = UNSTREAM_STRING( &constant_bin[ 1570273 ], 13, 1 );
    const_str_digest_ef5ae5746ab9ada338d738fcd9ef185d = UNSTREAM_STRING( &constant_bin[ 1570286 ], 66, 0 );
    const_tuple_str_plain_func_str_plain_doc_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_doc_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_doc_tuple, 1, const_str_plain_doc ); Py_INCREF( const_str_plain_doc );
    const_str_digest_a4e649f6214f3135948e9d5aa86ed118 = UNSTREAM_STRING( &constant_bin[ 1569176 ], 36, 0 );
    const_str_digest_98007d19004f11322e99f7f66acdf51d = UNSTREAM_STRING( &constant_bin[ 1570352 ], 20, 0 );
    const_str_plain_orig_vars = UNSTREAM_STRING( &constant_bin[ 1570372 ], 9, 1 );
    const_tuple_str_plain_self_str_plain_six_module_name_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_six_module_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_six_module_name = UNSTREAM_STRING( &constant_bin[ 1570381 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_six_module_name_tuple, 1, const_str_plain_six_module_name ); Py_INCREF( const_str_plain_six_module_name );
    const_str_digest_6fdf710e7d63e48e68391e1f587ae0a5 = UNSTREAM_STRING( &constant_bin[ 1570396 ], 36, 0 );
    const_str_plain_tkinter_simpledialog = UNSTREAM_STRING( &constant_bin[ 1570432 ], 20, 1 );
    const_str_plain_FileHandler = UNSTREAM_STRING( &constant_bin[ 1570452 ], 11, 1 );
    const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple, 0, const_str_plain_tkinter_filedialog ); Py_INCREF( const_str_plain_tkinter_filedialog );
    const_str_plain_FileDialog = UNSTREAM_STRING( &constant_bin[ 1570463 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple, 1, const_str_plain_FileDialog ); Py_INCREF( const_str_plain_FileDialog );
    const_str_digest_0f0322cacec3a164468e788b6cf4cba4 = UNSTREAM_STRING( &constant_bin[ 1570473 ], 18, 0 );
    PyTuple_SET_ITEM( const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple, 2, const_str_digest_0f0322cacec3a164468e788b6cf4cba4 ); Py_INCREF( const_str_digest_0f0322cacec3a164468e788b6cf4cba4 );
    const_str_digest_64f81132823110b66a668f94ef3217ac = UNSTREAM_STRING( &constant_bin[ 1570491 ], 20, 0 );
    const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple, 0, const_str_plain_BaseHTTPServer ); Py_INCREF( const_str_plain_BaseHTTPServer );
    PyTuple_SET_ITEM( const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple, 1, const_str_plain_BaseHTTPServer ); Py_INCREF( const_str_plain_BaseHTTPServer );
    PyTuple_SET_ITEM( const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple, 2, const_str_digest_a72c0d952f927fbb71c170425931b6ab ); Py_INCREF( const_str_digest_a72c0d952f927fbb71c170425931b6ab );
    const_str_plain_importer = UNSTREAM_STRING( &constant_bin[ 1026399 ], 8, 1 );
    const_tuple_str_plain_flush_false_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_flush_false_tuple, 0, const_str_plain_flush ); Py_INCREF( const_str_plain_flush );
    PyTuple_SET_ITEM( const_tuple_str_plain_flush_false_tuple, 1, Py_False ); Py_INCREF( Py_False );
    const_str_plain_old_attr = UNSTREAM_STRING( &constant_bin[ 1570511 ], 8, 1 );
    const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple = PyTuple_New( 3 );
    const_str_plain_AbstractDigestAuthHandler = UNSTREAM_STRING( &constant_bin[ 1570519 ], 25, 1 );
    PyTuple_SET_ITEM( const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple, 0, const_str_plain_AbstractDigestAuthHandler ); Py_INCREF( const_str_plain_AbstractDigestAuthHandler );
    PyTuple_SET_ITEM( const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 1, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 2, const_str_plain__module ); Py_INCREF( const_str_plain__module );
    PyTuple_SET_ITEM( const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 3, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_func_defaults = UNSTREAM_STRING( &constant_bin[ 236567 ], 13, 1 );
    const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple = PyTuple_New( 3 );
    const_str_plain_unquote_plus = UNSTREAM_STRING( &constant_bin[ 1570544 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple, 0, const_str_plain_unquote_plus ); Py_INCREF( const_str_plain_unquote_plus );
    PyTuple_SET_ITEM( const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple = PyTuple_New( 3 );
    const_str_plain_http_client = UNSTREAM_STRING( &constant_bin[ 1570556 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple, 0, const_str_plain_http_client ); Py_INCREF( const_str_plain_http_client );
    PyTuple_SET_ITEM( const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple, 1, const_str_plain_httplib ); Py_INCREF( const_str_plain_httplib );
    const_str_digest_096ca139beaf8ac5201071e235ad66b6 = UNSTREAM_STRING( &constant_bin[ 1570567 ], 11, 0 );
    PyTuple_SET_ITEM( const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple, 2, const_str_digest_096ca139beaf8ac5201071e235ad66b6 ); Py_INCREF( const_str_digest_096ca139beaf8ac5201071e235ad66b6 );
    const_tuple_586a1339d35425b5e4ad734e75b48193_tuple = PyTuple_New( 3 );
    const_str_plain_ProxyBasicAuthHandler = UNSTREAM_STRING( &constant_bin[ 1570578 ], 21, 1 );
    PyTuple_SET_ITEM( const_tuple_586a1339d35425b5e4ad734e75b48193_tuple, 0, const_str_plain_ProxyBasicAuthHandler ); Py_INCREF( const_str_plain_ProxyBasicAuthHandler );
    PyTuple_SET_ITEM( const_tuple_586a1339d35425b5e4ad734e75b48193_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_586a1339d35425b5e4ad734e75b48193_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_plain_viewitems_tuple = PyTuple_New( 1 );
    const_str_plain_viewitems = UNSTREAM_STRING( &constant_bin[ 1570599 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_viewitems_tuple, 0, const_str_plain_viewitems ); Py_INCREF( const_str_plain_viewitems );
    const_str_plain_python_2_unicode_compatible = UNSTREAM_STRING( &constant_bin[ 1570020 ], 27, 1 );
    const_tuple_str_plain_six_tuple = PyTuple_New( 1 );
    const_str_plain_six = UNSTREAM_STRING( &constant_bin[ 237763 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_six_tuple, 0, const_str_plain_six ); Py_INCREF( const_str_plain_six );
    const_str_digest_d0401b822b5416e385c0ccdc99657532 = UNSTREAM_STRING( &constant_bin[ 1570608 ], 12, 0 );
    const_str_plain__moved_attributes = UNSTREAM_STRING( &constant_bin[ 1570171 ], 17, 1 );
    const_str_plain___unicode__ = UNSTREAM_STRING( &constant_bin[ 1570620 ], 11, 1 );
    const_str_plain_reload_module = UNSTREAM_STRING( &constant_bin[ 1570631 ], 13, 1 );
    const_tuple_424b5876d9142cfd116cee7c287158fe_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 0, const_str_plain_range ); Py_INCREF( const_str_plain_range );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 3, const_str_plain_xrange ); Py_INCREF( const_str_plain_xrange );
    PyTuple_SET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 4, const_str_plain_range ); Py_INCREF( const_str_plain_range );
    const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple, 0, const_str_plain_FileHandler ); Py_INCREF( const_str_plain_FileHandler );
    PyTuple_SET_ITEM( const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_36b48fae7858438c9796c3d30c76579f = UNSTREAM_STRING( &constant_bin[ 1570644 ], 59, 0 );
    const_str_digest_8f714300b54df1f07c5ea6ab3e1ef1e0 = UNSTREAM_STRING( &constant_bin[ 1570703 ], 39, 0 );
    const_tuple_bb96d7dab96c950426bed873db7c315f_tuple = PyTuple_New( 3 );
    const_str_plain_urlcleanup = UNSTREAM_STRING( &constant_bin[ 1570742 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_bb96d7dab96c950426bed873db7c315f_tuple, 0, const_str_plain_urlcleanup ); Py_INCREF( const_str_plain_urlcleanup );
    PyTuple_SET_ITEM( const_tuple_bb96d7dab96c950426bed873db7c315f_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_bb96d7dab96c950426bed873db7c315f_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_0796df54888fe073ef078d402adc4fc3 = UNSTREAM_STRING( &constant_bin[ 1570752 ], 20, 0 );
    const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 1, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 2, const_str_plain_path ); Py_INCREF( const_str_plain_path );
    const_str_plain_remove_move = UNSTREAM_STRING( &constant_bin[ 1570772 ], 11, 1 );
    const_str_plain_wrapped = UNSTREAM_STRING( &constant_bin[ 55648 ], 7, 1 );
    const_str_digest_41c64468a0c9e92d8eea5f7e817937e8 = UNSTREAM_STRING( &constant_bin[ 1570783 ], 14, 0 );
    const_str_plain_func_globals = UNSTREAM_STRING( &constant_bin[ 236675 ], 12, 1 );
    const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple = PyTuple_New( 3 );
    const_str_plain_splituser = UNSTREAM_STRING( &constant_bin[ 1570797 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple, 0, const_str_plain_splituser ); Py_INCREF( const_str_plain_splituser );
    PyTuple_SET_ITEM( const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_str_plain_values_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_values_tuple, 0, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    const_str_digest_7cd96a434c5e7c2d0afa70c5bbed7be7 = UNSTREAM_STRING( &constant_bin[ 1570806 ], 158, 0 );
    const_str_digest_af06de2d225df4407b0a0ba06a331ccf = UNSTREAM_STRING( &constant_bin[ 1570964 ], 54, 0 );
    const_str_plain_gdbm = UNSTREAM_STRING( &constant_bin[ 1571018 ], 4, 1 );
    const_str_plain_Queue = UNSTREAM_STRING( &constant_bin[ 1571022 ], 5, 1 );
    const_tuple_str_digest_39084269160328bfe64f57e4e4ad6847_tuple = PyTuple_New( 1 );
    const_str_digest_39084269160328bfe64f57e4e4ad6847 = UNSTREAM_STRING( &constant_bin[ 1571027 ], 24, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_39084269160328bfe64f57e4e4ad6847_tuple, 0, const_str_digest_39084269160328bfe64f57e4e4ad6847 ); Py_INCREF( const_str_digest_39084269160328bfe64f57e4e4ad6847 );
    const_tuple_str_plain_self_str_plain_fullname_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_tuple, 1, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    const_tuple_320c4efc844604789134735e48a67fb0_tuple = PyTuple_New( 3 );
    const_str_plain_CacheFTPHandler = UNSTREAM_STRING( &constant_bin[ 1571051 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_320c4efc844604789134735e48a67fb0_tuple, 0, const_str_plain_CacheFTPHandler ); Py_INCREF( const_str_plain_CacheFTPHandler );
    PyTuple_SET_ITEM( const_tuple_320c4efc844604789134735e48a67fb0_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_320c4efc844604789134735e48a67fb0_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_indexbytes = UNSTREAM_STRING( &constant_bin[ 1571066 ], 10, 1 );
    const_tuple_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8_tuple = PyTuple_New( 1 );
    const_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8 = UNSTREAM_STRING( &constant_bin[ 1571076 ], 57, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8_tuple, 0, const_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8 ); Py_INCREF( const_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8 );
    const_tuple_str_digest_813378a9c91048d7990696da82a61814_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_813378a9c91048d7990696da82a61814_tuple, 0, const_str_digest_813378a9c91048d7990696da82a61814 ); Py_INCREF( const_str_digest_813378a9c91048d7990696da82a61814 );
    const_str_plain_reload = UNSTREAM_STRING( &constant_bin[ 39423 ], 6, 1 );
    const_str_plain_quote = UNSTREAM_STRING( &constant_bin[ 1569233 ], 5, 1 );
    const_tuple_str_plain_d_str_plain_kw_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_d_str_plain_kw_tuple, 0, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    PyTuple_SET_ITEM( const_tuple_str_plain_d_str_plain_kw_tuple, 1, const_str_plain_kw ); Py_INCREF( const_str_plain_kw );
    const_str_plain__MovedItems = UNSTREAM_STRING( &constant_bin[ 1571133 ], 11, 1 );
    const_str_plain___get_module = UNSTREAM_STRING( &constant_bin[ 1571144 ], 12, 1 );
    const_str_plain___weakref__ = UNSTREAM_STRING( &constant_bin[ 1571156 ], 11, 1 );
    const_tuple_str_plain_func_str_plain_cls_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_cls_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_cls_tuple, 1, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    const_str_plain__LazyModule = UNSTREAM_STRING( &constant_bin[ 1571167 ], 11, 1 );
    const_str_plain_tkSimpleDialog = UNSTREAM_STRING( &constant_bin[ 1571178 ], 14, 1 );
    const_str_plain_im_self = UNSTREAM_STRING( &constant_bin[ 235788 ], 7, 1 );
    const_str_plain_tkFont = UNSTREAM_STRING( &constant_bin[ 1571192 ], 6, 1 );
    const_str_plain_quote_plus = UNSTREAM_STRING( &constant_bin[ 1570546 ], 10, 1 );
    const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple, 0, const_str_plain_urlencode ); Py_INCREF( const_str_plain_urlencode );
    PyTuple_SET_ITEM( const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_metaclass = UNSTREAM_STRING( &constant_bin[ 1276887 ], 9, 1 );
    const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple = PyTuple_New( 3 );
    const_str_plain_pathname2url = UNSTREAM_STRING( &constant_bin[ 1571198 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple, 0, const_str_plain_pathname2url ); Py_INCREF( const_str_plain_pathname2url );
    PyTuple_SET_ITEM( const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_byte2int = UNSTREAM_STRING( &constant_bin[ 1571210 ], 8, 1 );
    const_str_plain_Tix = UNSTREAM_STRING( &constant_bin[ 1571218 ], 3, 1 );
    const_str_digest_0f70f5ebb503ca09ef40fe7293d50ca9 = UNSTREAM_STRING( &constant_bin[ 1571221 ], 14, 0 );
    const_str_digest_36bd400ddf45050462a62a66cdace7eb = UNSTREAM_STRING( &constant_bin[ 1571235 ], 61, 0 );
    const_str_plain__meth_self = UNSTREAM_STRING( &constant_bin[ 1571296 ], 10, 1 );
    const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_attrs = UNSTREAM_STRING( &constant_bin[ 1571306 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 1, const_str_plain_attrs ); Py_INCREF( const_str_plain_attrs );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 2, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    const_str_digest_087d011e227804c37fa5a994ee918bbe = UNSTREAM_STRING( &constant_bin[ 1571311 ], 206, 0 );
    const_str_digest_a13035c59d0f0e8c04a4feacc0004cd7 = UNSTREAM_STRING( &constant_bin[ 1571517 ], 28, 0 );
    const_str_plain_MAXSIZE = UNSTREAM_STRING( &constant_bin[ 1571545 ], 7, 1 );
    const_str_plain_assertRegex = UNSTREAM_STRING( &constant_bin[ 1569606 ], 11, 1 );
    const_str_plain_shlex_quote = UNSTREAM_STRING( &constant_bin[ 1571552 ], 11, 1 );
    const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple, 0, const_str_plain_tkinter ); Py_INCREF( const_str_plain_tkinter );
    const_str_plain_Tkinter = UNSTREAM_STRING( &constant_bin[ 1571563 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple, 1, const_str_plain_Tkinter ); Py_INCREF( const_str_plain_Tkinter );
    const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 0, const_str_plain_zip ); Py_INCREF( const_str_plain_zip );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 3, const_str_plain_izip ); Py_INCREF( const_str_plain_izip );
    PyTuple_SET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 4, const_str_plain_zip ); Py_INCREF( const_str_plain_zip );
    const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple = PyTuple_New( 3 );
    const_str_plain_HTTPError = UNSTREAM_STRING( &constant_bin[ 1568914 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple, 0, const_str_plain_HTTPError ); Py_INCREF( const_str_plain_HTTPError );
    PyTuple_SET_ITEM( const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple, 2, const_str_digest_f1949150375e8b53443d58d93fe4f89e ); Py_INCREF( const_str_digest_f1949150375e8b53443d58d93fe4f89e );
    const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_klass_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_klass_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_klass_tuple, 1, const_str_plain_klass ); Py_INCREF( const_str_plain_klass );
    const_str_digest_52da6974eceb6e05255f92901fc2e2f2 = UNSTREAM_STRING( &constant_bin[ 1571570 ], 28, 0 );
    const_str_digest_1e91aab42d00f04e391d84545f09e2f5 = UNSTREAM_STRING( &constant_bin[ 1571598 ], 55, 0 );
    const_str_digest_97d8b3849ccb4841962c7ac18f0af059 = UNSTREAM_STRING( &constant_bin[ 1571653 ], 54, 0 );
    const_str_digest_122cdcc1600da4a884855d78ecd7756a = UNSTREAM_STRING( &constant_bin[ 1571707 ], 25, 0 );
    const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 3, const_str_plain_write ); Py_INCREF( const_str_plain_write );
    const_str_plain_want_unicode = UNSTREAM_STRING( &constant_bin[ 1571732 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 4, const_str_plain_want_unicode ); Py_INCREF( const_str_plain_want_unicode );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 5, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 6, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 7, const_str_plain_arg ); Py_INCREF( const_str_plain_arg );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 8, const_str_plain_newline ); Py_INCREF( const_str_plain_newline );
    const_str_plain_space = UNSTREAM_STRING( &constant_bin[ 21587 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 9, const_str_plain_space ); Py_INCREF( const_str_plain_space );
    PyTuple_SET_ITEM( const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 10, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_str_plain_RobotFileParser = UNSTREAM_STRING( &constant_bin[ 1571744 ], 15, 1 );
    const_str_plain_submodule_search_locations = UNSTREAM_STRING( &constant_bin[ 1571759 ], 26, 1 );
    const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 1, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 2, const_str_plain_mod ); Py_INCREF( const_str_plain_mod );
    const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple = PyTuple_New( 3 );
    const_str_plain_urljoin = UNSTREAM_STRING( &constant_bin[ 1571785 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple, 0, const_str_plain_urljoin ); Py_INCREF( const_str_plain_urljoin );
    PyTuple_SET_ITEM( const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_389a28f291802cc0a0085952a3a22b60_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_389a28f291802cc0a0085952a3a22b60_tuple, 0, const_str_plain_OpenerDirector ); Py_INCREF( const_str_plain_OpenerDirector );
    PyTuple_SET_ITEM( const_tuple_389a28f291802cc0a0085952a3a22b60_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_389a28f291802cc0a0085952a3a22b60_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple = PyTuple_New( 3 );
    const_str_plain_HTTPBasicAuthHandler = UNSTREAM_STRING( &constant_bin[ 1571792 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple, 0, const_str_plain_HTTPBasicAuthHandler ); Py_INCREF( const_str_plain_HTTPBasicAuthHandler );
    PyTuple_SET_ITEM( const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain__get_module = UNSTREAM_STRING( &constant_bin[ 1571145 ], 11, 1 );
    const_str_plain_tkFileDialog = UNSTREAM_STRING( &constant_bin[ 1571812 ], 12, 1 );
    const_str_plain_ProxyHandler = UNSTREAM_STRING( &constant_bin[ 1571824 ], 12, 1 );
    const_str_plain_get_function_globals = UNSTREAM_STRING( &constant_bin[ 1571836 ], 20, 1 );
    const_str_digest_5b3beed978ba6433285f8986661c0d63 = UNSTREAM_STRING( &constant_bin[ 1571856 ], 22, 0 );
    const_str_plain_dbm_gnu = UNSTREAM_STRING( &constant_bin[ 1571878 ], 7, 1 );
    const_str_plain__assertCountEqual = UNSTREAM_STRING( &constant_bin[ 1571885 ], 17, 1 );
    const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 0, const_str_plain_wrapped ); Py_INCREF( const_str_plain_wrapped );
    PyTuple_SET_ITEM( const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 1, const_str_plain_assigned ); Py_INCREF( const_str_plain_assigned );
    PyTuple_SET_ITEM( const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 2, const_str_plain_updated ); Py_INCREF( const_str_plain_updated );
    PyTuple_SET_ITEM( const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 3, const_str_plain_wrapper ); Py_INCREF( const_str_plain_wrapper );
    const_str_plain_tkinter_tksimpledialog = UNSTREAM_STRING( &constant_bin[ 1571902 ], 22, 1 );
    const_str_plain_ClassType = UNSTREAM_STRING( &constant_bin[ 1571924 ], 9, 1 );
    const_str_plain__func_code = UNSTREAM_STRING( &constant_bin[ 1571933 ], 10, 1 );
    const_str_plain_slots_var = UNSTREAM_STRING( &constant_bin[ 1571943 ], 9, 1 );
    const_tuple_str_plain_sep_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_sep_none_tuple, 0, const_str_plain_sep ); Py_INCREF( const_str_plain_sep );
    PyTuple_SET_ITEM( const_tuple_str_plain_sep_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_tuple_b95736e8f51c92667f5e42089a453e06_tuple = PyTuple_New( 3 );
    const_str_plain_urllib_error = UNSTREAM_STRING( &constant_bin[ 1571952 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_b95736e8f51c92667f5e42089a453e06_tuple, 0, const_str_plain_urllib_error ); Py_INCREF( const_str_plain_urllib_error );
    const_str_digest_54cded0ef8d4888ef8d4539bd6707aa4 = UNSTREAM_STRING( &constant_bin[ 1571964 ], 22, 0 );
    PyTuple_SET_ITEM( const_tuple_b95736e8f51c92667f5e42089a453e06_tuple, 1, const_str_digest_54cded0ef8d4888ef8d4539bd6707aa4 ); Py_INCREF( const_str_digest_54cded0ef8d4888ef8d4539bd6707aa4 );
    PyTuple_SET_ITEM( const_tuple_b95736e8f51c92667f5e42089a453e06_tuple, 2, const_str_digest_f1949150375e8b53443d58d93fe4f89e ); Py_INCREF( const_str_digest_f1949150375e8b53443d58d93fe4f89e );
    const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple = PyTuple_New( 3 );
    const_str_plain_url2pathname = UNSTREAM_STRING( &constant_bin[ 1571986 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple, 0, const_str_plain_url2pathname ); Py_INCREF( const_str_plain_url2pathname );
    PyTuple_SET_ITEM( const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_FTPHandler = UNSTREAM_STRING( &constant_bin[ 1571056 ], 10, 1 );
    const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple = PyTuple_New( 3 );
    const_str_plain_uses_fragment = UNSTREAM_STRING( &constant_bin[ 1571998 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple, 0, const_str_plain_uses_fragment ); Py_INCREF( const_str_plain_uses_fragment );
    PyTuple_SET_ITEM( const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a = UNSTREAM_STRING( &constant_bin[ 1569533 ], 18, 0 );
    const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple, 0, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_tkinter_commondialog = UNSTREAM_STRING( &constant_bin[ 1572011 ], 20, 1 );
    const_int_pos_2147483647 = PyInt_FromLong( 2147483647l );
    const_tuple_str_digest_da28dd0fdfcf2d692298525ceb765fa8_tuple = PyTuple_New( 1 );
    const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 = UNSTREAM_STRING( &constant_bin[ 1572031 ], 22, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_da28dd0fdfcf2d692298525ceb765fa8_tuple, 0, const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 ); Py_INCREF( const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 );
    const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple, 0, const_str_plain_Request ); Py_INCREF( const_str_plain_Request );
    PyTuple_SET_ITEM( const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_lists = UNSTREAM_STRING( &constant_bin[ 233346 ], 5, 1 );
    const_str_digest_7cb7e1a5659547478f12d8fe755efd75 = UNSTREAM_STRING( &constant_bin[ 760024 ], 2, 0 );
    const_str_plain__func_closure = UNSTREAM_STRING( &constant_bin[ 1572053 ], 13, 1 );
    const_str_plain_assertRaisesRegex = UNSTREAM_STRING( &constant_bin[ 1572066 ], 17, 1 );
    const_tuple_23e241754072378d4aca55ebd413fe81_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 1, const_str_plain_mod ); Py_INCREF( const_str_plain_mod );
    const_str_plain_fullnames = UNSTREAM_STRING( &constant_bin[ 1572083 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 2, const_str_plain_fullnames ); Py_INCREF( const_str_plain_fullnames );
    PyTuple_SET_ITEM( const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 3, const_str_plain_fullname ); Py_INCREF( const_str_plain_fullname );
    const_tuple_78e9781575bd6d8322d39e052488fa24_tuple = PyTuple_New( 3 );
    const_str_plain_SplitResult = UNSTREAM_STRING( &constant_bin[ 1572092 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_78e9781575bd6d8322d39e052488fa24_tuple, 0, const_str_plain_SplitResult ); Py_INCREF( const_str_plain_SplitResult );
    PyTuple_SET_ITEM( const_tuple_78e9781575bd6d8322d39e052488fa24_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_78e9781575bd6d8322d39e052488fa24_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_digest_c18de21b4af59af9eda7ad848834774a = UNSTREAM_STRING( &constant_bin[ 1572103 ], 51, 0 );
    const_str_plain___loader__ = UNSTREAM_STRING( &constant_bin[ 1572154 ], 10, 1 );
    const_str_plain_Cookie = UNSTREAM_STRING( &constant_bin[ 1570192 ], 6, 1 );
    const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple = PyTuple_New( 3 );
    const_str_plain_tkinter_constants = UNSTREAM_STRING( &constant_bin[ 1572164 ], 17, 1 );
    PyTuple_SET_ITEM( const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple, 0, const_str_plain_tkinter_constants ); Py_INCREF( const_str_plain_tkinter_constants );
    const_str_plain_Tkconstants = UNSTREAM_STRING( &constant_bin[ 1572181 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple, 1, const_str_plain_Tkconstants ); Py_INCREF( const_str_plain_Tkconstants );
    const_str_digest_fcac682f3d9b9835f1b6816f54ff0830 = UNSTREAM_STRING( &constant_bin[ 1572192 ], 17, 0 );
    PyTuple_SET_ITEM( const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple, 2, const_str_digest_fcac682f3d9b9835f1b6816f54ff0830 ); Py_INCREF( const_str_digest_fcac682f3d9b9835f1b6816f54ff0830 );
    const_str_plain_tkinter_dnd = UNSTREAM_STRING( &constant_bin[ 1572209 ], 11, 1 );
    const_str_digest_12251381889b9eebcd7998baa486eb86 = UNSTREAM_STRING( &constant_bin[ 1572220 ], 55, 0 );
    const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple = PyTuple_New( 3 );
    const_str_plain_tkinter_font = UNSTREAM_STRING( &constant_bin[ 1572275 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple, 0, const_str_plain_tkinter_font ); Py_INCREF( const_str_plain_tkinter_font );
    PyTuple_SET_ITEM( const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple, 1, const_str_plain_tkFont ); Py_INCREF( const_str_plain_tkFont );
    const_str_digest_67aba58fab2484c4d294c8cbe1258e39 = UNSTREAM_STRING( &constant_bin[ 1572287 ], 12, 0 );
    PyTuple_SET_ITEM( const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple, 2, const_str_digest_67aba58fab2484c4d294c8cbe1258e39 ); Py_INCREF( const_str_digest_67aba58fab2484c4d294c8cbe1258e39 );
    const_str_digest_cc1200855d2ddc077676ac963b3ffc09 = UNSTREAM_STRING( &constant_bin[ 1571968 ], 18, 0 );
    const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple = PyTuple_New( 3 );
    const_str_plain_uses_netloc = UNSTREAM_STRING( &constant_bin[ 1572299 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple, 0, const_str_plain_uses_netloc ); Py_INCREF( const_str_plain_uses_netloc );
    PyTuple_SET_ITEM( const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_chr = UNSTREAM_STRING( &constant_bin[ 1569062 ], 3, 1 );
    const_str_plain_binary_type = UNSTREAM_STRING( &constant_bin[ 1572310 ], 11, 1 );
    const_str_plain_getcwd = UNSTREAM_STRING( &constant_bin[ 1572321 ], 6, 1 );
    const_str_digest_70a0120f28d7311f633323a6bfb46104 = UNSTREAM_STRING( &constant_bin[ 1572327 ], 30, 0 );
    const_str_plain_iterbytes = UNSTREAM_STRING( &constant_bin[ 1572357 ], 9, 1 );
    const_tuple_str_digest_cc1200855d2ddc077676ac963b3ffc09_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_cc1200855d2ddc077676ac963b3ffc09_tuple, 0, const_str_digest_cc1200855d2ddc077676ac963b3ffc09 ); Py_INCREF( const_str_digest_cc1200855d2ddc077676ac963b3ffc09 );
    const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple, 0, const_str_plain_StringIO ); Py_INCREF( const_str_plain_StringIO );
    PyTuple_SET_ITEM( const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple, 1, const_str_plain_StringIO ); Py_INCREF( const_str_plain_StringIO );
    PyTuple_SET_ITEM( const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple, 2, const_str_plain_io ); Py_INCREF( const_str_plain_io );
    const_str_plain_email_mime_base = UNSTREAM_STRING( &constant_bin[ 1572366 ], 15, 1 );
    const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple = PyTuple_New( 3 );
    const_str_plain_build_opener = UNSTREAM_STRING( &constant_bin[ 1572381 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple, 0, const_str_plain_build_opener ); Py_INCREF( const_str_plain_build_opener );
    PyTuple_SET_ITEM( const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_6a93038d6d3774db54a1e6e70149bd98 = UNSTREAM_STRING( &constant_bin[ 1572393 ], 19, 0 );
    const_str_plain_UnknownHandler = UNSTREAM_STRING( &constant_bin[ 1572412 ], 14, 1 );
    const_str_plain_add_metaclass = UNSTREAM_STRING( &constant_bin[ 1572426 ], 13, 1 );
    const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple = PyTuple_New( 5 );
    const_str_plain_getcwdb = UNSTREAM_STRING( &constant_bin[ 1572439 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 0, const_str_plain_getcwdb ); Py_INCREF( const_str_plain_getcwdb );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 1, const_str_plain_os ); Py_INCREF( const_str_plain_os );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 2, const_str_plain_os ); Py_INCREF( const_str_plain_os );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 3, const_str_plain_getcwd ); Py_INCREF( const_str_plain_getcwd );
    PyTuple_SET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 4, const_str_plain_getcwdb ); Py_INCREF( const_str_plain_getcwdb );
    const_tuple_991a248aa1804f30822646929a31e57a_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 0, const_str_plain_shlex_quote ); Py_INCREF( const_str_plain_shlex_quote );
    const_str_plain_pipes = UNSTREAM_STRING( &constant_bin[ 1572446 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 1, const_str_plain_pipes ); Py_INCREF( const_str_plain_pipes );
    const_str_plain_shlex = UNSTREAM_STRING( &constant_bin[ 1571552 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 2, const_str_plain_shlex ); Py_INCREF( const_str_plain_shlex );
    PyTuple_SET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 3, const_str_plain_quote ); Py_INCREF( const_str_plain_quote );
    const_str_plain___globals__ = UNSTREAM_STRING( &constant_bin[ 1572451 ], 11, 1 );
    const_str_plain_splitquery = UNSTREAM_STRING( &constant_bin[ 1572462 ], 10, 1 );
    const_str_plain_uses_relative = UNSTREAM_STRING( &constant_bin[ 1572472 ], 13, 1 );
    const_str_digest_c94e49aa6b31218158c33258bda42655 = UNSTREAM_STRING( &constant_bin[ 1572485 ], 11, 0 );
    const_str_plain_new_mod = UNSTREAM_STRING( &constant_bin[ 1572496 ], 7, 1 );
    const_tuple_3587390c695a62b1bc9b3790076ef063_tuple = PyTuple_New( 3 );
    const_str_plain_email_mime_multipart = UNSTREAM_STRING( &constant_bin[ 1572503 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_3587390c695a62b1bc9b3790076ef063_tuple, 0, const_str_plain_email_mime_multipart ); Py_INCREF( const_str_plain_email_mime_multipart );
    PyTuple_SET_ITEM( const_tuple_3587390c695a62b1bc9b3790076ef063_tuple, 1, const_str_digest_6a93038d6d3774db54a1e6e70149bd98 ); Py_INCREF( const_str_digest_6a93038d6d3774db54a1e6e70149bd98 );
    PyTuple_SET_ITEM( const_tuple_3587390c695a62b1bc9b3790076ef063_tuple, 2, const_str_digest_64f81132823110b66a668f94ef3217ac ); Py_INCREF( const_str_digest_64f81132823110b66a668f94ef3217ac );
    const_str_plain_WRAPPER_ASSIGNMENTS = UNSTREAM_STRING( &constant_bin[ 1572523 ], 19, 1 );
    const_str_plain_getcwdu = UNSTREAM_STRING( &constant_bin[ 1572542 ], 7, 1 );
    const_str_plain_cookielib = UNSTREAM_STRING( &constant_bin[ 1572549 ], 9, 1 );
    const_str_plain_SimpleHTTPServer = UNSTREAM_STRING( &constant_bin[ 1572558 ], 16, 1 );
    const_str_plain__assertRaisesRegex = UNSTREAM_STRING( &constant_bin[ 1572574 ], 18, 1 );
    const_tuple_str_digest_f4d3a600a6e16b82e3f10867b851d5a1_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_f4d3a600a6e16b82e3f10867b851d5a1_tuple, 0, const_str_digest_f4d3a600a6e16b82e3f10867b851d5a1 ); Py_INCREF( const_str_digest_f4d3a600a6e16b82e3f10867b851d5a1 );
    const_str_plain_meta = UNSTREAM_STRING( &constant_bin[ 151145 ], 4, 1 );
    const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple, 0, const_str_plain_ProxyHandler ); Py_INCREF( const_str_plain_ProxyHandler );
    PyTuple_SET_ITEM( const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_a5f041d60ba724151c334293929df649 = UNSTREAM_STRING( &constant_bin[ 1572592 ], 28, 0 );
    const_str_digest_af845b30b77af5531a80edf50d295161 = UNSTREAM_STRING( &constant_bin[ 1572620 ], 20, 0 );
    const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple, 0, const_str_plain_splitquery ); Py_INCREF( const_str_plain_splitquery );
    PyTuple_SET_ITEM( const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 0, const_str_plain_map ); Py_INCREF( const_str_plain_map );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 3, const_str_plain_imap ); Py_INCREF( const_str_plain_imap );
    PyTuple_SET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 4, const_str_plain_map ); Py_INCREF( const_str_plain_map );
    const_str_plain_get_code = UNSTREAM_STRING( &constant_bin[ 1572640 ], 8, 1 );
    const_str_digest_2f383546f01c636d68b29330ba99dcef = UNSTREAM_STRING( &constant_bin[ 1572648 ], 11, 0 );
    const_tuple_str_plain_builtins_str_plain___builtin___tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_builtins_str_plain___builtin___tuple, 0, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_str_plain_builtins_str_plain___builtin___tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple, 0, const_str_plain_FancyURLopener ); Py_INCREF( const_str_plain_FancyURLopener );
    PyTuple_SET_ITEM( const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_tkMessageBox = UNSTREAM_STRING( &constant_bin[ 1572659 ], 12, 1 );
    const_str_digest_1d2e267f2ccdeb84fbf4cb4191414e9f = UNSTREAM_STRING( &constant_bin[ 1572671 ], 37, 0 );
    const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple, 0, const_str_plain_urldefrag ); Py_INCREF( const_str_plain_urldefrag );
    PyTuple_SET_ITEM( const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_http_cookies = UNSTREAM_STRING( &constant_bin[ 1572708 ], 12, 1 );
    const_str_plain_Module_six_moves_urllib_error = UNSTREAM_STRING( &constant_bin[ 1572720 ], 29, 1 );
    const_tuple_547fe239a3216bb76fb01949941399cd_tuple = PyTuple_New( 3 );
    const_str_plain_ProxyDigestAuthHandler = UNSTREAM_STRING( &constant_bin[ 1572749 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_547fe239a3216bb76fb01949941399cd_tuple, 0, const_str_plain_ProxyDigestAuthHandler ); Py_INCREF( const_str_plain_ProxyDigestAuthHandler );
    PyTuple_SET_ITEM( const_tuple_547fe239a3216bb76fb01949941399cd_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_547fe239a3216bb76fb01949941399cd_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_uses_params = UNSTREAM_STRING( &constant_bin[ 1572771 ], 11, 1 );
    const_str_plain__urllib_parse_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1572782 ], 30, 1 );
    const_str_plain_WRAPPER_UPDATES = UNSTREAM_STRING( &constant_bin[ 1572812 ], 15, 1 );
    const_tuple_str_plain_reprlib_str_plain_repr_tuple = PyTuple_New( 2 );
    const_str_plain_reprlib = UNSTREAM_STRING( &constant_bin[ 251177 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_reprlib_str_plain_repr_tuple, 0, const_str_plain_reprlib ); Py_INCREF( const_str_plain_reprlib );
    PyTuple_SET_ITEM( const_tuple_str_plain_reprlib_str_plain_repr_tuple, 1, const_str_plain_repr ); Py_INCREF( const_str_plain_repr );
    const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple, 0, const_str_plain_HTTPRedirectHandler ); Py_INCREF( const_str_plain_HTTPRedirectHandler );
    PyTuple_SET_ITEM( const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_htmlentitydefs = UNSTREAM_STRING( &constant_bin[ 1572827 ], 14, 1 );
    const_tuple_str_plain_end_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_end_none_tuple, 0, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    PyTuple_SET_ITEM( const_tuple_str_plain_end_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_str_digest_1a36329ae97c46a5978110ca53f2f5e7 = UNSTREAM_STRING( &constant_bin[ 1572841 ], 18, 0 );
    const_str_plain_urlsplit = UNSTREAM_STRING( &constant_bin[ 1572859 ], 8, 1 );
    const_str_plain__func_globals = UNSTREAM_STRING( &constant_bin[ 1572867 ], 13, 1 );
    const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 3, const_str_plain_flush ); Py_INCREF( const_str_plain_flush );
    const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple = PyTuple_New( 3 );
    const_str_plain_parse_qsl = UNSTREAM_STRING( &constant_bin[ 1572880 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple, 0, const_str_plain_parse_qsl ); Py_INCREF( const_str_plain_parse_qsl );
    PyTuple_SET_ITEM( const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_Module_six_moves_urllib_parse = UNSTREAM_STRING( &constant_bin[ 1572889 ], 29, 1 );
    const_str_plain_get_function_defaults = UNSTREAM_STRING( &constant_bin[ 1572918 ], 21, 1 );
    const_long_pos_2147483648 = PyLong_FromUnsignedLong( 2147483648ul );
    const_str_plain_tkinter_messagebox = UNSTREAM_STRING( &constant_bin[ 1572939 ], 18, 1 );
    const_str_plain_ScrolledText = UNSTREAM_STRING( &constant_bin[ 1572957 ], 12, 1 );
    const_tuple_str_plain_value_str_plain_from_value_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_value_str_plain_from_value_tuple, 0, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_from_value = UNSTREAM_STRING( &constant_bin[ 1569391 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_value_str_plain_from_value_tuple, 1, const_str_plain_from_value ); Py_INCREF( const_str_plain_from_value );
    const_str_plain_email_mime_text = UNSTREAM_STRING( &constant_bin[ 1572969 ], 15, 1 );
    const_str_digest_4f965162d0a8bf5d5b4136bee888b84b = UNSTREAM_STRING( &constant_bin[ 1572984 ], 15, 0 );
    const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple = PyTuple_New( 3 );
    const_str_plain_install_opener = UNSTREAM_STRING( &constant_bin[ 1572999 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple, 0, const_str_plain_install_opener ); Py_INCREF( const_str_plain_install_opener );
    PyTuple_SET_ITEM( const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain__meth_func = UNSTREAM_STRING( &constant_bin[ 1573013 ], 10, 1 );
    const_tuple_int_pos_3_int_pos_3_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_3_tuple, 0, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_3_tuple, 1, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    const_str_digest_0e07ea38c4cf2fbcefc89e7de4db934c = UNSTREAM_STRING( &constant_bin[ 1573023 ], 12, 0 );
    const_str_plain__urllib_request_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1573035 ], 32, 1 );
    const_tuple_efb9818f797f41ca8cd537504758b934_tuple = PyTuple_New( 3 );
    const_str_plain_HTTPPasswordMgr = UNSTREAM_STRING( &constant_bin[ 1569676 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_efb9818f797f41ca8cd537504758b934_tuple, 0, const_str_plain_HTTPPasswordMgr ); Py_INCREF( const_str_plain_HTTPPasswordMgr );
    PyTuple_SET_ITEM( const_tuple_efb9818f797f41ca8cd537504758b934_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_efb9818f797f41ca8cd537504758b934_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_89029d2dedfd3a97fd4d41a1b57a375b = UNSTREAM_STRING( &constant_bin[ 1573067 ], 58, 0 );
    const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple, 0, const_str_plain_SimpleHTTPServer ); Py_INCREF( const_str_plain_SimpleHTTPServer );
    PyTuple_SET_ITEM( const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple, 1, const_str_plain_SimpleHTTPServer ); Py_INCREF( const_str_plain_SimpleHTTPServer );
    PyTuple_SET_ITEM( const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple, 2, const_str_digest_a72c0d952f927fbb71c170425931b6ab ); Py_INCREF( const_str_digest_a72c0d952f927fbb71c170425931b6ab );
    const_tuple_cf52b2b37e911829df5ff352b85be861_tuple = PyTuple_New( 3 );
    const_str_plain_parse_qs = UNSTREAM_STRING( &constant_bin[ 1572880 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_cf52b2b37e911829df5ff352b85be861_tuple, 0, const_str_plain_parse_qs ); Py_INCREF( const_str_plain_parse_qs );
    PyTuple_SET_ITEM( const_tuple_cf52b2b37e911829df5ff352b85be861_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_cf52b2b37e911829df5ff352b85be861_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple = PyTuple_New( 3 );
    const_str_plain_http_cookiejar = UNSTREAM_STRING( &constant_bin[ 1573125 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple, 0, const_str_plain_http_cookiejar ); Py_INCREF( const_str_plain_http_cookiejar );
    PyTuple_SET_ITEM( const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple, 1, const_str_plain_cookielib ); Py_INCREF( const_str_plain_cookielib );
    PyTuple_SET_ITEM( const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple, 2, const_str_digest_41c64468a0c9e92d8eea5f7e817937e8 ); Py_INCREF( const_str_digest_41c64468a0c9e92d8eea5f7e817937e8 );
    const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple, 0, const_str_plain_UnknownHandler ); Py_INCREF( const_str_plain_UnknownHandler );
    PyTuple_SET_ITEM( const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain__SixMetaPathImporter__get_module = UNSTREAM_STRING( &constant_bin[ 1573139 ], 32, 1 );
    const_str_plain_viewkeys = UNSTREAM_STRING( &constant_bin[ 1573171 ], 8, 1 );
    const_tuple_str_plain___dict___none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain___dict___none_tuple, 0, const_str_plain___dict__ ); Py_INCREF( const_str_plain___dict__ );
    PyTuple_SET_ITEM( const_tuple_str_plain___dict___none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_long_pos_9223372036854775807 = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1573179 ], 15 );
    const_str_plain_tkCommonDialog = UNSTREAM_STRING( &constant_bin[ 1573194 ], 14, 1 );
    const_str_plain__add_doc = UNSTREAM_STRING( &constant_bin[ 1573208 ], 8, 1 );
    const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple, 0, const_str_plain_reduce ); Py_INCREF( const_str_plain_reduce );
    PyTuple_SET_ITEM( const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple, 2, const_str_plain_functools ); Py_INCREF( const_str_plain_functools );
    const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple, 0, const_str_plain_addbase ); Py_INCREF( const_str_plain_addbase );
    PyTuple_SET_ITEM( const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple, 2, const_str_digest_45c254f6a6153d392478fd2944a253a6 ); Py_INCREF( const_str_digest_45c254f6a6153d392478fd2944a253a6 );
    const_str_plain_MovedModule = UNSTREAM_STRING( &constant_bin[ 1573216 ], 11, 1 );
    const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple, 0, const_str_plain_uses_relative ); Py_INCREF( const_str_plain_uses_relative );
    PyTuple_SET_ITEM( const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_socketserver = UNSTREAM_STRING( &constant_bin[ 1573227 ], 12, 1 );
    const_tuple_str_plain_viewkeys_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_viewkeys_tuple, 0, const_str_plain_viewkeys ); Py_INCREF( const_str_plain_viewkeys );
    const_tuple_str_digest_44b5a94106b8a7650b1be1b19e45a62a_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_44b5a94106b8a7650b1be1b19e45a62a_tuple, 0, const_str_digest_44b5a94106b8a7650b1be1b19e45a62a ); Py_INCREF( const_str_digest_44b5a94106b8a7650b1be1b19e45a62a );
    const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple = PyTuple_New( 3 );
    const_str_plain_urllib_parse = UNSTREAM_STRING( &constant_bin[ 1572041 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple, 0, const_str_plain_urllib_parse ); Py_INCREF( const_str_plain_urllib_parse );
    PyTuple_SET_ITEM( const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple, 1, const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 ); Py_INCREF( const_str_digest_da28dd0fdfcf2d692298525ceb765fa8 );
    PyTuple_SET_ITEM( const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_HTTPDefaultErrorHandler = UNSTREAM_STRING( &constant_bin[ 1573239 ], 23, 1 );
    const_str_digest_0e7fae28a2f47cf9bbe813dcd6d34e25 = UNSTREAM_STRING( &constant_bin[ 1573262 ], 52, 0 );
    const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 0, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 1, const_str_plain_wrapped ); Py_INCREF( const_str_plain_wrapped );
    PyTuple_SET_ITEM( const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 2, const_str_plain_assigned ); Py_INCREF( const_str_plain_assigned );
    PyTuple_SET_ITEM( const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 3, const_str_plain_updated ); Py_INCREF( const_str_plain_updated );
    const_str_plain_create_unbound_method = UNSTREAM_STRING( &constant_bin[ 1573314 ], 21, 1 );
    const_str_plain__importer = UNSTREAM_STRING( &constant_bin[ 1026398 ], 9, 1 );
    const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple = PyTuple_New( 3 );
    const_str_plain_UserString = UNSTREAM_STRING( &constant_bin[ 1573335 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple, 0, const_str_plain_UserString ); Py_INCREF( const_str_plain_UserString );
    PyTuple_SET_ITEM( const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple, 1, const_str_plain_UserString ); Py_INCREF( const_str_plain_UserString );
    PyTuple_SET_ITEM( const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple, 2, const_str_plain_collections ); Py_INCREF( const_str_plain_collections );
    const_str_plain_raise_from = UNSTREAM_STRING( &constant_bin[ 1569373 ], 10, 1 );
    const_tuple_type_int_type_long_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_type_int_type_long_tuple, 0, (PyObject *)&PyInt_Type ); Py_INCREF( (PyObject *)&PyInt_Type );
    PyTuple_SET_ITEM( const_tuple_type_int_type_long_tuple, 1, (PyObject *)&PyLong_Type ); Py_INCREF( (PyObject *)&PyLong_Type );
    const_str_digest_53317e6be879446851f4fe6f94b546e7 = UNSTREAM_STRING( &constant_bin[ 1573345 ], 55, 0 );
    const_str_plain_get_method_self = UNSTREAM_STRING( &constant_bin[ 1573400 ], 15, 1 );
    const_str_digest_492eced51578a561806e20ae8ef1f867 = UNSTREAM_STRING( &constant_bin[ 149104 ], 2, 0 );
    const_str_plain_class_types = UNSTREAM_STRING( &constant_bin[ 1573415 ], 11, 1 );
    const_str_plain_moves = UNSTREAM_STRING( &constant_bin[ 150291 ], 5, 1 );
    const_str_plain_get_function_closure = UNSTREAM_STRING( &constant_bin[ 1573426 ], 20, 1 );
    const_str_plain___author__ = UNSTREAM_STRING( &constant_bin[ 1573446 ], 10, 1 );
    const_str_plain__globs_ = UNSTREAM_STRING( &constant_bin[ 1572342 ], 7, 1 );
    const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple, 0, const_str_plain_UserDict ); Py_INCREF( const_str_plain_UserDict );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple, 1, const_str_plain_UserDict ); Py_INCREF( const_str_plain_UserDict );
    PyTuple_SET_ITEM( const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple, 2, const_str_plain_collections ); Py_INCREF( const_str_plain_collections );
    const_str_digest_dde65581d0349b25365c94106df5eaa4 = UNSTREAM_STRING( &constant_bin[ 1573456 ], 11, 0 );
    const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple, 0, const_str_plain_http_cookies ); Py_INCREF( const_str_plain_http_cookies );
    PyTuple_SET_ITEM( const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple, 1, const_str_plain_Cookie ); Py_INCREF( const_str_plain_Cookie );
    const_str_digest_faf5973379f42e9b5528565b323f20e0 = UNSTREAM_STRING( &constant_bin[ 1573467 ], 12, 0 );
    PyTuple_SET_ITEM( const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple, 2, const_str_digest_faf5973379f42e9b5528565b323f20e0 ); Py_INCREF( const_str_digest_faf5973379f42e9b5528565b323f20e0 );
    const_str_plain__LazyDescr = UNSTREAM_STRING( &constant_bin[ 1573479 ], 10, 1 );
    const_str_plain_email_mime_nonmultipart = UNSTREAM_STRING( &constant_bin[ 1573489 ], 23, 1 );
    const_str_digest_1164690e1be4282a96b5a813ded7269b = UNSTREAM_STRING( &constant_bin[ 1573512 ], 23, 0 );
    const_str_plain_get_method_function = UNSTREAM_STRING( &constant_bin[ 1573535 ], 19, 1 );
    const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple = PyTuple_New( 5 );
    const_str_plain_filterfalse = UNSTREAM_STRING( &constant_bin[ 1569307 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 0, const_str_plain_filterfalse ); Py_INCREF( const_str_plain_filterfalse );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 2, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 3, const_str_plain_ifilterfalse ); Py_INCREF( const_str_plain_ifilterfalse );
    PyTuple_SET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 4, const_str_plain_filterfalse ); Py_INCREF( const_str_plain_filterfalse );
    const_str_digest_13baab1dc3d5588a95d9291b1530e6c0 = UNSTREAM_STRING( &constant_bin[ 1569038 ], 6, 0 );
    const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple, 0, const_str_plain_addinfo ); Py_INCREF( const_str_plain_addinfo );
    PyTuple_SET_ITEM( const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple, 2, const_str_digest_45c254f6a6153d392478fd2944a253a6 ); Py_INCREF( const_str_digest_45c254f6a6153d392478fd2944a253a6 );
    const_str_plain_tkinter_tkfiledialog = UNSTREAM_STRING( &constant_bin[ 1573554 ], 20, 1 );
    const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple, 0, const_str_plain_dbm_gnu ); Py_INCREF( const_str_plain_dbm_gnu );
    PyTuple_SET_ITEM( const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple, 1, const_str_plain_gdbm ); Py_INCREF( const_str_plain_gdbm );
    PyTuple_SET_ITEM( const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple, 2, const_str_digest_937e23fd1af2ef7336d82295a1301f51 ); Py_INCREF( const_str_digest_937e23fd1af2ef7336d82295a1301f51 );
    const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple, 0, const_str_plain_meta ); Py_INCREF( const_str_plain_meta );
    const_str_plain_bases = UNSTREAM_STRING( &constant_bin[ 1573574 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple, 1, const_str_plain_bases ); Py_INCREF( const_str_plain_bases );
    PyTuple_SET_ITEM( const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple, 2, const_str_plain_metaclass ); Py_INCREF( const_str_plain_metaclass );
    const_str_plain_assertRaisesRegexp = UNSTREAM_STRING( &constant_bin[ 1573579 ], 18, 1 );
    const_str_plain_Tkdnd = UNSTREAM_STRING( &constant_bin[ 1573597 ], 5, 1 );
    const_str_plain_Module_six_moves_urllib_response = UNSTREAM_STRING( &constant_bin[ 1573602 ], 32, 1 );
    const_str_plain__locs_ = UNSTREAM_STRING( &constant_bin[ 1572351 ], 6, 1 );
    const_str_plain_string_types = UNSTREAM_STRING( &constant_bin[ 1573634 ], 12, 1 );
    const_tuple_161fc844a072f0af4aef9f4d296def14_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_161fc844a072f0af4aef9f4d296def14_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_161fc844a072f0af4aef9f4d296def14_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_str_plain_this_bases = UNSTREAM_STRING( &constant_bin[ 1573646 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_161fc844a072f0af4aef9f4d296def14_tuple, 2, const_str_plain_this_bases ); Py_INCREF( const_str_plain_this_bases );
    PyTuple_SET_ITEM( const_tuple_161fc844a072f0af4aef9f4d296def14_tuple, 3, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    PyTuple_SET_ITEM( const_tuple_161fc844a072f0af4aef9f4d296def14_tuple, 4, const_str_plain_meta ); Py_INCREF( const_str_plain_meta );
    PyTuple_SET_ITEM( const_tuple_161fc844a072f0af4aef9f4d296def14_tuple, 5, const_str_plain_bases ); Py_INCREF( const_str_plain_bases );
    const_tuple_str_digest_492eced51578a561806e20ae8ef1f867_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_492eced51578a561806e20ae8ef1f867_tuple, 0, const_str_digest_492eced51578a561806e20ae8ef1f867 ); Py_INCREF( const_str_digest_492eced51578a561806e20ae8ef1f867 );
    const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple, 0, const_str_plain_HTTPCookieProcessor ); Py_INCREF( const_str_plain_HTTPCookieProcessor );
    PyTuple_SET_ITEM( const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_90e06424913ba9ad885f60767479fe37_tuple = PyTuple_New( 4 );
    const_str_plain__code_ = UNSTREAM_STRING( &constant_bin[ 521422 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 0, const_str_plain__code_ ); Py_INCREF( const_str_plain__code_ );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 1, const_str_plain__globs_ ); Py_INCREF( const_str_plain__globs_ );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 2, const_str_plain__locs_ ); Py_INCREF( const_str_plain__locs_ );
    PyTuple_SET_ITEM( const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 3, const_str_plain_frame ); Py_INCREF( const_str_plain_frame );
    const_str_plain_urlunparse = UNSTREAM_STRING( &constant_bin[ 1573656 ], 10, 1 );
    const_tuple_type_str_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_type_str_tuple, 0, (PyObject *)&PyString_Type ); Py_INCREF( (PyObject *)&PyString_Type );
    const_str_plain___self__ = UNSTREAM_STRING( &constant_bin[ 1573666 ], 8, 1 );
    const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 1, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 2, const_str_plain_tp ); Py_INCREF( const_str_plain_tp );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 3, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_str_plain_with_metaclass = UNSTREAM_STRING( &constant_bin[ 1573674 ], 14, 1 );
    const_str_digest_d082ba711c791809312af019a50cc3ce = UNSTREAM_STRING( &constant_bin[ 1573688 ], 33, 0 );
    const_tuple_str_plain_metaclass_str_plain_wrapper_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_metaclass_str_plain_wrapper_tuple, 0, const_str_plain_metaclass ); Py_INCREF( const_str_plain_metaclass );
    PyTuple_SET_ITEM( const_tuple_str_plain_metaclass_str_plain_wrapper_tuple, 1, const_str_plain_wrapper ); Py_INCREF( const_str_plain_wrapper );
    const_str_plain_int2byte = UNSTREAM_STRING( &constant_bin[ 1573721 ], 8, 1 );
    const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd = UNSTREAM_STRING( &constant_bin[ 1572035 ], 18, 0 );
    const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_str_plain_old_mod = UNSTREAM_STRING( &constant_bin[ 1573729 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 2, const_str_plain_old_mod ); Py_INCREF( const_str_plain_old_mod );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 3, const_str_plain_new_mod ); Py_INCREF( const_str_plain_new_mod );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 4, const_str_plain_old_attr ); Py_INCREF( const_str_plain_old_attr );
    const_str_plain_new_attr = UNSTREAM_STRING( &constant_bin[ 1573736 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 5, const_str_plain_new_attr ); Py_INCREF( const_str_plain_new_attr );
    const_str_digest_836236e827883e9923f3b043ffe4640d = UNSTREAM_STRING( &constant_bin[ 1569334 ], 18, 0 );
    const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0, const_str_digest_c075052d723d6707083e869a0e3659bb ); Py_INCREF( const_str_digest_c075052d723d6707083e869a0e3659bb );
    const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 0, const_str_plain_xrange ); Py_INCREF( const_str_plain_xrange );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 2, const_str_plain_builtins ); Py_INCREF( const_str_plain_builtins );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 3, const_str_plain_xrange ); Py_INCREF( const_str_plain_xrange );
    PyTuple_SET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 4, const_str_plain_range ); Py_INCREF( const_str_plain_range );
    const_str_plain_iterlists = UNSTREAM_STRING( &constant_bin[ 1573744 ], 9, 1 );
    const_str_plain_tkinter_ttk = UNSTREAM_STRING( &constant_bin[ 1573753 ], 11, 1 );
    const_str_plain_ttk = UNSTREAM_STRING( &constant_bin[ 1570116 ], 3, 1 );
    const_tuple_str_plain_bs_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_bs_tuple, 0, const_str_plain_bs ); Py_INCREF( const_str_plain_bs );
    const_str_plain_methodcaller = UNSTREAM_STRING( &constant_bin[ 1573764 ], 12, 1 );
    const_tuple_45037418d37481db3e88817f5f3e75d5_tuple = PyTuple_New( 3 );
    const_str_plain_html_parser = UNSTREAM_STRING( &constant_bin[ 1573776 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_45037418d37481db3e88817f5f3e75d5_tuple, 0, const_str_plain_html_parser ); Py_INCREF( const_str_plain_html_parser );
    PyTuple_SET_ITEM( const_tuple_45037418d37481db3e88817f5f3e75d5_tuple, 1, const_str_plain_HTMLParser ); Py_INCREF( const_str_plain_HTMLParser );
    PyTuple_SET_ITEM( const_tuple_45037418d37481db3e88817f5f3e75d5_tuple, 2, const_str_digest_c94e49aa6b31218158c33258bda42655 ); Py_INCREF( const_str_digest_c94e49aa6b31218158c33258bda42655 );
    const_list_str_plain___doc___str_plain___name___list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain___doc___str_plain___name___list, 0, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyList_SET_ITEM( const_list_str_plain___doc___str_plain___name___list, 1, const_str_plain___name__ ); Py_INCREF( const_str_plain___name__ );
    const_str_digest_b136a150499b95c9a0929c5fba6642cb = UNSTREAM_STRING( &constant_bin[ 1573787 ], 73, 0 );
    const_str_plain_get_unbound_function = UNSTREAM_STRING( &constant_bin[ 1573860 ], 20, 1 );
    const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple = PyTuple_New( 3 );
    const_str_plain_ParseResult = UNSTREAM_STRING( &constant_bin[ 1573880 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple, 0, const_str_plain_ParseResult ); Py_INCREF( const_str_plain_ParseResult );
    PyTuple_SET_ITEM( const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple, 0, const_str_digest_7cb7e1a5659547478f12d8fe755efd75 ); Py_INCREF( const_str_digest_7cb7e1a5659547478f12d8fe755efd75 );
    const_str_digest_f5cee510562e6ca85d00c7ce91a1eee8 = UNSTREAM_STRING( &constant_bin[ 1573891 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple, 1, const_str_digest_f5cee510562e6ca85d00c7ce91a1eee8 ); Py_INCREF( const_str_digest_f5cee510562e6ca85d00c7ce91a1eee8 );
    const_tuple_str_digest_62b7e67e29e99420603c12d205222fa5_tuple = PyTuple_New( 1 );
    const_str_digest_62b7e67e29e99420603c12d205222fa5 = UNSTREAM_STRING( &constant_bin[ 1573895 ], 7, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_62b7e67e29e99420603c12d205222fa5_tuple, 0, const_str_digest_62b7e67e29e99420603c12d205222fa5 ); Py_INCREF( const_str_digest_62b7e67e29e99420603c12d205222fa5 );
    const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple = PyTuple_New( 3 );
    const_str_plain_urlretrieve = UNSTREAM_STRING( &constant_bin[ 1573902 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple, 0, const_str_plain_urlretrieve ); Py_INCREF( const_str_plain_urlretrieve );
    PyTuple_SET_ITEM( const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_MovedAttribute = UNSTREAM_STRING( &constant_bin[ 1573913 ], 14, 1 );
    const_str_plain_zip_longest = UNSTREAM_STRING( &constant_bin[ 1573927 ], 11, 1 );
    const_str_plain_unbound = UNSTREAM_STRING( &constant_bin[ 1569973 ], 7, 1 );
    const_tuple_b7e39273727f74459e3203a2be1ea787_tuple = PyTuple_New( 3 );
    const_str_plain_URLopener = UNSTREAM_STRING( &constant_bin[ 1569222 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_b7e39273727f74459e3203a2be1ea787_tuple, 0, const_str_plain_URLopener ); Py_INCREF( const_str_plain_URLopener );
    PyTuple_SET_ITEM( const_tuple_b7e39273727f74459e3203a2be1ea787_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_b7e39273727f74459e3203a2be1ea787_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_7e4f7e7d87a44d0e81f11f08170c9bf6 = UNSTREAM_STRING( &constant_bin[ 1573938 ], 28, 0 );
    const_str_plain_Iterator = UNSTREAM_STRING( &constant_bin[ 835772 ], 8, 1 );
    const_str_digest_a343d5bd65de7d15893f1a0d02d09f45 = UNSTREAM_STRING( &constant_bin[ 1573966 ], 63, 0 );
    const_str_plain_reraise = UNSTREAM_STRING( &constant_bin[ 1571080 ], 7, 1 );
    const_str_plain_tkinter_tix = UNSTREAM_STRING( &constant_bin[ 1574029 ], 11, 1 );
    const_str_plain_BytesIO = UNSTREAM_STRING( &constant_bin[ 1574040 ], 7, 1 );
    const_tuple_e79d7f1b4734be0e37665951db297244_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_e79d7f1b4734be0e37665951db297244_tuple, 0, const_str_plain_email_mime_nonmultipart ); Py_INCREF( const_str_plain_email_mime_nonmultipart );
    PyTuple_SET_ITEM( const_tuple_e79d7f1b4734be0e37665951db297244_tuple, 1, const_str_digest_5b3beed978ba6433285f8986661c0d63 ); Py_INCREF( const_str_digest_5b3beed978ba6433285f8986661c0d63 );
    PyTuple_SET_ITEM( const_tuple_e79d7f1b4734be0e37665951db297244_tuple, 2, const_str_digest_1164690e1be4282a96b5a813ded7269b ); Py_INCREF( const_str_digest_1164690e1be4282a96b5a813ded7269b );
    const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple = PyTuple_New( 3 );
    const_str_plain_BaseHandler = UNSTREAM_STRING( &constant_bin[ 1574047 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple, 0, const_str_plain_BaseHandler ); Py_INCREF( const_str_plain_BaseHandler );
    PyTuple_SET_ITEM( const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_digest_bdf07efe689edd815848f7ba41ea2eee = UNSTREAM_STRING( &constant_bin[ 1569038 ], 12, 0 );
    const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 1, const_str_plain_orig_vars ); Py_INCREF( const_str_plain_orig_vars );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 2, const_str_plain_slots ); Py_INCREF( const_str_plain_slots );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 3, const_str_plain_slots_var ); Py_INCREF( const_str_plain_slots_var );
    PyTuple_SET_ITEM( const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 4, const_str_plain_metaclass ); Py_INCREF( const_str_plain_metaclass );
    const_str_plain_attrgetter = UNSTREAM_STRING( &constant_bin[ 1574058 ], 10, 1 );
    const_str_plain_HTTPHandler = UNSTREAM_STRING( &constant_bin[ 1574068 ], 11, 1 );
    const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple, 0, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    const_str_digest_666540d560c14e9851ed9be690845abf = UNSTREAM_STRING( &constant_bin[ 1569034 ], 16, 0 );
    PyTuple_SET_ITEM( const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple, 1, const_str_digest_666540d560c14e9851ed9be690845abf ); Py_INCREF( const_str_digest_666540d560c14e9851ed9be690845abf );
    PyTuple_SET_ITEM( const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple, 2, const_str_digest_666540d560c14e9851ed9be690845abf ); Py_INCREF( const_str_digest_666540d560c14e9851ed9be690845abf );
    const_str_digest_2a86adf5a4eff7c85cf98b964b9653c8 = UNSTREAM_STRING( &constant_bin[ 1569038 ], 21, 0 );
    const_str_plain_splittag = UNSTREAM_STRING( &constant_bin[ 1574079 ], 8, 1 );
    const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple, 0, const_str_plain_configparser ); Py_INCREF( const_str_plain_configparser );
    PyTuple_SET_ITEM( const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple, 1, const_str_plain_ConfigParser ); Py_INCREF( const_str_plain_ConfigParser );
    const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 0, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 1, const_str_plain_errors ); Py_INCREF( const_str_plain_errors );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_tuple_3adb059b24d1b9435823e57bdb130564_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_3adb059b24d1b9435823e57bdb130564_tuple, 0, const_str_plain_tkinter_simpledialog ); Py_INCREF( const_str_plain_tkinter_simpledialog );
    PyTuple_SET_ITEM( const_tuple_3adb059b24d1b9435823e57bdb130564_tuple, 1, const_str_plain_SimpleDialog ); Py_INCREF( const_str_plain_SimpleDialog );
    PyTuple_SET_ITEM( const_tuple_3adb059b24d1b9435823e57bdb130564_tuple, 2, const_str_digest_98007d19004f11322e99f7f66acdf51d ); Py_INCREF( const_str_digest_98007d19004f11322e99f7f66acdf51d );
    const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple, 0, const_str_plain_html_entities ); Py_INCREF( const_str_plain_html_entities );
    PyTuple_SET_ITEM( const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple, 1, const_str_plain_htmlentitydefs ); Py_INCREF( const_str_plain_htmlentitydefs );
    PyTuple_SET_ITEM( const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple, 2, const_str_digest_f5862b11e62dc1382b5d1226dd5ff379 ); Py_INCREF( const_str_digest_f5862b11e62dc1382b5d1226dd5ff379 );
    const_str_plain_izip_longest = UNSTREAM_STRING( &constant_bin[ 1574087 ], 12, 1 );
    const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 0, const_str_plain_zip_longest ); Py_INCREF( const_str_plain_zip_longest );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 1, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 2, const_str_plain_itertools ); Py_INCREF( const_str_plain_itertools );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 3, const_str_plain_izip_longest ); Py_INCREF( const_str_plain_izip_longest );
    PyTuple_SET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 4, const_str_plain_zip_longest ); Py_INCREF( const_str_plain_zip_longest );
    const_str_digest_62c17ddfba14b5f942749b77083b82bc = UNSTREAM_STRING( &constant_bin[ 1574099 ], 256, 0 );
    const_str_digest_0f169d7824efcd520f23c128909f68ee = UNSTREAM_STRING( &constant_bin[ 1574355 ], 20, 0 );
    const_str_plain_func_closure = UNSTREAM_STRING( &constant_bin[ 1572054 ], 12, 1 );
    const_str_plain_queue = UNSTREAM_STRING( &constant_bin[ 1574375 ], 5, 1 );
    const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple, 0, const_str_plain_proxy_bypass ); Py_INCREF( const_str_plain_proxy_bypass );
    PyTuple_SET_ITEM( const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_1a737763e143149741eebf35b19ac3f9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_1a737763e143149741eebf35b19ac3f9_tuple, 0, const_str_plain_tkinter_tksimpledialog ); Py_INCREF( const_str_plain_tkinter_tksimpledialog );
    PyTuple_SET_ITEM( const_tuple_1a737763e143149741eebf35b19ac3f9_tuple, 1, const_str_plain_tkSimpleDialog ); Py_INCREF( const_str_plain_tkSimpleDialog );
    PyTuple_SET_ITEM( const_tuple_1a737763e143149741eebf35b19ac3f9_tuple, 2, const_str_digest_98007d19004f11322e99f7f66acdf51d ); Py_INCREF( const_str_digest_98007d19004f11322e99f7f66acdf51d );
    const_str_digest_91987f05961643baf523130276babe51 = UNSTREAM_STRING( &constant_bin[ 1574380 ], 21, 0 );
    const_str_plain__add_module = UNSTREAM_STRING( &constant_bin[ 1574401 ], 11, 1 );
    const_str_plain_intern = UNSTREAM_STRING( &constant_bin[ 24908 ], 6, 1 );
    const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple, 0, const_str_plain_HTTPDefaultErrorHandler ); Py_INCREF( const_str_plain_HTTPDefaultErrorHandler );
    PyTuple_SET_ITEM( const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_plain___module___str_plain___new___tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain___module___str_plain___new___tuple, 0, const_str_plain___module__ ); Py_INCREF( const_str_plain___module__ );
    PyTuple_SET_ITEM( const_tuple_str_plain___module___str_plain___new___tuple, 1, const_str_plain___new__ ); Py_INCREF( const_str_plain___new__ );
    const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 0, const_str_plain_getcwd ); Py_INCREF( const_str_plain_getcwd );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 1, const_str_plain_os ); Py_INCREF( const_str_plain_os );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 2, const_str_plain_os ); Py_INCREF( const_str_plain_os );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 3, const_str_plain_getcwdu ); Py_INCREF( const_str_plain_getcwdu );
    PyTuple_SET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 4, const_str_plain_getcwd ); Py_INCREF( const_str_plain_getcwd );
    const_str_plain_Module_six_moves_urllib = UNSTREAM_STRING( &constant_bin[ 1572720 ], 23, 1 );
    const_str_plain_exec_ = UNSTREAM_STRING( &constant_bin[ 1574412 ], 5, 1 );
    const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple, 0, const_str_plain_email_mime_base ); Py_INCREF( const_str_plain_email_mime_base );
    PyTuple_SET_ITEM( const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple, 1, const_str_digest_0f70f5ebb503ca09ef40fe7293d50ca9 ); Py_INCREF( const_str_digest_0f70f5ebb503ca09ef40fe7293d50ca9 );
    PyTuple_SET_ITEM( const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple, 2, const_str_digest_8cc5006936e02b61706e4ff874fb2042 ); Py_INCREF( const_str_digest_8cc5006936e02b61706e4ff874fb2042 );
    const_str_plain_urllib_robotparser = UNSTREAM_STRING( &constant_bin[ 1569279 ], 18, 1 );
    const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple, 0, const_str_plain_urlopen ); Py_INCREF( const_str_plain_urlopen );
    PyTuple_SET_ITEM( const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple, 0, const_str_plain__thread ); Py_INCREF( const_str_plain__thread );
    PyTuple_SET_ITEM( const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple, 1, const_str_plain_thread ); Py_INCREF( const_str_plain_thread );
    PyTuple_SET_ITEM( const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple, 2, const_str_plain__thread ); Py_INCREF( const_str_plain__thread );
    const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple, 0, const_str_plain_cPickle ); Py_INCREF( const_str_plain_cPickle );
    PyTuple_SET_ITEM( const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple, 1, const_str_plain_cPickle ); Py_INCREF( const_str_plain_cPickle );
    PyTuple_SET_ITEM( const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple, 2, const_str_plain_pickle ); Py_INCREF( const_str_plain_pickle );
    const_unicode_space = UNSTREAM_UNICODE( &constant_bin[ 256 ], 1 );
    const_str_digest_bc859a90e4d9c0b4fce03f66d37f0cf6 = UNSTREAM_STRING( &constant_bin[ 1574417 ], 27, 0 );
    const_tuple_a766c17241115f6922b493dfd444b3b5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_a766c17241115f6922b493dfd444b3b5_tuple, 0, const_str_plain_urlsplit ); Py_INCREF( const_str_plain_urlsplit );
    PyTuple_SET_ITEM( const_tuple_a766c17241115f6922b493dfd444b3b5_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_a766c17241115f6922b493dfd444b3b5_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_d573636f316e67f758ce3eddfc433d39_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_d573636f316e67f758ce3eddfc433d39_tuple, 0, const_str_plain_splittag ); Py_INCREF( const_str_plain_splittag );
    PyTuple_SET_ITEM( const_tuple_d573636f316e67f758ce3eddfc433d39_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_d573636f316e67f758ce3eddfc433d39_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple, 0, const_str_plain_intern ); Py_INCREF( const_str_plain_intern );
    PyTuple_SET_ITEM( const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple, 1, const_str_plain___builtin__ ); Py_INCREF( const_str_plain___builtin__ );
    PyTuple_SET_ITEM( const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple, 2, const_str_plain_sys ); Py_INCREF( const_str_plain_sys );
    const_str_plain_move = UNSTREAM_STRING( &constant_bin[ 17002 ], 4, 1 );
    const_tuple_983a57efce70dcb41da6c64e832b9120_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_983a57efce70dcb41da6c64e832b9120_tuple, 0, const_str_plain_tkinter_tkfiledialog ); Py_INCREF( const_str_plain_tkinter_tkfiledialog );
    PyTuple_SET_ITEM( const_tuple_983a57efce70dcb41da6c64e832b9120_tuple, 1, const_str_plain_tkFileDialog ); Py_INCREF( const_str_plain_tkFileDialog );
    PyTuple_SET_ITEM( const_tuple_983a57efce70dcb41da6c64e832b9120_tuple, 2, const_str_digest_0f0322cacec3a164468e788b6cf4cba4 ); Py_INCREF( const_str_digest_0f0322cacec3a164468e788b6cf4cba4 );
    const_str_plain__import_module = UNSTREAM_STRING( &constant_bin[ 1574444 ], 14, 1 );
    const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple, 0, const_str_plain_tkinter_scrolledtext ); Py_INCREF( const_str_plain_tkinter_scrolledtext );
    PyTuple_SET_ITEM( const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple, 1, const_str_plain_ScrolledText ); Py_INCREF( const_str_plain_ScrolledText );
    PyTuple_SET_ITEM( const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple, 2, const_str_digest_0f169d7824efcd520f23c128909f68ee ); Py_INCREF( const_str_digest_0f169d7824efcd520f23c128909f68ee );
    const_str_plain_with_traceback = UNSTREAM_STRING( &constant_bin[ 1574458 ], 14, 1 );
    const_str_plain_add_move = UNSTREAM_STRING( &constant_bin[ 1574472 ], 8, 1 );
    const_str_plain_SocketServer = UNSTREAM_STRING( &constant_bin[ 1574480 ], 12, 1 );
    const_str_plain__urllib_error_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1574492 ], 30, 1 );
    const_str_plain__SixMetaPathImporter = UNSTREAM_STRING( &constant_bin[ 1573139 ], 20, 1 );
    const_str_plain__resolve = UNSTREAM_STRING( &constant_bin[ 1574522 ], 8, 1 );
    const_tuple_str_plain_func_str_plain_obj_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_obj_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_obj_tuple, 1, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple, 0, const_str_plain_socketserver ); Py_INCREF( const_str_plain_socketserver );
    PyTuple_SET_ITEM( const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple, 1, const_str_plain_SocketServer ); Py_INCREF( const_str_plain_SocketServer );
    const_str_plain_func_code = UNSTREAM_STRING( &constant_bin[ 236493 ], 9, 1 );
    const_tuple_5e662527879cefa60fbd95a7550cf311_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_5e662527879cefa60fbd95a7550cf311_tuple, 0, const_str_plain_tkinter_dnd ); Py_INCREF( const_str_plain_tkinter_dnd );
    PyTuple_SET_ITEM( const_tuple_5e662527879cefa60fbd95a7550cf311_tuple, 1, const_str_plain_Tkdnd ); Py_INCREF( const_str_plain_Tkdnd );
    PyTuple_SET_ITEM( const_tuple_5e662527879cefa60fbd95a7550cf311_tuple, 2, const_str_digest_2f383546f01c636d68b29330ba99dcef ); Py_INCREF( const_str_digest_2f383546f01c636d68b29330ba99dcef );
    const_str_digest_b0187e473195d5f4e7f8d9079ea0b7b3 = UNSTREAM_STRING( &constant_bin[ 60258 ], 6, 0 );
    const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple, 0, const_str_plain_URLError ); Py_INCREF( const_str_plain_URLError );
    PyTuple_SET_ITEM( const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple, 2, const_str_digest_f1949150375e8b53443d58d93fe4f89e ); Py_INCREF( const_str_digest_f1949150375e8b53443d58d93fe4f89e );
    const_tuple_str_digest_666540d560c14e9851ed9be690845abf_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_666540d560c14e9851ed9be690845abf_tuple, 0, const_str_digest_666540d560c14e9851ed9be690845abf ); Py_INCREF( const_str_digest_666540d560c14e9851ed9be690845abf );
    const_tuple_str_plain___weakref___none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain___weakref___none_tuple, 0, const_str_plain___weakref__ ); Py_INCREF( const_str_plain___weakref__ );
    PyTuple_SET_ITEM( const_tuple_str_plain___weakref___none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_str_plain___get__ = UNSTREAM_STRING( &constant_bin[ 1574530 ], 7, 1 );
    const_tuple_str_digest_a5f041d60ba724151c334293929df649_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_a5f041d60ba724151c334293929df649_tuple, 0, const_str_digest_a5f041d60ba724151c334293929df649 ); Py_INCREF( const_str_digest_a5f041d60ba724151c334293929df649 );
    const_tuple_31e595002f80a39949775964212a97b9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_31e595002f80a39949775964212a97b9_tuple, 0, const_str_plain_HTTPHandler ); Py_INCREF( const_str_plain_HTTPHandler );
    PyTuple_SET_ITEM( const_tuple_31e595002f80a39949775964212a97b9_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_31e595002f80a39949775964212a97b9_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_str_plain_Module_six_moves_urllib_robotparser = UNSTREAM_STRING( &constant_bin[ 1574537 ], 35, 1 );
    const_tuple_str_plain_keys_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_keys_tuple, 0, const_str_plain_keys ); Py_INCREF( const_str_plain_keys );
    const_str_plain_known_modules = UNSTREAM_STRING( &constant_bin[ 1574572 ], 13, 1 );
    const_tuple_15e64786f005915ad409681ea2752bf5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_15e64786f005915ad409681ea2752bf5_tuple, 0, const_str_plain_tkinter_ttk ); Py_INCREF( const_str_plain_tkinter_ttk );
    PyTuple_SET_ITEM( const_tuple_15e64786f005915ad409681ea2752bf5_tuple, 1, const_str_plain_ttk ); Py_INCREF( const_str_plain_ttk );
    PyTuple_SET_ITEM( const_tuple_15e64786f005915ad409681ea2752bf5_tuple, 2, const_str_digest_dde65581d0349b25365c94106df5eaa4 ); Py_INCREF( const_str_digest_dde65581d0349b25365c94106df5eaa4 );
    const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple, 0, const_str_plain_email_mime_text ); Py_INCREF( const_str_plain_email_mime_text );
    PyTuple_SET_ITEM( const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple, 1, const_str_digest_4082068f02f117842a4eba60151ac8c5 ); Py_INCREF( const_str_digest_4082068f02f117842a4eba60151ac8c5 );
    PyTuple_SET_ITEM( const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple, 2, const_str_digest_4f965162d0a8bf5d5b4136bee888b84b ); Py_INCREF( const_str_digest_4f965162d0a8bf5d5b4136bee888b84b );
    const_str_digest_f13c881fad34db50f71983f3aeb67682 = UNSTREAM_STRING( &constant_bin[ 1574585 ], 57, 0 );
    const_str_plain___wrapped__ = UNSTREAM_STRING( &constant_bin[ 1574642 ], 11, 1 );
    const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple, 0, const_str_plain_quote ); Py_INCREF( const_str_plain_quote );
    PyTuple_SET_ITEM( const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_Module_six_moves_urllib_request = UNSTREAM_STRING( &constant_bin[ 1574653 ], 31, 1 );
    const_str_plain_print_ = UNSTREAM_STRING( &constant_bin[ 243516 ], 6, 1 );
    const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple, 0, const_str_plain_urllib_robotparser ); Py_INCREF( const_str_plain_urllib_robotparser );
    PyTuple_SET_ITEM( const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple, 1, const_str_plain_robotparser ); Py_INCREF( const_str_plain_robotparser );
    PyTuple_SET_ITEM( const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple, 2, const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a ); Py_INCREF( const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a );
    const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple, 0, const_str_plain_urlunparse ); Py_INCREF( const_str_plain_urlunparse );
    PyTuple_SET_ITEM( const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain__urllib_robotparser_moved_attributes = UNSTREAM_STRING( &constant_bin[ 1574684 ], 36, 1 );
    const_tuple_str_plain_it_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_it_tuple, 0, const_str_plain_it ); Py_INCREF( const_str_plain_it );
    const_tuple_str_plain_self_str_plain_module_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_module_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_module_tuple, 1, const_str_plain_module ); Py_INCREF( const_str_plain_module );
    const_list_1c82cc17d8f54cff757731adfdff677e_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 0, const_str_plain_parse ); Py_INCREF( const_str_plain_parse );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 1, const_str_plain_error ); Py_INCREF( const_str_plain_error );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 2, const_str_plain_request ); Py_INCREF( const_str_plain_request );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 3, const_str_plain_response ); Py_INCREF( const_str_plain_response );
    PyList_SET_ITEM( const_list_1c82cc17d8f54cff757731adfdff677e_list, 4, const_str_plain_robotparser ); Py_INCREF( const_str_plain_robotparser );
    const_tuple_str_plain_move_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_move_tuple, 0, const_str_plain_move ); Py_INCREF( const_str_plain_move );
    const_tuple_str_plain_buf_str_plain_i_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_buf_str_plain_i_tuple, 0, const_str_plain_buf ); Py_INCREF( const_str_plain_buf );
    PyTuple_SET_ITEM( const_tuple_str_plain_buf_str_plain_i_tuple, 1, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_str_plain_unbound_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_unbound_tuple, 0, const_str_plain_unbound ); Py_INCREF( const_str_plain_unbound );
    const_str_plain_create_bound_method = UNSTREAM_STRING( &constant_bin[ 1574720 ], 19, 1 );
    const_str_plain___mro__ = UNSTREAM_STRING( &constant_bin[ 1574739 ], 7, 1 );
    const_tuple_int_pos_3_int_pos_4_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_4_tuple, 0, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_4_tuple, 1, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    const_tuple_int_pos_3_int_pos_2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_2_tuple, 0, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_tuple_str_plain_self_str_plain_name_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_name_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple, 0, const_str_plain_tkinter_commondialog ); Py_INCREF( const_str_plain_tkinter_commondialog );
    PyTuple_SET_ITEM( const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple, 1, const_str_plain_tkCommonDialog ); Py_INCREF( const_str_plain_tkCommonDialog );
    PyTuple_SET_ITEM( const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple, 2, const_str_digest_af845b30b77af5531a80edf50d295161 ); Py_INCREF( const_str_digest_af845b30b77af5531a80edf50d295161 );
    const_str_digest_ebf751844f7678efef5423dab5acd577 = UNSTREAM_STRING( &constant_bin[ 1574746 ], 12, 0 );
    const_str_plain_assertItemsEqual = UNSTREAM_STRING( &constant_bin[ 1574758 ], 16, 1 );
    const_tuple_df925d4985bc969100774d9243b00230_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_df925d4985bc969100774d9243b00230_tuple, 0, const_str_plain_quote_plus ); Py_INCREF( const_str_plain_quote_plus );
    PyTuple_SET_ITEM( const_tuple_df925d4985bc969100774d9243b00230_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_df925d4985bc969100774d9243b00230_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple, 0, const_str_plain_tkinter_messagebox ); Py_INCREF( const_str_plain_tkinter_messagebox );
    PyTuple_SET_ITEM( const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple, 1, const_str_plain_tkMessageBox ); Py_INCREF( const_str_plain_tkMessageBox );
    PyTuple_SET_ITEM( const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple, 2, const_str_digest_dc51ca580cc759241b93115ce34bf24c ); Py_INCREF( const_str_digest_dc51ca580cc759241b93115ce34bf24c );
    const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple, 0, const_str_plain_RobotFileParser ); Py_INCREF( const_str_plain_RobotFileParser );
    PyTuple_SET_ITEM( const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple, 1, const_str_plain_robotparser ); Py_INCREF( const_str_plain_robotparser );
    PyTuple_SET_ITEM( const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple, 2, const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a ); Py_INCREF( const_str_digest_0c2c53a682a2a84b1ae61ae38cc6a65a );
    const_str_digest_c1940ed36d6c651776a6e3a34c7131e3 = UNSTREAM_STRING( &constant_bin[ 1574774 ], 49, 0 );
    const_str_plain_PY34 = UNSTREAM_STRING( &constant_bin[ 1574823 ], 4, 1 );
    const_tuple_str_plain_items_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_items_tuple, 0, const_str_plain_items ); Py_INCREF( const_str_plain_items );
    const_tuple_097719e7086f8299513e74ca5958de16_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_097719e7086f8299513e74ca5958de16_tuple, 0, const_str_plain_tkinter_tix ); Py_INCREF( const_str_plain_tkinter_tix );
    PyTuple_SET_ITEM( const_tuple_097719e7086f8299513e74ca5958de16_tuple, 1, const_str_plain_Tix ); Py_INCREF( const_str_plain_Tix );
    PyTuple_SET_ITEM( const_tuple_097719e7086f8299513e74ca5958de16_tuple, 2, const_str_digest_f2936f958cb3c1b034c6b02cfe0f019b ); Py_INCREF( const_str_digest_f2936f958cb3c1b034c6b02cfe0f019b );
    const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple = PyTuple_New( 3 );
    const_str_plain_addclosehook = UNSTREAM_STRING( &constant_bin[ 1574827 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple, 0, const_str_plain_addclosehook ); Py_INCREF( const_str_plain_addclosehook );
    PyTuple_SET_ITEM( const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple, 1, const_str_plain_urllib ); Py_INCREF( const_str_plain_urllib );
    PyTuple_SET_ITEM( const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple, 2, const_str_digest_45c254f6a6153d392478fd2944a253a6 ); Py_INCREF( const_str_digest_45c254f6a6153d392478fd2944a253a6 );
    const_tuple_1ca2df1302c361039c60608fe3780090_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_1ca2df1302c361039c60608fe3780090_tuple, 0, const_str_plain_uses_params ); Py_INCREF( const_str_plain_uses_params );
    PyTuple_SET_ITEM( const_tuple_1ca2df1302c361039c60608fe3780090_tuple, 1, const_str_plain_urlparse ); Py_INCREF( const_str_plain_urlparse );
    PyTuple_SET_ITEM( const_tuple_1ca2df1302c361039c60608fe3780090_tuple, 2, const_str_digest_04991ea695faff4a76e4efb6a8a8593f ); Py_INCREF( const_str_digest_04991ea695faff4a76e4efb6a8a8593f );
    const_str_plain_advance_iterator = UNSTREAM_STRING( &constant_bin[ 1574839 ], 16, 1 );
    const_tuple_str_plain_winreg_str_plain__winreg_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_winreg_str_plain__winreg_tuple, 0, const_str_plain_winreg ); Py_INCREF( const_str_plain_winreg );
    PyTuple_SET_ITEM( const_tuple_str_plain_winreg_str_plain__winreg_tuple, 1, const_str_plain__winreg ); Py_INCREF( const_str_plain__winreg );
    const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple, 0, const_str_plain_FTPHandler ); Py_INCREF( const_str_plain_FTPHandler );
    PyTuple_SET_ITEM( const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple, 1, const_str_plain_urllib2 ); Py_INCREF( const_str_plain_urllib2 );
    PyTuple_SET_ITEM( const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple, 2, const_str_digest_59bc9c95777e64e4720c3af0837aec42 ); Py_INCREF( const_str_digest_59bc9c95777e64e4720c3af0837aec42 );
    const_tuple_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd_tuple, 0, const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd ); Py_INCREF( const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd );
    const_tuple_str_plain_queue_str_plain_Queue_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_queue_str_plain_Queue_tuple, 0, const_str_plain_queue ); Py_INCREF( const_str_plain_queue );
    PyTuple_SET_ITEM( const_tuple_str_plain_queue_str_plain_Queue_tuple, 1, const_str_plain_Queue ); Py_INCREF( const_str_plain_Queue );
    const_str_plain_itervalues = UNSTREAM_STRING( &constant_bin[ 1574855 ], 10, 1 );
    const_str_plain_Struct = UNSTREAM_STRING( &constant_bin[ 52665 ], 6, 1 );
    const_str_plain_assertCountEqual = UNSTREAM_STRING( &constant_bin[ 1571886 ], 16, 1 );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_six( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_285a0fc76925589c89de0c4034c6c74a;
static PyCodeObject *codeobj_2d01c8c62f7eadc46dfe3e6049ce294c;
static PyCodeObject *codeobj_f01c021eb7965a8a0c5072bbbfd8ee24;
static PyCodeObject *codeobj_bd5eb45c4557ae66e67170aba1b94aa0;
static PyCodeObject *codeobj_616d9876f3af4cfc1d7db66555620415;
static PyCodeObject *codeobj_4c8d1f6c7b43e08e46e45eac50ad593a;
static PyCodeObject *codeobj_a6fe0eb949e5f19233e885c9c93afaa2;
static PyCodeObject *codeobj_99688ed32532a080edcbe6bac879751b;
static PyCodeObject *codeobj_cc3206bce9770c90b92c851890974ebf;
static PyCodeObject *codeobj_dd4c5fedf31fa8547ef5ab3e468221fb;
static PyCodeObject *codeobj_7fb6829fa3af848d3c7de688bfe1f617;
static PyCodeObject *codeobj_bb743333569859f6cef2c7b7f23996b0;
static PyCodeObject *codeobj_5827df2c329637d252712bd6500bd634;
static PyCodeObject *codeobj_7cbd18b9265941d83e649d73567a9697;
static PyCodeObject *codeobj_2e6db5d6ec400d5de968bd32ea38fd98;
static PyCodeObject *codeobj_212e029da8ecb5a3ddbaf3eb1aed62b3;
static PyCodeObject *codeobj_221c66ab99f4dc7167326f7bfbca840d;
static PyCodeObject *codeobj_9b09d93378923b47b39edb78c81b4b0f;
static PyCodeObject *codeobj_ce3b8d7055c2a9093ba0afea1d4f53f1;
static PyCodeObject *codeobj_302febdece34d345ec86a4f5d1c47c5a;
static PyCodeObject *codeobj_62f3167cc8599d3657f39fb60354166f;
static PyCodeObject *codeobj_223ca60bc5fce3fac077a1a61c01dbd4;
static PyCodeObject *codeobj_86808ef7fa4cab4b81805da3e49369d9;
static PyCodeObject *codeobj_878ec1fa8a776be47f00545fd8c9ab7f;
static PyCodeObject *codeobj_8d8e9c94ecd473a73bc8e3651437ad92;
static PyCodeObject *codeobj_fd514f2e68b32fe792c6f921d95d0b39;
static PyCodeObject *codeobj_628be6ee0f611c7f3602221f9abb4a1b;
static PyCodeObject *codeobj_08f1bed4c1668099b165cb03efc801eb;
static PyCodeObject *codeobj_71093dd7f1aafcb28de56da832ab6ad1;
static PyCodeObject *codeobj_d5719a0511700e12cc332c9ad4ccc382;
static PyCodeObject *codeobj_ac937e65f492690ad9e53f20d9e372a5;
static PyCodeObject *codeobj_bd300b6b04dc7f69f7c5758977570200;
static PyCodeObject *codeobj_afd5d6cf2a047b41bd65924864cb6c0f;
static PyCodeObject *codeobj_16b0fc79a268405d99ba50295d950974;
static PyCodeObject *codeobj_79c6779e3fb454449f44e98bd42ef495;
static PyCodeObject *codeobj_6ffb9678d28ae8c446eb7643c3d99917;
static PyCodeObject *codeobj_55db8ca424b2ed537862e8f7085e8bd7;
static PyCodeObject *codeobj_7d3692fa322283fff7fc592a825c5331;
static PyCodeObject *codeobj_ba190d8cadeb00a08541fed5d70707d8;
static PyCodeObject *codeobj_35ff4b0b5307585284b0afe8558ecef5;
static PyCodeObject *codeobj_014d68be5a8db24df32d574183f5f49d;
static PyCodeObject *codeobj_23530d059692f53665d70992fde87763;
static PyCodeObject *codeobj_956d10585a8992f64fd3535d7be1d25a;
static PyCodeObject *codeobj_0a18b04b2d2f1bd574f509b638c4e675;
static PyCodeObject *codeobj_74daf1cc780d7cfae0287bab13809e6d;
static PyCodeObject *codeobj_947efd003a37327b28cc1a12bc2c9c6c;
static PyCodeObject *codeobj_6b1b688468e6dfe2297f350d21b057c4;
static PyCodeObject *codeobj_e232b9d29999a2ee272c22d479cb3a68;
static PyCodeObject *codeobj_ca6b1ee278e7bf828f5455ab126f4bf0;
static PyCodeObject *codeobj_6199bef49c0ecb854149560cc5e08e94;
static PyCodeObject *codeobj_67079f2c7abd66f54cbe40614b6681d2;
static PyCodeObject *codeobj_7bc6e9ddc831ba5c5b668fc60ab7e9c3;
static PyCodeObject *codeobj_c5b5224940141cb05016b422fbd150e9;
static PyCodeObject *codeobj_a18b3d9c941686773f576a200d0fddec;
static PyCodeObject *codeobj_766b59d84ba3ef66c10a8dfe1cd13090;
static PyCodeObject *codeobj_6430dfb9a9af1b43f86029d80ef94278;
static PyCodeObject *codeobj_889df127cc0bad00b1513ee2cc2b70ca;
static PyCodeObject *codeobj_c6bd659b4258c1967bc4f0ad6c2d197c;
static PyCodeObject *codeobj_d6973481fee60ccc011a91b79c3b206e;
static PyCodeObject *codeobj_d090be8971d637ce194306b6f1e36c17;
static PyCodeObject *codeobj_0236bcf87338947852b4ce61c23c0266;
static PyCodeObject *codeobj_d5859882a697794565518db2da165d1f;
static PyCodeObject *codeobj_3e9ea0da1ed2d504876828428c70d7a6;
static PyCodeObject *codeobj_7186e2d64fdf1e2ecddb82b7732e412e;
static PyCodeObject *codeobj_c2b1ee4e7f76c21f9fdd68096fc385cc;
static PyCodeObject *codeobj_d6d2b011934f8b975ddc04a7dd97f27d;

static void createModuleCodeObjects(void)
{
    module_filename_obj = const_str_digest_a4e649f6214f3135948e9d5aa86ed118;
    codeobj_285a0fc76925589c89de0c4034c6c74a = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 532, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_klass_tuple, 1, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_2d01c8c62f7eadc46dfe3e6049ce294c = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 842, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_f01c021eb7965a8a0c5072bbbfd8ee24 = MAKE_CODEOBJ( module_filename_obj, const_str_digest_d0401b822b5416e385c0ccdc99657532, 1, const_tuple_empty, 0, CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_bd5eb45c4557ae66e67170aba1b94aa0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Module_six_moves_urllib, 469, const_tuple_5992db94de979792d5ee74224566d5a1_tuple, 0, CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_616d9876f3af4cfc1d7db66555620415 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___dir__, 130, const_tuple_str_plain_self_str_plain_attrs_str_plain_attr_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_4c8d1f6c7b43e08e46e45eac50ad593a = MAKE_CODEOBJ( module_filename_obj, const_str_plain___dir__, 479, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_a6fe0eb949e5f19233e885c9c93afaa2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___get__, 91, const_tuple_str_plain_self_str_plain_obj_str_plain_tp_str_plain_result_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_99688ed32532a080edcbe6bac879751b = MAKE_CODEOBJ( module_filename_obj, const_str_plain___get_module, 189, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_cc3206bce9770c90b92c851890974ebf = MAKE_CODEOBJ( module_filename_obj, const_str_plain___getattr__, 117, const_tuple_3da36a799acf3470d86dbdcdd4518f98_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_dd4c5fedf31fa8547ef5ab3e468221fb = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 88, const_tuple_str_plain_self_str_plain_name_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_7fb6829fa3af848d3c7de688bfe1f617 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 105, const_tuple_str_plain_self_str_plain_name_str_plain_old_str_plain_new_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_bb743333569859f6cef2c7b7f23996b0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 126, const_tuple_str_plain_self_str_plain_name_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_5827df2c329637d252712bd6500bd634 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 141, const_tuple_867b77a5274ad6aa9e4a045366846a1c_tuple, 6, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_7cbd18b9265941d83e649d73567a9697 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 173, const_tuple_str_plain_self_str_plain_six_module_name_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_2e6db5d6ec400d5de968bd32ea38fd98 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___len__, 62, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_212e029da8ecb5a3ddbaf3eb1aed62b3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___new__, 807, const_tuple_161fc844a072f0af4aef9f4d296def14_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_221c66ab99f4dc7167326f7bfbca840d = MAKE_CODEOBJ( module_filename_obj, const_str_plain__add_doc, 75, const_tuple_str_plain_func_str_plain_doc_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_9b09d93378923b47b39edb78c81b4b0f = MAKE_CODEOBJ( module_filename_obj, const_str_plain__add_module, 177, const_tuple_23e241754072378d4aca55ebd413fe81_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_ce3b8d7055c2a9093ba0afea1d4f53f1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__get_module, 181, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_302febdece34d345ec86a4f5d1c47c5a = MAKE_CODEOBJ( module_filename_obj, const_str_plain__import_module, 80, const_tuple_str_plain_name_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_62f3167cc8599d3657f39fb60354166f = MAKE_CODEOBJ( module_filename_obj, const_str_plain__resolve, 114, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_223ca60bc5fce3fac077a1a61c01dbd4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__resolve, 159, const_tuple_str_plain_self_str_plain_module_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_86808ef7fa4cab4b81805da3e49369d9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_metaclass, 812, const_tuple_str_plain_metaclass_str_plain_wrapper_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_878ec1fa8a776be47f00545fd8c9ab7f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_move, 486, const_tuple_str_plain_move_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_8d8e9c94ecd473a73bc8e3651437ad92 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_advance_iterator, 523, const_tuple_str_plain_it_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_fd514f2e68b32fe792c6f921d95d0b39 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_assertCountEqual, 666, const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_628be6ee0f611c7f3602221f9abb4a1b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_assertRaisesRegex, 670, const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_08f1bed4c1668099b165cb03efc801eb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_assertRegex, 674, const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_71093dd7f1aafcb28de56da832ab6ad1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_b, 619, const_tuple_str_plain_s_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_d5719a0511700e12cc332c9ad4ccc382 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_b, 642, const_tuple_str_plain_s_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_ac937e65f492690ad9e53f20d9e372a5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_byte2int, 651, const_tuple_str_plain_bs_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_bd300b6b04dc7f69f7c5758977570200 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_callable, 531, const_tuple_str_plain_obj_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_afd5d6cf2a047b41bd65924864cb6c0f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_bound_method, 549, const_tuple_str_plain_func_str_plain_obj_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_16b0fc79a268405d99ba50295d950974 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_unbound_method, 541, const_tuple_str_plain_func_str_plain_cls_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_79c6779e3fb454449f44e98bd42ef495 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_unbound_method, 552, const_tuple_str_plain_func_str_plain_cls_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_6ffb9678d28ae8c446eb7643c3d99917 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_exec_, 689, const_tuple_90e06424913ba9ad885f60767479fe37_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_55db8ca424b2ed537862e8f7085e8bd7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_find_module, 184, const_tuple_str_plain_self_str_plain_fullname_str_plain_path_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_7d3692fa322283fff7fc592a825c5331 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_code, 218, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_ba190d8cadeb00a08541fed5d70707d8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_unbound_function, 536, const_tuple_str_plain_unbound_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_35ff4b0b5307585284b0afe8558ecef5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_unbound_function, 546, const_tuple_str_plain_unbound_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_014d68be5a8db24df32d574183f5f49d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_indexbytes, 654, const_tuple_str_plain_buf_str_plain_i_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_23530d059692f53665d70992fde87763 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_is_package, 209, const_tuple_str_plain_self_str_plain_fullname_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_956d10585a8992f64fd3535d7be1d25a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iteritems, 580, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_0a18b04b2d2f1bd574f509b638c4e675 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iteritems, 598, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_74daf1cc780d7cfae0287bab13809e6d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iterkeys, 574, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_947efd003a37327b28cc1a12bc2c9c6c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iterkeys, 592, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_6b1b688468e6dfe2297f350d21b057c4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iterlists, 583, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_e232b9d29999a2ee272c22d479cb3a68 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iterlists, 601, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_ca6b1ee278e7bf828f5455ab126f4bf0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_itervalues, 577, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_6199bef49c0ecb854149560cc5e08e94 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_itervalues, 595, const_tuple_str_plain_d_str_plain_kw_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_67079f2c7abd66f54cbe40614b6681d2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load_module, 195, const_tuple_str_plain_self_str_plain_fullname_str_plain_mod_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_7bc6e9ddc831ba5c5b668fc60ab7e9c3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_metaclass, 805, const_tuple_str_plain___module___str_plain___new___tuple, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_c5b5224940141cb05016b422fbd150e9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_next, 557, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_a18b3d9c941686773f576a200d0fddec = MAKE_CODEOBJ( module_filename_obj, const_str_plain_print_, 723, const_tuple_9e38f63b318fbc32eee061b0bb0a0d33_tuple, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_766b59d84ba3ef66c10a8dfe1cd13090 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_print_, 779, const_tuple_str_plain_args_str_plain_kwargs_str_plain_fp_str_plain_flush_tuple, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_6430dfb9a9af1b43f86029d80ef94278 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_python_2_unicode_compatible, 828, const_tuple_str_plain_klass_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_889df127cc0bad00b1513ee2cc2b70ca = MAKE_CODEOBJ( module_filename_obj, const_str_plain_raise_from, 717, const_tuple_str_plain_value_str_plain_from_value_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_c6bd659b4258c1967bc4f0ad6c2d197c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_remove_move, 491, const_tuple_str_plain_name_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_d6973481fee60ccc011a91b79c3b206e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_reraise, 681, const_tuple_str_plain_tp_str_plain_value_str_plain_tb_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_d090be8971d637ce194306b6f1e36c17 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_u, 622, const_tuple_str_plain_s_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_0236bcf87338947852b4ce61c23c0266 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_u, 646, const_tuple_str_plain_s_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_d5859882a697794565518db2da165d1f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_with_metaclass, 800, const_tuple_str_plain_meta_str_plain_bases_str_plain_metaclass_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_3e9ea0da1ed2d504876828428c70d7a6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_wrapper, 791, const_tuple_c9abfe7800c18ea7300aae31cb72858e_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_7186e2d64fdf1e2ecddb82b7732e412e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_wrapper, 814, const_tuple_f25a2fdcf16cf8b57c740748e3d617eb_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_c2b1ee4e7f76c21f9fdd68096fc385cc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_wraps, 789, const_tuple_4c6d61b784ee3b2b7936bf6dfea1625f_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_ABSOLUTE_IMPORT );
    codeobj_d6d2b011934f8b975ddc04a7dd97f27d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write, 729, const_tuple_str_plain_data_str_plain_errors_str_plain_fp_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_FUTURE_ABSOLUTE_IMPORT );
}

// The module function declarations.
#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *six$$$function_25_callable$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void six$$$function_25_callable$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator );
#endif


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_7_complex_call_helper_star_dict( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_3_complex_call_helper_star_list_star_dict( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_six$$$function_10___dir__(  );


static PyObject *MAKE_FUNCTION_six$$$function_11___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$function_12__resolve(  );


static PyObject *MAKE_FUNCTION_six$$$function_13___init__(  );


static PyObject *MAKE_FUNCTION_six$$$function_14__add_module(  );


static PyObject *MAKE_FUNCTION_six$$$function_15__get_module(  );


static PyObject *MAKE_FUNCTION_six$$$function_16_find_module( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$function_17___get_module(  );


static PyObject *MAKE_FUNCTION_six$$$function_18_load_module(  );


static PyObject *MAKE_FUNCTION_six$$$function_19_is_package(  );


static PyObject *MAKE_FUNCTION_six$$$function_1___len__(  );


static PyObject *MAKE_FUNCTION_six$$$function_20_get_code(  );


static PyObject *MAKE_FUNCTION_six$$$function_21___dir__(  );


static PyObject *MAKE_FUNCTION_six$$$function_22_add_move(  );


static PyObject *MAKE_FUNCTION_six$$$function_23_remove_move(  );


static PyObject *MAKE_FUNCTION_six$$$function_24_advance_iterator(  );


static PyObject *MAKE_FUNCTION_six$$$function_25_callable(  );


static PyObject *MAKE_FUNCTION_six$$$function_26_get_unbound_function(  );


static PyObject *MAKE_FUNCTION_six$$$function_27_create_unbound_method(  );


static PyObject *MAKE_FUNCTION_six$$$function_28_get_unbound_function(  );


static PyObject *MAKE_FUNCTION_six$$$function_29_create_bound_method(  );


static PyObject *MAKE_FUNCTION_six$$$function_2__add_doc(  );


static PyObject *MAKE_FUNCTION_six$$$function_30_create_unbound_method(  );


static PyObject *MAKE_FUNCTION_six$$$function_31_next(  );


static PyObject *MAKE_FUNCTION_six$$$function_32_iterkeys(  );


static PyObject *MAKE_FUNCTION_six$$$function_33_itervalues(  );


static PyObject *MAKE_FUNCTION_six$$$function_34_iteritems(  );


static PyObject *MAKE_FUNCTION_six$$$function_35_iterlists(  );


static PyObject *MAKE_FUNCTION_six$$$function_36_iterkeys(  );


static PyObject *MAKE_FUNCTION_six$$$function_37_itervalues(  );


static PyObject *MAKE_FUNCTION_six$$$function_38_iteritems(  );


static PyObject *MAKE_FUNCTION_six$$$function_39_iterlists(  );


static PyObject *MAKE_FUNCTION_six$$$function_3__import_module(  );


static PyObject *MAKE_FUNCTION_six$$$function_40_b(  );


static PyObject *MAKE_FUNCTION_six$$$function_41_u(  );


static PyObject *MAKE_FUNCTION_six$$$function_42_b(  );


static PyObject *MAKE_FUNCTION_six$$$function_43_u(  );


static PyObject *MAKE_FUNCTION_six$$$function_44_byte2int(  );


static PyObject *MAKE_FUNCTION_six$$$function_45_indexbytes(  );


static PyObject *MAKE_FUNCTION_six$$$function_46_assertCountEqual(  );


static PyObject *MAKE_FUNCTION_six$$$function_47_assertRaisesRegex(  );


static PyObject *MAKE_FUNCTION_six$$$function_48_assertRegex(  );


static PyObject *MAKE_FUNCTION_six$$$function_49_reraise( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$function_4___init__(  );


static PyObject *MAKE_FUNCTION_six$$$function_50_exec_( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$function_51_raise_from(  );


static PyObject *MAKE_FUNCTION_six$$$function_52_print_(  );


static PyObject *MAKE_FUNCTION_six$$$function_52_print_$$$function_1_write( struct Nuitka_CellObject *closure_fp );


static PyObject *MAKE_FUNCTION_six$$$function_53_print_(  );


static PyObject *MAKE_FUNCTION_six$$$function_54_wraps( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$function_54_wraps$$$function_1_wrapper( struct Nuitka_CellObject *closure_assigned, struct Nuitka_CellObject *closure_updated, struct Nuitka_CellObject *closure_wrapped );


static PyObject *MAKE_FUNCTION_six$$$function_55_with_metaclass(  );


static PyObject *MAKE_FUNCTION_six$$$function_55_with_metaclass$$$function_1___new__( struct Nuitka_CellObject *closure_bases, struct Nuitka_CellObject *closure_meta );


static PyObject *MAKE_FUNCTION_six$$$function_56_add_metaclass(  );


static PyObject *MAKE_FUNCTION_six$$$function_56_add_metaclass$$$function_1_wrapper( struct Nuitka_CellObject *closure_metaclass );


static PyObject *MAKE_FUNCTION_six$$$function_57_python_2_unicode_compatible(  );


static PyObject *MAKE_FUNCTION_six$$$function_57_python_2_unicode_compatible$$$function_1_lambda(  );


static PyObject *MAKE_FUNCTION_six$$$function_5___get__(  );


static PyObject *MAKE_FUNCTION_six$$$function_6___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_six$$$function_7__resolve(  );


static PyObject *MAKE_FUNCTION_six$$$function_8___getattr__(  );


static PyObject *MAKE_FUNCTION_six$$$function_9___init__(  );


// The module function definitions.
static PyObject *impl_six$$$function_1___len__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = const_long_pos_2147483648;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_1___len__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_1___len__ );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_2__add_doc( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    PyObject *par_doc = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_221c66ab99f4dc7167326f7bfbca840d = NULL;

    struct Nuitka_FrameObject *frame_221c66ab99f4dc7167326f7bfbca840d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_221c66ab99f4dc7167326f7bfbca840d, codeobj_221c66ab99f4dc7167326f7bfbca840d, module_six, sizeof(void *)+sizeof(void *) );
    frame_221c66ab99f4dc7167326f7bfbca840d = cache_frame_221c66ab99f4dc7167326f7bfbca840d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_221c66ab99f4dc7167326f7bfbca840d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_221c66ab99f4dc7167326f7bfbca840d ) == 2 ); // Frame stack

    // Framed code:
    tmp_assattr_name_1 = par_doc;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_func;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___doc__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 77;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_221c66ab99f4dc7167326f7bfbca840d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_221c66ab99f4dc7167326f7bfbca840d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_221c66ab99f4dc7167326f7bfbca840d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_221c66ab99f4dc7167326f7bfbca840d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_221c66ab99f4dc7167326f7bfbca840d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_221c66ab99f4dc7167326f7bfbca840d,
        type_description_1,
        par_func,
        par_doc
    );


    // Release cached frame.
    if ( frame_221c66ab99f4dc7167326f7bfbca840d == cache_frame_221c66ab99f4dc7167326f7bfbca840d )
    {
        Py_DECREF( frame_221c66ab99f4dc7167326f7bfbca840d );
    }
    cache_frame_221c66ab99f4dc7167326f7bfbca840d = NULL;

    assertFrameObject( frame_221c66ab99f4dc7167326f7bfbca840d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_2__add_doc );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_doc );
    Py_DECREF( par_doc );
    par_doc = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_doc );
    Py_DECREF( par_doc );
    par_doc = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_2__add_doc );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_3__import_module( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_name = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_name_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_302febdece34d345ec86a4f5d1c47c5a = NULL;

    struct Nuitka_FrameObject *frame_302febdece34d345ec86a4f5d1c47c5a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_302febdece34d345ec86a4f5d1c47c5a, codeobj_302febdece34d345ec86a4f5d1c47c5a, module_six, sizeof(void *) );
    frame_302febdece34d345ec86a4f5d1c47c5a = cache_frame_302febdece34d345ec86a4f5d1c47c5a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_302febdece34d345ec86a4f5d1c47c5a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_302febdece34d345ec86a4f5d1c47c5a ) == 2 ); // Frame stack

    // Framed code:
    tmp_name_name_1 = par_name;

    CHECK_OBJECT( tmp_name_name_1 );
    frame_302febdece34d345ec86a4f5d1c47c5a->m_frame.f_lineno = 82;
    tmp_unused = IMPORT_MODULE1( tmp_name_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 82;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 83;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_modules );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = par_name;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_302febdece34d345ec86a4f5d1c47c5a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_302febdece34d345ec86a4f5d1c47c5a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_302febdece34d345ec86a4f5d1c47c5a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_302febdece34d345ec86a4f5d1c47c5a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_302febdece34d345ec86a4f5d1c47c5a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_302febdece34d345ec86a4f5d1c47c5a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_302febdece34d345ec86a4f5d1c47c5a,
        type_description_1,
        par_name
    );


    // Release cached frame.
    if ( frame_302febdece34d345ec86a4f5d1c47c5a == cache_frame_302febdece34d345ec86a4f5d1c47c5a )
    {
        Py_DECREF( frame_302febdece34d345ec86a4f5d1c47c5a );
    }
    cache_frame_302febdece34d345ec86a4f5d1c47c5a = NULL;

    assertFrameObject( frame_302febdece34d345ec86a4f5d1c47c5a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_3__import_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_3__import_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_4___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_dd4c5fedf31fa8547ef5ab3e468221fb = NULL;

    struct Nuitka_FrameObject *frame_dd4c5fedf31fa8547ef5ab3e468221fb;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dd4c5fedf31fa8547ef5ab3e468221fb, codeobj_dd4c5fedf31fa8547ef5ab3e468221fb, module_six, sizeof(void *)+sizeof(void *) );
    frame_dd4c5fedf31fa8547ef5ab3e468221fb = cache_frame_dd4c5fedf31fa8547ef5ab3e468221fb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dd4c5fedf31fa8547ef5ab3e468221fb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dd4c5fedf31fa8547ef5ab3e468221fb ) == 2 ); // Frame stack

    // Framed code:
    tmp_assattr_name_1 = par_name;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_name, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 89;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dd4c5fedf31fa8547ef5ab3e468221fb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dd4c5fedf31fa8547ef5ab3e468221fb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dd4c5fedf31fa8547ef5ab3e468221fb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dd4c5fedf31fa8547ef5ab3e468221fb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dd4c5fedf31fa8547ef5ab3e468221fb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dd4c5fedf31fa8547ef5ab3e468221fb,
        type_description_1,
        par_self,
        par_name
    );


    // Release cached frame.
    if ( frame_dd4c5fedf31fa8547ef5ab3e468221fb == cache_frame_dd4c5fedf31fa8547ef5ab3e468221fb )
    {
        Py_DECREF( frame_dd4c5fedf31fa8547ef5ab3e468221fb );
    }
    cache_frame_dd4c5fedf31fa8547ef5ab3e468221fb = NULL;

    assertFrameObject( frame_dd4c5fedf31fa8547ef5ab3e468221fb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_4___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_4___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_5___get__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_obj = python_pars[ 1 ];
    PyObject *par_tp = python_pars[ 2 ];
    PyObject *var_result = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_a6fe0eb949e5f19233e885c9c93afaa2 = NULL;

    struct Nuitka_FrameObject *frame_a6fe0eb949e5f19233e885c9c93afaa2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a6fe0eb949e5f19233e885c9c93afaa2, codeobj_a6fe0eb949e5f19233e885c9c93afaa2, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a6fe0eb949e5f19233e885c9c93afaa2 = cache_frame_a6fe0eb949e5f19233e885c9c93afaa2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a6fe0eb949e5f19233e885c9c93afaa2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a6fe0eb949e5f19233e885c9c93afaa2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_a6fe0eb949e5f19233e885c9c93afaa2->m_frame.f_lineno = 92;
    tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__resolve );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_result == NULL );
    var_result = tmp_assign_source_1;

    tmp_setattr_target_1 = par_obj;

    CHECK_OBJECT( tmp_setattr_target_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_setattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
    if ( tmp_setattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_setattr_value_1 = var_result;

    CHECK_OBJECT( tmp_setattr_value_1 );
    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_attr_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    // Tried code:
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_delattr );
    assert( tmp_called_name_1 != NULL );
    tmp_source_name_2 = par_obj;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 97;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_name );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 97;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    frame_a6fe0eb949e5f19233e885c9c93afaa2->m_frame.f_lineno = 97;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 97;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_a6fe0eb949e5f19233e885c9c93afaa2 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_a6fe0eb949e5f19233e885c9c93afaa2, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_a6fe0eb949e5f19233e885c9c93afaa2, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_AttributeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 98;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 94;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_a6fe0eb949e5f19233e885c9c93afaa2->m_frame) frame_a6fe0eb949e5f19233e885c9c93afaa2->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_5___get__ );
    return NULL;
    // End of try:
    try_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_a6fe0eb949e5f19233e885c9c93afaa2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_a6fe0eb949e5f19233e885c9c93afaa2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a6fe0eb949e5f19233e885c9c93afaa2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a6fe0eb949e5f19233e885c9c93afaa2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a6fe0eb949e5f19233e885c9c93afaa2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a6fe0eb949e5f19233e885c9c93afaa2,
        type_description_1,
        par_self,
        par_obj,
        par_tp,
        var_result
    );


    // Release cached frame.
    if ( frame_a6fe0eb949e5f19233e885c9c93afaa2 == cache_frame_a6fe0eb949e5f19233e885c9c93afaa2 )
    {
        Py_DECREF( frame_a6fe0eb949e5f19233e885c9c93afaa2 );
    }
    cache_frame_a6fe0eb949e5f19233e885c9c93afaa2 = NULL;

    assertFrameObject( frame_a6fe0eb949e5f19233e885c9c93afaa2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_result;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_5___get__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    CHECK_OBJECT( (PyObject *)par_tp );
    Py_DECREF( par_tp );
    par_tp = NULL;

    CHECK_OBJECT( (PyObject *)var_result );
    Py_DECREF( var_result );
    var_result = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    CHECK_OBJECT( (PyObject *)par_tp );
    Py_DECREF( par_tp );
    par_tp = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_5___get__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_6___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *par_old = python_pars[ 2 ];
    PyObject *par_new = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    bool tmp_is_1;
    PyObject *tmp_object_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_type_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_7fb6829fa3af848d3c7de688bfe1f617 = NULL;

    struct Nuitka_FrameObject *frame_7fb6829fa3af848d3c7de688bfe1f617;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7fb6829fa3af848d3c7de688bfe1f617, codeobj_7fb6829fa3af848d3c7de688bfe1f617, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_7fb6829fa3af848d3c7de688bfe1f617 = cache_frame_7fb6829fa3af848d3c7de688bfe1f617;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7fb6829fa3af848d3c7de688bfe1f617 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7fb6829fa3af848d3c7de688bfe1f617 ) == 2 ); // Frame stack

    // Framed code:
    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 106;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    CHECK_OBJECT( tmp_object_name_1 );
    tmp_called_instance_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_name;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_7fb6829fa3af848d3c7de688bfe1f617->m_frame.f_lineno = 106;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain___init__, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 107;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = par_new;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_1 = par_name;

    CHECK_OBJECT( tmp_assign_source_1 );
    {
        PyObject *old = par_new;
        assert( old != NULL );
        par_new = tmp_assign_source_1;
        Py_INCREF( par_new );
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_assattr_name_1 = par_new;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_mod, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 110;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_assattr_name_2 = par_old;

    CHECK_OBJECT( tmp_assattr_name_2 );
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_mod, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 112;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7fb6829fa3af848d3c7de688bfe1f617 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7fb6829fa3af848d3c7de688bfe1f617 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7fb6829fa3af848d3c7de688bfe1f617, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7fb6829fa3af848d3c7de688bfe1f617->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7fb6829fa3af848d3c7de688bfe1f617, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7fb6829fa3af848d3c7de688bfe1f617,
        type_description_1,
        par_self,
        par_name,
        par_old,
        par_new
    );


    // Release cached frame.
    if ( frame_7fb6829fa3af848d3c7de688bfe1f617 == cache_frame_7fb6829fa3af848d3c7de688bfe1f617 )
    {
        Py_DECREF( frame_7fb6829fa3af848d3c7de688bfe1f617 );
    }
    cache_frame_7fb6829fa3af848d3c7de688bfe1f617 = NULL;

    assertFrameObject( frame_7fb6829fa3af848d3c7de688bfe1f617 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_6___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_old );
    Py_DECREF( par_old );
    par_old = NULL;

    Py_XDECREF( par_new );
    par_new = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_old );
    Py_DECREF( par_old );
    par_old = NULL;

    Py_XDECREF( par_new );
    par_new = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_6___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_7__resolve( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_62f3167cc8599d3657f39fb60354166f = NULL;

    struct Nuitka_FrameObject *frame_62f3167cc8599d3657f39fb60354166f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_62f3167cc8599d3657f39fb60354166f, codeobj_62f3167cc8599d3657f39fb60354166f, module_six, sizeof(void *) );
    frame_62f3167cc8599d3657f39fb60354166f = cache_frame_62f3167cc8599d3657f39fb60354166f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_62f3167cc8599d3657f39fb60354166f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_62f3167cc8599d3657f39fb60354166f ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__import_module );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__import_module );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_import_module" );
        exception_tb = NULL;

        exception_lineno = 115;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_mod );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 115;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_62f3167cc8599d3657f39fb60354166f->m_frame.f_lineno = 115;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 115;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_62f3167cc8599d3657f39fb60354166f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_62f3167cc8599d3657f39fb60354166f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_62f3167cc8599d3657f39fb60354166f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_62f3167cc8599d3657f39fb60354166f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_62f3167cc8599d3657f39fb60354166f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_62f3167cc8599d3657f39fb60354166f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_62f3167cc8599d3657f39fb60354166f,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_62f3167cc8599d3657f39fb60354166f == cache_frame_62f3167cc8599d3657f39fb60354166f )
    {
        Py_DECREF( frame_62f3167cc8599d3657f39fb60354166f );
    }
    cache_frame_62f3167cc8599d3657f39fb60354166f = NULL;

    assertFrameObject( frame_62f3167cc8599d3657f39fb60354166f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_7__resolve );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_7__resolve );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_8___getattr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_attr = python_pars[ 1 ];
    PyObject *var__module = NULL;
    PyObject *var_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_cc3206bce9770c90b92c851890974ebf = NULL;

    struct Nuitka_FrameObject *frame_cc3206bce9770c90b92c851890974ebf;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cc3206bce9770c90b92c851890974ebf, codeobj_cc3206bce9770c90b92c851890974ebf, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_cc3206bce9770c90b92c851890974ebf = cache_frame_cc3206bce9770c90b92c851890974ebf;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cc3206bce9770c90b92c851890974ebf );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cc3206bce9770c90b92c851890974ebf ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_cc3206bce9770c90b92c851890974ebf->m_frame.f_lineno = 118;
    tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__resolve );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 118;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var__module == NULL );
    var__module = tmp_assign_source_1;

    tmp_getattr_target_1 = var__module;

    CHECK_OBJECT( tmp_getattr_target_1 );
    tmp_getattr_attr_1 = par_attr;

    CHECK_OBJECT( tmp_getattr_attr_1 );
    tmp_assign_source_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 119;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_value == NULL );
    var_value = tmp_assign_source_2;

    tmp_setattr_target_1 = par_self;

    CHECK_OBJECT( tmp_setattr_target_1 );
    tmp_setattr_attr_1 = par_attr;

    CHECK_OBJECT( tmp_setattr_attr_1 );
    tmp_setattr_value_1 = var_value;

    CHECK_OBJECT( tmp_setattr_value_1 );
    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 120;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cc3206bce9770c90b92c851890974ebf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cc3206bce9770c90b92c851890974ebf );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cc3206bce9770c90b92c851890974ebf, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cc3206bce9770c90b92c851890974ebf->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cc3206bce9770c90b92c851890974ebf, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cc3206bce9770c90b92c851890974ebf,
        type_description_1,
        par_self,
        par_attr,
        var__module,
        var_value
    );


    // Release cached frame.
    if ( frame_cc3206bce9770c90b92c851890974ebf == cache_frame_cc3206bce9770c90b92c851890974ebf )
    {
        Py_DECREF( frame_cc3206bce9770c90b92c851890974ebf );
    }
    cache_frame_cc3206bce9770c90b92c851890974ebf = NULL;

    assertFrameObject( frame_cc3206bce9770c90b92c851890974ebf );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_value;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_8___getattr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_attr );
    Py_DECREF( par_attr );
    par_attr = NULL;

    CHECK_OBJECT( (PyObject *)var__module );
    Py_DECREF( var__module );
    var__module = NULL;

    CHECK_OBJECT( (PyObject *)var_value );
    Py_DECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_attr );
    Py_DECREF( par_attr );
    par_attr = NULL;

    Py_XDECREF( var__module );
    var__module = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_8___getattr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_9___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_object_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_type_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_bb743333569859f6cef2c7b7f23996b0 = NULL;

    struct Nuitka_FrameObject *frame_bb743333569859f6cef2c7b7f23996b0;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bb743333569859f6cef2c7b7f23996b0, codeobj_bb743333569859f6cef2c7b7f23996b0, module_six, sizeof(void *)+sizeof(void *) );
    frame_bb743333569859f6cef2c7b7f23996b0 = cache_frame_bb743333569859f6cef2c7b7f23996b0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bb743333569859f6cef2c7b7f23996b0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bb743333569859f6cef2c7b7f23996b0 ) == 2 ); // Frame stack

    // Framed code:
    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 127;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    CHECK_OBJECT( tmp_object_name_1 );
    tmp_called_instance_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 127;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_name;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_bb743333569859f6cef2c7b7f23996b0->m_frame.f_lineno = 127;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain___init__, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 127;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_source_name_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 128;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___doc__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 128;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___doc__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 128;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bb743333569859f6cef2c7b7f23996b0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bb743333569859f6cef2c7b7f23996b0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bb743333569859f6cef2c7b7f23996b0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bb743333569859f6cef2c7b7f23996b0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bb743333569859f6cef2c7b7f23996b0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bb743333569859f6cef2c7b7f23996b0,
        type_description_1,
        par_self,
        par_name
    );


    // Release cached frame.
    if ( frame_bb743333569859f6cef2c7b7f23996b0 == cache_frame_bb743333569859f6cef2c7b7f23996b0 )
    {
        Py_DECREF( frame_bb743333569859f6cef2c7b7f23996b0 );
    }
    cache_frame_bb743333569859f6cef2c7b7f23996b0 = NULL;

    assertFrameObject( frame_bb743333569859f6cef2c7b7f23996b0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_9___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_9___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_10___dir__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_attrs = NULL;
    PyObject *var_attr = NULL;
    PyObject *tmp_list_contraction_1__$0 = NULL;
    PyObject *tmp_list_contraction_1__contraction_result = NULL;
    PyObject *tmp_list_contraction_1__iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_append_list_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_outline_return_value_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_616d9876f3af4cfc1d7db66555620415 = NULL;

    struct Nuitka_FrameObject *frame_616d9876f3af4cfc1d7db66555620415;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    tmp_assign_source_1 = LIST_COPY( const_list_str_plain___doc___str_plain___name___list );
    assert( var_attrs == NULL );
    var_attrs = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_616d9876f3af4cfc1d7db66555620415, codeobj_616d9876f3af4cfc1d7db66555620415, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_616d9876f3af4cfc1d7db66555620415 = cache_frame_616d9876f3af4cfc1d7db66555620415;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_616d9876f3af4cfc1d7db66555620415 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_616d9876f3af4cfc1d7db66555620415 ) == 2 ); // Frame stack

    // Framed code:
    tmp_left_name_1 = var_attrs;

    CHECK_OBJECT( tmp_left_name_1 );
    // Tried code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__moved_attributes );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    assert( tmp_list_contraction_1__$0 == NULL );
    tmp_list_contraction_1__$0 = tmp_assign_source_3;

    tmp_assign_source_4 = PyList_New( 0 );
    assert( tmp_list_contraction_1__contraction_result == NULL );
    tmp_list_contraction_1__contraction_result = tmp_assign_source_4;

    loop_start_1:;
    tmp_next_source_1 = tmp_list_contraction_1__$0;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            exception_lineno = 132;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_list_contraction_1__iter_value_0;
        tmp_list_contraction_1__iter_value_0 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_assign_source_6 = tmp_list_contraction_1__iter_value_0;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = var_attr;
        var_attr = tmp_assign_source_6;
        Py_INCREF( var_attr );
        Py_XDECREF( old );
    }

    tmp_append_list_1 = tmp_list_contraction_1__contraction_result;

    CHECK_OBJECT( tmp_append_list_1 );
    tmp_source_name_2 = var_attr;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_append_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_append_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    assert( PyList_Check( tmp_append_list_1 ) );
    tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_outline_return_value_1 = tmp_list_contraction_1__contraction_result;

    CHECK_OBJECT( tmp_outline_return_value_1 );
    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_10___dir__ );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__$0 );
    Py_DECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__contraction_result );
    Py_DECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    Py_XDECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_10___dir__ );
    return NULL;
    outline_result_1:;
    tmp_right_name_1 = tmp_outline_return_value_1;
    tmp_result = BINARY_OPERATION_ADD_INPLACE( &tmp_left_name_1, tmp_right_name_1 );
    tmp_assign_source_2 = tmp_left_name_1;
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    var_attrs = tmp_assign_source_2;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_616d9876f3af4cfc1d7db66555620415 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_616d9876f3af4cfc1d7db66555620415 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_616d9876f3af4cfc1d7db66555620415, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_616d9876f3af4cfc1d7db66555620415->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_616d9876f3af4cfc1d7db66555620415, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_616d9876f3af4cfc1d7db66555620415,
        type_description_1,
        par_self,
        var_attrs,
        var_attr
    );


    // Release cached frame.
    if ( frame_616d9876f3af4cfc1d7db66555620415 == cache_frame_616d9876f3af4cfc1d7db66555620415 )
    {
        Py_DECREF( frame_616d9876f3af4cfc1d7db66555620415 );
    }
    cache_frame_616d9876f3af4cfc1d7db66555620415 = NULL;

    assertFrameObject( frame_616d9876f3af4cfc1d7db66555620415 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_attrs;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_10___dir__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_attrs );
    Py_DECREF( var_attrs );
    var_attrs = NULL;

    Py_XDECREF( var_attr );
    var_attr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_attrs );
    Py_DECREF( var_attrs );
    var_attrs = NULL;

    Py_XDECREF( var_attr );
    var_attr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_10___dir__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_11___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *par_old_mod = python_pars[ 2 ];
    PyObject *par_new_mod = python_pars[ 3 ];
    PyObject *par_old_attr = python_pars[ 4 ];
    PyObject *par_new_attr = python_pars[ 5 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    bool tmp_is_4;
    PyObject *tmp_object_name_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_type_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_5827df2c329637d252712bd6500bd634 = NULL;

    struct Nuitka_FrameObject *frame_5827df2c329637d252712bd6500bd634;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5827df2c329637d252712bd6500bd634, codeobj_5827df2c329637d252712bd6500bd634, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_5827df2c329637d252712bd6500bd634 = cache_frame_5827df2c329637d252712bd6500bd634;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5827df2c329637d252712bd6500bd634 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5827df2c329637d252712bd6500bd634 ) == 2 ); // Frame stack

    // Framed code:
    tmp_type_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_type_name_1 == NULL ))
    {
        tmp_type_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_type_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 142;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_object_name_1 = par_self;

    CHECK_OBJECT( tmp_object_name_1 );
    tmp_called_instance_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_name;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_5827df2c329637d252712bd6500bd634->m_frame.f_lineno = 142;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain___init__, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 143;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 143;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = par_new_mod;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_1 = par_name;

    CHECK_OBJECT( tmp_assign_source_1 );
    {
        PyObject *old = par_new_mod;
        assert( old != NULL );
        par_new_mod = tmp_assign_source_1;
        Py_INCREF( par_new_mod );
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_assattr_name_1 = par_new_mod;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_mod, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 146;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_compare_left_2 = par_new_attr;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = Py_None;
    tmp_is_2 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if ( tmp_is_2 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_compare_left_3 = par_old_attr;

    CHECK_OBJECT( tmp_compare_left_3 );
    tmp_compare_right_3 = Py_None;
    tmp_is_3 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if ( tmp_is_3 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_2 = par_name;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = par_new_attr;
        assert( old != NULL );
        par_new_attr = tmp_assign_source_2;
        Py_INCREF( par_new_attr );
        Py_DECREF( old );
    }

    goto branch_end_4;
    branch_no_4:;
    tmp_assign_source_3 = par_old_attr;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = par_new_attr;
        assert( old != NULL );
        par_new_attr = tmp_assign_source_3;
        Py_INCREF( par_new_attr );
        Py_DECREF( old );
    }

    branch_end_4:;
    branch_no_3:;
    tmp_assattr_name_2 = par_new_attr;

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "new_attr" );
        exception_tb = NULL;

        exception_lineno = 152;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_attr, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_assattr_name_3 = par_old_mod;

    CHECK_OBJECT( tmp_assattr_name_3 );
    tmp_assattr_target_3 = par_self;

    CHECK_OBJECT( tmp_assattr_target_3 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_mod, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 154;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_compare_left_4 = par_old_attr;

    CHECK_OBJECT( tmp_compare_left_4 );
    tmp_compare_right_4 = Py_None;
    tmp_is_4 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if ( tmp_is_4 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_assign_source_4 = par_name;

    CHECK_OBJECT( tmp_assign_source_4 );
    {
        PyObject *old = par_old_attr;
        assert( old != NULL );
        par_old_attr = tmp_assign_source_4;
        Py_INCREF( par_old_attr );
        Py_DECREF( old );
    }

    branch_no_5:;
    tmp_assattr_name_4 = par_old_attr;

    CHECK_OBJECT( tmp_assattr_name_4 );
    tmp_assattr_target_4 = par_self;

    CHECK_OBJECT( tmp_assattr_target_4 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_attr, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 157;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5827df2c329637d252712bd6500bd634 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5827df2c329637d252712bd6500bd634 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5827df2c329637d252712bd6500bd634, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5827df2c329637d252712bd6500bd634->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5827df2c329637d252712bd6500bd634, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5827df2c329637d252712bd6500bd634,
        type_description_1,
        par_self,
        par_name,
        par_old_mod,
        par_new_mod,
        par_old_attr,
        par_new_attr
    );


    // Release cached frame.
    if ( frame_5827df2c329637d252712bd6500bd634 == cache_frame_5827df2c329637d252712bd6500bd634 )
    {
        Py_DECREF( frame_5827df2c329637d252712bd6500bd634 );
    }
    cache_frame_5827df2c329637d252712bd6500bd634 = NULL;

    assertFrameObject( frame_5827df2c329637d252712bd6500bd634 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_11___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_old_mod );
    Py_DECREF( par_old_mod );
    par_old_mod = NULL;

    Py_XDECREF( par_new_mod );
    par_new_mod = NULL;

    Py_XDECREF( par_old_attr );
    par_old_attr = NULL;

    Py_XDECREF( par_new_attr );
    par_new_attr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_old_mod );
    Py_DECREF( par_old_mod );
    par_old_mod = NULL;

    Py_XDECREF( par_new_mod );
    par_new_mod = NULL;

    Py_XDECREF( par_old_attr );
    par_old_attr = NULL;

    Py_XDECREF( par_new_attr );
    par_new_attr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_11___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_12__resolve( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_module = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_223ca60bc5fce3fac077a1a61c01dbd4 = NULL;

    struct Nuitka_FrameObject *frame_223ca60bc5fce3fac077a1a61c01dbd4;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_223ca60bc5fce3fac077a1a61c01dbd4, codeobj_223ca60bc5fce3fac077a1a61c01dbd4, module_six, sizeof(void *)+sizeof(void *) );
    frame_223ca60bc5fce3fac077a1a61c01dbd4 = cache_frame_223ca60bc5fce3fac077a1a61c01dbd4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_223ca60bc5fce3fac077a1a61c01dbd4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_223ca60bc5fce3fac077a1a61c01dbd4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__import_module );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__import_module );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_import_module" );
        exception_tb = NULL;

        exception_lineno = 160;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_mod );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 160;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_223ca60bc5fce3fac077a1a61c01dbd4->m_frame.f_lineno = 160;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 160;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    assert( var_module == NULL );
    var_module = tmp_assign_source_1;

    tmp_getattr_target_1 = var_module;

    CHECK_OBJECT( tmp_getattr_target_1 );
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_getattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_attr );
    if ( tmp_getattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 161;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    Py_DECREF( tmp_getattr_attr_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 161;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_223ca60bc5fce3fac077a1a61c01dbd4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_223ca60bc5fce3fac077a1a61c01dbd4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_223ca60bc5fce3fac077a1a61c01dbd4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_223ca60bc5fce3fac077a1a61c01dbd4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_223ca60bc5fce3fac077a1a61c01dbd4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_223ca60bc5fce3fac077a1a61c01dbd4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_223ca60bc5fce3fac077a1a61c01dbd4,
        type_description_1,
        par_self,
        var_module
    );


    // Release cached frame.
    if ( frame_223ca60bc5fce3fac077a1a61c01dbd4 == cache_frame_223ca60bc5fce3fac077a1a61c01dbd4 )
    {
        Py_DECREF( frame_223ca60bc5fce3fac077a1a61c01dbd4 );
    }
    cache_frame_223ca60bc5fce3fac077a1a61c01dbd4 = NULL;

    assertFrameObject( frame_223ca60bc5fce3fac077a1a61c01dbd4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_12__resolve );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_module );
    Py_DECREF( var_module );
    var_module = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_module );
    var_module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_12__resolve );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_13___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_six_module_name = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_7cbd18b9265941d83e649d73567a9697 = NULL;

    struct Nuitka_FrameObject *frame_7cbd18b9265941d83e649d73567a9697;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7cbd18b9265941d83e649d73567a9697, codeobj_7cbd18b9265941d83e649d73567a9697, module_six, sizeof(void *)+sizeof(void *) );
    frame_7cbd18b9265941d83e649d73567a9697 = cache_frame_7cbd18b9265941d83e649d73567a9697;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7cbd18b9265941d83e649d73567a9697 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7cbd18b9265941d83e649d73567a9697 ) == 2 ); // Frame stack

    // Framed code:
    tmp_assattr_name_1 = par_six_module_name;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_name, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 174;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = PyDict_New();
    tmp_assattr_target_2 = par_self;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_known_modules, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 175;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7cbd18b9265941d83e649d73567a9697 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7cbd18b9265941d83e649d73567a9697 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7cbd18b9265941d83e649d73567a9697, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7cbd18b9265941d83e649d73567a9697->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7cbd18b9265941d83e649d73567a9697, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7cbd18b9265941d83e649d73567a9697,
        type_description_1,
        par_self,
        par_six_module_name
    );


    // Release cached frame.
    if ( frame_7cbd18b9265941d83e649d73567a9697 == cache_frame_7cbd18b9265941d83e649d73567a9697 )
    {
        Py_DECREF( frame_7cbd18b9265941d83e649d73567a9697 );
    }
    cache_frame_7cbd18b9265941d83e649d73567a9697 = NULL;

    assertFrameObject( frame_7cbd18b9265941d83e649d73567a9697 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_13___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_six_module_name );
    Py_DECREF( par_six_module_name );
    par_six_module_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_six_module_name );
    Py_DECREF( par_six_module_name );
    par_six_module_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_13___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_14__add_module( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_mod = python_pars[ 1 ];
    PyObject *par_fullnames = python_pars[ 2 ];
    PyObject *var_fullname = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_next_source_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_9b09d93378923b47b39edb78c81b4b0f = NULL;

    struct Nuitka_FrameObject *frame_9b09d93378923b47b39edb78c81b4b0f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9b09d93378923b47b39edb78c81b4b0f, codeobj_9b09d93378923b47b39edb78c81b4b0f, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_9b09d93378923b47b39edb78c81b4b0f = cache_frame_9b09d93378923b47b39edb78c81b4b0f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9b09d93378923b47b39edb78c81b4b0f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9b09d93378923b47b39edb78c81b4b0f ) == 2 ); // Frame stack

    // Framed code:
    tmp_iter_arg_1 = par_fullnames;

    CHECK_OBJECT( tmp_iter_arg_1 );
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 178;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooo";
            exception_lineno = 178;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_fullname;
        var_fullname = tmp_assign_source_3;
        Py_INCREF( var_fullname );
        Py_XDECREF( old );
    }

    tmp_ass_subvalue_1 = par_mod;

    CHECK_OBJECT( tmp_ass_subvalue_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_left_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        exception_lineno = 179;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_right_name_1 = const_str_dot;
    tmp_left_name_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_2 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        exception_lineno = 179;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_right_name_2 = var_fullname;

    CHECK_OBJECT( tmp_right_name_2 );
    tmp_ass_subscript_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_ass_subscript_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_ass_subscribed_1 );

        exception_lineno = 179;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    Py_DECREF( tmp_ass_subscript_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 179;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 178;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9b09d93378923b47b39edb78c81b4b0f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9b09d93378923b47b39edb78c81b4b0f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9b09d93378923b47b39edb78c81b4b0f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9b09d93378923b47b39edb78c81b4b0f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9b09d93378923b47b39edb78c81b4b0f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9b09d93378923b47b39edb78c81b4b0f,
        type_description_1,
        par_self,
        par_mod,
        par_fullnames,
        var_fullname
    );


    // Release cached frame.
    if ( frame_9b09d93378923b47b39edb78c81b4b0f == cache_frame_9b09d93378923b47b39edb78c81b4b0f )
    {
        Py_DECREF( frame_9b09d93378923b47b39edb78c81b4b0f );
    }
    cache_frame_9b09d93378923b47b39edb78c81b4b0f = NULL;

    assertFrameObject( frame_9b09d93378923b47b39edb78c81b4b0f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_14__add_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_mod );
    Py_DECREF( par_mod );
    par_mod = NULL;

    CHECK_OBJECT( (PyObject *)par_fullnames );
    Py_DECREF( par_fullnames );
    par_fullnames = NULL;

    Py_XDECREF( var_fullname );
    var_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_mod );
    Py_DECREF( par_mod );
    par_mod = NULL;

    CHECK_OBJECT( (PyObject *)par_fullnames );
    Py_DECREF( par_fullnames );
    par_fullnames = NULL;

    Py_XDECREF( var_fullname );
    var_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_14__add_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_15__get_module( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_ce3b8d7055c2a9093ba0afea1d4f53f1 = NULL;

    struct Nuitka_FrameObject *frame_ce3b8d7055c2a9093ba0afea1d4f53f1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ce3b8d7055c2a9093ba0afea1d4f53f1, codeobj_ce3b8d7055c2a9093ba0afea1d4f53f1, module_six, sizeof(void *)+sizeof(void *) );
    frame_ce3b8d7055c2a9093ba0afea1d4f53f1 = cache_frame_ce3b8d7055c2a9093ba0afea1d4f53f1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ce3b8d7055c2a9093ba0afea1d4f53f1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ce3b8d7055c2a9093ba0afea1d4f53f1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = par_self;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_left_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_subscribed_name_1 );

        exception_lineno = 182;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = const_str_dot;
    tmp_left_name_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_2 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_subscribed_name_1 );

        exception_lineno = 182;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_right_name_2 = par_fullname;

    CHECK_OBJECT( tmp_right_name_2 );
    tmp_subscript_name_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_subscribed_name_1 );

        exception_lineno = 182;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ce3b8d7055c2a9093ba0afea1d4f53f1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ce3b8d7055c2a9093ba0afea1d4f53f1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ce3b8d7055c2a9093ba0afea1d4f53f1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ce3b8d7055c2a9093ba0afea1d4f53f1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ce3b8d7055c2a9093ba0afea1d4f53f1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ce3b8d7055c2a9093ba0afea1d4f53f1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ce3b8d7055c2a9093ba0afea1d4f53f1,
        type_description_1,
        par_self,
        par_fullname
    );


    // Release cached frame.
    if ( frame_ce3b8d7055c2a9093ba0afea1d4f53f1 == cache_frame_ce3b8d7055c2a9093ba0afea1d4f53f1 )
    {
        Py_DECREF( frame_ce3b8d7055c2a9093ba0afea1d4f53f1 );
    }
    cache_frame_ce3b8d7055c2a9093ba0afea1d4f53f1 = NULL;

    assertFrameObject( frame_ce3b8d7055c2a9093ba0afea1d4f53f1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_15__get_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_15__get_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_16_find_module( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *par_path = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_55db8ca424b2ed537862e8f7085e8bd7 = NULL;

    struct Nuitka_FrameObject *frame_55db8ca424b2ed537862e8f7085e8bd7;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_55db8ca424b2ed537862e8f7085e8bd7, codeobj_55db8ca424b2ed537862e8f7085e8bd7, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_55db8ca424b2ed537862e8f7085e8bd7 = cache_frame_55db8ca424b2ed537862e8f7085e8bd7;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_55db8ca424b2ed537862e8f7085e8bd7 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_55db8ca424b2ed537862e8f7085e8bd7 ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par_fullname;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 185;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_self;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_55db8ca424b2ed537862e8f7085e8bd7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_55db8ca424b2ed537862e8f7085e8bd7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_55db8ca424b2ed537862e8f7085e8bd7 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_55db8ca424b2ed537862e8f7085e8bd7, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_55db8ca424b2ed537862e8f7085e8bd7->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_55db8ca424b2ed537862e8f7085e8bd7, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_55db8ca424b2ed537862e8f7085e8bd7,
        type_description_1,
        par_self,
        par_fullname,
        par_path
    );


    // Release cached frame.
    if ( frame_55db8ca424b2ed537862e8f7085e8bd7 == cache_frame_55db8ca424b2ed537862e8f7085e8bd7 )
    {
        Py_DECREF( frame_55db8ca424b2ed537862e8f7085e8bd7 );
    }
    cache_frame_55db8ca424b2ed537862e8f7085e8bd7 = NULL;

    assertFrameObject( frame_55db8ca424b2ed537862e8f7085e8bd7 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_16_find_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    CHECK_OBJECT( (PyObject *)par_path );
    Py_DECREF( par_path );
    par_path = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    CHECK_OBJECT( (PyObject *)par_path );
    Py_DECREF( par_path );
    par_path = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_16_find_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_17___get_module( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_99688ed32532a080edcbe6bac879751b = NULL;

    struct Nuitka_FrameObject *frame_99688ed32532a080edcbe6bac879751b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_99688ed32532a080edcbe6bac879751b, codeobj_99688ed32532a080edcbe6bac879751b, module_six, sizeof(void *)+sizeof(void *) );
    frame_99688ed32532a080edcbe6bac879751b = cache_frame_99688ed32532a080edcbe6bac879751b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_99688ed32532a080edcbe6bac879751b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_99688ed32532a080edcbe6bac879751b ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_known_modules );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_subscript_name_1 = par_fullname;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_17___get_module );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_99688ed32532a080edcbe6bac879751b );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_99688ed32532a080edcbe6bac879751b, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_99688ed32532a080edcbe6bac879751b, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_left_name_1 = const_str_digest_d082ba711c791809312af019a50cc3ce;
    tmp_right_name_1 = par_fullname;

    CHECK_OBJECT( tmp_right_name_1 );
    tmp_make_exception_arg_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 193;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_99688ed32532a080edcbe6bac879751b->m_frame.f_lineno = 193;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ImportError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 193;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 190;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_99688ed32532a080edcbe6bac879751b->m_frame) frame_99688ed32532a080edcbe6bac879751b->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_end_1:;
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_99688ed32532a080edcbe6bac879751b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_99688ed32532a080edcbe6bac879751b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_99688ed32532a080edcbe6bac879751b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_99688ed32532a080edcbe6bac879751b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_99688ed32532a080edcbe6bac879751b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_99688ed32532a080edcbe6bac879751b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_99688ed32532a080edcbe6bac879751b,
        type_description_1,
        par_self,
        par_fullname
    );


    // Release cached frame.
    if ( frame_99688ed32532a080edcbe6bac879751b == cache_frame_99688ed32532a080edcbe6bac879751b )
    {
        Py_DECREF( frame_99688ed32532a080edcbe6bac879751b );
    }
    cache_frame_99688ed32532a080edcbe6bac879751b = NULL;

    assertFrameObject( frame_99688ed32532a080edcbe6bac879751b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_17___get_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_17___get_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_18_load_module( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *var_mod = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_67079f2c7abd66f54cbe40614b6681d2 = NULL;

    struct Nuitka_FrameObject *frame_67079f2c7abd66f54cbe40614b6681d2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_67079f2c7abd66f54cbe40614b6681d2, codeobj_67079f2c7abd66f54cbe40614b6681d2, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_67079f2c7abd66f54cbe40614b6681d2 = cache_frame_67079f2c7abd66f54cbe40614b6681d2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_67079f2c7abd66f54cbe40614b6681d2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_67079f2c7abd66f54cbe40614b6681d2 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 198;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_modules );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_subscript_name_1 = par_fullname;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 198;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_18_load_module );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_67079f2c7abd66f54cbe40614b6681d2 );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_67079f2c7abd66f54cbe40614b6681d2, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_67079f2c7abd66f54cbe40614b6681d2, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_KeyError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 199;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 196;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_67079f2c7abd66f54cbe40614b6681d2->m_frame) frame_67079f2c7abd66f54cbe40614b6681d2->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_18_load_module );
    return NULL;
    // End of try:
    try_end_1:;
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_fullname;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_67079f2c7abd66f54cbe40614b6681d2->m_frame.f_lineno = 201;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__SixMetaPathImporter__get_module, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 201;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_mod == NULL );
    var_mod = tmp_assign_source_1;

    tmp_isinstance_inst_1 = var_mod;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 202;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 202;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_instance_2 = var_mod;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_67079f2c7abd66f54cbe40614b6681d2->m_frame.f_lineno = 203;
    tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain__resolve );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_mod;
        assert( old != NULL );
        var_mod = tmp_assign_source_2;
        Py_DECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_assattr_name_1 = par_self;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = var_mod;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___loader__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 205;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_end_2:;
    tmp_ass_subvalue_1 = var_mod;

    CHECK_OBJECT( tmp_ass_subvalue_1 );
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 206;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_modules );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 206;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_ass_subscript_1 = par_fullname;

    CHECK_OBJECT( tmp_ass_subscript_1 );
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 206;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

#if 1
    RESTORE_FRAME_EXCEPTION( frame_67079f2c7abd66f54cbe40614b6681d2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_67079f2c7abd66f54cbe40614b6681d2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_67079f2c7abd66f54cbe40614b6681d2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_67079f2c7abd66f54cbe40614b6681d2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_67079f2c7abd66f54cbe40614b6681d2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_67079f2c7abd66f54cbe40614b6681d2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_67079f2c7abd66f54cbe40614b6681d2,
        type_description_1,
        par_self,
        par_fullname,
        var_mod
    );


    // Release cached frame.
    if ( frame_67079f2c7abd66f54cbe40614b6681d2 == cache_frame_67079f2c7abd66f54cbe40614b6681d2 )
    {
        Py_DECREF( frame_67079f2c7abd66f54cbe40614b6681d2 );
    }
    cache_frame_67079f2c7abd66f54cbe40614b6681d2 = NULL;

    assertFrameObject( frame_67079f2c7abd66f54cbe40614b6681d2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = var_mod;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_18_load_module );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    Py_XDECREF( var_mod );
    var_mod = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    Py_XDECREF( var_mod );
    var_mod = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_18_load_module );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_19_is_package( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_value_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_23530d059692f53665d70992fde87763 = NULL;

    struct Nuitka_FrameObject *frame_23530d059692f53665d70992fde87763;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_23530d059692f53665d70992fde87763, codeobj_23530d059692f53665d70992fde87763, module_six, sizeof(void *)+sizeof(void *) );
    frame_23530d059692f53665d70992fde87763 = cache_frame_23530d059692f53665d70992fde87763;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_23530d059692f53665d70992fde87763 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_23530d059692f53665d70992fde87763 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_fullname;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_23530d059692f53665d70992fde87763->m_frame.f_lineno = 216;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_hasattr_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__SixMetaPathImporter__get_module, call_args );
    }

    if ( tmp_hasattr_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 216;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_hasattr_attr_1 = const_str_plain___path__;
    tmp_return_value = BUILTIN_HASATTR( tmp_hasattr_value_1, tmp_hasattr_attr_1 );
    Py_DECREF( tmp_hasattr_value_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 216;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_23530d059692f53665d70992fde87763 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_23530d059692f53665d70992fde87763 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_23530d059692f53665d70992fde87763 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_23530d059692f53665d70992fde87763, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_23530d059692f53665d70992fde87763->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_23530d059692f53665d70992fde87763, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_23530d059692f53665d70992fde87763,
        type_description_1,
        par_self,
        par_fullname
    );


    // Release cached frame.
    if ( frame_23530d059692f53665d70992fde87763 == cache_frame_23530d059692f53665d70992fde87763 )
    {
        Py_DECREF( frame_23530d059692f53665d70992fde87763 );
    }
    cache_frame_23530d059692f53665d70992fde87763 = NULL;

    assertFrameObject( frame_23530d059692f53665d70992fde87763 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_19_is_package );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_19_is_package );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_20_get_code( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fullname = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_return_value;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_7d3692fa322283fff7fc592a825c5331 = NULL;

    struct Nuitka_FrameObject *frame_7d3692fa322283fff7fc592a825c5331;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7d3692fa322283fff7fc592a825c5331, codeobj_7d3692fa322283fff7fc592a825c5331, module_six, sizeof(void *)+sizeof(void *) );
    frame_7d3692fa322283fff7fc592a825c5331 = cache_frame_7d3692fa322283fff7fc592a825c5331;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7d3692fa322283fff7fc592a825c5331 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7d3692fa322283fff7fc592a825c5331 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_self;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_fullname;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_7d3692fa322283fff7fc592a825c5331->m_frame.f_lineno = 222;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__SixMetaPathImporter__get_module, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 222;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7d3692fa322283fff7fc592a825c5331 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7d3692fa322283fff7fc592a825c5331 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7d3692fa322283fff7fc592a825c5331, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7d3692fa322283fff7fc592a825c5331->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7d3692fa322283fff7fc592a825c5331, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7d3692fa322283fff7fc592a825c5331,
        type_description_1,
        par_self,
        par_fullname
    );


    // Release cached frame.
    if ( frame_7d3692fa322283fff7fc592a825c5331 == cache_frame_7d3692fa322283fff7fc592a825c5331 )
    {
        Py_DECREF( frame_7d3692fa322283fff7fc592a825c5331 );
    }
    cache_frame_7d3692fa322283fff7fc592a825c5331 = NULL;

    assertFrameObject( frame_7d3692fa322283fff7fc592a825c5331 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_20_get_code );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fullname );
    Py_DECREF( par_fullname );
    par_fullname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_20_get_code );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_21___dir__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = LIST_COPY( const_list_1c82cc17d8f54cff757731adfdff677e_list );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_21___dir__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_21___dir__ );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_22_add_move( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_move = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_878ec1fa8a776be47f00545fd8c9ab7f = NULL;

    struct Nuitka_FrameObject *frame_878ec1fa8a776be47f00545fd8c9ab7f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_878ec1fa8a776be47f00545fd8c9ab7f, codeobj_878ec1fa8a776be47f00545fd8c9ab7f, module_six, sizeof(void *) );
    frame_878ec1fa8a776be47f00545fd8c9ab7f = cache_frame_878ec1fa8a776be47f00545fd8c9ab7f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_878ec1fa8a776be47f00545fd8c9ab7f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_878ec1fa8a776be47f00545fd8c9ab7f ) == 2 ); // Frame stack

    // Framed code:
    tmp_setattr_target_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_setattr_target_1 == NULL ))
    {
        tmp_setattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 488;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_move;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_setattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
    if ( tmp_setattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 488;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_setattr_value_1 = par_move;

    CHECK_OBJECT( tmp_setattr_value_1 );
    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_attr_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 488;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_878ec1fa8a776be47f00545fd8c9ab7f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_878ec1fa8a776be47f00545fd8c9ab7f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_878ec1fa8a776be47f00545fd8c9ab7f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_878ec1fa8a776be47f00545fd8c9ab7f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_878ec1fa8a776be47f00545fd8c9ab7f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_878ec1fa8a776be47f00545fd8c9ab7f,
        type_description_1,
        par_move
    );


    // Release cached frame.
    if ( frame_878ec1fa8a776be47f00545fd8c9ab7f == cache_frame_878ec1fa8a776be47f00545fd8c9ab7f )
    {
        Py_DECREF( frame_878ec1fa8a776be47f00545fd8c9ab7f );
    }
    cache_frame_878ec1fa8a776be47f00545fd8c9ab7f = NULL;

    assertFrameObject( frame_878ec1fa8a776be47f00545fd8c9ab7f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_22_add_move );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_move );
    Py_DECREF( par_move );
    par_move = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_move );
    Py_DECREF( par_move );
    par_move = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_22_add_move );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_23_remove_move( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_name = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_c6bd659b4258c1967bc4f0ad6c2d197c = NULL;

    struct Nuitka_FrameObject *frame_c6bd659b4258c1967bc4f0ad6c2d197c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c6bd659b4258c1967bc4f0ad6c2d197c, codeobj_c6bd659b4258c1967bc4f0ad6c2d197c, module_six, sizeof(void *) );
    frame_c6bd659b4258c1967bc4f0ad6c2d197c = cache_frame_c6bd659b4258c1967bc4f0ad6c2d197c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c6bd659b4258c1967bc4f0ad6c2d197c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c6bd659b4258c1967bc4f0ad6c2d197c ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_delattr );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_args_element_name_1 == NULL ))
    {
        tmp_args_element_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_args_element_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 494;
        type_description_1 = "o";
        goto try_except_handler_2;
    }

    tmp_args_element_name_2 = par_name;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_c6bd659b4258c1967bc4f0ad6c2d197c->m_frame.f_lineno = 494;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 494;
        type_description_1 = "o";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_c6bd659b4258c1967bc4f0ad6c2d197c );
    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_c6bd659b4258c1967bc4f0ad6c2d197c, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_c6bd659b4258c1967bc4f0ad6c2d197c, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_AttributeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 495;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "moves" );
        exception_tb = NULL;

        exception_lineno = 497;
        type_description_1 = "o";
        goto try_except_handler_3;
    }

    tmp_delsubscr_target_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_delsubscr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 497;
        type_description_1 = "o";
        goto try_except_handler_3;
    }
    tmp_delsubscr_subscript_1 = par_name;

    CHECK_OBJECT( tmp_delsubscr_subscript_1 );
    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    Py_DECREF( tmp_delsubscr_target_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 497;
        type_description_1 = "o";
        goto try_except_handler_3;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_c6bd659b4258c1967bc4f0ad6c2d197c );
    if ( exception_keeper_tb_2 == NULL )
    {
        exception_keeper_tb_2 = MAKE_TRACEBACK( frame_c6bd659b4258c1967bc4f0ad6c2d197c, exception_keeper_lineno_2 );
    }
    else if ( exception_keeper_lineno_2 != 0 )
    {
        exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_c6bd659b4258c1967bc4f0ad6c2d197c, exception_keeper_lineno_2 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_KeyError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 498;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_left_name_1 = const_str_digest_dc2910a6e816441d866e674df51d57ac;
    tmp_right_name_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_name;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 499;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_c6bd659b4258c1967bc4f0ad6c2d197c->m_frame.f_lineno = 499;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_AttributeError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 499;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "o";
    goto frame_exception_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 496;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_c6bd659b4258c1967bc4f0ad6c2d197c->m_frame) frame_c6bd659b4258c1967bc4f0ad6c2d197c->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "o";
    goto frame_exception_exit_1;
    branch_end_2:;
    // End of try:
    try_end_2:;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 493;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_c6bd659b4258c1967bc4f0ad6c2d197c->m_frame) frame_c6bd659b4258c1967bc4f0ad6c2d197c->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "o";
    goto frame_exception_exit_1;
    branch_end_1:;
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_23_remove_move );
    return NULL;
    // End of try:
    try_end_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_c6bd659b4258c1967bc4f0ad6c2d197c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_c6bd659b4258c1967bc4f0ad6c2d197c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c6bd659b4258c1967bc4f0ad6c2d197c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c6bd659b4258c1967bc4f0ad6c2d197c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c6bd659b4258c1967bc4f0ad6c2d197c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c6bd659b4258c1967bc4f0ad6c2d197c,
        type_description_1,
        par_name
    );


    // Release cached frame.
    if ( frame_c6bd659b4258c1967bc4f0ad6c2d197c == cache_frame_c6bd659b4258c1967bc4f0ad6c2d197c )
    {
        Py_DECREF( frame_c6bd659b4258c1967bc4f0ad6c2d197c );
    }
    cache_frame_c6bd659b4258c1967bc4f0ad6c2d197c = NULL;

    assertFrameObject( frame_c6bd659b4258c1967bc4f0ad6c2d197c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_23_remove_move );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_23_remove_move );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_24_advance_iterator( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_it = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8d8e9c94ecd473a73bc8e3651437ad92 = NULL;

    struct Nuitka_FrameObject *frame_8d8e9c94ecd473a73bc8e3651437ad92;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8d8e9c94ecd473a73bc8e3651437ad92, codeobj_8d8e9c94ecd473a73bc8e3651437ad92, module_six, sizeof(void *) );
    frame_8d8e9c94ecd473a73bc8e3651437ad92 = cache_frame_8d8e9c94ecd473a73bc8e3651437ad92;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8d8e9c94ecd473a73bc8e3651437ad92 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8d8e9c94ecd473a73bc8e3651437ad92 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_it;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_8d8e9c94ecd473a73bc8e3651437ad92->m_frame.f_lineno = 524;
    tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_next );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 524;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8d8e9c94ecd473a73bc8e3651437ad92 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8d8e9c94ecd473a73bc8e3651437ad92 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8d8e9c94ecd473a73bc8e3651437ad92 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8d8e9c94ecd473a73bc8e3651437ad92, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8d8e9c94ecd473a73bc8e3651437ad92->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8d8e9c94ecd473a73bc8e3651437ad92, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8d8e9c94ecd473a73bc8e3651437ad92,
        type_description_1,
        par_it
    );


    // Release cached frame.
    if ( frame_8d8e9c94ecd473a73bc8e3651437ad92 == cache_frame_8d8e9c94ecd473a73bc8e3651437ad92 )
    {
        Py_DECREF( frame_8d8e9c94ecd473a73bc8e3651437ad92 );
    }
    cache_frame_8d8e9c94ecd473a73bc8e3651437ad92 = NULL;

    assertFrameObject( frame_8d8e9c94ecd473a73bc8e3651437ad92 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_24_advance_iterator );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_it );
    Py_DECREF( par_it );
    par_it = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_it );
    Py_DECREF( par_it );
    par_it = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_24_advance_iterator );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_25_callable( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_obj = python_pars[ 0 ];
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_arg_1;
    static struct Nuitka_FrameObject *cache_frame_bd300b6b04dc7f69f7c5758977570200 = NULL;

    struct Nuitka_FrameObject *frame_bd300b6b04dc7f69f7c5758977570200;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bd300b6b04dc7f69f7c5758977570200, codeobj_bd300b6b04dc7f69f7c5758977570200, module_six, sizeof(void *) );
    frame_bd300b6b04dc7f69f7c5758977570200 = cache_frame_bd300b6b04dc7f69f7c5758977570200;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bd300b6b04dc7f69f7c5758977570200 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bd300b6b04dc7f69f7c5758977570200 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_any );
    assert( tmp_called_name_1 != NULL );
    tmp_type_arg_1 = par_obj;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_source_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_source_name_1 != NULL );
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___mro__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    assert( tmp_genexpr_1__$0 == NULL );
    tmp_genexpr_1__$0 = tmp_assign_source_1;

    // Tried code:
    tmp_outline_return_value_1 = Nuitka_Generator_New(
        six$$$function_25_callable$$$genexpr_1_genexpr_context,
        module_six,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        NULL,
#endif
        codeobj_285a0fc76925589c89de0c4034c6c74a,
        1
    );

    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
    assert( Py_SIZE( tmp_outline_return_value_1 ) >= 1 ); 


    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_25_callable );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_1;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_25_callable );
    return NULL;
    outline_result_1:;
    tmp_args_element_name_1 = tmp_outline_return_value_1;
    frame_bd300b6b04dc7f69f7c5758977570200->m_frame.f_lineno = 532;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd300b6b04dc7f69f7c5758977570200 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd300b6b04dc7f69f7c5758977570200 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd300b6b04dc7f69f7c5758977570200 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bd300b6b04dc7f69f7c5758977570200, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bd300b6b04dc7f69f7c5758977570200->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bd300b6b04dc7f69f7c5758977570200, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bd300b6b04dc7f69f7c5758977570200,
        type_description_1,
        par_obj
    );


    // Release cached frame.
    if ( frame_bd300b6b04dc7f69f7c5758977570200 == cache_frame_bd300b6b04dc7f69f7c5758977570200 )
    {
        Py_DECREF( frame_bd300b6b04dc7f69f7c5758977570200 );
    }
    cache_frame_bd300b6b04dc7f69f7c5758977570200 = NULL;

    assertFrameObject( frame_bd300b6b04dc7f69f7c5758977570200 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_25_callable );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_25_callable );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct six$$$function_25_callable$$$genexpr_1_genexpr_locals {
    PyObject *var_klass
    PyObject *tmp_iter_value_0
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *six$$$function_25_callable$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void six$$$function_25_callable$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_klass = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_285a0fc76925589c89de0c4034c6c74a, module_six, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    if ( generator->m_closure[0] == NULL )
    {
        tmp_next_source_1 = NULL;
    }
    else
    {
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
    }

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "No";
            exception_lineno = 532;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = var_klass;
        var_klass = tmp_assign_source_2;
        Py_INCREF( var_klass );
        Py_XDECREF( old );
    }

    tmp_compexpr_left_1 = const_str_plain___call__;
    tmp_source_name_1 = var_klass;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    tmp_expression_name_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_expression_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    Py_INCREF( tmp_expression_name_1 );
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            NULL,
            var_klass
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_klass );
    var_klass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_klass );
    var_klass = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_six$$$function_26_get_unbound_function( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_unbound = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_unbound;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_26_get_unbound_function );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_unbound );
    Py_DECREF( par_unbound );
    par_unbound = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_26_get_unbound_function );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_27_create_unbound_method( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    PyObject *par_cls = python_pars[ 1 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_func;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_27_create_unbound_method );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_27_create_unbound_method );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_28_get_unbound_function( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_unbound = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_35ff4b0b5307585284b0afe8558ecef5 = NULL;

    struct Nuitka_FrameObject *frame_35ff4b0b5307585284b0afe8558ecef5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_35ff4b0b5307585284b0afe8558ecef5, codeobj_35ff4b0b5307585284b0afe8558ecef5, module_six, sizeof(void *) );
    frame_35ff4b0b5307585284b0afe8558ecef5 = cache_frame_35ff4b0b5307585284b0afe8558ecef5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_35ff4b0b5307585284b0afe8558ecef5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_35ff4b0b5307585284b0afe8558ecef5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_unbound;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_im_func );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 547;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_35ff4b0b5307585284b0afe8558ecef5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_35ff4b0b5307585284b0afe8558ecef5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_35ff4b0b5307585284b0afe8558ecef5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_35ff4b0b5307585284b0afe8558ecef5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_35ff4b0b5307585284b0afe8558ecef5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_35ff4b0b5307585284b0afe8558ecef5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_35ff4b0b5307585284b0afe8558ecef5,
        type_description_1,
        par_unbound
    );


    // Release cached frame.
    if ( frame_35ff4b0b5307585284b0afe8558ecef5 == cache_frame_35ff4b0b5307585284b0afe8558ecef5 )
    {
        Py_DECREF( frame_35ff4b0b5307585284b0afe8558ecef5 );
    }
    cache_frame_35ff4b0b5307585284b0afe8558ecef5 = NULL;

    assertFrameObject( frame_35ff4b0b5307585284b0afe8558ecef5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_28_get_unbound_function );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_unbound );
    Py_DECREF( par_unbound );
    par_unbound = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_unbound );
    Py_DECREF( par_unbound );
    par_unbound = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_28_get_unbound_function );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_29_create_bound_method( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    PyObject *par_obj = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_afd5d6cf2a047b41bd65924864cb6c0f = NULL;

    struct Nuitka_FrameObject *frame_afd5d6cf2a047b41bd65924864cb6c0f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_afd5d6cf2a047b41bd65924864cb6c0f, codeobj_afd5d6cf2a047b41bd65924864cb6c0f, module_six, sizeof(void *)+sizeof(void *) );
    frame_afd5d6cf2a047b41bd65924864cb6c0f = cache_frame_afd5d6cf2a047b41bd65924864cb6c0f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_afd5d6cf2a047b41bd65924864cb6c0f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_afd5d6cf2a047b41bd65924864cb6c0f ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 550;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_MethodType );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 550;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_func;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_obj;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_source_name_2 = par_obj;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 550;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_afd5d6cf2a047b41bd65924864cb6c0f->m_frame.f_lineno = 550;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 550;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_afd5d6cf2a047b41bd65924864cb6c0f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_afd5d6cf2a047b41bd65924864cb6c0f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_afd5d6cf2a047b41bd65924864cb6c0f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_afd5d6cf2a047b41bd65924864cb6c0f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_afd5d6cf2a047b41bd65924864cb6c0f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_afd5d6cf2a047b41bd65924864cb6c0f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_afd5d6cf2a047b41bd65924864cb6c0f,
        type_description_1,
        par_func,
        par_obj
    );


    // Release cached frame.
    if ( frame_afd5d6cf2a047b41bd65924864cb6c0f == cache_frame_afd5d6cf2a047b41bd65924864cb6c0f )
    {
        Py_DECREF( frame_afd5d6cf2a047b41bd65924864cb6c0f );
    }
    cache_frame_afd5d6cf2a047b41bd65924864cb6c0f = NULL;

    assertFrameObject( frame_afd5d6cf2a047b41bd65924864cb6c0f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_29_create_bound_method );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_obj );
    Py_DECREF( par_obj );
    par_obj = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_29_create_bound_method );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_30_create_unbound_method( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    PyObject *par_cls = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_79c6779e3fb454449f44e98bd42ef495 = NULL;

    struct Nuitka_FrameObject *frame_79c6779e3fb454449f44e98bd42ef495;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_79c6779e3fb454449f44e98bd42ef495, codeobj_79c6779e3fb454449f44e98bd42ef495, module_six, sizeof(void *)+sizeof(void *) );
    frame_79c6779e3fb454449f44e98bd42ef495 = cache_frame_79c6779e3fb454449f44e98bd42ef495;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_79c6779e3fb454449f44e98bd42ef495 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_79c6779e3fb454449f44e98bd42ef495 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 553;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_func;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = Py_None;
    tmp_args_element_name_3 = par_cls;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_79c6779e3fb454449f44e98bd42ef495->m_frame.f_lineno = 553;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_METHOD_WITH_ARGS3( tmp_called_instance_1, const_str_plain_MethodType, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 553;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_79c6779e3fb454449f44e98bd42ef495 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_79c6779e3fb454449f44e98bd42ef495 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_79c6779e3fb454449f44e98bd42ef495 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_79c6779e3fb454449f44e98bd42ef495, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_79c6779e3fb454449f44e98bd42ef495->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_79c6779e3fb454449f44e98bd42ef495, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_79c6779e3fb454449f44e98bd42ef495,
        type_description_1,
        par_func,
        par_cls
    );


    // Release cached frame.
    if ( frame_79c6779e3fb454449f44e98bd42ef495 == cache_frame_79c6779e3fb454449f44e98bd42ef495 )
    {
        Py_DECREF( frame_79c6779e3fb454449f44e98bd42ef495 );
    }
    cache_frame_79c6779e3fb454449f44e98bd42ef495 = NULL;

    assertFrameObject( frame_79c6779e3fb454449f44e98bd42ef495 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_30_create_unbound_method );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_30_create_unbound_method );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_31_next( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_return_value;
    PyObject *tmp_type_arg_1;
    static struct Nuitka_FrameObject *cache_frame_c5b5224940141cb05016b422fbd150e9 = NULL;

    struct Nuitka_FrameObject *frame_c5b5224940141cb05016b422fbd150e9;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c5b5224940141cb05016b422fbd150e9, codeobj_c5b5224940141cb05016b422fbd150e9, module_six, sizeof(void *) );
    frame_c5b5224940141cb05016b422fbd150e9 = cache_frame_c5b5224940141cb05016b422fbd150e9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c5b5224940141cb05016b422fbd150e9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c5b5224940141cb05016b422fbd150e9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_type_arg_1 = par_self;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_called_instance_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_called_instance_1 != NULL );
    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_c5b5224940141cb05016b422fbd150e9->m_frame.f_lineno = 558;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain___next__, call_args );
    }

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 558;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c5b5224940141cb05016b422fbd150e9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c5b5224940141cb05016b422fbd150e9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c5b5224940141cb05016b422fbd150e9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c5b5224940141cb05016b422fbd150e9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c5b5224940141cb05016b422fbd150e9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c5b5224940141cb05016b422fbd150e9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c5b5224940141cb05016b422fbd150e9,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_c5b5224940141cb05016b422fbd150e9 == cache_frame_c5b5224940141cb05016b422fbd150e9 )
    {
        Py_DECREF( frame_c5b5224940141cb05016b422fbd150e9 );
    }
    cache_frame_c5b5224940141cb05016b422fbd150e9 = NULL;

    assertFrameObject( frame_c5b5224940141cb05016b422fbd150e9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_31_next );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_31_next );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_32_iterkeys( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_74daf1cc780d7cfae0287bab13809e6d = NULL;

    struct Nuitka_FrameObject *frame_74daf1cc780d7cfae0287bab13809e6d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_74daf1cc780d7cfae0287bab13809e6d, codeobj_74daf1cc780d7cfae0287bab13809e6d, module_six, sizeof(void *)+sizeof(void *) );
    frame_74daf1cc780d7cfae0287bab13809e6d = cache_frame_74daf1cc780d7cfae0287bab13809e6d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_74daf1cc780d7cfae0287bab13809e6d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_74daf1cc780d7cfae0287bab13809e6d ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_d;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_keys );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_iter_arg_1 = impl___internal__$$$function_7_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_74daf1cc780d7cfae0287bab13809e6d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_74daf1cc780d7cfae0287bab13809e6d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_74daf1cc780d7cfae0287bab13809e6d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_74daf1cc780d7cfae0287bab13809e6d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_74daf1cc780d7cfae0287bab13809e6d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_74daf1cc780d7cfae0287bab13809e6d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_74daf1cc780d7cfae0287bab13809e6d,
        type_description_1,
        par_d,
        par_kw
    );


    // Release cached frame.
    if ( frame_74daf1cc780d7cfae0287bab13809e6d == cache_frame_74daf1cc780d7cfae0287bab13809e6d )
    {
        Py_DECREF( frame_74daf1cc780d7cfae0287bab13809e6d );
    }
    cache_frame_74daf1cc780d7cfae0287bab13809e6d = NULL;

    assertFrameObject( frame_74daf1cc780d7cfae0287bab13809e6d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_32_iterkeys );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_32_iterkeys );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_33_itervalues( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_ca6b1ee278e7bf828f5455ab126f4bf0 = NULL;

    struct Nuitka_FrameObject *frame_ca6b1ee278e7bf828f5455ab126f4bf0;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ca6b1ee278e7bf828f5455ab126f4bf0, codeobj_ca6b1ee278e7bf828f5455ab126f4bf0, module_six, sizeof(void *)+sizeof(void *) );
    frame_ca6b1ee278e7bf828f5455ab126f4bf0 = cache_frame_ca6b1ee278e7bf828f5455ab126f4bf0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ca6b1ee278e7bf828f5455ab126f4bf0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ca6b1ee278e7bf828f5455ab126f4bf0 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_d;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_values );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_iter_arg_1 = impl___internal__$$$function_7_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca6b1ee278e7bf828f5455ab126f4bf0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca6b1ee278e7bf828f5455ab126f4bf0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca6b1ee278e7bf828f5455ab126f4bf0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ca6b1ee278e7bf828f5455ab126f4bf0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ca6b1ee278e7bf828f5455ab126f4bf0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ca6b1ee278e7bf828f5455ab126f4bf0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ca6b1ee278e7bf828f5455ab126f4bf0,
        type_description_1,
        par_d,
        par_kw
    );


    // Release cached frame.
    if ( frame_ca6b1ee278e7bf828f5455ab126f4bf0 == cache_frame_ca6b1ee278e7bf828f5455ab126f4bf0 )
    {
        Py_DECREF( frame_ca6b1ee278e7bf828f5455ab126f4bf0 );
    }
    cache_frame_ca6b1ee278e7bf828f5455ab126f4bf0 = NULL;

    assertFrameObject( frame_ca6b1ee278e7bf828f5455ab126f4bf0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_33_itervalues );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_33_itervalues );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_34_iteritems( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_956d10585a8992f64fd3535d7be1d25a = NULL;

    struct Nuitka_FrameObject *frame_956d10585a8992f64fd3535d7be1d25a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_956d10585a8992f64fd3535d7be1d25a, codeobj_956d10585a8992f64fd3535d7be1d25a, module_six, sizeof(void *)+sizeof(void *) );
    frame_956d10585a8992f64fd3535d7be1d25a = cache_frame_956d10585a8992f64fd3535d7be1d25a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_956d10585a8992f64fd3535d7be1d25a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_956d10585a8992f64fd3535d7be1d25a ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_d;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_iter_arg_1 = impl___internal__$$$function_7_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_956d10585a8992f64fd3535d7be1d25a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_956d10585a8992f64fd3535d7be1d25a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_956d10585a8992f64fd3535d7be1d25a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_956d10585a8992f64fd3535d7be1d25a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_956d10585a8992f64fd3535d7be1d25a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_956d10585a8992f64fd3535d7be1d25a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_956d10585a8992f64fd3535d7be1d25a,
        type_description_1,
        par_d,
        par_kw
    );


    // Release cached frame.
    if ( frame_956d10585a8992f64fd3535d7be1d25a == cache_frame_956d10585a8992f64fd3535d7be1d25a )
    {
        Py_DECREF( frame_956d10585a8992f64fd3535d7be1d25a );
    }
    cache_frame_956d10585a8992f64fd3535d7be1d25a = NULL;

    assertFrameObject( frame_956d10585a8992f64fd3535d7be1d25a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_34_iteritems );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_34_iteritems );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_35_iterlists( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_6b1b688468e6dfe2297f350d21b057c4 = NULL;

    struct Nuitka_FrameObject *frame_6b1b688468e6dfe2297f350d21b057c4;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6b1b688468e6dfe2297f350d21b057c4, codeobj_6b1b688468e6dfe2297f350d21b057c4, module_six, sizeof(void *)+sizeof(void *) );
    frame_6b1b688468e6dfe2297f350d21b057c4 = cache_frame_6b1b688468e6dfe2297f350d21b057c4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6b1b688468e6dfe2297f350d21b057c4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6b1b688468e6dfe2297f350d21b057c4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_d;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_lists );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_iter_arg_1 = impl___internal__$$$function_7_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b1b688468e6dfe2297f350d21b057c4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b1b688468e6dfe2297f350d21b057c4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b1b688468e6dfe2297f350d21b057c4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6b1b688468e6dfe2297f350d21b057c4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6b1b688468e6dfe2297f350d21b057c4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6b1b688468e6dfe2297f350d21b057c4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6b1b688468e6dfe2297f350d21b057c4,
        type_description_1,
        par_d,
        par_kw
    );


    // Release cached frame.
    if ( frame_6b1b688468e6dfe2297f350d21b057c4 == cache_frame_6b1b688468e6dfe2297f350d21b057c4 )
    {
        Py_DECREF( frame_6b1b688468e6dfe2297f350d21b057c4 );
    }
    cache_frame_6b1b688468e6dfe2297f350d21b057c4 = NULL;

    assertFrameObject( frame_6b1b688468e6dfe2297f350d21b057c4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_35_iterlists );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_35_iterlists );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_36_iterkeys( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_947efd003a37327b28cc1a12bc2c9c6c = NULL;

    struct Nuitka_FrameObject *frame_947efd003a37327b28cc1a12bc2c9c6c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_947efd003a37327b28cc1a12bc2c9c6c, codeobj_947efd003a37327b28cc1a12bc2c9c6c, module_six, sizeof(void *)+sizeof(void *) );
    frame_947efd003a37327b28cc1a12bc2c9c6c = cache_frame_947efd003a37327b28cc1a12bc2c9c6c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_947efd003a37327b28cc1a12bc2c9c6c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_947efd003a37327b28cc1a12bc2c9c6c ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_d;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iterkeys );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 593;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_return_value = impl___internal__$$$function_7_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 593;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_947efd003a37327b28cc1a12bc2c9c6c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_947efd003a37327b28cc1a12bc2c9c6c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_947efd003a37327b28cc1a12bc2c9c6c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_947efd003a37327b28cc1a12bc2c9c6c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_947efd003a37327b28cc1a12bc2c9c6c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_947efd003a37327b28cc1a12bc2c9c6c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_947efd003a37327b28cc1a12bc2c9c6c,
        type_description_1,
        par_d,
        par_kw
    );


    // Release cached frame.
    if ( frame_947efd003a37327b28cc1a12bc2c9c6c == cache_frame_947efd003a37327b28cc1a12bc2c9c6c )
    {
        Py_DECREF( frame_947efd003a37327b28cc1a12bc2c9c6c );
    }
    cache_frame_947efd003a37327b28cc1a12bc2c9c6c = NULL;

    assertFrameObject( frame_947efd003a37327b28cc1a12bc2c9c6c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_36_iterkeys );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_36_iterkeys );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_37_itervalues( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_6199bef49c0ecb854149560cc5e08e94 = NULL;

    struct Nuitka_FrameObject *frame_6199bef49c0ecb854149560cc5e08e94;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6199bef49c0ecb854149560cc5e08e94, codeobj_6199bef49c0ecb854149560cc5e08e94, module_six, sizeof(void *)+sizeof(void *) );
    frame_6199bef49c0ecb854149560cc5e08e94 = cache_frame_6199bef49c0ecb854149560cc5e08e94;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6199bef49c0ecb854149560cc5e08e94 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6199bef49c0ecb854149560cc5e08e94 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_d;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_itervalues );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 596;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_return_value = impl___internal__$$$function_7_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 596;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6199bef49c0ecb854149560cc5e08e94 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6199bef49c0ecb854149560cc5e08e94 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6199bef49c0ecb854149560cc5e08e94 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6199bef49c0ecb854149560cc5e08e94, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6199bef49c0ecb854149560cc5e08e94->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6199bef49c0ecb854149560cc5e08e94, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6199bef49c0ecb854149560cc5e08e94,
        type_description_1,
        par_d,
        par_kw
    );


    // Release cached frame.
    if ( frame_6199bef49c0ecb854149560cc5e08e94 == cache_frame_6199bef49c0ecb854149560cc5e08e94 )
    {
        Py_DECREF( frame_6199bef49c0ecb854149560cc5e08e94 );
    }
    cache_frame_6199bef49c0ecb854149560cc5e08e94 = NULL;

    assertFrameObject( frame_6199bef49c0ecb854149560cc5e08e94 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_37_itervalues );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_37_itervalues );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_38_iteritems( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_0a18b04b2d2f1bd574f509b638c4e675 = NULL;

    struct Nuitka_FrameObject *frame_0a18b04b2d2f1bd574f509b638c4e675;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0a18b04b2d2f1bd574f509b638c4e675, codeobj_0a18b04b2d2f1bd574f509b638c4e675, module_six, sizeof(void *)+sizeof(void *) );
    frame_0a18b04b2d2f1bd574f509b638c4e675 = cache_frame_0a18b04b2d2f1bd574f509b638c4e675;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0a18b04b2d2f1bd574f509b638c4e675 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0a18b04b2d2f1bd574f509b638c4e675 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_d;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iteritems );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 599;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_return_value = impl___internal__$$$function_7_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 599;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0a18b04b2d2f1bd574f509b638c4e675 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0a18b04b2d2f1bd574f509b638c4e675 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0a18b04b2d2f1bd574f509b638c4e675 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0a18b04b2d2f1bd574f509b638c4e675, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0a18b04b2d2f1bd574f509b638c4e675->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0a18b04b2d2f1bd574f509b638c4e675, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0a18b04b2d2f1bd574f509b638c4e675,
        type_description_1,
        par_d,
        par_kw
    );


    // Release cached frame.
    if ( frame_0a18b04b2d2f1bd574f509b638c4e675 == cache_frame_0a18b04b2d2f1bd574f509b638c4e675 )
    {
        Py_DECREF( frame_0a18b04b2d2f1bd574f509b638c4e675 );
    }
    cache_frame_0a18b04b2d2f1bd574f509b638c4e675 = NULL;

    assertFrameObject( frame_0a18b04b2d2f1bd574f509b638c4e675 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_38_iteritems );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_38_iteritems );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_39_iterlists( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    PyObject *par_kw = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_e232b9d29999a2ee272c22d479cb3a68 = NULL;

    struct Nuitka_FrameObject *frame_e232b9d29999a2ee272c22d479cb3a68;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e232b9d29999a2ee272c22d479cb3a68, codeobj_e232b9d29999a2ee272c22d479cb3a68, module_six, sizeof(void *)+sizeof(void *) );
    frame_e232b9d29999a2ee272c22d479cb3a68 = cache_frame_e232b9d29999a2ee272c22d479cb3a68;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e232b9d29999a2ee272c22d479cb3a68 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e232b9d29999a2ee272c22d479cb3a68 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_d;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iterlists );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 602;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_kw;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_return_value = impl___internal__$$$function_7_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 602;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e232b9d29999a2ee272c22d479cb3a68 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e232b9d29999a2ee272c22d479cb3a68 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e232b9d29999a2ee272c22d479cb3a68 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e232b9d29999a2ee272c22d479cb3a68, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e232b9d29999a2ee272c22d479cb3a68->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e232b9d29999a2ee272c22d479cb3a68, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e232b9d29999a2ee272c22d479cb3a68,
        type_description_1,
        par_d,
        par_kw
    );


    // Release cached frame.
    if ( frame_e232b9d29999a2ee272c22d479cb3a68 == cache_frame_e232b9d29999a2ee272c22d479cb3a68 )
    {
        Py_DECREF( frame_e232b9d29999a2ee272c22d479cb3a68 );
    }
    cache_frame_e232b9d29999a2ee272c22d479cb3a68 = NULL;

    assertFrameObject( frame_e232b9d29999a2ee272c22d479cb3a68 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_39_iterlists );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    CHECK_OBJECT( (PyObject *)par_kw );
    Py_DECREF( par_kw );
    par_kw = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_39_iterlists );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_40_b( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_71093dd7f1aafcb28de56da832ab6ad1 = NULL;

    struct Nuitka_FrameObject *frame_71093dd7f1aafcb28de56da832ab6ad1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_71093dd7f1aafcb28de56da832ab6ad1, codeobj_71093dd7f1aafcb28de56da832ab6ad1, module_six, sizeof(void *) );
    frame_71093dd7f1aafcb28de56da832ab6ad1 = cache_frame_71093dd7f1aafcb28de56da832ab6ad1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_71093dd7f1aafcb28de56da832ab6ad1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_71093dd7f1aafcb28de56da832ab6ad1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_s;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_71093dd7f1aafcb28de56da832ab6ad1->m_frame.f_lineno = 620;
    tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_digest_62b7e67e29e99420603c12d205222fa5_tuple, 0 ) );

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 620;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_71093dd7f1aafcb28de56da832ab6ad1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_71093dd7f1aafcb28de56da832ab6ad1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_71093dd7f1aafcb28de56da832ab6ad1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_71093dd7f1aafcb28de56da832ab6ad1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_71093dd7f1aafcb28de56da832ab6ad1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_71093dd7f1aafcb28de56da832ab6ad1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_71093dd7f1aafcb28de56da832ab6ad1,
        type_description_1,
        par_s
    );


    // Release cached frame.
    if ( frame_71093dd7f1aafcb28de56da832ab6ad1 == cache_frame_71093dd7f1aafcb28de56da832ab6ad1 )
    {
        Py_DECREF( frame_71093dd7f1aafcb28de56da832ab6ad1 );
    }
    cache_frame_71093dd7f1aafcb28de56da832ab6ad1 = NULL;

    assertFrameObject( frame_71093dd7f1aafcb28de56da832ab6ad1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_40_b );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_40_b );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_41_u( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_s;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_41_u );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_41_u );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_42_b( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = par_s;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_42_b );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_42_b );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_43_u( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_return_value;
    PyObject *tmp_unicode_arg_1;
    PyObject *tmp_unicode_encoding_1;
    static struct Nuitka_FrameObject *cache_frame_0236bcf87338947852b4ce61c23c0266 = NULL;

    struct Nuitka_FrameObject *frame_0236bcf87338947852b4ce61c23c0266;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0236bcf87338947852b4ce61c23c0266, codeobj_0236bcf87338947852b4ce61c23c0266, module_six, sizeof(void *) );
    frame_0236bcf87338947852b4ce61c23c0266 = cache_frame_0236bcf87338947852b4ce61c23c0266;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0236bcf87338947852b4ce61c23c0266 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0236bcf87338947852b4ce61c23c0266 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_s;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_0236bcf87338947852b4ce61c23c0266->m_frame.f_lineno = 647;
    tmp_unicode_arg_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_ad37a81bd1ca10d9805a643e16b0f800_tuple, 0 ) );

    if ( tmp_unicode_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 647;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_unicode_encoding_1 = const_str_plain_unicode_escape;
    tmp_return_value = TO_UNICODE3( tmp_unicode_arg_1, tmp_unicode_encoding_1, NULL );
    Py_DECREF( tmp_unicode_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 647;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0236bcf87338947852b4ce61c23c0266 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0236bcf87338947852b4ce61c23c0266 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0236bcf87338947852b4ce61c23c0266 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0236bcf87338947852b4ce61c23c0266, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0236bcf87338947852b4ce61c23c0266->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0236bcf87338947852b4ce61c23c0266, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0236bcf87338947852b4ce61c23c0266,
        type_description_1,
        par_s
    );


    // Release cached frame.
    if ( frame_0236bcf87338947852b4ce61c23c0266 == cache_frame_0236bcf87338947852b4ce61c23c0266 )
    {
        Py_DECREF( frame_0236bcf87338947852b4ce61c23c0266 );
    }
    cache_frame_0236bcf87338947852b4ce61c23c0266 = NULL;

    assertFrameObject( frame_0236bcf87338947852b4ce61c23c0266 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_43_u );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_43_u );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_44_byte2int( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_bs = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_ord_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_ac937e65f492690ad9e53f20d9e372a5 = NULL;

    struct Nuitka_FrameObject *frame_ac937e65f492690ad9e53f20d9e372a5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ac937e65f492690ad9e53f20d9e372a5, codeobj_ac937e65f492690ad9e53f20d9e372a5, module_six, sizeof(void *) );
    frame_ac937e65f492690ad9e53f20d9e372a5 = cache_frame_ac937e65f492690ad9e53f20d9e372a5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ac937e65f492690ad9e53f20d9e372a5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ac937e65f492690ad9e53f20d9e372a5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_subscribed_name_1 = par_bs;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = const_int_0;
    tmp_ord_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_ord_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 652;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_ORD( tmp_ord_arg_1 );
    Py_DECREF( tmp_ord_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 652;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ac937e65f492690ad9e53f20d9e372a5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ac937e65f492690ad9e53f20d9e372a5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ac937e65f492690ad9e53f20d9e372a5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ac937e65f492690ad9e53f20d9e372a5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ac937e65f492690ad9e53f20d9e372a5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ac937e65f492690ad9e53f20d9e372a5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ac937e65f492690ad9e53f20d9e372a5,
        type_description_1,
        par_bs
    );


    // Release cached frame.
    if ( frame_ac937e65f492690ad9e53f20d9e372a5 == cache_frame_ac937e65f492690ad9e53f20d9e372a5 )
    {
        Py_DECREF( frame_ac937e65f492690ad9e53f20d9e372a5 );
    }
    cache_frame_ac937e65f492690ad9e53f20d9e372a5 = NULL;

    assertFrameObject( frame_ac937e65f492690ad9e53f20d9e372a5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_44_byte2int );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_bs );
    Py_DECREF( par_bs );
    par_bs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_bs );
    Py_DECREF( par_bs );
    par_bs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_44_byte2int );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_45_indexbytes( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_buf = python_pars[ 0 ];
    PyObject *par_i = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_ord_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_014d68be5a8db24df32d574183f5f49d = NULL;

    struct Nuitka_FrameObject *frame_014d68be5a8db24df32d574183f5f49d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_014d68be5a8db24df32d574183f5f49d, codeobj_014d68be5a8db24df32d574183f5f49d, module_six, sizeof(void *)+sizeof(void *) );
    frame_014d68be5a8db24df32d574183f5f49d = cache_frame_014d68be5a8db24df32d574183f5f49d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_014d68be5a8db24df32d574183f5f49d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_014d68be5a8db24df32d574183f5f49d ) == 2 ); // Frame stack

    // Framed code:
    tmp_subscribed_name_1 = par_buf;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = par_i;

    CHECK_OBJECT( tmp_subscript_name_1 );
    tmp_ord_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_ord_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 655;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = BUILTIN_ORD( tmp_ord_arg_1 );
    Py_DECREF( tmp_ord_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 655;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_014d68be5a8db24df32d574183f5f49d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_014d68be5a8db24df32d574183f5f49d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_014d68be5a8db24df32d574183f5f49d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_014d68be5a8db24df32d574183f5f49d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_014d68be5a8db24df32d574183f5f49d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_014d68be5a8db24df32d574183f5f49d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_014d68be5a8db24df32d574183f5f49d,
        type_description_1,
        par_buf,
        par_i
    );


    // Release cached frame.
    if ( frame_014d68be5a8db24df32d574183f5f49d == cache_frame_014d68be5a8db24df32d574183f5f49d )
    {
        Py_DECREF( frame_014d68be5a8db24df32d574183f5f49d );
    }
    cache_frame_014d68be5a8db24df32d574183f5f49d = NULL;

    assertFrameObject( frame_014d68be5a8db24df32d574183f5f49d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_45_indexbytes );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_buf );
    Py_DECREF( par_buf );
    par_buf = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_buf );
    Py_DECREF( par_buf );
    par_buf = NULL;

    CHECK_OBJECT( (PyObject *)par_i );
    Py_DECREF( par_i );
    par_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_45_indexbytes );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_46_assertCountEqual( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_fd514f2e68b32fe792c6f921d95d0b39 = NULL;

    struct Nuitka_FrameObject *frame_fd514f2e68b32fe792c6f921d95d0b39;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fd514f2e68b32fe792c6f921d95d0b39, codeobj_fd514f2e68b32fe792c6f921d95d0b39, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_fd514f2e68b32fe792c6f921d95d0b39 = cache_frame_fd514f2e68b32fe792c6f921d95d0b39;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fd514f2e68b32fe792c6f921d95d0b39 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fd514f2e68b32fe792c6f921d95d0b39 ) == 2 ); // Frame stack

    // Framed code:
    tmp_getattr_target_1 = par_self;

    CHECK_OBJECT( tmp_getattr_target_1 );
    tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertCountEqual );

    if (unlikely( tmp_getattr_attr_1 == NULL ))
    {
        tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__assertCountEqual );
    }

    if ( tmp_getattr_attr_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_assertCountEqual" );
        exception_tb = NULL;

        exception_lineno = 667;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 667;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_3_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 667;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fd514f2e68b32fe792c6f921d95d0b39 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fd514f2e68b32fe792c6f921d95d0b39 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fd514f2e68b32fe792c6f921d95d0b39 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fd514f2e68b32fe792c6f921d95d0b39, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fd514f2e68b32fe792c6f921d95d0b39->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fd514f2e68b32fe792c6f921d95d0b39, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fd514f2e68b32fe792c6f921d95d0b39,
        type_description_1,
        par_self,
        par_args,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_fd514f2e68b32fe792c6f921d95d0b39 == cache_frame_fd514f2e68b32fe792c6f921d95d0b39 )
    {
        Py_DECREF( frame_fd514f2e68b32fe792c6f921d95d0b39 );
    }
    cache_frame_fd514f2e68b32fe792c6f921d95d0b39 = NULL;

    assertFrameObject( frame_fd514f2e68b32fe792c6f921d95d0b39 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_46_assertCountEqual );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_46_assertCountEqual );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_47_assertRaisesRegex( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_628be6ee0f611c7f3602221f9abb4a1b = NULL;

    struct Nuitka_FrameObject *frame_628be6ee0f611c7f3602221f9abb4a1b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_628be6ee0f611c7f3602221f9abb4a1b, codeobj_628be6ee0f611c7f3602221f9abb4a1b, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_628be6ee0f611c7f3602221f9abb4a1b = cache_frame_628be6ee0f611c7f3602221f9abb4a1b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_628be6ee0f611c7f3602221f9abb4a1b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_628be6ee0f611c7f3602221f9abb4a1b ) == 2 ); // Frame stack

    // Framed code:
    tmp_getattr_target_1 = par_self;

    CHECK_OBJECT( tmp_getattr_target_1 );
    tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex );

    if (unlikely( tmp_getattr_attr_1 == NULL ))
    {
        tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex );
    }

    if ( tmp_getattr_attr_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_assertRaisesRegex" );
        exception_tb = NULL;

        exception_lineno = 671;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_3_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_628be6ee0f611c7f3602221f9abb4a1b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_628be6ee0f611c7f3602221f9abb4a1b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_628be6ee0f611c7f3602221f9abb4a1b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_628be6ee0f611c7f3602221f9abb4a1b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_628be6ee0f611c7f3602221f9abb4a1b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_628be6ee0f611c7f3602221f9abb4a1b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_628be6ee0f611c7f3602221f9abb4a1b,
        type_description_1,
        par_self,
        par_args,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_628be6ee0f611c7f3602221f9abb4a1b == cache_frame_628be6ee0f611c7f3602221f9abb4a1b )
    {
        Py_DECREF( frame_628be6ee0f611c7f3602221f9abb4a1b );
    }
    cache_frame_628be6ee0f611c7f3602221f9abb4a1b = NULL;

    assertFrameObject( frame_628be6ee0f611c7f3602221f9abb4a1b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_47_assertRaisesRegex );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_47_assertRaisesRegex );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_48_assertRegex( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_08f1bed4c1668099b165cb03efc801eb = NULL;

    struct Nuitka_FrameObject *frame_08f1bed4c1668099b165cb03efc801eb;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_08f1bed4c1668099b165cb03efc801eb, codeobj_08f1bed4c1668099b165cb03efc801eb, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_08f1bed4c1668099b165cb03efc801eb = cache_frame_08f1bed4c1668099b165cb03efc801eb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_08f1bed4c1668099b165cb03efc801eb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_08f1bed4c1668099b165cb03efc801eb ) == 2 ); // Frame stack

    // Framed code:
    tmp_getattr_target_1 = par_self;

    CHECK_OBJECT( tmp_getattr_target_1 );
    tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRegex );

    if (unlikely( tmp_getattr_attr_1 == NULL ))
    {
        tmp_getattr_attr_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__assertRegex );
    }

    if ( tmp_getattr_attr_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_assertRegex" );
        exception_tb = NULL;

        exception_lineno = 675;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg1_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 675;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_3_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 675;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_08f1bed4c1668099b165cb03efc801eb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_08f1bed4c1668099b165cb03efc801eb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_08f1bed4c1668099b165cb03efc801eb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_08f1bed4c1668099b165cb03efc801eb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_08f1bed4c1668099b165cb03efc801eb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_08f1bed4c1668099b165cb03efc801eb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_08f1bed4c1668099b165cb03efc801eb,
        type_description_1,
        par_self,
        par_args,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_08f1bed4c1668099b165cb03efc801eb == cache_frame_08f1bed4c1668099b165cb03efc801eb )
    {
        Py_DECREF( frame_08f1bed4c1668099b165cb03efc801eb );
    }
    cache_frame_08f1bed4c1668099b165cb03efc801eb = NULL;

    assertFrameObject( frame_08f1bed4c1668099b165cb03efc801eb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_48_assertRegex );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_48_assertRegex );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_49_reraise( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_tp = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *par_tb = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    bool tmp_is_1;
    bool tmp_isnot_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_d6973481fee60ccc011a91b79c3b206e = NULL;

    struct Nuitka_FrameObject *frame_d6973481fee60ccc011a91b79c3b206e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d6973481fee60ccc011a91b79c3b206e, codeobj_d6973481fee60ccc011a91b79c3b206e, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d6973481fee60ccc011a91b79c3b206e = cache_frame_d6973481fee60ccc011a91b79c3b206e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d6973481fee60ccc011a91b79c3b206e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d6973481fee60ccc011a91b79c3b206e ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par_value;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_1 = par_tp;

    CHECK_OBJECT( tmp_called_name_1 );
    frame_d6973481fee60ccc011a91b79c3b206e->m_frame.f_lineno = 683;
    tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 683;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_value;
        assert( old != NULL );
        par_value = tmp_assign_source_1;
        Py_DECREF( old );
    }

    branch_no_1:;
    tmp_source_name_1 = par_value;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___traceback__ );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 684;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_2 = par_tb;

    CHECK_OBJECT( tmp_compare_right_2 );
    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_instance_1 = par_value;

    CHECK_OBJECT( tmp_called_instance_1 );
    tmp_args_element_name_1 = par_tb;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_d6973481fee60ccc011a91b79c3b206e->m_frame.f_lineno = 685;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_raise_type_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_with_traceback, call_args );
    }

    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 685;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 685;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_raise_type_2 = par_value;

    CHECK_OBJECT( tmp_raise_type_2 );
    exception_type = tmp_raise_type_2;
    Py_INCREF( tmp_raise_type_2 );
    exception_lineno = 686;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d6973481fee60ccc011a91b79c3b206e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d6973481fee60ccc011a91b79c3b206e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d6973481fee60ccc011a91b79c3b206e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d6973481fee60ccc011a91b79c3b206e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d6973481fee60ccc011a91b79c3b206e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d6973481fee60ccc011a91b79c3b206e,
        type_description_1,
        par_tp,
        par_value,
        par_tb
    );


    // Release cached frame.
    if ( frame_d6973481fee60ccc011a91b79c3b206e == cache_frame_d6973481fee60ccc011a91b79c3b206e )
    {
        Py_DECREF( frame_d6973481fee60ccc011a91b79c3b206e );
    }
    cache_frame_d6973481fee60ccc011a91b79c3b206e = NULL;

    assertFrameObject( frame_d6973481fee60ccc011a91b79c3b206e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_49_reraise );
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_tp );
    Py_DECREF( par_tp );
    par_tp = NULL;

    Py_XDECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_tb );
    Py_DECREF( par_tb );
    par_tb = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_49_reraise );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

}


static PyObject *impl_six$$$function_50_exec_( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par__code_ = python_pars[ 0 ];
    PyObject *par__globs_ = python_pars[ 1 ];
    PyObject *par__locs_ = python_pars[ 2 ];
    PyObject *var_frame = NULL;
    PyObject *tmp_exec_1__globals = NULL;
    PyObject *tmp_exec_1__locals = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_exec_compiled_1;
    PyObject *tmp_exec_globals_1;
    PyObject *tmp_exec_locals_1;
    PyObject *tmp_exec_result_1;
    PyObject *tmp_exec_source_1;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    PyObject *tmp_locals_value;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_sync_locals_1;
    PyObject *tmp_sync_locals_2;
    static struct Nuitka_FrameObject *cache_frame_6ffb9678d28ae8c446eb7643c3d99917 = NULL;

    struct Nuitka_FrameObject *frame_6ffb9678d28ae8c446eb7643c3d99917;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    // Locals dictionary setup.
PyObject *locals_dict_1 = PyDict_New();


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6ffb9678d28ae8c446eb7643c3d99917, codeobj_6ffb9678d28ae8c446eb7643c3d99917, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6ffb9678d28ae8c446eb7643c3d99917 = cache_frame_6ffb9678d28ae8c446eb7643c3d99917;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6ffb9678d28ae8c446eb7643c3d99917 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6ffb9678d28ae8c446eb7643c3d99917 ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par__globs_;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_instance_1 = PyDict_GetItem( locals_dict_1, const_str_plain_sys );

    if ( tmp_called_instance_1 == NULL )
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_called_instance_1 == NULL ))
        {
            tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_called_instance_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
            exception_tb = NULL;

            exception_lineno = 692;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

    }

    frame_6ffb9678d28ae8c446eb7643c3d99917->m_frame.f_lineno = 692;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__getframe, &PyTuple_GET_ITEM( const_tuple_int_pos_1_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_frame == NULL );
    var_frame = tmp_assign_source_1;

    tmp_source_name_1 = var_frame;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_f_globals );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 693;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par__globs_;
        assert( old != NULL );
        par__globs_ = tmp_assign_source_2;
        Py_DECREF( old );
    }

    tmp_compare_left_2 = par__locs_;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = Py_None;
    tmp_is_2 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    if ( tmp_is_2 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_2 = var_frame;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_assign_source_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f_locals );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 695;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par__locs_;
        assert( old != NULL );
        par__locs_ = tmp_assign_source_3;
        Py_DECREF( old );
    }

    branch_no_2:;
    CHECK_OBJECT( var_frame );
    Py_DECREF( var_frame );
    var_frame = NULL;

    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_3 = par__locs_;

    CHECK_OBJECT( tmp_compare_left_3 );
    tmp_compare_right_3 = Py_None;
    tmp_is_3 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if ( tmp_is_3 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_4 = par__globs_;

    CHECK_OBJECT( tmp_assign_source_4 );
    {
        PyObject *old = par__locs_;
        assert( old != NULL );
        par__locs_ = tmp_assign_source_4;
        Py_INCREF( par__locs_ );
        Py_DECREF( old );
    }

    branch_no_3:;
    branch_end_1:;
    tmp_assign_source_5 = (PyObject *)moduledict_six;
    assert( tmp_exec_1__globals == NULL );
    Py_INCREF( tmp_assign_source_5 );
    tmp_exec_1__globals = tmp_assign_source_5;

    tmp_assign_source_6 = locals_dict_1;
    Py_INCREF( tmp_assign_source_6 );
    if ( par__code_ != NULL )
    {
        UPDATE_STRING_DICT0( (PyDictObject *)tmp_assign_source_6, (Nuitka_StringObject *)const_str_plain__code_, par__code_ );
    }
    else
    {
        int res = PyDict_DelItem( tmp_assign_source_6, const_str_plain__code_ );

        if ( res != 0 )
        {
            CLEAR_ERROR_OCCURRED();
        }
    }

    if ( par__globs_ != NULL )
    {
        UPDATE_STRING_DICT0( (PyDictObject *)tmp_assign_source_6, (Nuitka_StringObject *)const_str_plain__globs_, par__globs_ );
    }
    else
    {
        int res = PyDict_DelItem( tmp_assign_source_6, const_str_plain__globs_ );

        if ( res != 0 )
        {
            CLEAR_ERROR_OCCURRED();
        }
    }

    if ( par__locs_ != NULL )
    {
        UPDATE_STRING_DICT0( (PyDictObject *)tmp_assign_source_6, (Nuitka_StringObject *)const_str_plain__locs_, par__locs_ );
    }
    else
    {
        int res = PyDict_DelItem( tmp_assign_source_6, const_str_plain__locs_ );

        if ( res != 0 )
        {
            CLEAR_ERROR_OCCURRED();
        }
    }

    if ( var_frame != NULL )
    {
        UPDATE_STRING_DICT0( (PyDictObject *)tmp_assign_source_6, (Nuitka_StringObject *)const_str_plain_frame, var_frame );
    }
    else
    {
        int res = PyDict_DelItem( tmp_assign_source_6, const_str_plain_frame );

        if ( res != 0 )
        {
            CLEAR_ERROR_OCCURRED();
        }
    }

    assert( tmp_exec_1__locals == NULL );
    tmp_exec_1__locals = tmp_assign_source_6;

    // Tried code:
    // Tried code:
    tmp_exec_source_1 = const_str_digest_70a0120f28d7311f633323a6bfb46104;
    tmp_exec_globals_1 = tmp_exec_1__globals;

    CHECK_OBJECT( tmp_exec_globals_1 );
    tmp_exec_locals_1 = tmp_exec_1__locals;

    CHECK_OBJECT( tmp_exec_locals_1 );
    tmp_exec_compiled_1 = COMPILE_CODE( tmp_exec_source_1, const_str_digest_1a0157fa26ba10861f95514e25366c69, const_str_plain_exec, NULL, NULL );
    if ( tmp_exec_compiled_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 699;
        type_description_1 = "oooo";
        goto try_except_handler_3;
    }
    tmp_exec_result_1 = EVAL_CODE( tmp_exec_compiled_1, tmp_exec_globals_1, tmp_exec_locals_1 );
    Py_DECREF( tmp_exec_compiled_1 );
    if ( tmp_exec_result_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 699;
        type_description_1 = "oooo";
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_exec_result_1 );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    tmp_sync_locals_1 = tmp_exec_1__locals;

    CHECK_OBJECT( tmp_sync_locals_1 );
    tmp_locals_value = PyDict_GetItem( tmp_sync_locals_1, const_str_plain__locs_ );
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__locs_;
        par__locs_ = tmp_locals_value;
        Py_INCREF( par__locs_ );
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyDict_GetItem( tmp_sync_locals_1, const_str_plain__globs_ );
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__globs_;
        par__globs_ = tmp_locals_value;
        Py_INCREF( par__globs_ );
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyDict_GetItem( tmp_sync_locals_1, const_str_plain_frame );
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = var_frame;
        var_frame = tmp_locals_value;
        Py_INCREF( var_frame );
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyDict_GetItem( tmp_sync_locals_1, const_str_plain__code_ );
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__code_;
        par__code_ = tmp_locals_value;
        Py_INCREF( par__code_ );
        Py_XDECREF( old );
    }

    }
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_exec_1__globals );
    tmp_exec_1__globals = NULL;

    Py_XDECREF( tmp_exec_1__locals );
    tmp_exec_1__locals = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6ffb9678d28ae8c446eb7643c3d99917 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6ffb9678d28ae8c446eb7643c3d99917 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6ffb9678d28ae8c446eb7643c3d99917, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6ffb9678d28ae8c446eb7643c3d99917->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6ffb9678d28ae8c446eb7643c3d99917, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6ffb9678d28ae8c446eb7643c3d99917,
        type_description_1,
        par__code_,
        par__globs_,
        par__locs_,
        var_frame
    );


    // Release cached frame.
    if ( frame_6ffb9678d28ae8c446eb7643c3d99917 == cache_frame_6ffb9678d28ae8c446eb7643c3d99917 )
    {
        Py_DECREF( frame_6ffb9678d28ae8c446eb7643c3d99917 );
    }
    cache_frame_6ffb9678d28ae8c446eb7643c3d99917 = NULL;

    assertFrameObject( frame_6ffb9678d28ae8c446eb7643c3d99917 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_sync_locals_2 = tmp_exec_1__locals;

    CHECK_OBJECT( tmp_sync_locals_2 );
    tmp_locals_value = PyDict_GetItem( tmp_sync_locals_2, const_str_plain__code_ );
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__code_;
        par__code_ = tmp_locals_value;
        Py_INCREF( par__code_ );
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyDict_GetItem( tmp_sync_locals_2, const_str_plain__locs_ );
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__locs_;
        par__locs_ = tmp_locals_value;
        Py_INCREF( par__locs_ );
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyDict_GetItem( tmp_sync_locals_2, const_str_plain_frame );
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = var_frame;
        var_frame = tmp_locals_value;
        Py_INCREF( var_frame );
        Py_XDECREF( old );
    }

    }
    tmp_locals_value = PyDict_GetItem( tmp_sync_locals_2, const_str_plain__globs_ );
    if ( tmp_locals_value != NULL )
    {
    {
        PyObject *old = par__globs_;
        par__globs_ = tmp_locals_value;
        Py_INCREF( par__globs_ );
        Py_XDECREF( old );
    }

    }
    Py_XDECREF( tmp_exec_1__globals );
    tmp_exec_1__globals = NULL;

    Py_XDECREF( tmp_exec_1__locals );
    tmp_exec_1__locals = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_50_exec_ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par__code_ );
    par__code_ = NULL;

    Py_XDECREF( par__globs_ );
    par__globs_ = NULL;

    Py_XDECREF( par__locs_ );
    par__locs_ = NULL;

    Py_XDECREF( var_frame );
    var_frame = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par__code_ );
    par__code_ = NULL;

    Py_XDECREF( par__globs_ );
    par__globs_ = NULL;

    Py_XDECREF( par__locs_ );
    par__locs_ = NULL;

    Py_XDECREF( var_frame );
    var_frame = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_50_exec_ );
    return NULL;

function_exception_exit:
    Py_DECREF( locals_dict_1 );
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:
        Py_DECREF( locals_dict_1 );

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_51_raise_from( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[ 0 ];
    PyObject *par_from_value = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_raise_type_1;
    static struct Nuitka_FrameObject *cache_frame_889df127cc0bad00b1513ee2cc2b70ca = NULL;

    struct Nuitka_FrameObject *frame_889df127cc0bad00b1513ee2cc2b70ca;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_889df127cc0bad00b1513ee2cc2b70ca, codeobj_889df127cc0bad00b1513ee2cc2b70ca, module_six, sizeof(void *)+sizeof(void *) );
    frame_889df127cc0bad00b1513ee2cc2b70ca = cache_frame_889df127cc0bad00b1513ee2cc2b70ca;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_889df127cc0bad00b1513ee2cc2b70ca );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_889df127cc0bad00b1513ee2cc2b70ca ) == 2 ); // Frame stack

    // Framed code:
    tmp_raise_type_1 = par_value;

    CHECK_OBJECT( tmp_raise_type_1 );
    exception_type = tmp_raise_type_1;
    Py_INCREF( tmp_raise_type_1 );
    exception_lineno = 718;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_889df127cc0bad00b1513ee2cc2b70ca );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_889df127cc0bad00b1513ee2cc2b70ca );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_889df127cc0bad00b1513ee2cc2b70ca, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_889df127cc0bad00b1513ee2cc2b70ca->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_889df127cc0bad00b1513ee2cc2b70ca, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_889df127cc0bad00b1513ee2cc2b70ca,
        type_description_1,
        par_value,
        par_from_value
    );


    // Release cached frame.
    if ( frame_889df127cc0bad00b1513ee2cc2b70ca == cache_frame_889df127cc0bad00b1513ee2cc2b70ca )
    {
        Py_DECREF( frame_889df127cc0bad00b1513ee2cc2b70ca );
    }
    cache_frame_889df127cc0bad00b1513ee2cc2b70ca = NULL;

    assertFrameObject( frame_889df127cc0bad00b1513ee2cc2b70ca );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_51_raise_from );
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_from_value );
    Py_DECREF( par_from_value );
    par_from_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_51_raise_from );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

}


static PyObject *impl_six$$$function_52_print_( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[ 0 ];
    PyObject *par_kwargs = python_pars[ 1 ];
    struct Nuitka_CellObject *var_fp = PyCell_EMPTY();
    PyObject *var_write = NULL;
    PyObject *var_want_unicode = NULL;
    PyObject *var_sep = NULL;
    PyObject *var_end = NULL;
    PyObject *var_arg = NULL;
    PyObject *var_newline = NULL;
    PyObject *var_space = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    bool tmp_is_1;
    bool tmp_is_2;
    bool tmp_is_3;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_cls_4;
    PyObject *tmp_isinstance_cls_5;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_isinstance_inst_4;
    PyObject *tmp_isinstance_inst_5;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_a18b3d9c941686773f576a200d0fddec = NULL;

    struct Nuitka_FrameObject *frame_a18b3d9c941686773f576a200d0fddec;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a18b3d9c941686773f576a200d0fddec, codeobj_a18b3d9c941686773f576a200d0fddec, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a18b3d9c941686773f576a200d0fddec = cache_frame_a18b3d9c941686773f576a200d0fddec;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a18b3d9c941686773f576a200d0fddec );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a18b3d9c941686773f576a200d0fddec ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_pop );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 725;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_str_plain_file;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 725;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stdout );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 725;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 725;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 725;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = PyCell_GET( var_fp );
        PyCell_SET( var_fp, tmp_assign_source_1 );
        Py_XDECREF( old );
    }

    if ( var_fp == NULL )
    {
        tmp_compare_left_1 = NULL;
    }
    else
    {
        tmp_compare_left_1 = PyCell_GET( var_fp );
    }

    if ( tmp_compare_left_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "fp" );
        exception_tb = NULL;

        exception_lineno = 726;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }

    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_2 = MAKE_FUNCTION_six$$$function_52_print_$$$function_1_write( var_fp );
    assert( var_write == NULL );
    var_write = tmp_assign_source_2;

    tmp_assign_source_3 = Py_False;
    assert( var_want_unicode == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_want_unicode = tmp_assign_source_3;

    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 742;
    tmp_assign_source_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain_sep_none_tuple, 0 ) );

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 742;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_sep == NULL );
    var_sep = tmp_assign_source_4;

    tmp_compare_left_2 = var_sep;

    CHECK_OBJECT( tmp_compare_left_2 );
    tmp_compare_right_2 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_2 != tmp_compare_right_2 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_isinstance_inst_1 = var_sep;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 744;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_5 = Py_True;
    {
        PyObject *old = var_want_unicode;
        assert( old != NULL );
        var_want_unicode = tmp_assign_source_5;
        Py_INCREF( var_want_unicode );
        Py_DECREF( old );
    }

    goto branch_end_3;
    branch_no_3:;
    tmp_isinstance_inst_2 = var_sep;

    CHECK_OBJECT( tmp_isinstance_inst_2 );
    tmp_isinstance_cls_2 = (PyObject *)&PyString_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 746;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_4;
    }
    else
    {
        goto branch_yes_4;
    }
    branch_yes_4:;
    tmp_make_exception_arg_1 = const_str_digest_a13035c59d0f0e8c04a4feacc0004cd7;
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 747;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 747;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oocoooooooo";
    goto frame_exception_exit_1;
    branch_no_4:;
    branch_end_3:;
    branch_no_2:;
    tmp_called_instance_2 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 748;
    tmp_assign_source_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain_end_none_tuple, 0 ) );

    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 748;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_end == NULL );
    var_end = tmp_assign_source_6;

    tmp_compare_left_3 = var_end;

    CHECK_OBJECT( tmp_compare_left_3 );
    tmp_compare_right_3 = Py_None;
    tmp_isnot_2 = ( tmp_compare_left_3 != tmp_compare_right_3 );
    if ( tmp_isnot_2 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_isinstance_inst_3 = var_end;

    CHECK_OBJECT( tmp_isinstance_inst_3 );
    tmp_isinstance_cls_3 = (PyObject *)&PyUnicode_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 750;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_assign_source_7 = Py_True;
    {
        PyObject *old = var_want_unicode;
        var_want_unicode = tmp_assign_source_7;
        Py_INCREF( var_want_unicode );
        Py_XDECREF( old );
    }

    goto branch_end_6;
    branch_no_6:;
    tmp_isinstance_inst_4 = var_end;

    CHECK_OBJECT( tmp_isinstance_inst_4 );
    tmp_isinstance_cls_4 = (PyObject *)&PyString_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 752;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_7;
    }
    else
    {
        goto branch_yes_7;
    }
    branch_yes_7:;
    tmp_make_exception_arg_2 = const_str_digest_7e4f7e7d87a44d0e81f11f08170c9bf6;
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 753;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_2 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_2 != NULL );
    exception_type = tmp_raise_type_2;
    exception_lineno = 753;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oocoooooooo";
    goto frame_exception_exit_1;
    branch_no_7:;
    branch_end_6:;
    branch_no_5:;
    tmp_cond_value_1 = par_kwargs;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 754;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_make_exception_arg_3 = const_str_digest_6fdf710e7d63e48e68391e1f587ae0a5;
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 755;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_3 };
        tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_3 != NULL );
    exception_type = tmp_raise_type_3;
    exception_lineno = 755;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oocoooooooo";
    goto frame_exception_exit_1;
    branch_no_8:;
    tmp_cond_value_2 = var_want_unicode;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "want_unicode" );
        exception_tb = NULL;

        exception_lineno = 756;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 756;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_no_9;
    }
    else
    {
        goto branch_yes_9;
    }
    branch_yes_9:;
    tmp_iter_arg_1 = par_args;

    CHECK_OBJECT( tmp_iter_arg_1 );
    tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 757;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_8;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oocoooooooo";
            exception_lineno = 757;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_10 );
    {
        PyObject *old = var_arg;
        var_arg = tmp_assign_source_10;
        Py_INCREF( var_arg );
        Py_XDECREF( old );
    }

    tmp_isinstance_inst_5 = var_arg;

    CHECK_OBJECT( tmp_isinstance_inst_5 );
    tmp_isinstance_cls_5 = (PyObject *)&PyUnicode_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 758;
        type_description_1 = "oocoooooooo";
        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_assign_source_11 = Py_True;
    {
        PyObject *old = var_want_unicode;
        var_want_unicode = tmp_assign_source_11;
        Py_INCREF( var_want_unicode );
        Py_XDECREF( old );
    }

    goto loop_end_1;
    branch_no_10:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 757;
        type_description_1 = "oocoooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_9:;
    tmp_cond_value_3 = var_want_unicode;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "want_unicode" );
        exception_tb = NULL;

        exception_lineno = 761;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 761;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_assign_source_12 = const_unicode_newline;
    assert( var_newline == NULL );
    Py_INCREF( tmp_assign_source_12 );
    var_newline = tmp_assign_source_12;

    tmp_assign_source_13 = const_unicode_space;
    assert( var_space == NULL );
    Py_INCREF( tmp_assign_source_13 );
    var_space = tmp_assign_source_13;

    goto branch_end_11;
    branch_no_11:;
    tmp_assign_source_14 = const_str_newline;
    assert( var_newline == NULL );
    Py_INCREF( tmp_assign_source_14 );
    var_newline = tmp_assign_source_14;

    tmp_assign_source_15 = const_str_space;
    assert( var_space == NULL );
    Py_INCREF( tmp_assign_source_15 );
    var_space = tmp_assign_source_15;

    branch_end_11:;
    tmp_compare_left_4 = var_sep;

    CHECK_OBJECT( tmp_compare_left_4 );
    tmp_compare_right_4 = Py_None;
    tmp_is_2 = ( tmp_compare_left_4 == tmp_compare_right_4 );
    if ( tmp_is_2 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_assign_source_16 = var_space;

    CHECK_OBJECT( tmp_assign_source_16 );
    {
        PyObject *old = var_sep;
        assert( old != NULL );
        var_sep = tmp_assign_source_16;
        Py_INCREF( var_sep );
        Py_DECREF( old );
    }

    branch_no_12:;
    tmp_compare_left_5 = var_end;

    CHECK_OBJECT( tmp_compare_left_5 );
    tmp_compare_right_5 = Py_None;
    tmp_is_3 = ( tmp_compare_left_5 == tmp_compare_right_5 );
    if ( tmp_is_3 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_assign_source_17 = var_newline;

    CHECK_OBJECT( tmp_assign_source_17 );
    {
        PyObject *old = var_end;
        assert( old != NULL );
        var_end = tmp_assign_source_17;
        Py_INCREF( var_end );
        Py_DECREF( old );
    }

    branch_no_13:;
    tmp_called_name_2 = (PyObject *)&PyEnum_Type;
    tmp_args_element_name_3 = par_args;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 771;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 771;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_18 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 771;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_18;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_19 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_19 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oocoooooooo";
            exception_lineno = 771;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_19;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_3 = tmp_for_loop_2__iter_value;

    CHECK_OBJECT( tmp_iter_arg_3 );
    tmp_assign_source_20 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 771;
        type_description_1 = "oocoooooooo";
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_21 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oocoooooooo";
        exception_lineno = 771;
        goto try_except_handler_5;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_22 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oocoooooooo";
        exception_lineno = 771;
        goto try_except_handler_5;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oocoooooooo";
                exception_lineno = 771;
                goto try_except_handler_5;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oocoooooooo";
        exception_lineno = 771;
        goto try_except_handler_5;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_4;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_3;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_23 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_23 );
    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_23;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_24 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_24 );
    {
        PyObject *old = var_arg;
        var_arg = tmp_assign_source_24;
        Py_INCREF( var_arg );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_cond_value_4 = var_i;

    CHECK_OBJECT( tmp_cond_value_4 );
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 772;
        type_description_1 = "oocoooooooo";
        goto try_except_handler_3;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_called_name_3 = var_write;

    CHECK_OBJECT( tmp_called_name_3 );
    tmp_args_element_name_4 = var_sep;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 773;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 773;
        type_description_1 = "oocoooooooo";
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_unused );
    branch_no_14:;
    tmp_called_name_4 = var_write;

    CHECK_OBJECT( tmp_called_name_4 );
    tmp_args_element_name_5 = var_arg;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 774;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 774;
        type_description_1 = "oocoooooooo";
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 771;
        type_description_1 = "oocoooooooo";
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_called_name_5 = var_write;

    CHECK_OBJECT( tmp_called_name_5 );
    tmp_args_element_name_6 = var_end;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_a18b3d9c941686773f576a200d0fddec->m_frame.f_lineno = 775;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 775;
        type_description_1 = "oocoooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a18b3d9c941686773f576a200d0fddec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a18b3d9c941686773f576a200d0fddec );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a18b3d9c941686773f576a200d0fddec );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a18b3d9c941686773f576a200d0fddec, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a18b3d9c941686773f576a200d0fddec->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a18b3d9c941686773f576a200d0fddec, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a18b3d9c941686773f576a200d0fddec,
        type_description_1,
        par_args,
        par_kwargs,
        var_fp,
        var_write,
        var_want_unicode,
        var_sep,
        var_end,
        var_arg,
        var_newline,
        var_space,
        var_i
    );


    // Release cached frame.
    if ( frame_a18b3d9c941686773f576a200d0fddec == cache_frame_a18b3d9c941686773f576a200d0fddec )
    {
        Py_DECREF( frame_a18b3d9c941686773f576a200d0fddec );
    }
    cache_frame_a18b3d9c941686773f576a200d0fddec = NULL;

    assertFrameObject( frame_a18b3d9c941686773f576a200d0fddec );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_52_print_ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_write );
    var_write = NULL;

    Py_XDECREF( var_want_unicode );
    var_want_unicode = NULL;

    Py_XDECREF( var_sep );
    var_sep = NULL;

    Py_XDECREF( var_end );
    var_end = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_newline );
    var_newline = NULL;

    Py_XDECREF( var_space );
    var_space = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_write );
    var_write = NULL;

    Py_XDECREF( var_want_unicode );
    var_want_unicode = NULL;

    Py_XDECREF( var_sep );
    var_sep = NULL;

    Py_XDECREF( var_end );
    var_end = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_newline );
    var_newline = NULL;

    Py_XDECREF( var_space );
    var_space = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_52_print_ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_52_print_$$$function_1_write( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_data = python_pars[ 0 ];
    PyObject *var_errors = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_target_1;
    bool tmp_is_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_str_arg_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_d6d2b011934f8b975ddc04a7dd97f27d = NULL;

    struct Nuitka_FrameObject *frame_d6d2b011934f8b975ddc04a7dd97f27d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d6d2b011934f8b975ddc04a7dd97f27d, codeobj_d6d2b011934f8b975ddc04a7dd97f27d, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d6d2b011934f8b975ddc04a7dd97f27d = cache_frame_d6d2b011934f8b975ddc04a7dd97f27d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d6d2b011934f8b975ddc04a7dd97f27d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d6d2b011934f8b975ddc04a7dd97f27d ) == 2 ); // Frame stack

    // Framed code:
    tmp_isinstance_inst_1 = par_data;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = (PyObject *)&PyBaseString_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 730;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_str_arg_1 = par_data;

    CHECK_OBJECT( tmp_str_arg_1 );
    tmp_assign_source_1 = PyObject_Str( tmp_str_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 731;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_data;
        assert( old != NULL );
        par_data = tmp_assign_source_1;
        Py_DECREF( old );
    }

    branch_no_1:;
    if ( self->m_closure[0] == NULL )
    {
        tmp_isinstance_inst_2 = NULL;
    }
    else
    {
        tmp_isinstance_inst_2 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_isinstance_inst_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 733;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_2 = (PyObject *)&PyFile_Type;
    tmp_and_left_value_1 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 733;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_isinstance_inst_3 = par_data;

    CHECK_OBJECT( tmp_isinstance_inst_3 );
    tmp_isinstance_cls_3 = (PyObject *)&PyUnicode_Type;
    tmp_and_left_value_2 = BUILTIN_ISINSTANCE( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 734;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    if ( self->m_closure[0] == NULL )
    {
        tmp_source_name_1 = NULL;
    }
    else
    {
        tmp_source_name_1 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 735;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_encoding );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = Py_None;
    tmp_and_right_value_2 = BOOL_FROM( tmp_compexpr_left_1 != tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    tmp_and_right_value_1 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_and_right_value_1 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    if ( self->m_closure[0] == NULL )
    {
        tmp_getattr_target_1 = NULL;
    }
    else
    {
        tmp_getattr_target_1 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_getattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 736;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }

    tmp_getattr_attr_1 = const_str_plain_errors;
    tmp_getattr_default_1 = Py_None;
    tmp_assign_source_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 736;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    assert( var_errors == NULL );
    var_errors = tmp_assign_source_2;

    tmp_compare_left_1 = var_errors;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_3 = const_str_plain_strict;
    {
        PyObject *old = var_errors;
        assert( old != NULL );
        var_errors = tmp_assign_source_3;
        Py_INCREF( var_errors );
        Py_DECREF( old );
    }

    branch_no_3:;
    tmp_source_name_2 = par_data;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_encode );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 739;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    if ( self->m_closure[0] == NULL )
    {
        tmp_source_name_3 = NULL;
    }
    else
    {
        tmp_source_name_3 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 739;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_encoding );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 739;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = var_errors;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_d6d2b011934f8b975ddc04a7dd97f27d->m_frame.f_lineno = 739;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 739;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_data;
        assert( old != NULL );
        par_data = tmp_assign_source_4;
        Py_DECREF( old );
    }

    branch_no_2:;
    if ( self->m_closure[0] == NULL )
    {
        tmp_source_name_4 = NULL;
    }
    else
    {
        tmp_source_name_4 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fp" );
        exception_tb = NULL;

        exception_lineno = 740;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_data;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "data" );
        exception_tb = NULL;

        exception_lineno = 740;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }

    frame_d6d2b011934f8b975ddc04a7dd97f27d->m_frame.f_lineno = 740;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;
        type_description_1 = "ooc";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d6d2b011934f8b975ddc04a7dd97f27d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d6d2b011934f8b975ddc04a7dd97f27d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d6d2b011934f8b975ddc04a7dd97f27d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d6d2b011934f8b975ddc04a7dd97f27d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d6d2b011934f8b975ddc04a7dd97f27d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d6d2b011934f8b975ddc04a7dd97f27d,
        type_description_1,
        par_data,
        var_errors,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_d6d2b011934f8b975ddc04a7dd97f27d == cache_frame_d6d2b011934f8b975ddc04a7dd97f27d )
    {
        Py_DECREF( frame_d6d2b011934f8b975ddc04a7dd97f27d );
    }
    cache_frame_d6d2b011934f8b975ddc04a7dd97f27d = NULL;

    assertFrameObject( frame_d6d2b011934f8b975ddc04a7dd97f27d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_52_print_$$$function_1_write );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_data );
    par_data = NULL;

    Py_XDECREF( var_errors );
    var_errors = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_data );
    par_data = NULL;

    Py_XDECREF( var_errors );
    var_errors = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_52_print_$$$function_1_write );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_53_print_( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[ 0 ];
    PyObject *par_kwargs = python_pars[ 1 ];
    PyObject *var_fp = NULL;
    PyObject *var_flush = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_766b59d84ba3ef66c10a8dfe1cd13090 = NULL;

    struct Nuitka_FrameObject *frame_766b59d84ba3ef66c10a8dfe1cd13090;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_766b59d84ba3ef66c10a8dfe1cd13090, codeobj_766b59d84ba3ef66c10a8dfe1cd13090, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_766b59d84ba3ef66c10a8dfe1cd13090 = cache_frame_766b59d84ba3ef66c10a8dfe1cd13090;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_766b59d84ba3ef66c10a8dfe1cd13090 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_766b59d84ba3ef66c10a8dfe1cd13090 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_kwargs;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 780;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_str_plain_file;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 780;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stdout );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 780;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_766b59d84ba3ef66c10a8dfe1cd13090->m_frame.f_lineno = 780;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 780;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_fp == NULL );
    var_fp = tmp_assign_source_1;

    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_766b59d84ba3ef66c10a8dfe1cd13090->m_frame.f_lineno = 781;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain_flush_false_tuple, 0 ) );

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 781;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_flush == NULL );
    var_flush = tmp_assign_source_2;

    tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__print );

    if (unlikely( tmp_dircall_arg1_1 == NULL ))
    {
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__print );
    }

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "_print" );
        exception_tb = NULL;

        exception_lineno = 782;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg2_1 = par_args;

    CHECK_OBJECT( tmp_dircall_arg2_1 );
    tmp_dircall_arg3_1 = par_kwargs;

    CHECK_OBJECT( tmp_dircall_arg3_1 );
    Py_INCREF( tmp_dircall_arg1_1 );
    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_unused = impl___internal__$$$function_3_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 782;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_and_left_value_1 = var_flush;

    CHECK_OBJECT( tmp_and_left_value_1 );
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 783;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_compexpr_left_1 = var_fp;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_compexpr_right_1 = Py_None;
    tmp_and_right_value_1 = BOOL_FROM( tmp_compexpr_left_1 != tmp_compexpr_right_1 );
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 783;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_instance_2 = var_fp;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_766b59d84ba3ef66c10a8dfe1cd13090->m_frame.f_lineno = 784;
    tmp_unused = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_flush );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 784;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_766b59d84ba3ef66c10a8dfe1cd13090 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_766b59d84ba3ef66c10a8dfe1cd13090 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_766b59d84ba3ef66c10a8dfe1cd13090, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_766b59d84ba3ef66c10a8dfe1cd13090->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_766b59d84ba3ef66c10a8dfe1cd13090, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_766b59d84ba3ef66c10a8dfe1cd13090,
        type_description_1,
        par_args,
        par_kwargs,
        var_fp,
        var_flush
    );


    // Release cached frame.
    if ( frame_766b59d84ba3ef66c10a8dfe1cd13090 == cache_frame_766b59d84ba3ef66c10a8dfe1cd13090 )
    {
        Py_DECREF( frame_766b59d84ba3ef66c10a8dfe1cd13090 );
    }
    cache_frame_766b59d84ba3ef66c10a8dfe1cd13090 = NULL;

    assertFrameObject( frame_766b59d84ba3ef66c10a8dfe1cd13090 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_53_print_ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    CHECK_OBJECT( (PyObject *)var_flush );
    Py_DECREF( var_flush );
    var_flush = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_flush );
    var_flush = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_53_print_ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_54_wraps( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_wrapped = PyCell_NEW1( python_pars[ 0 ] );
    struct Nuitka_CellObject *par_assigned = PyCell_NEW1( python_pars[ 1 ] );
    struct Nuitka_CellObject *par_updated = PyCell_NEW1( python_pars[ 2 ] );
    PyObject *var_wrapper = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_six$$$function_54_wraps$$$function_1_wrapper( par_assigned, par_updated, par_wrapped );
    assert( var_wrapper == NULL );
    var_wrapper = tmp_assign_source_1;

    // Tried code:
    tmp_return_value = var_wrapper;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_54_wraps );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_wrapped );
    Py_DECREF( par_wrapped );
    par_wrapped = NULL;

    CHECK_OBJECT( (PyObject *)par_assigned );
    Py_DECREF( par_assigned );
    par_assigned = NULL;

    CHECK_OBJECT( (PyObject *)par_updated );
    Py_DECREF( par_updated );
    par_updated = NULL;

    CHECK_OBJECT( (PyObject *)var_wrapper );
    Py_DECREF( var_wrapper );
    var_wrapper = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_54_wraps );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_54_wraps$$$function_1_wrapper( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_f = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_3e9ea0da1ed2d504876828428c70d7a6 = NULL;

    struct Nuitka_FrameObject *frame_3e9ea0da1ed2d504876828428c70d7a6;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3e9ea0da1ed2d504876828428c70d7a6, codeobj_3e9ea0da1ed2d504876828428c70d7a6, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3e9ea0da1ed2d504876828428c70d7a6 = cache_frame_3e9ea0da1ed2d504876828428c70d7a6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3e9ea0da1ed2d504876828428c70d7a6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3e9ea0da1ed2d504876828428c70d7a6 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 792;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_wraps );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 792;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }
    if ( self->m_closure[2] == NULL )
    {
        tmp_args_element_name_1 = NULL;
    }
    else
    {
        tmp_args_element_name_1 = PyCell_GET( self->m_closure[2] );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "wrapped" );
        exception_tb = NULL;

        exception_lineno = 792;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    if ( self->m_closure[0] == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "assigned" );
        exception_tb = NULL;

        exception_lineno = 792;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    if ( self->m_closure[1] == NULL )
    {
        tmp_args_element_name_3 = NULL;
    }
    else
    {
        tmp_args_element_name_3 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "updated" );
        exception_tb = NULL;

        exception_lineno = 792;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    frame_3e9ea0da1ed2d504876828428c70d7a6->m_frame.f_lineno = 792;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_called_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 792;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_f;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_3e9ea0da1ed2d504876828428c70d7a6->m_frame.f_lineno = 792;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 792;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_f;
        assert( old != NULL );
        par_f = tmp_assign_source_1;
        Py_DECREF( old );
    }

    if ( self->m_closure[2] == NULL )
    {
        tmp_assattr_name_1 = NULL;
    }
    else
    {
        tmp_assattr_name_1 = PyCell_GET( self->m_closure[2] );
    }

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "wrapped" );
        exception_tb = NULL;

        exception_lineno = 793;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = par_f;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___wrapped__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 793;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e9ea0da1ed2d504876828428c70d7a6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e9ea0da1ed2d504876828428c70d7a6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3e9ea0da1ed2d504876828428c70d7a6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3e9ea0da1ed2d504876828428c70d7a6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3e9ea0da1ed2d504876828428c70d7a6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3e9ea0da1ed2d504876828428c70d7a6,
        type_description_1,
        par_f,
        self->m_closure[2],
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame.
    if ( frame_3e9ea0da1ed2d504876828428c70d7a6 == cache_frame_3e9ea0da1ed2d504876828428c70d7a6 )
    {
        Py_DECREF( frame_3e9ea0da1ed2d504876828428c70d7a6 );
    }
    cache_frame_3e9ea0da1ed2d504876828428c70d7a6 = NULL;

    assertFrameObject( frame_3e9ea0da1ed2d504876828428c70d7a6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_f;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_54_wraps$$$function_1_wrapper );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_f );
    Py_DECREF( par_f );
    par_f = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_f );
    Py_DECREF( par_f );
    par_f = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_54_wraps$$$function_1_wrapper );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_55_with_metaclass( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_meta = PyCell_NEW1( python_pars[ 0 ] );
    struct Nuitka_CellObject *par_bases = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *var_metaclass = NULL;
    PyObject *outline_0_var___module__ = NULL;
    PyObject *outline_0_var___new__ = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_select_metaclass_1__base = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_key_name_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_outline_return_value_2;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_staticmethod_arg_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_type_arg_1;
    static struct Nuitka_FrameObject *cache_frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 = NULL;

    struct Nuitka_FrameObject *frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2;

    static struct Nuitka_FrameObject *cache_frame_d5859882a697794565518db2da165d1f = NULL;

    struct Nuitka_FrameObject *frame_d5859882a697794565518db2da165d1f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;
    tmp_outline_return_value_2 = NULL;

    // Actual function code.
    tmp_assign_source_1 = PyTuple_New( 1 );
    if ( par_meta == NULL )
    {
        tmp_tuple_element_1 = NULL;
    }
    else
    {
        tmp_tuple_element_1 = PyCell_GET( par_meta );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "meta" );
        exception_tb = NULL;



        goto function_exception_exit;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_1, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases == NULL );
    tmp_class_creation_1__bases = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d5859882a697794565518db2da165d1f, codeobj_d5859882a697794565518db2da165d1f, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d5859882a697794565518db2da165d1f = cache_frame_d5859882a697794565518db2da165d1f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d5859882a697794565518db2da165d1f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d5859882a697794565518db2da165d1f ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_assign_source_3 = const_str_plain_six;
    assert( outline_0_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_3 );
    outline_0_var___module__ = tmp_assign_source_3;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2, codeobj_7bc6e9ddc831ba5c5b668fc60ab7e9c3, module_six, sizeof(void *)+sizeof(void *) );
    frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 = cache_frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_staticmethod_arg_1 = MAKE_FUNCTION_six$$$function_55_with_metaclass$$$function_1___new__( par_bases, par_meta );
    tmp_assign_source_4 = BUILTIN_STATICMETHOD( tmp_staticmethod_arg_1 );
    Py_DECREF( tmp_staticmethod_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 807;
        type_description_2 = "oo";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var___new__ == NULL );
    outline_0_var___new__ = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2,
        type_description_2,
        outline_0_var___module__,
        outline_0_var___new__
    );


    // Release cached frame.
    if ( frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 == cache_frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 )
    {
        Py_DECREF( frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 );
    }
    cache_frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 = NULL;

    assertFrameObject( frame_7bc6e9ddc831ba5c5b668fc60ab7e9c3_2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_1;

    frame_no_exception_1:;

    goto skip_nested_handling_1;
    nested_frame_exit_1:;
    type_description_1 = "cco";
    goto try_except_handler_3;
    skip_nested_handling_1:;
    tmp_outline_return_value_1 = _PyDict_NewPresized( 2 );
    tmp_dict_value_1 = outline_0_var___module__;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = outline_0_var___new__;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain___new__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_3;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_55_with_metaclass );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    CHECK_OBJECT( (PyObject *)outline_0_var___module__ );
    Py_DECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___new__ );
    Py_DECREF( outline_0_var___new__ );
    outline_0_var___new__ = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_0_var___module__ );
    Py_DECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto outline_exception_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_55_with_metaclass );
    return NULL;
    outline_exception_1:;
    exception_lineno = 805;
    goto try_except_handler_2;
    outline_result_1:;
    tmp_assign_source_2 = tmp_outline_return_value_1;
    assert( tmp_class_creation_1__class_dict == NULL );
    tmp_class_creation_1__class_dict = tmp_assign_source_2;

    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_compare_right_1 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_dict_name_1 );
    tmp_key_name_1 = const_str_plain___metaclass__;
    tmp_assign_source_5 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        type_description_1 = "cco";
        goto try_except_handler_2;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_subscribed_name_1 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = const_int_0;
    tmp_assign_source_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        type_description_1 = "cco";
        goto try_except_handler_2;
    }
    assert( tmp_select_metaclass_1__base == NULL );
    tmp_select_metaclass_1__base = tmp_assign_source_6;

    // Tried code:
    // Tried code:
    tmp_source_name_1 = tmp_select_metaclass_1__base;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_outline_return_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_1 );
    if ( tmp_outline_return_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        type_description_1 = "cco";
        goto try_except_handler_5;
    }
    goto try_return_handler_4;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_55_with_metaclass );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_2 );
    Py_XDECREF( exception_keeper_value_2 );
    Py_XDECREF( exception_keeper_tb_2 );
    tmp_type_arg_1 = tmp_select_metaclass_1__base;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_outline_return_value_2 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_outline_return_value_2 != NULL );
    goto try_return_handler_4;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_55_with_metaclass );
    return NULL;
    // Return handler code:
    try_return_handler_4:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_1__base );
    Py_DECREF( tmp_select_metaclass_1__base );
    tmp_select_metaclass_1__base = NULL;

    goto outline_result_2;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_1__base );
    Py_DECREF( tmp_select_metaclass_1__base );
    tmp_select_metaclass_1__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_55_with_metaclass );
    return NULL;
    outline_result_2:;
    tmp_assign_source_5 = tmp_outline_return_value_2;
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_5;

    tmp_called_name_1 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_called_name_1 );
    tmp_args_element_name_1 = const_str_plain_metaclass;
    tmp_args_element_name_2 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_args_element_name_2 );
    tmp_args_element_name_3 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_d5859882a697794565518db2da165d1f->m_frame.f_lineno = 805;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        type_description_1 = "cco";
        goto try_except_handler_2;
    }
    assert( tmp_class_creation_1__class == NULL );
    tmp_class_creation_1__class = tmp_assign_source_7;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    tmp_assign_source_8 = tmp_class_creation_1__class;

    CHECK_OBJECT( tmp_assign_source_8 );
    assert( var_metaclass == NULL );
    Py_INCREF( tmp_assign_source_8 );
    var_metaclass = tmp_assign_source_8;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class );
    Py_DECREF( tmp_class_creation_1__class );
    tmp_class_creation_1__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    tmp_called_instance_1 = (PyObject *)&PyType_Type;
    tmp_args_element_name_4 = var_metaclass;

    CHECK_OBJECT( tmp_args_element_name_4 );
    tmp_args_element_name_5 = const_str_plain_temporary_class;
    tmp_args_element_name_6 = const_tuple_empty;
    tmp_args_element_name_7 = PyDict_New();
    frame_d5859882a697794565518db2da165d1f->m_frame.f_lineno = 809;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_return_value = CALL_METHOD_WITH_ARGS4( tmp_called_instance_1, const_str_plain___new__, call_args );
    }

    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 809;
        type_description_1 = "cco";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5859882a697794565518db2da165d1f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5859882a697794565518db2da165d1f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5859882a697794565518db2da165d1f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d5859882a697794565518db2da165d1f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d5859882a697794565518db2da165d1f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d5859882a697794565518db2da165d1f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d5859882a697794565518db2da165d1f,
        type_description_1,
        par_meta,
        par_bases,
        var_metaclass
    );


    // Release cached frame.
    if ( frame_d5859882a697794565518db2da165d1f == cache_frame_d5859882a697794565518db2da165d1f )
    {
        Py_DECREF( frame_d5859882a697794565518db2da165d1f );
    }
    cache_frame_d5859882a697794565518db2da165d1f = NULL;

    assertFrameObject( frame_d5859882a697794565518db2da165d1f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_55_with_metaclass );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_meta );
    Py_DECREF( par_meta );
    par_meta = NULL;

    CHECK_OBJECT( (PyObject *)par_bases );
    Py_DECREF( par_bases );
    par_bases = NULL;

    CHECK_OBJECT( (PyObject *)var_metaclass );
    Py_DECREF( var_metaclass );
    var_metaclass = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_meta );
    Py_DECREF( par_meta );
    par_meta = NULL;

    CHECK_OBJECT( (PyObject *)par_bases );
    Py_DECREF( par_bases );
    par_bases = NULL;

    Py_XDECREF( var_metaclass );
    var_metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_55_with_metaclass );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_55_with_metaclass$$$function_1___new__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *par_this_bases = python_pars[ 2 ];
    PyObject *par_d = python_pars[ 3 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_212e029da8ecb5a3ddbaf3eb1aed62b3 = NULL;

    struct Nuitka_FrameObject *frame_212e029da8ecb5a3ddbaf3eb1aed62b3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_212e029da8ecb5a3ddbaf3eb1aed62b3, codeobj_212e029da8ecb5a3ddbaf3eb1aed62b3, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_212e029da8ecb5a3ddbaf3eb1aed62b3 = cache_frame_212e029da8ecb5a3ddbaf3eb1aed62b3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_212e029da8ecb5a3ddbaf3eb1aed62b3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_212e029da8ecb5a3ddbaf3eb1aed62b3 ) == 2 ); // Frame stack

    // Framed code:
    if ( self->m_closure[1] == NULL )
    {
        tmp_called_name_1 = NULL;
    }
    else
    {
        tmp_called_name_1 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "meta" );
        exception_tb = NULL;

        exception_lineno = 808;
        type_description_1 = "oooocc";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_name;

    CHECK_OBJECT( tmp_args_element_name_1 );
    if ( self->m_closure[0] == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "bases" );
        exception_tb = NULL;

        exception_lineno = 808;
        type_description_1 = "oooocc";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = par_d;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_212e029da8ecb5a3ddbaf3eb1aed62b3->m_frame.f_lineno = 808;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 808;
        type_description_1 = "oooocc";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_212e029da8ecb5a3ddbaf3eb1aed62b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_212e029da8ecb5a3ddbaf3eb1aed62b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_212e029da8ecb5a3ddbaf3eb1aed62b3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_212e029da8ecb5a3ddbaf3eb1aed62b3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_212e029da8ecb5a3ddbaf3eb1aed62b3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_212e029da8ecb5a3ddbaf3eb1aed62b3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_212e029da8ecb5a3ddbaf3eb1aed62b3,
        type_description_1,
        par_cls,
        par_name,
        par_this_bases,
        par_d,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_212e029da8ecb5a3ddbaf3eb1aed62b3 == cache_frame_212e029da8ecb5a3ddbaf3eb1aed62b3 )
    {
        Py_DECREF( frame_212e029da8ecb5a3ddbaf3eb1aed62b3 );
    }
    cache_frame_212e029da8ecb5a3ddbaf3eb1aed62b3 = NULL;

    assertFrameObject( frame_212e029da8ecb5a3ddbaf3eb1aed62b3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_55_with_metaclass$$$function_1___new__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_this_bases );
    Py_DECREF( par_this_bases );
    par_this_bases = NULL;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_this_bases );
    Py_DECREF( par_this_bases );
    par_this_bases = NULL;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_55_with_metaclass$$$function_1___new__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_56_add_metaclass( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_metaclass = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *var_wrapper = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_six$$$function_56_add_metaclass$$$function_1_wrapper( par_metaclass );
    assert( var_wrapper == NULL );
    var_wrapper = tmp_assign_source_1;

    // Tried code:
    tmp_return_value = var_wrapper;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_56_add_metaclass );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_metaclass );
    Py_DECREF( par_metaclass );
    par_metaclass = NULL;

    CHECK_OBJECT( (PyObject *)var_wrapper );
    Py_DECREF( var_wrapper );
    var_wrapper = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_56_add_metaclass );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_56_add_metaclass$$$function_1_wrapper( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *var_orig_vars = NULL;
    PyObject *var_slots = NULL;
    PyObject *var_slots_var = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_list_element_1;
    PyObject *tmp_next_source_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_7186e2d64fdf1e2ecddb82b7732e412e = NULL;

    struct Nuitka_FrameObject *frame_7186e2d64fdf1e2ecddb82b7732e412e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7186e2d64fdf1e2ecddb82b7732e412e, codeobj_7186e2d64fdf1e2ecddb82b7732e412e, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_7186e2d64fdf1e2ecddb82b7732e412e = cache_frame_7186e2d64fdf1e2ecddb82b7732e412e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7186e2d64fdf1e2ecddb82b7732e412e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7186e2d64fdf1e2ecddb82b7732e412e ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_cls;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 815;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    frame_7186e2d64fdf1e2ecddb82b7732e412e->m_frame.f_lineno = 815;
    tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_copy );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 815;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    assert( var_orig_vars == NULL );
    var_orig_vars = tmp_assign_source_1;

    tmp_called_instance_2 = var_orig_vars;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_7186e2d64fdf1e2ecddb82b7732e412e->m_frame.f_lineno = 816;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain___slots___tuple, 0 ) );

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 816;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    assert( var_slots == NULL );
    var_slots = tmp_assign_source_2;

    tmp_compare_left_1 = var_slots;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_isinstance_inst_1 = var_slots;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = (PyObject *)&PyString_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 818;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_3 = PyList_New( 1 );
    tmp_list_element_1 = var_slots;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_assign_source_3, 0, tmp_list_element_1 );
    {
        PyObject *old = var_slots;
        assert( old != NULL );
        var_slots = tmp_assign_source_3;
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_iter_arg_1 = var_slots;

    CHECK_OBJECT( tmp_iter_arg_1 );
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 820;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_4;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooc";
            exception_lineno = 820;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_assign_source_6 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = var_slots_var;
        var_slots_var = tmp_assign_source_6;
        Py_INCREF( var_slots_var );
        Py_XDECREF( old );
    }

    tmp_called_instance_3 = var_orig_vars;

    CHECK_OBJECT( tmp_called_instance_3 );
    tmp_args_element_name_1 = var_slots_var;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_7186e2d64fdf1e2ecddb82b7732e412e->m_frame.f_lineno = 821;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_pop, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 821;
        type_description_1 = "ooooc";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 820;
        type_description_1 = "ooooc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_1:;
    tmp_called_instance_4 = var_orig_vars;

    CHECK_OBJECT( tmp_called_instance_4 );
    frame_7186e2d64fdf1e2ecddb82b7732e412e->m_frame.f_lineno = 822;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain___dict___none_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_5 = var_orig_vars;

    CHECK_OBJECT( tmp_called_instance_5 );
    frame_7186e2d64fdf1e2ecddb82b7732e412e->m_frame.f_lineno = 823;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain___weakref___none_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 823;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    if ( self->m_closure[0] == NULL )
    {
        tmp_called_name_1 = NULL;
    }
    else
    {
        tmp_called_name_1 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "metaclass" );
        exception_tb = NULL;

        exception_lineno = 824;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = par_cls;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___name__ );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 824;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = par_cls;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___bases__ );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 824;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = var_orig_vars;

    CHECK_OBJECT( tmp_args_element_name_4 );
    frame_7186e2d64fdf1e2ecddb82b7732e412e->m_frame.f_lineno = 824;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 824;
        type_description_1 = "ooooc";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7186e2d64fdf1e2ecddb82b7732e412e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7186e2d64fdf1e2ecddb82b7732e412e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7186e2d64fdf1e2ecddb82b7732e412e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7186e2d64fdf1e2ecddb82b7732e412e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7186e2d64fdf1e2ecddb82b7732e412e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7186e2d64fdf1e2ecddb82b7732e412e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7186e2d64fdf1e2ecddb82b7732e412e,
        type_description_1,
        par_cls,
        var_orig_vars,
        var_slots,
        var_slots_var,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_7186e2d64fdf1e2ecddb82b7732e412e == cache_frame_7186e2d64fdf1e2ecddb82b7732e412e )
    {
        Py_DECREF( frame_7186e2d64fdf1e2ecddb82b7732e412e );
    }
    cache_frame_7186e2d64fdf1e2ecddb82b7732e412e = NULL;

    assertFrameObject( frame_7186e2d64fdf1e2ecddb82b7732e412e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_56_add_metaclass$$$function_1_wrapper );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)var_orig_vars );
    Py_DECREF( var_orig_vars );
    var_orig_vars = NULL;

    Py_XDECREF( var_slots );
    var_slots = NULL;

    Py_XDECREF( var_slots_var );
    var_slots_var = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    Py_XDECREF( var_orig_vars );
    var_orig_vars = NULL;

    Py_XDECREF( var_slots );
    var_slots = NULL;

    Py_XDECREF( var_slots_var );
    var_slots_var = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_56_add_metaclass$$$function_1_wrapper );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_57_python_2_unicode_compatible( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_klass = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    static struct Nuitka_FrameObject *cache_frame_6430dfb9a9af1b43f86029d80ef94278 = NULL;

    struct Nuitka_FrameObject *frame_6430dfb9a9af1b43f86029d80ef94278;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6430dfb9a9af1b43f86029d80ef94278, codeobj_6430dfb9a9af1b43f86029d80ef94278, module_six, sizeof(void *) );
    frame_6430dfb9a9af1b43f86029d80ef94278 = cache_frame_6430dfb9a9af1b43f86029d80ef94278;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6430dfb9a9af1b43f86029d80ef94278 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6430dfb9a9af1b43f86029d80ef94278 ) == 2 ); // Frame stack

    // Framed code:
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY2 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY2 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "PY2" );
        exception_tb = NULL;

        exception_lineno = 836;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 836;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = const_str_plain___str__;
    tmp_source_name_1 = par_klass;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 837;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_left_name_1 = const_str_digest_4c46721e9886c5db124415a36253d572;
    tmp_source_name_2 = par_klass;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___name__ );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 840;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_6430dfb9a9af1b43f86029d80ef94278->m_frame.f_lineno = 838;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 838;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "o";
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_source_name_3 = par_klass;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___str__ );
    if ( tmp_assattr_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_1 = par_klass;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___unicode__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 841;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    tmp_assattr_name_2 = MAKE_FUNCTION_six$$$function_57_python_2_unicode_compatible$$$function_1_lambda(  );
    tmp_assattr_target_2 = par_klass;

    CHECK_OBJECT( tmp_assattr_target_2 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain___str__, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 842;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6430dfb9a9af1b43f86029d80ef94278 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6430dfb9a9af1b43f86029d80ef94278 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6430dfb9a9af1b43f86029d80ef94278, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6430dfb9a9af1b43f86029d80ef94278->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6430dfb9a9af1b43f86029d80ef94278, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6430dfb9a9af1b43f86029d80ef94278,
        type_description_1,
        par_klass
    );


    // Release cached frame.
    if ( frame_6430dfb9a9af1b43f86029d80ef94278 == cache_frame_6430dfb9a9af1b43f86029d80ef94278 )
    {
        Py_DECREF( frame_6430dfb9a9af1b43f86029d80ef94278 );
    }
    cache_frame_6430dfb9a9af1b43f86029d80ef94278 = NULL;

    assertFrameObject( frame_6430dfb9a9af1b43f86029d80ef94278 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_klass;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_57_python_2_unicode_compatible );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_klass );
    Py_DECREF( par_klass );
    par_klass = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_klass );
    Py_DECREF( par_klass );
    par_klass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_57_python_2_unicode_compatible );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_six$$$function_57_python_2_unicode_compatible$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_2d01c8c62f7eadc46dfe3e6049ce294c = NULL;

    struct Nuitka_FrameObject *frame_2d01c8c62f7eadc46dfe3e6049ce294c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2d01c8c62f7eadc46dfe3e6049ce294c, codeobj_2d01c8c62f7eadc46dfe3e6049ce294c, module_six, sizeof(void *) );
    frame_2d01c8c62f7eadc46dfe3e6049ce294c = cache_frame_2d01c8c62f7eadc46dfe3e6049ce294c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2d01c8c62f7eadc46dfe3e6049ce294c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2d01c8c62f7eadc46dfe3e6049ce294c ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_2 = par_self;

    CHECK_OBJECT( tmp_called_instance_2 );
    frame_2d01c8c62f7eadc46dfe3e6049ce294c->m_frame.f_lineno = 842;
    tmp_called_instance_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain___unicode__ );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 842;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_2d01c8c62f7eadc46dfe3e6049ce294c->m_frame.f_lineno = 842;
    tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 842;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2d01c8c62f7eadc46dfe3e6049ce294c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2d01c8c62f7eadc46dfe3e6049ce294c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2d01c8c62f7eadc46dfe3e6049ce294c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2d01c8c62f7eadc46dfe3e6049ce294c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2d01c8c62f7eadc46dfe3e6049ce294c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2d01c8c62f7eadc46dfe3e6049ce294c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2d01c8c62f7eadc46dfe3e6049ce294c,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_2d01c8c62f7eadc46dfe3e6049ce294c == cache_frame_2d01c8c62f7eadc46dfe3e6049ce294c )
    {
        Py_DECREF( frame_2d01c8c62f7eadc46dfe3e6049ce294c );
    }
    cache_frame_2d01c8c62f7eadc46dfe3e6049ce294c = NULL;

    assertFrameObject( frame_2d01c8c62f7eadc46dfe3e6049ce294c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six$$$function_57_python_2_unicode_compatible$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six$$$function_57_python_2_unicode_compatible$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



static PyObject *MAKE_FUNCTION_six$$$function_10___dir__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_10___dir__,
        const_str_plain___dir__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_616d9876f3af4cfc1d7db66555620415,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_11___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_11___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5827df2c329637d252712bd6500bd634,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_12__resolve(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_12__resolve,
        const_str_plain__resolve,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_223ca60bc5fce3fac077a1a61c01dbd4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_13___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_13___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7cbd18b9265941d83e649d73567a9697,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_14__add_module(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_14__add_module,
        const_str_plain__add_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_9b09d93378923b47b39edb78c81b4b0f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_15__get_module(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_15__get_module,
        const_str_plain__get_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ce3b8d7055c2a9093ba0afea1d4f53f1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_16_find_module( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_16_find_module,
        const_str_plain_find_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_55db8ca424b2ed537862e8f7085e8bd7,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_17___get_module(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_17___get_module,
        const_str_plain___get_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_99688ed32532a080edcbe6bac879751b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_18_load_module(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_18_load_module,
        const_str_plain_load_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_67079f2c7abd66f54cbe40614b6681d2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_19_is_package(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_19_is_package,
        const_str_plain_is_package,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_23530d059692f53665d70992fde87763,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_7cd96a434c5e7c2d0afa70c5bbed7be7,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_1___len__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_1___len__,
        const_str_plain___len__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2e6db5d6ec400d5de968bd32ea38fd98,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_20_get_code(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_20_get_code,
        const_str_plain_get_code,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7d3692fa322283fff7fc592a825c5331,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_36b48fae7858438c9796c3d30c76579f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_21___dir__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_21___dir__,
        const_str_plain___dir__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4c8d1f6c7b43e08e46e45eac50ad593a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_22_add_move(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_22_add_move,
        const_str_plain_add_move,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_878ec1fa8a776be47f00545fd8c9ab7f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_122cdcc1600da4a884855d78ecd7756a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_23_remove_move(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_23_remove_move,
        const_str_plain_remove_move,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c6bd659b4258c1967bc4f0ad6c2d197c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_bc859a90e4d9c0b4fce03f66d37f0cf6,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_24_advance_iterator(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_24_advance_iterator,
        const_str_plain_advance_iterator,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8d8e9c94ecd473a73bc8e3651437ad92,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_25_callable(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_25_callable,
        const_str_plain_callable,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bd300b6b04dc7f69f7c5758977570200,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_26_get_unbound_function(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_26_get_unbound_function,
        const_str_plain_get_unbound_function,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ba190d8cadeb00a08541fed5d70707d8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_27_create_unbound_method(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_27_create_unbound_method,
        const_str_plain_create_unbound_method,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_16b0fc79a268405d99ba50295d950974,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_28_get_unbound_function(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_28_get_unbound_function,
        const_str_plain_get_unbound_function,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_35ff4b0b5307585284b0afe8558ecef5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_29_create_bound_method(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_29_create_bound_method,
        const_str_plain_create_bound_method,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_afd5d6cf2a047b41bd65924864cb6c0f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_2__add_doc(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_2__add_doc,
        const_str_plain__add_doc,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_221c66ab99f4dc7167326f7bfbca840d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_cce73c34157ad7a21f7265310a153ec1,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_30_create_unbound_method(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_30_create_unbound_method,
        const_str_plain_create_unbound_method,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_79c6779e3fb454449f44e98bd42ef495,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_31_next(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_31_next,
        const_str_plain_next,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c5b5224940141cb05016b422fbd150e9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_32_iterkeys(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_32_iterkeys,
        const_str_plain_iterkeys,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_74daf1cc780d7cfae0287bab13809e6d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_33_itervalues(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_33_itervalues,
        const_str_plain_itervalues,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ca6b1ee278e7bf828f5455ab126f4bf0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_34_iteritems(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_34_iteritems,
        const_str_plain_iteritems,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_956d10585a8992f64fd3535d7be1d25a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_35_iterlists(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_35_iterlists,
        const_str_plain_iterlists,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6b1b688468e6dfe2297f350d21b057c4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_36_iterkeys(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_36_iterkeys,
        const_str_plain_iterkeys,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_947efd003a37327b28cc1a12bc2c9c6c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_37_itervalues(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_37_itervalues,
        const_str_plain_itervalues,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6199bef49c0ecb854149560cc5e08e94,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_38_iteritems(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_38_iteritems,
        const_str_plain_iteritems,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0a18b04b2d2f1bd574f509b638c4e675,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_39_iterlists(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_39_iterlists,
        const_str_plain_iterlists,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e232b9d29999a2ee272c22d479cb3a68,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_3__import_module(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_3__import_module,
        const_str_plain__import_module,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_302febdece34d345ec86a4f5d1c47c5a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_1e91aab42d00f04e391d84545f09e2f5,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_40_b(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_40_b,
        const_str_plain_b,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_71093dd7f1aafcb28de56da832ab6ad1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_41_u(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_41_u,
        const_str_plain_u,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d090be8971d637ce194306b6f1e36c17,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_42_b(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_42_b,
        const_str_plain_b,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d5719a0511700e12cc332c9ad4ccc382,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_43_u(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_43_u,
        const_str_plain_u,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0236bcf87338947852b4ce61c23c0266,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_44_byte2int(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_44_byte2int,
        const_str_plain_byte2int,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ac937e65f492690ad9e53f20d9e372a5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_45_indexbytes(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_45_indexbytes,
        const_str_plain_indexbytes,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_014d68be5a8db24df32d574183f5f49d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_46_assertCountEqual(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_46_assertCountEqual,
        const_str_plain_assertCountEqual,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fd514f2e68b32fe792c6f921d95d0b39,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_47_assertRaisesRegex(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_47_assertRaisesRegex,
        const_str_plain_assertRaisesRegex,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_628be6ee0f611c7f3602221f9abb4a1b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_48_assertRegex(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_48_assertRegex,
        const_str_plain_assertRegex,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_08f1bed4c1668099b165cb03efc801eb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_49_reraise( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_49_reraise,
        const_str_plain_reraise,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d6973481fee60ccc011a91b79c3b206e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_4___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_4___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_dd4c5fedf31fa8547ef5ab3e468221fb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_50_exec_( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_50_exec_,
        const_str_plain_exec_,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6ffb9678d28ae8c446eb7643c3d99917,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_52da6974eceb6e05255f92901fc2e2f2,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_51_raise_from(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_51_raise_from,
        const_str_plain_raise_from,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_889df127cc0bad00b1513ee2cc2b70ca,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_52_print_(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_52_print_,
        const_str_plain_print_,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a18b3d9c941686773f576a200d0fddec,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_0e7fae28a2f47cf9bbe813dcd6d34e25,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_52_print_$$$function_1_write( struct Nuitka_CellObject *closure_fp )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_52_print_$$$function_1_write,
        const_str_plain_write,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d6d2b011934f8b975ddc04a7dd97f27d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        1
    );

result->m_closure[0] = closure_fp;
Py_INCREF( result->m_closure[0] );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_53_print_(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_53_print_,
        const_str_plain_print_,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_766b59d84ba3ef66c10a8dfe1cd13090,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_54_wraps( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_54_wraps,
        const_str_plain_wraps,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c2b1ee4e7f76c21f9fdd68096fc385cc,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_54_wraps$$$function_1_wrapper( struct Nuitka_CellObject *closure_assigned, struct Nuitka_CellObject *closure_updated, struct Nuitka_CellObject *closure_wrapped )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_54_wraps$$$function_1_wrapper,
        const_str_plain_wrapper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3e9ea0da1ed2d504876828428c70d7a6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        3
    );

result->m_closure[0] = closure_assigned;
Py_INCREF( result->m_closure[0] );
result->m_closure[1] = closure_updated;
Py_INCREF( result->m_closure[1] );
result->m_closure[2] = closure_wrapped;
Py_INCREF( result->m_closure[2] );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_55_with_metaclass(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_55_with_metaclass,
        const_str_plain_with_metaclass,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d5859882a697794565518db2da165d1f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_1d2e267f2ccdeb84fbf4cb4191414e9f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_55_with_metaclass$$$function_1___new__( struct Nuitka_CellObject *closure_bases, struct Nuitka_CellObject *closure_meta )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_55_with_metaclass$$$function_1___new__,
        const_str_plain___new__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_212e029da8ecb5a3ddbaf3eb1aed62b3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        2
    );

result->m_closure[0] = closure_bases;
Py_INCREF( result->m_closure[0] );
result->m_closure[1] = closure_meta;
Py_INCREF( result->m_closure[1] );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_56_add_metaclass(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_56_add_metaclass,
        const_str_plain_add_metaclass,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_86808ef7fa4cab4b81805da3e49369d9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_af06de2d225df4407b0a0ba06a331ccf,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_56_add_metaclass$$$function_1_wrapper( struct Nuitka_CellObject *closure_metaclass )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_56_add_metaclass$$$function_1_wrapper,
        const_str_plain_wrapper,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7186e2d64fdf1e2ecddb82b7732e412e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        1
    );

result->m_closure[0] = closure_metaclass;
Py_INCREF( result->m_closure[0] );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_57_python_2_unicode_compatible(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_57_python_2_unicode_compatible,
        const_str_plain_python_2_unicode_compatible,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6430dfb9a9af1b43f86029d80ef94278,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        const_str_digest_62c17ddfba14b5f942749b77083b82bc,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_57_python_2_unicode_compatible$$$function_1_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_57_python_2_unicode_compatible$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2d01c8c62f7eadc46dfe3e6049ce294c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_5___get__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_5___get__,
        const_str_plain___get__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a6fe0eb949e5f19233e885c9c93afaa2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_6___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_6___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7fb6829fa3af848d3c7de688bfe1f617,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_7__resolve(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_7__resolve,
        const_str_plain__resolve,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_62f3167cc8599d3657f39fb60354166f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_8___getattr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_8___getattr__,
        const_str_plain___getattr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_cc3206bce9770c90b92c851890974ebf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_six$$$function_9___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_six$$$function_9___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bb743333569859f6cef2c7b7f23996b0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_six,
        Py_None,
        0
    );


    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_six =
{
    PyModuleDef_HEAD_INIT,
    "six",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#if PYTHON_VERSION >= 300
extern PyObject *metapath_based_loader;
#endif
#if PYTHON_VERSION >= 330
extern PyObject *const_str_plain___loader__;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( six )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_six );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("six: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("six: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initsix" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_six = Py_InitModule4(
        "six",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_six = PyModule_Create( &mdef_six );
#endif

    moduledict_six = MODULE_DICT( module_six );

    CHECK_OBJECT( module_six );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_plain_six, module_six );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 330
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___loader__, metapath_based_loader );
#endif

    // Temp variables if any
    PyObject *outline_0_var___module__ = NULL;
    PyObject *outline_0_var___len__ = NULL;
    PyObject *outline_1_var___module__ = NULL;
    PyObject *outline_1_var___init__ = NULL;
    PyObject *outline_1_var___get__ = NULL;
    PyObject *outline_2_var___module__ = NULL;
    PyObject *outline_2_var___init__ = NULL;
    PyObject *outline_2_var__resolve = NULL;
    PyObject *outline_2_var___getattr__ = NULL;
    PyObject *outline_3_var___module__ = NULL;
    PyObject *outline_3_var___init__ = NULL;
    PyObject *outline_3_var___dir__ = NULL;
    PyObject *outline_3_var__moved_attributes = NULL;
    PyObject *outline_4_var___module__ = NULL;
    PyObject *outline_4_var___init__ = NULL;
    PyObject *outline_4_var__resolve = NULL;
    PyObject *outline_5_var___module__ = NULL;
    PyObject *outline_5_var___doc__ = NULL;
    PyObject *outline_5_var___init__ = NULL;
    PyObject *outline_5_var__add_module = NULL;
    PyObject *outline_5_var__get_module = NULL;
    PyObject *outline_5_var_find_module = NULL;
    PyObject *outline_5_var__SixMetaPathImporter__get_module = NULL;
    PyObject *outline_5_var_load_module = NULL;
    PyObject *outline_5_var_is_package = NULL;
    PyObject *outline_5_var_get_code = NULL;
    PyObject *outline_5_var_get_source = NULL;
    PyObject *outline_6_var___module__ = NULL;
    PyObject *outline_6_var___doc__ = NULL;
    PyObject *outline_6_var___path__ = NULL;
    PyObject *outline_7_var___module__ = NULL;
    PyObject *outline_7_var___doc__ = NULL;
    PyObject *outline_8_var___module__ = NULL;
    PyObject *outline_8_var___doc__ = NULL;
    PyObject *outline_9_var___module__ = NULL;
    PyObject *outline_9_var___doc__ = NULL;
    PyObject *outline_10_var___module__ = NULL;
    PyObject *outline_10_var___doc__ = NULL;
    PyObject *outline_11_var___module__ = NULL;
    PyObject *outline_11_var___doc__ = NULL;
    PyObject *outline_12_var___module__ = NULL;
    PyObject *outline_12_var___doc__ = NULL;
    PyObject *outline_12_var___path__ = NULL;
    PyObject *outline_12_var_parse = NULL;
    PyObject *outline_12_var_error = NULL;
    PyObject *outline_12_var_request = NULL;
    PyObject *outline_12_var_response = NULL;
    PyObject *outline_12_var_robotparser = NULL;
    PyObject *outline_12_var___dir__ = NULL;
    PyObject *outline_13_var___module__ = NULL;
    PyObject *outline_13_var_next = NULL;
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__class = NULL;
    PyObject *tmp_class_creation_10__class_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__class = NULL;
    PyObject *tmp_class_creation_11__class_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__class = NULL;
    PyObject *tmp_class_creation_12__class_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__class = NULL;
    PyObject *tmp_class_creation_13__class_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_14__class = NULL;
    PyObject *tmp_class_creation_14__class_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_2__class = NULL;
    PyObject *tmp_class_creation_2__class_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class = NULL;
    PyObject *tmp_class_creation_3__class_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__class = NULL;
    PyObject *tmp_class_creation_4__class_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class = NULL;
    PyObject *tmp_class_creation_5__class_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_6__class = NULL;
    PyObject *tmp_class_creation_6__class_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__class = NULL;
    PyObject *tmp_class_creation_7__class_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__class = NULL;
    PyObject *tmp_class_creation_8__class_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__class = NULL;
    PyObject *tmp_class_creation_9__class_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *tmp_for_loop_7__for_iterator = NULL;
    PyObject *tmp_for_loop_7__iter_value = NULL;
    PyObject *tmp_select_metaclass_10__base = NULL;
    PyObject *tmp_select_metaclass_11__base = NULL;
    PyObject *tmp_select_metaclass_12__base = NULL;
    PyObject *tmp_select_metaclass_13__base = NULL;
    PyObject *tmp_select_metaclass_3__base = NULL;
    PyObject *tmp_select_metaclass_4__base = NULL;
    PyObject *tmp_select_metaclass_5__base = NULL;
    PyObject *tmp_select_metaclass_7__base = NULL;
    PyObject *tmp_select_metaclass_8__base = NULL;
    PyObject *tmp_select_metaclass_9__base = NULL;
    PyObject *tmp_try_except_1__unhandled_indicator = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_element_name_61;
    PyObject *tmp_args_element_name_62;
    PyObject *tmp_args_element_name_63;
    PyObject *tmp_args_element_name_64;
    PyObject *tmp_args_element_name_65;
    PyObject *tmp_args_element_name_66;
    PyObject *tmp_args_element_name_67;
    PyObject *tmp_args_element_name_68;
    PyObject *tmp_args_element_name_69;
    PyObject *tmp_args_element_name_70;
    PyObject *tmp_args_element_name_71;
    PyObject *tmp_args_element_name_72;
    PyObject *tmp_args_element_name_73;
    PyObject *tmp_args_element_name_74;
    PyObject *tmp_args_element_name_75;
    PyObject *tmp_args_element_name_76;
    PyObject *tmp_args_element_name_77;
    PyObject *tmp_args_element_name_78;
    PyObject *tmp_args_element_name_79;
    PyObject *tmp_args_element_name_80;
    PyObject *tmp_args_element_name_81;
    PyObject *tmp_args_element_name_82;
    PyObject *tmp_args_element_name_83;
    PyObject *tmp_args_element_name_84;
    PyObject *tmp_args_element_name_85;
    PyObject *tmp_args_element_name_86;
    PyObject *tmp_args_element_name_87;
    PyObject *tmp_args_element_name_88;
    PyObject *tmp_args_element_name_89;
    PyObject *tmp_args_element_name_90;
    PyObject *tmp_args_element_name_91;
    PyObject *tmp_args_element_name_92;
    PyObject *tmp_args_element_name_93;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_name_6;
    PyObject *tmp_assattr_name_7;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assattr_target_6;
    PyObject *tmp_assattr_target_7;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_assign_source_150;
    PyObject *tmp_assign_source_151;
    PyObject *tmp_assign_source_152;
    PyObject *tmp_assign_source_153;
    PyObject *tmp_assign_source_154;
    PyObject *tmp_assign_source_155;
    PyObject *tmp_assign_source_156;
    PyObject *tmp_assign_source_157;
    PyObject *tmp_assign_source_158;
    PyObject *tmp_assign_source_159;
    PyObject *tmp_assign_source_160;
    PyObject *tmp_assign_source_161;
    PyObject *tmp_assign_source_162;
    PyObject *tmp_assign_source_163;
    PyObject *tmp_assign_source_164;
    PyObject *tmp_assign_source_165;
    PyObject *tmp_assign_source_166;
    PyObject *tmp_assign_source_167;
    PyObject *tmp_assign_source_168;
    PyObject *tmp_assign_source_169;
    PyObject *tmp_assign_source_170;
    PyObject *tmp_assign_source_171;
    PyObject *tmp_assign_source_172;
    PyObject *tmp_assign_source_173;
    PyObject *tmp_assign_source_174;
    PyObject *tmp_assign_source_175;
    PyObject *tmp_assign_source_176;
    PyObject *tmp_assign_source_177;
    PyObject *tmp_assign_source_178;
    PyObject *tmp_assign_source_179;
    PyObject *tmp_assign_source_180;
    PyObject *tmp_assign_source_181;
    PyObject *tmp_assign_source_182;
    PyObject *tmp_assign_source_183;
    PyObject *tmp_assign_source_184;
    PyObject *tmp_assign_source_185;
    PyObject *tmp_assign_source_186;
    PyObject *tmp_assign_source_187;
    PyObject *tmp_assign_source_188;
    PyObject *tmp_assign_source_189;
    PyObject *tmp_assign_source_190;
    PyObject *tmp_assign_source_191;
    PyObject *tmp_assign_source_192;
    PyObject *tmp_assign_source_193;
    PyObject *tmp_assign_source_194;
    PyObject *tmp_assign_source_195;
    PyObject *tmp_assign_source_196;
    PyObject *tmp_assign_source_197;
    PyObject *tmp_assign_source_198;
    PyObject *tmp_assign_source_199;
    PyObject *tmp_assign_source_200;
    PyObject *tmp_assign_source_201;
    PyObject *tmp_assign_source_202;
    PyObject *tmp_assign_source_203;
    PyObject *tmp_assign_source_204;
    PyObject *tmp_assign_source_205;
    PyObject *tmp_assign_source_206;
    PyObject *tmp_assign_source_207;
    PyObject *tmp_assign_source_208;
    PyObject *tmp_assign_source_209;
    PyObject *tmp_assign_source_210;
    PyObject *tmp_assign_source_211;
    PyObject *tmp_assign_source_212;
    PyObject *tmp_assign_source_213;
    PyObject *tmp_assign_source_214;
    PyObject *tmp_assign_source_215;
    PyObject *tmp_assign_source_216;
    PyObject *tmp_assign_source_217;
    PyObject *tmp_assign_source_218;
    PyObject *tmp_assign_source_219;
    PyObject *tmp_assign_source_220;
    PyObject *tmp_assign_source_221;
    PyObject *tmp_assign_source_222;
    PyObject *tmp_assign_source_223;
    PyObject *tmp_assign_source_224;
    PyObject *tmp_assign_source_225;
    PyObject *tmp_assign_source_226;
    PyObject *tmp_assign_source_227;
    PyObject *tmp_assign_source_228;
    PyObject *tmp_assign_source_229;
    PyObject *tmp_assign_source_230;
    PyObject *tmp_assign_source_231;
    PyObject *tmp_assign_source_232;
    PyObject *tmp_assign_source_233;
    PyObject *tmp_assign_source_234;
    PyObject *tmp_assign_source_235;
    PyObject *tmp_assign_source_236;
    PyObject *tmp_assign_source_237;
    PyObject *tmp_assign_source_238;
    PyObject *tmp_assign_source_239;
    PyObject *tmp_assign_source_240;
    PyObject *tmp_assign_source_241;
    PyObject *tmp_assign_source_242;
    PyObject *tmp_assign_source_243;
    PyObject *tmp_assign_source_244;
    PyObject *tmp_assign_source_245;
    PyObject *tmp_assign_source_246;
    PyObject *tmp_assign_source_247;
    PyObject *tmp_assign_source_248;
    PyObject *tmp_assign_source_249;
    PyObject *tmp_assign_source_250;
    PyObject *tmp_assign_source_251;
    PyObject *tmp_assign_source_252;
    PyObject *tmp_assign_source_253;
    PyObject *tmp_assign_source_254;
    PyObject *tmp_assign_source_255;
    PyObject *tmp_assign_source_256;
    PyObject *tmp_assign_source_257;
    PyObject *tmp_assign_source_258;
    PyObject *tmp_assign_source_259;
    PyObject *tmp_assign_source_260;
    PyObject *tmp_assign_source_261;
    PyObject *tmp_assign_source_262;
    PyObject *tmp_assign_source_263;
    PyObject *tmp_assign_source_264;
    PyObject *tmp_assign_source_265;
    PyObject *tmp_assign_source_266;
    PyObject *tmp_assign_source_267;
    PyObject *tmp_assign_source_268;
    PyObject *tmp_assign_source_269;
    PyObject *tmp_assign_source_270;
    PyObject *tmp_assign_source_271;
    PyObject *tmp_assign_source_272;
    PyObject *tmp_assign_source_273;
    PyObject *tmp_assign_source_274;
    PyObject *tmp_assign_source_275;
    PyObject *tmp_assign_source_276;
    PyObject *tmp_assign_source_277;
    PyObject *tmp_assign_source_278;
    PyObject *tmp_assign_source_279;
    PyObject *tmp_assign_source_280;
    PyObject *tmp_assign_source_281;
    PyObject *tmp_assign_source_282;
    PyObject *tmp_assign_source_283;
    PyObject *tmp_assign_source_284;
    PyObject *tmp_assign_source_285;
    PyObject *tmp_assign_source_286;
    PyObject *tmp_assign_source_287;
    PyObject *tmp_assign_source_288;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_called_name_51;
    PyObject *tmp_called_name_52;
    PyObject *tmp_called_name_53;
    PyObject *tmp_called_name_54;
    PyObject *tmp_called_name_55;
    PyObject *tmp_called_name_56;
    PyObject *tmp_called_name_57;
    PyObject *tmp_called_name_58;
    PyObject *tmp_called_name_59;
    PyObject *tmp_called_name_60;
    PyObject *tmp_called_name_61;
    PyObject *tmp_called_name_62;
    PyObject *tmp_called_name_63;
    PyObject *tmp_called_name_64;
    PyObject *tmp_called_name_65;
    PyObject *tmp_called_name_66;
    PyObject *tmp_called_name_67;
    PyObject *tmp_called_name_68;
    PyObject *tmp_called_name_69;
    PyObject *tmp_called_name_70;
    PyObject *tmp_called_name_71;
    PyObject *tmp_called_name_72;
    PyObject *tmp_called_name_73;
    PyObject *tmp_called_name_74;
    PyObject *tmp_called_name_75;
    PyObject *tmp_called_name_76;
    PyObject *tmp_called_name_77;
    PyObject *tmp_called_name_78;
    PyObject *tmp_called_name_79;
    PyObject *tmp_called_name_80;
    PyObject *tmp_called_name_81;
    PyObject *tmp_called_name_82;
    PyObject *tmp_called_name_83;
    PyObject *tmp_called_name_84;
    PyObject *tmp_called_name_85;
    PyObject *tmp_called_name_86;
    PyObject *tmp_called_name_87;
    PyObject *tmp_called_name_88;
    PyObject *tmp_called_name_89;
    PyObject *tmp_called_name_90;
    PyObject *tmp_called_name_91;
    PyObject *tmp_called_name_92;
    PyObject *tmp_called_name_93;
    PyObject *tmp_called_name_94;
    PyObject *tmp_called_name_95;
    PyObject *tmp_called_name_96;
    PyObject *tmp_called_name_97;
    PyObject *tmp_called_name_98;
    PyObject *tmp_called_name_99;
    PyObject *tmp_called_name_100;
    PyObject *tmp_called_name_101;
    PyObject *tmp_called_name_102;
    PyObject *tmp_called_name_103;
    PyObject *tmp_called_name_104;
    PyObject *tmp_called_name_105;
    PyObject *tmp_called_name_106;
    PyObject *tmp_called_name_107;
    PyObject *tmp_called_name_108;
    PyObject *tmp_called_name_109;
    PyObject *tmp_called_name_110;
    PyObject *tmp_called_name_111;
    PyObject *tmp_called_name_112;
    PyObject *tmp_called_name_113;
    PyObject *tmp_called_name_114;
    PyObject *tmp_called_name_115;
    PyObject *tmp_called_name_116;
    PyObject *tmp_called_name_117;
    PyObject *tmp_called_name_118;
    PyObject *tmp_called_name_119;
    PyObject *tmp_called_name_120;
    PyObject *tmp_called_name_121;
    PyObject *tmp_called_name_122;
    PyObject *tmp_called_name_123;
    PyObject *tmp_called_name_124;
    PyObject *tmp_called_name_125;
    PyObject *tmp_called_name_126;
    PyObject *tmp_called_name_127;
    PyObject *tmp_called_name_128;
    PyObject *tmp_called_name_129;
    PyObject *tmp_called_name_130;
    PyObject *tmp_called_name_131;
    PyObject *tmp_called_name_132;
    PyObject *tmp_called_name_133;
    PyObject *tmp_called_name_134;
    PyObject *tmp_called_name_135;
    PyObject *tmp_called_name_136;
    PyObject *tmp_called_name_137;
    PyObject *tmp_called_name_138;
    PyObject *tmp_called_name_139;
    PyObject *tmp_called_name_140;
    PyObject *tmp_called_name_141;
    PyObject *tmp_called_name_142;
    PyObject *tmp_called_name_143;
    PyObject *tmp_called_name_144;
    PyObject *tmp_called_name_145;
    PyObject *tmp_called_name_146;
    PyObject *tmp_called_name_147;
    PyObject *tmp_called_name_148;
    PyObject *tmp_called_name_149;
    PyObject *tmp_called_name_150;
    PyObject *tmp_called_name_151;
    PyObject *tmp_called_name_152;
    PyObject *tmp_called_name_153;
    PyObject *tmp_called_name_154;
    PyObject *tmp_called_name_155;
    PyObject *tmp_called_name_156;
    PyObject *tmp_called_name_157;
    PyObject *tmp_called_name_158;
    PyObject *tmp_called_name_159;
    PyObject *tmp_called_name_160;
    PyObject *tmp_called_name_161;
    PyObject *tmp_called_name_162;
    PyObject *tmp_called_name_163;
    PyObject *tmp_called_name_164;
    PyObject *tmp_called_name_165;
    PyObject *tmp_called_name_166;
    PyObject *tmp_called_name_167;
    PyObject *tmp_called_name_168;
    PyObject *tmp_called_name_169;
    PyObject *tmp_called_name_170;
    PyObject *tmp_called_name_171;
    PyObject *tmp_called_name_172;
    PyObject *tmp_called_name_173;
    PyObject *tmp_called_name_174;
    PyObject *tmp_called_name_175;
    PyObject *tmp_called_name_176;
    PyObject *tmp_called_name_177;
    PyObject *tmp_called_name_178;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Gt_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_Lt_1;
    int tmp_cmp_Lt_2;
    int tmp_cmp_LtE_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_left_23;
    PyObject *tmp_compare_left_24;
    PyObject *tmp_compare_left_25;
    PyObject *tmp_compare_left_26;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compare_right_23;
    PyObject *tmp_compare_right_24;
    PyObject *tmp_compare_right_25;
    PyObject *tmp_compare_right_26;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_defaults_3;
    PyObject *tmp_defaults_4;
    PyObject *tmp_defaults_5;
    PyObject *tmp_defaults_6;
    PyObject *tmp_delsubscr_subscript_1;
    PyObject *tmp_delsubscr_target_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_key_14;
    PyObject *tmp_dict_key_15;
    PyObject *tmp_dict_key_16;
    PyObject *tmp_dict_key_17;
    PyObject *tmp_dict_key_18;
    PyObject *tmp_dict_key_19;
    PyObject *tmp_dict_key_20;
    PyObject *tmp_dict_key_21;
    PyObject *tmp_dict_key_22;
    PyObject *tmp_dict_key_23;
    PyObject *tmp_dict_key_24;
    PyObject *tmp_dict_key_25;
    PyObject *tmp_dict_key_26;
    PyObject *tmp_dict_key_27;
    PyObject *tmp_dict_key_28;
    PyObject *tmp_dict_key_29;
    PyObject *tmp_dict_key_30;
    PyObject *tmp_dict_key_31;
    PyObject *tmp_dict_key_32;
    PyObject *tmp_dict_key_33;
    PyObject *tmp_dict_key_34;
    PyObject *tmp_dict_key_35;
    PyObject *tmp_dict_key_36;
    PyObject *tmp_dict_key_37;
    PyObject *tmp_dict_key_38;
    PyObject *tmp_dict_key_39;
    PyObject *tmp_dict_key_40;
    PyObject *tmp_dict_key_41;
    PyObject *tmp_dict_key_42;
    PyObject *tmp_dict_key_43;
    PyObject *tmp_dict_key_44;
    PyObject *tmp_dict_key_45;
    PyObject *tmp_dict_key_46;
    PyObject *tmp_dict_key_47;
    PyObject *tmp_dict_key_48;
    PyObject *tmp_dict_key_49;
    PyObject *tmp_dict_key_50;
    PyObject *tmp_dict_key_51;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_name_2;
    PyObject *tmp_dict_name_3;
    PyObject *tmp_dict_name_4;
    PyObject *tmp_dict_name_5;
    PyObject *tmp_dict_name_6;
    PyObject *tmp_dict_name_7;
    PyObject *tmp_dict_name_8;
    PyObject *tmp_dict_name_9;
    PyObject *tmp_dict_name_10;
    PyObject *tmp_dict_name_11;
    PyObject *tmp_dict_name_12;
    PyObject *tmp_dict_name_13;
    PyObject *tmp_dict_name_14;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_dict_value_14;
    PyObject *tmp_dict_value_15;
    PyObject *tmp_dict_value_16;
    PyObject *tmp_dict_value_17;
    PyObject *tmp_dict_value_18;
    PyObject *tmp_dict_value_19;
    PyObject *tmp_dict_value_20;
    PyObject *tmp_dict_value_21;
    PyObject *tmp_dict_value_22;
    PyObject *tmp_dict_value_23;
    PyObject *tmp_dict_value_24;
    PyObject *tmp_dict_value_25;
    PyObject *tmp_dict_value_26;
    PyObject *tmp_dict_value_27;
    PyObject *tmp_dict_value_28;
    PyObject *tmp_dict_value_29;
    PyObject *tmp_dict_value_30;
    PyObject *tmp_dict_value_31;
    PyObject *tmp_dict_value_32;
    PyObject *tmp_dict_value_33;
    PyObject *tmp_dict_value_34;
    PyObject *tmp_dict_value_35;
    PyObject *tmp_dict_value_36;
    PyObject *tmp_dict_value_37;
    PyObject *tmp_dict_value_38;
    PyObject *tmp_dict_value_39;
    PyObject *tmp_dict_value_40;
    PyObject *tmp_dict_value_41;
    PyObject *tmp_dict_value_42;
    PyObject *tmp_dict_value_43;
    PyObject *tmp_dict_value_44;
    PyObject *tmp_dict_value_45;
    PyObject *tmp_dict_value_46;
    PyObject *tmp_dict_value_47;
    PyObject *tmp_dict_value_48;
    PyObject *tmp_dict_value_49;
    PyObject *tmp_dict_value_50;
    PyObject *tmp_dict_value_51;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    int tmp_exc_match_exception_match_3;
    PyObject *tmp_fromlist_name_1;
    PyObject *tmp_fromlist_name_2;
    PyObject *tmp_fromlist_name_3;
    PyObject *tmp_fromlist_name_4;
    PyObject *tmp_fromlist_name_5;
    PyObject *tmp_fromlist_name_6;
    PyObject *tmp_fromlist_name_7;
    PyObject *tmp_fromlist_name_8;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_attr_2;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_getattr_target_2;
    PyObject *tmp_globals_name_1;
    PyObject *tmp_globals_name_2;
    PyObject *tmp_globals_name_3;
    PyObject *tmp_globals_name_4;
    PyObject *tmp_globals_name_5;
    PyObject *tmp_globals_name_6;
    PyObject *tmp_globals_name_7;
    PyObject *tmp_globals_name_8;
    PyObject *tmp_import_name_from_1;
    bool tmp_is_1;
    bool tmp_is_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_key_name_1;
    PyObject *tmp_key_name_2;
    PyObject *tmp_key_name_3;
    PyObject *tmp_key_name_4;
    PyObject *tmp_key_name_5;
    PyObject *tmp_key_name_6;
    PyObject *tmp_key_name_7;
    PyObject *tmp_key_name_8;
    PyObject *tmp_key_name_9;
    PyObject *tmp_key_name_10;
    PyObject *tmp_key_name_11;
    PyObject *tmp_key_name_12;
    PyObject *tmp_key_name_13;
    PyObject *tmp_key_name_14;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_level_name_1;
    PyObject *tmp_level_name_2;
    PyObject *tmp_level_name_3;
    PyObject *tmp_level_name_4;
    PyObject *tmp_level_name_5;
    PyObject *tmp_level_name_6;
    PyObject *tmp_level_name_7;
    PyObject *tmp_level_name_8;
    PyObject *tmp_list_element_1;
    PyObject *tmp_list_element_2;
    PyObject *tmp_list_element_3;
    PyObject *tmp_list_element_4;
    PyObject *tmp_list_element_5;
    PyObject *tmp_list_element_6;
    PyObject *tmp_list_element_7;
    PyObject *tmp_locals_name_1;
    PyObject *tmp_locals_name_2;
    PyObject *tmp_locals_name_3;
    PyObject *tmp_locals_name_4;
    PyObject *tmp_locals_name_5;
    PyObject *tmp_locals_name_6;
    PyObject *tmp_locals_name_7;
    PyObject *tmp_locals_name_8;
    PyObject *tmp_name_name_1;
    PyObject *tmp_name_name_2;
    PyObject *tmp_name_name_3;
    PyObject *tmp_name_name_4;
    PyObject *tmp_name_name_5;
    PyObject *tmp_name_name_6;
    PyObject *tmp_name_name_7;
    PyObject *tmp_name_name_8;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_outline_return_value_2;
    PyObject *tmp_outline_return_value_3;
    PyObject *tmp_outline_return_value_4;
    PyObject *tmp_outline_return_value_5;
    PyObject *tmp_outline_return_value_6;
    PyObject *tmp_outline_return_value_7;
    PyObject *tmp_outline_return_value_8;
    PyObject *tmp_outline_return_value_9;
    PyObject *tmp_outline_return_value_10;
    PyObject *tmp_outline_return_value_11;
    PyObject *tmp_outline_return_value_12;
    PyObject *tmp_outline_return_value_13;
    PyObject *tmp_outline_return_value_14;
    PyObject *tmp_outline_return_value_15;
    PyObject *tmp_outline_return_value_16;
    PyObject *tmp_outline_return_value_17;
    PyObject *tmp_outline_return_value_18;
    PyObject *tmp_outline_return_value_19;
    PyObject *tmp_outline_return_value_20;
    PyObject *tmp_outline_return_value_21;
    PyObject *tmp_outline_return_value_22;
    PyObject *tmp_outline_return_value_23;
    PyObject *tmp_outline_return_value_24;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_attr_2;
    PyObject *tmp_setattr_attr_3;
    PyObject *tmp_setattr_attr_4;
    PyObject *tmp_setattr_attr_5;
    PyObject *tmp_setattr_attr_6;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_target_2;
    PyObject *tmp_setattr_target_3;
    PyObject *tmp_setattr_target_4;
    PyObject *tmp_setattr_target_5;
    PyObject *tmp_setattr_target_6;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_setattr_value_2;
    PyObject *tmp_setattr_value_3;
    PyObject *tmp_setattr_value_4;
    PyObject *tmp_setattr_value_5;
    PyObject *tmp_setattr_value_6;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_source_name_54;
    PyObject *tmp_source_name_55;
    PyObject *tmp_source_name_56;
    PyObject *tmp_source_name_57;
    PyObject *tmp_source_name_58;
    PyObject *tmp_source_name_59;
    PyObject *tmp_source_name_60;
    PyObject *tmp_source_name_61;
    PyObject *tmp_source_name_62;
    PyObject *tmp_source_name_63;
    PyObject *tmp_source_name_64;
    PyObject *tmp_source_name_65;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_type_arg_2;
    PyObject *tmp_type_arg_3;
    PyObject *tmp_type_arg_4;
    PyObject *tmp_type_arg_5;
    PyObject *tmp_type_arg_6;
    PyObject *tmp_type_arg_7;
    PyObject *tmp_type_arg_8;
    PyObject *tmp_type_arg_9;
    PyObject *tmp_type_arg_10;
    PyObject *tmp_type_arg_11;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_bd5eb45c4557ae66e67170aba1b94aa0_2 = NULL;

    struct Nuitka_FrameObject *frame_bd5eb45c4557ae66e67170aba1b94aa0_2;

    struct Nuitka_FrameObject *frame_f01c021eb7965a8a0c5072bbbfd8ee24;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    tmp_outline_return_value_1 = NULL;
    tmp_outline_return_value_2 = NULL;
    tmp_outline_return_value_3 = NULL;
    tmp_outline_return_value_4 = NULL;
    tmp_outline_return_value_5 = NULL;
    tmp_outline_return_value_6 = NULL;
    tmp_outline_return_value_7 = NULL;
    tmp_outline_return_value_8 = NULL;
    tmp_outline_return_value_9 = NULL;
    tmp_outline_return_value_10 = NULL;
    tmp_outline_return_value_11 = NULL;
    tmp_outline_return_value_12 = NULL;
    tmp_outline_return_value_13 = NULL;
    tmp_outline_return_value_14 = NULL;
    tmp_outline_return_value_15 = NULL;
    tmp_outline_return_value_16 = NULL;
    tmp_outline_return_value_17 = NULL;
    tmp_outline_return_value_18 = NULL;
    tmp_outline_return_value_19 = NULL;
    tmp_outline_return_value_20 = NULL;
    tmp_outline_return_value_21 = NULL;
    tmp_outline_return_value_22 = NULL;
    tmp_outline_return_value_23 = NULL;
    tmp_outline_return_value_24 = NULL;

    // Module code.
    tmp_assign_source_1 = const_str_digest_97d8b3849ccb4841962c7ac18f0af059;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_a4e649f6214f3135948e9d5aa86ed118;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    tmp_assign_source_3 = Py_None;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_3 );
    // Frame without reuse.
    frame_f01c021eb7965a8a0c5072bbbfd8ee24 = MAKE_MODULE_FRAME( codeobj_f01c021eb7965a8a0c5072bbbfd8ee24, module_six );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_f01c021eb7965a8a0c5072bbbfd8ee24 );
    assert( Py_REFCNT( frame_f01c021eb7965a8a0c5072bbbfd8ee24 ) == 2 );

    // Framed code:
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 23;
    tmp_import_name_from_1 = PyImport_ImportModule("__future__");
    assert( tmp_import_name_from_1 != NULL );
    tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_absolute_import );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 23;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_absolute_import, tmp_assign_source_4 );
    tmp_name_name_1 = const_str_plain_functools;
    tmp_globals_name_1 = (PyObject *)moduledict_six;
    tmp_locals_name_1 = Py_None;
    tmp_fromlist_name_1 = Py_None;
    tmp_level_name_1 = const_int_0;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 25;
    tmp_assign_source_5 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 25;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools, tmp_assign_source_5 );
    tmp_name_name_2 = const_str_plain_itertools;
    tmp_globals_name_2 = (PyObject *)moduledict_six;
    tmp_locals_name_2 = Py_None;
    tmp_fromlist_name_2 = Py_None;
    tmp_level_name_2 = const_int_0;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 26;
    tmp_assign_source_6 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
    assert( tmp_assign_source_6 != NULL );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_itertools, tmp_assign_source_6 );
    tmp_name_name_3 = const_str_plain_operator;
    tmp_globals_name_3 = (PyObject *)moduledict_six;
    tmp_locals_name_3 = Py_None;
    tmp_fromlist_name_3 = Py_None;
    tmp_level_name_3 = const_int_0;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 27;
    tmp_assign_source_7 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
    assert( tmp_assign_source_7 != NULL );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator, tmp_assign_source_7 );
    tmp_name_name_4 = const_str_plain_sys;
    tmp_globals_name_4 = (PyObject *)moduledict_six;
    tmp_locals_name_4 = Py_None;
    tmp_fromlist_name_4 = Py_None;
    tmp_level_name_4 = const_int_0;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 28;
    tmp_assign_source_8 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
    assert( tmp_assign_source_8 != NULL );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_8 );
    tmp_name_name_5 = const_str_plain_types;
    tmp_globals_name_5 = (PyObject *)moduledict_six;
    tmp_locals_name_5 = Py_None;
    tmp_fromlist_name_5 = Py_None;
    tmp_level_name_5 = const_int_0;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 29;
    tmp_assign_source_9 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 29;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_types, tmp_assign_source_9 );
    tmp_assign_source_10 = const_str_digest_8f714300b54df1f07c5ea6ab3e1ef1e0;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___author__, tmp_assign_source_10 );
    tmp_assign_source_11 = const_str_digest_b0187e473195d5f4e7f8d9079ea0b7b3;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___version__, tmp_assign_source_11 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 36;

        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version_info );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;

        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = const_int_0;
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;

        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = const_int_pos_2;
    tmp_assign_source_12 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 36;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY2, tmp_assign_source_12 );
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 37;

        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_version_info );
    if ( tmp_subscribed_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;

        goto frame_exception_exit_1;
    }
    tmp_subscript_name_2 = const_int_0;
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    Py_DECREF( tmp_subscribed_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;

        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_2 = const_int_pos_3;
    tmp_assign_source_13 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 37;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3, tmp_assign_source_13 );
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 2;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 38;

        goto frame_exception_exit_1;
    }

    tmp_slice_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_version_info );
    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 38;

        goto frame_exception_exit_1;
    }
    tmp_compexpr_left_3 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 38;

        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_3 = const_tuple_int_pos_3_int_pos_4_tuple;
    tmp_assign_source_14 = RICH_COMPARE_GE( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 38;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY34, tmp_assign_source_14 );
    tmp_cond_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_1 == NULL ))
    {
        tmp_cond_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 40;

        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 40;

        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_15 = const_tuple_type_str_tuple;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_string_types, tmp_assign_source_15 );
    tmp_assign_source_16 = const_tuple_type_int_tuple;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_integer_types, tmp_assign_source_16 );
    tmp_assign_source_17 = const_tuple_type_type_tuple;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_class_types, tmp_assign_source_17 );
    tmp_assign_source_18 = (PyObject *)&PyString_Type;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_text_type, tmp_assign_source_18 );
    tmp_assign_source_19 = (PyObject *)&PyString_Type;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_binary_type, tmp_assign_source_19 );
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 47;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_20 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_maxsize );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 47;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_20 );
    goto branch_end_1;
    branch_no_1:;
    tmp_assign_source_21 = const_tuple_type_basestring_tuple;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_string_types, tmp_assign_source_21 );
    tmp_assign_source_22 = const_tuple_type_int_type_long_tuple;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_integer_types, tmp_assign_source_22 );
    tmp_assign_source_23 = PyTuple_New( 2 );
    tmp_tuple_element_1 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_23, 0, tmp_tuple_element_1 );
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_23 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 51;

        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_ClassType );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_23 );

        exception_lineno = 51;

        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_assign_source_23, 1, tmp_tuple_element_1 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_class_types, tmp_assign_source_23 );
    tmp_assign_source_24 = (PyObject *)&PyUnicode_Type;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_text_type, tmp_assign_source_24 );
    tmp_assign_source_25 = (PyObject *)&PyString_Type;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_binary_type, tmp_assign_source_25 );
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 55;

        goto frame_exception_exit_1;
    }

    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_platform );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto frame_exception_exit_1;
    }
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 55;
    tmp_cond_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_startswith, &PyTuple_GET_ITEM( const_tuple_str_plain_java_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 55;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_26 = const_int_pos_2147483647;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_26 );
    goto branch_end_2;
    branch_no_2:;
    tmp_assign_source_28 = const_str_plain_six;
    assert( outline_0_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_28 );
    outline_0_var___module__ = tmp_assign_source_28;

    tmp_assign_source_29 = MAKE_FUNCTION_six$$$function_1___len__(  );
    assert( outline_0_var___len__ == NULL );
    outline_0_var___len__ = tmp_assign_source_29;

    // Tried code:
    tmp_outline_return_value_1 = _PyDict_NewPresized( 2 );
    tmp_dict_value_1 = outline_0_var___module__;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_dict_key_1 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_2 = outline_0_var___len__;

    CHECK_OBJECT( tmp_dict_value_2 );
    tmp_dict_key_2 = const_str_plain___len__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)outline_0_var___module__ );
    Py_DECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___len__ );
    Py_DECREF( outline_0_var___len__ );
    outline_0_var___len__ = NULL;

    goto outline_result_1;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_0_var___module__ );
    Py_DECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_0_var___len__ );
    Py_DECREF( outline_0_var___len__ );
    outline_0_var___len__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_1:;
    tmp_assign_source_27 = tmp_outline_return_value_1;
    assert( tmp_class_creation_1__class_dict == NULL );
    tmp_class_creation_1__class_dict = tmp_assign_source_27;

    // Tried code:
    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_compare_right_1 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_dict_name_1 );
    tmp_key_name_1 = const_str_plain___metaclass__;
    tmp_assign_source_30 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;

        goto try_except_handler_2;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_30 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_assign_source_30 );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_30;

    tmp_called_name_1 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_called_name_1 );
    tmp_args_element_name_1 = const_str_plain_X;
    tmp_args_element_name_2 = const_tuple_type_object_tuple;
    tmp_args_element_name_3 = tmp_class_creation_1__class_dict;

    CHECK_OBJECT( tmp_args_element_name_3 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 60;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_assign_source_31 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;

        goto try_except_handler_2;
    }
    assert( tmp_class_creation_1__class == NULL );
    tmp_class_creation_1__class = tmp_assign_source_31;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    tmp_assign_source_32 = tmp_class_creation_1__class;

    CHECK_OBJECT( tmp_assign_source_32 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_X, tmp_assign_source_32 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class );
    Py_DECREF( tmp_class_creation_1__class );
    tmp_class_creation_1__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    tmp_assign_source_33 = Py_True;
    assert( tmp_try_except_1__unhandled_indicator == NULL );
    Py_INCREF( tmp_assign_source_33 );
    tmp_try_except_1__unhandled_indicator = tmp_assign_source_33;

    // Tried code:
    // Tried code:
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_X );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_X );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "X" );
        exception_tb = NULL;

        exception_lineno = 65;

        goto try_except_handler_4;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 65;
    tmp_len_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_len_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;

        goto try_except_handler_4;
    }
    tmp_unused = BUILTIN_LEN( tmp_len_arg_1 );
    Py_DECREF( tmp_len_arg_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;

        goto try_except_handler_4;
    }
    Py_DECREF( tmp_unused );
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    tmp_assign_source_34 = Py_False;
    {
        PyObject *old = tmp_try_except_1__unhandled_indicator;
        assert( old != NULL );
        tmp_try_except_1__unhandled_indicator = tmp_assign_source_34;
        Py_INCREF( tmp_try_except_1__unhandled_indicator );
        Py_DECREF( old );
    }

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_f01c021eb7965a8a0c5072bbbfd8ee24 );
    if ( exception_keeper_tb_2 == NULL )
    {
        exception_keeper_tb_2 = MAKE_TRACEBACK( frame_f01c021eb7965a8a0c5072bbbfd8ee24, exception_keeper_lineno_2 );
    }
    else if ( exception_keeper_lineno_2 != 0 )
    {
        exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_f01c021eb7965a8a0c5072bbbfd8ee24, exception_keeper_lineno_2 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_OverflowError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 66;

        goto try_except_handler_3;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_35 = const_int_pos_2147483647;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_35 );
    goto branch_end_3;
    branch_no_3:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 64;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame) frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = exception_tb->tb_lineno;

    goto try_except_handler_3;
    branch_end_3:;
    goto try_end_2;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_try_except_1__unhandled_indicator );
    Py_DECREF( tmp_try_except_1__unhandled_indicator );
    tmp_try_except_1__unhandled_indicator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    tmp_compare_left_3 = tmp_try_except_1__unhandled_indicator;

    CHECK_OBJECT( tmp_compare_left_3 );
    tmp_compare_right_3 = Py_True;
    tmp_is_1 = ( tmp_compare_left_3 == tmp_compare_right_3 );
    if ( tmp_is_1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_assign_source_36 = const_long_pos_9223372036854775807;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MAXSIZE, tmp_assign_source_36 );
    branch_no_4:;
    CHECK_OBJECT( (PyObject *)tmp_try_except_1__unhandled_indicator );
    Py_DECREF( tmp_try_except_1__unhandled_indicator );
    tmp_try_except_1__unhandled_indicator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_X );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "X" );
        exception_tb = NULL;

        exception_lineno = 72;

        goto frame_exception_exit_1;
    }

    branch_end_2:;
    branch_end_1:;
    tmp_assign_source_37 = MAKE_FUNCTION_six$$$function_2__add_doc(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc, tmp_assign_source_37 );
    tmp_assign_source_38 = MAKE_FUNCTION_six$$$function_3__import_module(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__import_module, tmp_assign_source_38 );
    tmp_assign_source_40 = const_str_plain_six;
    assert( outline_1_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_40 );
    outline_1_var___module__ = tmp_assign_source_40;

    tmp_assign_source_41 = MAKE_FUNCTION_six$$$function_4___init__(  );
    assert( outline_1_var___init__ == NULL );
    outline_1_var___init__ = tmp_assign_source_41;

    tmp_assign_source_42 = MAKE_FUNCTION_six$$$function_5___get__(  );
    assert( outline_1_var___get__ == NULL );
    outline_1_var___get__ = tmp_assign_source_42;

    // Tried code:
    tmp_outline_return_value_2 = _PyDict_NewPresized( 3 );
    tmp_dict_value_3 = outline_1_var___module__;

    CHECK_OBJECT( tmp_dict_value_3 );
    tmp_dict_key_3 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_2, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_4 = outline_1_var___init__;

    CHECK_OBJECT( tmp_dict_value_4 );
    tmp_dict_key_4 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_2, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_5 = outline_1_var___get__;

    CHECK_OBJECT( tmp_dict_value_5 );
    tmp_dict_key_5 = const_str_plain___get__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_2, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_5;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_5:;
    CHECK_OBJECT( (PyObject *)outline_1_var___module__ );
    Py_DECREF( outline_1_var___module__ );
    outline_1_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_1_var___init__ );
    Py_DECREF( outline_1_var___init__ );
    outline_1_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_1_var___get__ );
    Py_DECREF( outline_1_var___get__ );
    outline_1_var___get__ = NULL;

    goto outline_result_2;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_1_var___module__ );
    Py_DECREF( outline_1_var___module__ );
    outline_1_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_1_var___init__ );
    Py_DECREF( outline_1_var___init__ );
    outline_1_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_1_var___get__ );
    Py_DECREF( outline_1_var___get__ );
    outline_1_var___get__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_2:;
    tmp_assign_source_39 = tmp_outline_return_value_2;
    assert( tmp_class_creation_2__class_dict == NULL );
    tmp_class_creation_2__class_dict = tmp_assign_source_39;

    // Tried code:
    tmp_compare_left_4 = const_str_plain___metaclass__;
    tmp_compare_right_4 = tmp_class_creation_2__class_dict;

    CHECK_OBJECT( tmp_compare_right_4 );
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_dict_name_2 = tmp_class_creation_2__class_dict;

    CHECK_OBJECT( tmp_dict_name_2 );
    tmp_key_name_2 = const_str_plain___metaclass__;
    tmp_assign_source_43 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;

        goto try_except_handler_6;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_assign_source_43 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_assign_source_43 );
    condexpr_end_2:;
    assert( tmp_class_creation_2__metaclass == NULL );
    tmp_class_creation_2__metaclass = tmp_assign_source_43;

    tmp_called_name_3 = tmp_class_creation_2__metaclass;

    CHECK_OBJECT( tmp_called_name_3 );
    tmp_args_element_name_4 = const_str_plain__LazyDescr;
    tmp_args_element_name_5 = const_tuple_type_object_tuple;
    tmp_args_element_name_6 = tmp_class_creation_2__class_dict;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 86;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_44 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, call_args );
    }

    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;

        goto try_except_handler_6;
    }
    assert( tmp_class_creation_2__class == NULL );
    tmp_class_creation_2__class = tmp_assign_source_44;

    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_dict );
    Py_DECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    tmp_assign_source_45 = tmp_class_creation_2__class;

    CHECK_OBJECT( tmp_assign_source_45 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyDescr, tmp_assign_source_45 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class );
    Py_DECREF( tmp_class_creation_2__class );
    tmp_class_creation_2__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_dict );
    Py_DECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    // Tried code:
    tmp_assign_source_46 = PyTuple_New( 1 );
    tmp_tuple_element_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyDescr );

    if (unlikely( tmp_tuple_element_2 == NULL ))
    {
        tmp_tuple_element_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyDescr );
    }

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_assign_source_46 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyDescr" );
        exception_tb = NULL;

        exception_lineno = 103;

        goto try_except_handler_7;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assign_source_46, 0, tmp_tuple_element_2 );
    assert( tmp_class_creation_3__bases == NULL );
    tmp_class_creation_3__bases = tmp_assign_source_46;

    tmp_assign_source_48 = const_str_plain_six;
    assert( outline_2_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_48 );
    outline_2_var___module__ = tmp_assign_source_48;

    tmp_defaults_1 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_1 );
    tmp_assign_source_49 = MAKE_FUNCTION_six$$$function_6___init__( tmp_defaults_1 );
    assert( outline_2_var___init__ == NULL );
    outline_2_var___init__ = tmp_assign_source_49;

    tmp_assign_source_50 = MAKE_FUNCTION_six$$$function_7__resolve(  );
    assert( outline_2_var__resolve == NULL );
    outline_2_var__resolve = tmp_assign_source_50;

    tmp_assign_source_51 = MAKE_FUNCTION_six$$$function_8___getattr__(  );
    assert( outline_2_var___getattr__ == NULL );
    outline_2_var___getattr__ = tmp_assign_source_51;

    // Tried code:
    tmp_outline_return_value_3 = _PyDict_NewPresized( 4 );
    tmp_dict_value_6 = outline_2_var___module__;

    CHECK_OBJECT( tmp_dict_value_6 );
    tmp_dict_key_6 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_3, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_7 = outline_2_var___init__;

    CHECK_OBJECT( tmp_dict_value_7 );
    tmp_dict_key_7 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_3, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_8 = outline_2_var__resolve;

    CHECK_OBJECT( tmp_dict_value_8 );
    tmp_dict_key_8 = const_str_plain__resolve;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_3, tmp_dict_key_8, tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_9 = outline_2_var___getattr__;

    CHECK_OBJECT( tmp_dict_value_9 );
    tmp_dict_key_9 = const_str_plain___getattr__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_3, tmp_dict_key_9, tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_8;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_8:;
    CHECK_OBJECT( (PyObject *)outline_2_var___module__ );
    Py_DECREF( outline_2_var___module__ );
    outline_2_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_2_var___init__ );
    Py_DECREF( outline_2_var___init__ );
    outline_2_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_2_var__resolve );
    Py_DECREF( outline_2_var__resolve );
    outline_2_var__resolve = NULL;

    CHECK_OBJECT( (PyObject *)outline_2_var___getattr__ );
    Py_DECREF( outline_2_var___getattr__ );
    outline_2_var___getattr__ = NULL;

    goto outline_result_3;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_3:;
    tmp_assign_source_47 = tmp_outline_return_value_3;
    assert( tmp_class_creation_3__class_dict == NULL );
    tmp_class_creation_3__class_dict = tmp_assign_source_47;

    tmp_compare_left_5 = const_str_plain___metaclass__;
    tmp_compare_right_5 = tmp_class_creation_3__class_dict;

    CHECK_OBJECT( tmp_compare_right_5 );
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_dict_name_3 = tmp_class_creation_3__class_dict;

    CHECK_OBJECT( tmp_dict_name_3 );
    tmp_key_name_3 = const_str_plain___metaclass__;
    tmp_assign_source_52 = DICT_GET_ITEM( tmp_dict_name_3, tmp_key_name_3 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;

        goto try_except_handler_7;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_subscribed_name_3 = tmp_class_creation_3__bases;

    CHECK_OBJECT( tmp_subscribed_name_3 );
    tmp_subscript_name_3 = const_int_0;
    tmp_assign_source_53 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;

        goto try_except_handler_7;
    }
    assert( tmp_select_metaclass_3__base == NULL );
    tmp_select_metaclass_3__base = tmp_assign_source_53;

    // Tried code:
    // Tried code:
    tmp_source_name_7 = tmp_select_metaclass_3__base;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_outline_return_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_7 );
    if ( tmp_outline_return_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;

        goto try_except_handler_10;
    }
    goto try_return_handler_9;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_5 );
    Py_XDECREF( exception_keeper_value_5 );
    Py_XDECREF( exception_keeper_tb_5 );
    tmp_type_arg_1 = tmp_select_metaclass_3__base;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_outline_return_value_4 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_outline_return_value_4 != NULL );
    goto try_return_handler_9;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_9:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_3__base );
    Py_DECREF( tmp_select_metaclass_3__base );
    tmp_select_metaclass_3__base = NULL;

    goto outline_result_4;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_3__base );
    Py_DECREF( tmp_select_metaclass_3__base );
    tmp_select_metaclass_3__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_4:;
    tmp_assign_source_52 = tmp_outline_return_value_4;
    condexpr_end_3:;
    assert( tmp_class_creation_3__metaclass == NULL );
    tmp_class_creation_3__metaclass = tmp_assign_source_52;

    tmp_called_name_4 = tmp_class_creation_3__metaclass;

    CHECK_OBJECT( tmp_called_name_4 );
    tmp_args_element_name_7 = const_str_plain_MovedModule;
    tmp_args_element_name_8 = tmp_class_creation_3__bases;

    CHECK_OBJECT( tmp_args_element_name_8 );
    tmp_args_element_name_9 = tmp_class_creation_3__class_dict;

    CHECK_OBJECT( tmp_args_element_name_9 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 103;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_assign_source_54 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, call_args );
    }

    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;

        goto try_except_handler_7;
    }
    assert( tmp_class_creation_3__class == NULL );
    tmp_class_creation_3__class = tmp_assign_source_54;

    goto try_end_5;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    tmp_assign_source_55 = tmp_class_creation_3__class;

    CHECK_OBJECT( tmp_assign_source_55 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule, tmp_assign_source_55 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class );
    Py_DECREF( tmp_class_creation_3__class );
    tmp_class_creation_3__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases );
    Py_DECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_dict );
    Py_DECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    // Tried code:
    tmp_assign_source_56 = PyTuple_New( 1 );
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_56 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 124;

        goto try_except_handler_11;
    }

    tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_ModuleType );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_56 );

        exception_lineno = 124;

        goto try_except_handler_11;
    }
    PyTuple_SET_ITEM( tmp_assign_source_56, 0, tmp_tuple_element_3 );
    assert( tmp_class_creation_4__bases == NULL );
    tmp_class_creation_4__bases = tmp_assign_source_56;

    tmp_assign_source_58 = const_str_plain_six;
    assert( outline_3_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_58 );
    outline_3_var___module__ = tmp_assign_source_58;

    tmp_assign_source_59 = MAKE_FUNCTION_six$$$function_9___init__(  );
    assert( outline_3_var___init__ == NULL );
    outline_3_var___init__ = tmp_assign_source_59;

    tmp_assign_source_60 = MAKE_FUNCTION_six$$$function_10___dir__(  );
    assert( outline_3_var___dir__ == NULL );
    outline_3_var___dir__ = tmp_assign_source_60;

    tmp_assign_source_61 = PyList_New( 0 );
    assert( outline_3_var__moved_attributes == NULL );
    outline_3_var__moved_attributes = tmp_assign_source_61;

    // Tried code:
    tmp_outline_return_value_5 = _PyDict_NewPresized( 4 );
    tmp_dict_value_10 = outline_3_var___module__;

    CHECK_OBJECT( tmp_dict_value_10 );
    tmp_dict_key_10 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_5, tmp_dict_key_10, tmp_dict_value_10 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_11 = outline_3_var___init__;

    CHECK_OBJECT( tmp_dict_value_11 );
    tmp_dict_key_11 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_5, tmp_dict_key_11, tmp_dict_value_11 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_12 = outline_3_var___dir__;

    CHECK_OBJECT( tmp_dict_value_12 );
    tmp_dict_key_12 = const_str_plain___dir__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_5, tmp_dict_key_12, tmp_dict_value_12 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_13 = outline_3_var__moved_attributes;

    CHECK_OBJECT( tmp_dict_value_13 );
    tmp_dict_key_13 = const_str_plain__moved_attributes;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_5, tmp_dict_key_13, tmp_dict_value_13 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_12;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_12:;
    CHECK_OBJECT( (PyObject *)outline_3_var___module__ );
    Py_DECREF( outline_3_var___module__ );
    outline_3_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_3_var___init__ );
    Py_DECREF( outline_3_var___init__ );
    outline_3_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_3_var___dir__ );
    Py_DECREF( outline_3_var___dir__ );
    outline_3_var___dir__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_3_var__moved_attributes );
    Py_DECREF( outline_3_var__moved_attributes );
    outline_3_var__moved_attributes = NULL;

    goto outline_result_5;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_3_var___module__ );
    Py_DECREF( outline_3_var___module__ );
    outline_3_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_3_var___init__ );
    Py_DECREF( outline_3_var___init__ );
    outline_3_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_3_var___dir__ );
    Py_DECREF( outline_3_var___dir__ );
    outline_3_var___dir__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_3_var__moved_attributes );
    Py_DECREF( outline_3_var__moved_attributes );
    outline_3_var__moved_attributes = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_5:;
    tmp_assign_source_57 = tmp_outline_return_value_5;
    assert( tmp_class_creation_4__class_dict == NULL );
    tmp_class_creation_4__class_dict = tmp_assign_source_57;

    tmp_compare_left_6 = const_str_plain___metaclass__;
    tmp_compare_right_6 = tmp_class_creation_4__class_dict;

    CHECK_OBJECT( tmp_compare_right_6 );
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_dict_name_4 = tmp_class_creation_4__class_dict;

    CHECK_OBJECT( tmp_dict_name_4 );
    tmp_key_name_4 = const_str_plain___metaclass__;
    tmp_assign_source_62 = DICT_GET_ITEM( tmp_dict_name_4, tmp_key_name_4 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 124;

        goto try_except_handler_11;
    }
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_subscribed_name_4 = tmp_class_creation_4__bases;

    CHECK_OBJECT( tmp_subscribed_name_4 );
    tmp_subscript_name_4 = const_int_0;
    tmp_assign_source_63 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 124;

        goto try_except_handler_11;
    }
    assert( tmp_select_metaclass_4__base == NULL );
    tmp_select_metaclass_4__base = tmp_assign_source_63;

    // Tried code:
    // Tried code:
    tmp_source_name_9 = tmp_select_metaclass_4__base;

    CHECK_OBJECT( tmp_source_name_9 );
    tmp_outline_return_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_9 );
    if ( tmp_outline_return_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 124;

        goto try_except_handler_14;
    }
    goto try_return_handler_13;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_7 );
    Py_XDECREF( exception_keeper_value_7 );
    Py_XDECREF( exception_keeper_tb_7 );
    tmp_type_arg_2 = tmp_select_metaclass_4__base;

    CHECK_OBJECT( tmp_type_arg_2 );
    tmp_outline_return_value_6 = BUILTIN_TYPE1( tmp_type_arg_2 );
    assert( tmp_outline_return_value_6 != NULL );
    goto try_return_handler_13;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_13:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_4__base );
    Py_DECREF( tmp_select_metaclass_4__base );
    tmp_select_metaclass_4__base = NULL;

    goto outline_result_6;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_4__base );
    Py_DECREF( tmp_select_metaclass_4__base );
    tmp_select_metaclass_4__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_6:;
    tmp_assign_source_62 = tmp_outline_return_value_6;
    condexpr_end_4:;
    assert( tmp_class_creation_4__metaclass == NULL );
    tmp_class_creation_4__metaclass = tmp_assign_source_62;

    tmp_called_name_5 = tmp_class_creation_4__metaclass;

    CHECK_OBJECT( tmp_called_name_5 );
    tmp_args_element_name_10 = const_str_plain__LazyModule;
    tmp_args_element_name_11 = tmp_class_creation_4__bases;

    CHECK_OBJECT( tmp_args_element_name_11 );
    tmp_args_element_name_12 = tmp_class_creation_4__class_dict;

    CHECK_OBJECT( tmp_args_element_name_12 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 124;
    {
        PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_assign_source_64 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
    }

    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 124;

        goto try_except_handler_11;
    }
    assert( tmp_class_creation_4__class == NULL );
    tmp_class_creation_4__class = tmp_assign_source_64;

    goto try_end_6;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    tmp_assign_source_65 = tmp_class_creation_4__class;

    CHECK_OBJECT( tmp_assign_source_65 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule, tmp_assign_source_65 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class );
    Py_DECREF( tmp_class_creation_4__class );
    tmp_class_creation_4__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases );
    Py_DECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_dict );
    Py_DECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__metaclass );
    Py_DECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    // Tried code:
    tmp_assign_source_66 = PyTuple_New( 1 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyDescr );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyDescr );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_66 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyDescr" );
        exception_tb = NULL;

        exception_lineno = 139;

        goto try_except_handler_15;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_assign_source_66, 0, tmp_tuple_element_4 );
    assert( tmp_class_creation_5__bases == NULL );
    tmp_class_creation_5__bases = tmp_assign_source_66;

    tmp_assign_source_68 = const_str_plain_six;
    assert( outline_4_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_68 );
    outline_4_var___module__ = tmp_assign_source_68;

    tmp_defaults_2 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_2 );
    tmp_assign_source_69 = MAKE_FUNCTION_six$$$function_11___init__( tmp_defaults_2 );
    assert( outline_4_var___init__ == NULL );
    outline_4_var___init__ = tmp_assign_source_69;

    tmp_assign_source_70 = MAKE_FUNCTION_six$$$function_12__resolve(  );
    assert( outline_4_var__resolve == NULL );
    outline_4_var__resolve = tmp_assign_source_70;

    // Tried code:
    tmp_outline_return_value_7 = _PyDict_NewPresized( 3 );
    tmp_dict_value_14 = outline_4_var___module__;

    CHECK_OBJECT( tmp_dict_value_14 );
    tmp_dict_key_14 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_7, tmp_dict_key_14, tmp_dict_value_14 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_15 = outline_4_var___init__;

    CHECK_OBJECT( tmp_dict_value_15 );
    tmp_dict_key_15 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_7, tmp_dict_key_15, tmp_dict_value_15 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_16 = outline_4_var__resolve;

    CHECK_OBJECT( tmp_dict_value_16 );
    tmp_dict_key_16 = const_str_plain__resolve;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_7, tmp_dict_key_16, tmp_dict_value_16 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_16;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_16:;
    CHECK_OBJECT( (PyObject *)outline_4_var___module__ );
    Py_DECREF( outline_4_var___module__ );
    outline_4_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_4_var___init__ );
    Py_DECREF( outline_4_var___init__ );
    outline_4_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_4_var__resolve );
    Py_DECREF( outline_4_var__resolve );
    outline_4_var__resolve = NULL;

    goto outline_result_7;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_7:;
    tmp_assign_source_67 = tmp_outline_return_value_7;
    assert( tmp_class_creation_5__class_dict == NULL );
    tmp_class_creation_5__class_dict = tmp_assign_source_67;

    tmp_compare_left_7 = const_str_plain___metaclass__;
    tmp_compare_right_7 = tmp_class_creation_5__class_dict;

    CHECK_OBJECT( tmp_compare_right_7 );
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_dict_name_5 = tmp_class_creation_5__class_dict;

    CHECK_OBJECT( tmp_dict_name_5 );
    tmp_key_name_5 = const_str_plain___metaclass__;
    tmp_assign_source_71 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;

        goto try_except_handler_15;
    }
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_subscribed_name_5 = tmp_class_creation_5__bases;

    CHECK_OBJECT( tmp_subscribed_name_5 );
    tmp_subscript_name_5 = const_int_0;
    tmp_assign_source_72 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;

        goto try_except_handler_15;
    }
    assert( tmp_select_metaclass_5__base == NULL );
    tmp_select_metaclass_5__base = tmp_assign_source_72;

    // Tried code:
    // Tried code:
    tmp_source_name_10 = tmp_select_metaclass_5__base;

    CHECK_OBJECT( tmp_source_name_10 );
    tmp_outline_return_value_8 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_10 );
    if ( tmp_outline_return_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;

        goto try_except_handler_18;
    }
    goto try_return_handler_17;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_9 );
    Py_XDECREF( exception_keeper_value_9 );
    Py_XDECREF( exception_keeper_tb_9 );
    tmp_type_arg_3 = tmp_select_metaclass_5__base;

    CHECK_OBJECT( tmp_type_arg_3 );
    tmp_outline_return_value_8 = BUILTIN_TYPE1( tmp_type_arg_3 );
    assert( tmp_outline_return_value_8 != NULL );
    goto try_return_handler_17;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_17:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_5__base );
    Py_DECREF( tmp_select_metaclass_5__base );
    tmp_select_metaclass_5__base = NULL;

    goto outline_result_8;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_5__base );
    Py_DECREF( tmp_select_metaclass_5__base );
    tmp_select_metaclass_5__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_8:;
    tmp_assign_source_71 = tmp_outline_return_value_8;
    condexpr_end_5:;
    assert( tmp_class_creation_5__metaclass == NULL );
    tmp_class_creation_5__metaclass = tmp_assign_source_71;

    tmp_called_name_6 = tmp_class_creation_5__metaclass;

    CHECK_OBJECT( tmp_called_name_6 );
    tmp_args_element_name_13 = const_str_plain_MovedAttribute;
    tmp_args_element_name_14 = tmp_class_creation_5__bases;

    CHECK_OBJECT( tmp_args_element_name_14 );
    tmp_args_element_name_15 = tmp_class_creation_5__class_dict;

    CHECK_OBJECT( tmp_args_element_name_15 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 139;
    {
        PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_assign_source_73 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
    }

    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;

        goto try_except_handler_15;
    }
    assert( tmp_class_creation_5__class == NULL );
    tmp_class_creation_5__class = tmp_assign_source_73;

    goto try_end_7;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    tmp_assign_source_74 = tmp_class_creation_5__class;

    CHECK_OBJECT( tmp_assign_source_74 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute, tmp_assign_source_74 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class );
    Py_DECREF( tmp_class_creation_5__class );
    tmp_class_creation_5__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__bases );
    Py_DECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_dict );
    Py_DECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__metaclass );
    Py_DECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    tmp_assign_source_76 = const_str_plain_six;
    assert( outline_5_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_76 );
    outline_5_var___module__ = tmp_assign_source_76;

    tmp_assign_source_77 = const_str_digest_087d011e227804c37fa5a994ee918bbe;
    assert( outline_5_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_77 );
    outline_5_var___doc__ = tmp_assign_source_77;

    tmp_assign_source_78 = MAKE_FUNCTION_six$$$function_13___init__(  );
    assert( outline_5_var___init__ == NULL );
    outline_5_var___init__ = tmp_assign_source_78;

    tmp_assign_source_79 = MAKE_FUNCTION_six$$$function_14__add_module(  );
    assert( outline_5_var__add_module == NULL );
    outline_5_var__add_module = tmp_assign_source_79;

    tmp_assign_source_80 = MAKE_FUNCTION_six$$$function_15__get_module(  );
    assert( outline_5_var__get_module == NULL );
    outline_5_var__get_module = tmp_assign_source_80;

    tmp_defaults_3 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_3 );
    tmp_assign_source_81 = MAKE_FUNCTION_six$$$function_16_find_module( tmp_defaults_3 );
    assert( outline_5_var_find_module == NULL );
    outline_5_var_find_module = tmp_assign_source_81;

    tmp_assign_source_82 = MAKE_FUNCTION_six$$$function_17___get_module(  );
    assert( outline_5_var__SixMetaPathImporter__get_module == NULL );
    outline_5_var__SixMetaPathImporter__get_module = tmp_assign_source_82;

    tmp_assign_source_83 = MAKE_FUNCTION_six$$$function_18_load_module(  );
    assert( outline_5_var_load_module == NULL );
    outline_5_var_load_module = tmp_assign_source_83;

    tmp_assign_source_84 = MAKE_FUNCTION_six$$$function_19_is_package(  );
    assert( outline_5_var_is_package == NULL );
    outline_5_var_is_package = tmp_assign_source_84;

    tmp_assign_source_85 = MAKE_FUNCTION_six$$$function_20_get_code(  );
    assert( outline_5_var_get_code == NULL );
    outline_5_var_get_code = tmp_assign_source_85;

    tmp_assign_source_86 = outline_5_var_get_code;

    CHECK_OBJECT( tmp_assign_source_86 );
    assert( outline_5_var_get_source == NULL );
    Py_INCREF( tmp_assign_source_86 );
    outline_5_var_get_source = tmp_assign_source_86;

    // Tried code:
    tmp_outline_return_value_9 = _PyDict_NewPresized( 11 );
    tmp_dict_value_17 = outline_5_var___module__;

    CHECK_OBJECT( tmp_dict_value_17 );
    tmp_dict_key_17 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_17, tmp_dict_value_17 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_18 = outline_5_var___doc__;

    CHECK_OBJECT( tmp_dict_value_18 );
    tmp_dict_key_18 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_18, tmp_dict_value_18 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_19 = outline_5_var___init__;

    CHECK_OBJECT( tmp_dict_value_19 );
    tmp_dict_key_19 = const_str_plain___init__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_19, tmp_dict_value_19 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_20 = outline_5_var__add_module;

    CHECK_OBJECT( tmp_dict_value_20 );
    tmp_dict_key_20 = const_str_plain__add_module;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_20, tmp_dict_value_20 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_21 = outline_5_var__get_module;

    CHECK_OBJECT( tmp_dict_value_21 );
    tmp_dict_key_21 = const_str_plain__get_module;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_21, tmp_dict_value_21 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_22 = outline_5_var_find_module;

    CHECK_OBJECT( tmp_dict_value_22 );
    tmp_dict_key_22 = const_str_plain_find_module;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_22, tmp_dict_value_22 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_23 = outline_5_var__SixMetaPathImporter__get_module;

    CHECK_OBJECT( tmp_dict_value_23 );
    tmp_dict_key_23 = const_str_plain__SixMetaPathImporter__get_module;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_23, tmp_dict_value_23 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_24 = outline_5_var_load_module;

    CHECK_OBJECT( tmp_dict_value_24 );
    tmp_dict_key_24 = const_str_plain_load_module;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_24, tmp_dict_value_24 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_25 = outline_5_var_is_package;

    CHECK_OBJECT( tmp_dict_value_25 );
    tmp_dict_key_25 = const_str_plain_is_package;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_25, tmp_dict_value_25 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_26 = outline_5_var_get_code;

    CHECK_OBJECT( tmp_dict_value_26 );
    tmp_dict_key_26 = const_str_plain_get_code;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_26, tmp_dict_value_26 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_27 = outline_5_var_get_source;

    CHECK_OBJECT( tmp_dict_value_27 );
    tmp_dict_key_27 = const_str_plain_get_source;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_9, tmp_dict_key_27, tmp_dict_value_27 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_19;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_19:;
    CHECK_OBJECT( (PyObject *)outline_5_var___module__ );
    Py_DECREF( outline_5_var___module__ );
    outline_5_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var___doc__ );
    Py_DECREF( outline_5_var___doc__ );
    outline_5_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var___init__ );
    Py_DECREF( outline_5_var___init__ );
    outline_5_var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var__add_module );
    Py_DECREF( outline_5_var__add_module );
    outline_5_var__add_module = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var__get_module );
    Py_DECREF( outline_5_var__get_module );
    outline_5_var__get_module = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var_find_module );
    Py_DECREF( outline_5_var_find_module );
    outline_5_var_find_module = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var__SixMetaPathImporter__get_module );
    Py_DECREF( outline_5_var__SixMetaPathImporter__get_module );
    outline_5_var__SixMetaPathImporter__get_module = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var_load_module );
    Py_DECREF( outline_5_var_load_module );
    outline_5_var_load_module = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var_is_package );
    Py_DECREF( outline_5_var_is_package );
    outline_5_var_is_package = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var_get_code );
    Py_DECREF( outline_5_var_get_code );
    outline_5_var_get_code = NULL;

    CHECK_OBJECT( (PyObject *)outline_5_var_get_source );
    Py_DECREF( outline_5_var_get_source );
    outline_5_var_get_source = NULL;

    goto outline_result_9;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_9:;
    tmp_assign_source_75 = tmp_outline_return_value_9;
    assert( tmp_class_creation_6__class_dict == NULL );
    tmp_class_creation_6__class_dict = tmp_assign_source_75;

    // Tried code:
    tmp_compare_left_8 = const_str_plain___metaclass__;
    tmp_compare_right_8 = tmp_class_creation_6__class_dict;

    CHECK_OBJECT( tmp_compare_right_8 );
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_dict_name_6 = tmp_class_creation_6__class_dict;

    CHECK_OBJECT( tmp_dict_name_6 );
    tmp_key_name_6 = const_str_plain___metaclass__;
    tmp_assign_source_87 = DICT_GET_ITEM( tmp_dict_name_6, tmp_key_name_6 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 164;

        goto try_except_handler_20;
    }
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_assign_source_87 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_assign_source_87 );
    condexpr_end_6:;
    assert( tmp_class_creation_6__metaclass == NULL );
    tmp_class_creation_6__metaclass = tmp_assign_source_87;

    tmp_called_name_7 = tmp_class_creation_6__metaclass;

    CHECK_OBJECT( tmp_called_name_7 );
    tmp_args_element_name_16 = const_str_plain__SixMetaPathImporter;
    tmp_args_element_name_17 = const_tuple_type_object_tuple;
    tmp_args_element_name_18 = tmp_class_creation_6__class_dict;

    CHECK_OBJECT( tmp_args_element_name_18 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 164;
    {
        PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 };
        tmp_assign_source_88 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, call_args );
    }

    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 164;

        goto try_except_handler_20;
    }
    assert( tmp_class_creation_6__class == NULL );
    tmp_class_creation_6__class = tmp_assign_source_88;

    goto try_end_8;
    // Exception handler code:
    try_except_handler_20:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_dict );
    Py_DECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    tmp_assign_source_89 = tmp_class_creation_6__class;

    CHECK_OBJECT( tmp_assign_source_89 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__SixMetaPathImporter, tmp_assign_source_89 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class );
    Py_DECREF( tmp_class_creation_6__class );
    tmp_class_creation_6__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_dict );
    Py_DECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__metaclass );
    Py_DECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__SixMetaPathImporter );

    if (unlikely( tmp_called_name_8 == NULL ))
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__SixMetaPathImporter );
    }

    if ( tmp_called_name_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_SixMetaPathImporter" );
        exception_tb = NULL;

        exception_lineno = 226;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 226;
    tmp_assign_source_90 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_str_plain_six_tuple, 0 ) );

    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 226;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer, tmp_assign_source_90 );
    // Tried code:
    tmp_assign_source_91 = PyTuple_New( 1 );
    tmp_tuple_element_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_5 == NULL ))
    {
        tmp_tuple_element_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_91 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 229;

        goto try_except_handler_21;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_91, 0, tmp_tuple_element_5 );
    assert( tmp_class_creation_7__bases == NULL );
    tmp_class_creation_7__bases = tmp_assign_source_91;

    tmp_assign_source_93 = const_str_plain_six;
    assert( outline_6_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_93 );
    outline_6_var___module__ = tmp_assign_source_93;

    tmp_assign_source_94 = const_str_digest_fa9629ad3e56524d94051e9d7ab9b735;
    assert( outline_6_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_94 );
    outline_6_var___doc__ = tmp_assign_source_94;

    tmp_assign_source_95 = PyList_New( 0 );
    assert( outline_6_var___path__ == NULL );
    outline_6_var___path__ = tmp_assign_source_95;

    // Tried code:
    tmp_outline_return_value_10 = _PyDict_NewPresized( 3 );
    tmp_dict_value_28 = outline_6_var___module__;

    CHECK_OBJECT( tmp_dict_value_28 );
    tmp_dict_key_28 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_10, tmp_dict_key_28, tmp_dict_value_28 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_29 = outline_6_var___doc__;

    CHECK_OBJECT( tmp_dict_value_29 );
    tmp_dict_key_29 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_10, tmp_dict_key_29, tmp_dict_value_29 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_30 = outline_6_var___path__;

    CHECK_OBJECT( tmp_dict_value_30 );
    tmp_dict_key_30 = const_str_plain___path__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_10, tmp_dict_key_30, tmp_dict_value_30 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_22;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_22:;
    CHECK_OBJECT( (PyObject *)outline_6_var___module__ );
    Py_DECREF( outline_6_var___module__ );
    outline_6_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_6_var___doc__ );
    Py_DECREF( outline_6_var___doc__ );
    outline_6_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_6_var___path__ );
    Py_DECREF( outline_6_var___path__ );
    outline_6_var___path__ = NULL;

    goto outline_result_10;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_6_var___module__ );
    Py_DECREF( outline_6_var___module__ );
    outline_6_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_6_var___doc__ );
    Py_DECREF( outline_6_var___doc__ );
    outline_6_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_6_var___path__ );
    Py_DECREF( outline_6_var___path__ );
    outline_6_var___path__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_10:;
    tmp_assign_source_92 = tmp_outline_return_value_10;
    assert( tmp_class_creation_7__class_dict == NULL );
    tmp_class_creation_7__class_dict = tmp_assign_source_92;

    tmp_compare_left_9 = const_str_plain___metaclass__;
    tmp_compare_right_9 = tmp_class_creation_7__class_dict;

    CHECK_OBJECT( tmp_compare_right_9 );
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_dict_name_7 = tmp_class_creation_7__class_dict;

    CHECK_OBJECT( tmp_dict_name_7 );
    tmp_key_name_7 = const_str_plain___metaclass__;
    tmp_assign_source_96 = DICT_GET_ITEM( tmp_dict_name_7, tmp_key_name_7 );
    if ( tmp_assign_source_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 229;

        goto try_except_handler_21;
    }
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_subscribed_name_6 = tmp_class_creation_7__bases;

    CHECK_OBJECT( tmp_subscribed_name_6 );
    tmp_subscript_name_6 = const_int_0;
    tmp_assign_source_97 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_assign_source_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 229;

        goto try_except_handler_21;
    }
    assert( tmp_select_metaclass_7__base == NULL );
    tmp_select_metaclass_7__base = tmp_assign_source_97;

    // Tried code:
    // Tried code:
    tmp_source_name_11 = tmp_select_metaclass_7__base;

    CHECK_OBJECT( tmp_source_name_11 );
    tmp_outline_return_value_11 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_11 );
    if ( tmp_outline_return_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 229;

        goto try_except_handler_24;
    }
    goto try_return_handler_23;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_12 );
    Py_XDECREF( exception_keeper_value_12 );
    Py_XDECREF( exception_keeper_tb_12 );
    tmp_type_arg_4 = tmp_select_metaclass_7__base;

    CHECK_OBJECT( tmp_type_arg_4 );
    tmp_outline_return_value_11 = BUILTIN_TYPE1( tmp_type_arg_4 );
    assert( tmp_outline_return_value_11 != NULL );
    goto try_return_handler_23;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_23:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_7__base );
    Py_DECREF( tmp_select_metaclass_7__base );
    tmp_select_metaclass_7__base = NULL;

    goto outline_result_11;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_7__base );
    Py_DECREF( tmp_select_metaclass_7__base );
    tmp_select_metaclass_7__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_11:;
    tmp_assign_source_96 = tmp_outline_return_value_11;
    condexpr_end_7:;
    assert( tmp_class_creation_7__metaclass == NULL );
    tmp_class_creation_7__metaclass = tmp_assign_source_96;

    tmp_called_name_9 = tmp_class_creation_7__metaclass;

    CHECK_OBJECT( tmp_called_name_9 );
    tmp_args_element_name_19 = const_str_plain__MovedItems;
    tmp_args_element_name_20 = tmp_class_creation_7__bases;

    CHECK_OBJECT( tmp_args_element_name_20 );
    tmp_args_element_name_21 = tmp_class_creation_7__class_dict;

    CHECK_OBJECT( tmp_args_element_name_21 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 229;
    {
        PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21 };
        tmp_assign_source_98 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, call_args );
    }

    if ( tmp_assign_source_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 229;

        goto try_except_handler_21;
    }
    assert( tmp_class_creation_7__class == NULL );
    tmp_class_creation_7__class = tmp_assign_source_98;

    goto try_end_9;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    tmp_assign_source_99 = tmp_class_creation_7__class;

    CHECK_OBJECT( tmp_assign_source_99 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems, tmp_assign_source_99 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class );
    Py_DECREF( tmp_class_creation_7__class );
    tmp_class_creation_7__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__bases );
    Py_DECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class_dict );
    Py_DECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__metaclass );
    Py_DECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    tmp_assign_source_100 = PyList_New( 62 );
    tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_10 == NULL ))
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 236;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 236;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_10, &PyTuple_GET_ITEM( const_tuple_411972e912d706a64e285af8aa597505_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 236;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 0, tmp_list_element_1 );
    tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_11 == NULL ))
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 237;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 237;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_11, &PyTuple_GET_ITEM( const_tuple_fa4551ef4d89b653ac942a9968a3518c_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 237;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 1, tmp_list_element_1 );
    tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_12 == NULL ))
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 238;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 238;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_12, &PyTuple_GET_ITEM( const_tuple_42a685f581dc95ca172d058f0fa2a93f_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 238;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 2, tmp_list_element_1 );
    tmp_called_name_13 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_13 == NULL ))
    {
        tmp_called_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 239;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 239;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_13, &PyTuple_GET_ITEM( const_tuple_d84a4a7aa5d11ff44dc98ede3afda48e_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 239;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 3, tmp_list_element_1 );
    tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_14 == NULL ))
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 240;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 240;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_14, &PyTuple_GET_ITEM( const_tuple_str_plain_intern_str_plain___builtin___str_plain_sys_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 240;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 4, tmp_list_element_1 );
    tmp_called_name_15 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_15 == NULL ))
    {
        tmp_called_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 241;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 241;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_15, &PyTuple_GET_ITEM( const_tuple_3dbfbe614df2abe87e4db19068ab66c4_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 241;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 5, tmp_list_element_1 );
    tmp_called_name_16 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_16 == NULL ))
    {
        tmp_called_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 242;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 242;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_16, &PyTuple_GET_ITEM( const_tuple_f259b0f7a1b9f0b84fd5373038ac3a78_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 242;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 6, tmp_list_element_1 );
    tmp_called_name_17 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_17 == NULL ))
    {
        tmp_called_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 243;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 243;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_17, &PyTuple_GET_ITEM( const_tuple_eacdcc120eff9b0e152e61c07b4d0b51_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 243;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 7, tmp_list_element_1 );
    tmp_called_name_18 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_18 == NULL ))
    {
        tmp_called_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 244;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 244;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_18, &PyTuple_GET_ITEM( const_tuple_424b5876d9142cfd116cee7c287158fe_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 244;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 8, tmp_list_element_1 );
    tmp_called_name_19 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_19 == NULL ))
    {
        tmp_called_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_19 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 245;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_22 = const_str_plain_reload_module;
    tmp_args_element_name_23 = const_str_plain___builtin__;
    tmp_cond_value_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY34 );

    if (unlikely( tmp_cond_value_3 == NULL ))
    {
        tmp_cond_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY34 );
    }

    if ( tmp_cond_value_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY34" );
        exception_tb = NULL;

        exception_lineno = 245;

        goto frame_exception_exit_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 245;

        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_args_element_name_24 = const_str_plain_importlib;
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_args_element_name_24 = const_str_plain_imp;
    condexpr_end_8:;
    tmp_args_element_name_25 = const_str_plain_reload;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 245;
    {
        PyObject *call_args[] = { tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25 };
        tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_19, call_args );
    }

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 245;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 9, tmp_list_element_1 );
    tmp_called_name_20 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_20 == NULL ))
    {
        tmp_called_name_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_20 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 246;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 246;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_20, &PyTuple_GET_ITEM( const_tuple_str_plain_reduce_str_plain___builtin___str_plain_functools_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 246;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 10, tmp_list_element_1 );
    tmp_called_name_21 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_21 == NULL ))
    {
        tmp_called_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 247;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 247;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_21, &PyTuple_GET_ITEM( const_tuple_991a248aa1804f30822646929a31e57a_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 247;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 11, tmp_list_element_1 );
    tmp_called_name_22 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_22 == NULL ))
    {
        tmp_called_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_22 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 248;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 248;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_22, &PyTuple_GET_ITEM( const_tuple_str_plain_StringIO_str_plain_StringIO_str_plain_io_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 248;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 12, tmp_list_element_1 );
    tmp_called_name_23 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_23 == NULL ))
    {
        tmp_called_name_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_23 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 249;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 249;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_23, &PyTuple_GET_ITEM( const_tuple_str_plain_UserDict_str_plain_UserDict_str_plain_collections_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 249;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 13, tmp_list_element_1 );
    tmp_called_name_24 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_24 == NULL ))
    {
        tmp_called_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 250;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 250;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_24, &PyTuple_GET_ITEM( const_tuple_str_plain_UserList_str_plain_UserList_str_plain_collections_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 250;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 14, tmp_list_element_1 );
    tmp_called_name_25 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_25 == NULL ))
    {
        tmp_called_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_25 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 251;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 251;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_25, &PyTuple_GET_ITEM( const_tuple_aea4a47ee63181917a6f10751a0c295a_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 251;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 15, tmp_list_element_1 );
    tmp_called_name_26 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_26 == NULL ))
    {
        tmp_called_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_26 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 252;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 252;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_26, &PyTuple_GET_ITEM( const_tuple_82629732f31cf6a0fea7d04ec36c55a6_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 252;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 16, tmp_list_element_1 );
    tmp_called_name_27 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_27 == NULL ))
    {
        tmp_called_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 253;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 253;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_27, &PyTuple_GET_ITEM( const_tuple_2807533bf992c2488a99d2c8a9fdf714_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 253;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 17, tmp_list_element_1 );
    tmp_called_name_28 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_28 == NULL ))
    {
        tmp_called_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_28 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 254;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 254;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_28, &PyTuple_GET_ITEM( const_tuple_c262584e5e7af7a5db32a5f6a2e99000_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 254;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 18, tmp_list_element_1 );
    tmp_called_name_29 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_29 == NULL ))
    {
        tmp_called_name_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_29 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 255;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 255;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_29, &PyTuple_GET_ITEM( const_tuple_str_plain_builtins_str_plain___builtin___tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 255;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 19, tmp_list_element_1 );
    tmp_called_name_30 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_30 == NULL ))
    {
        tmp_called_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_30 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 256;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 256;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_30, &PyTuple_GET_ITEM( const_tuple_str_plain_configparser_str_plain_ConfigParser_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 256;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 20, tmp_list_element_1 );
    tmp_called_name_31 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_31 == NULL ))
    {
        tmp_called_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_31 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 257;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 257;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_31, &PyTuple_GET_ITEM( const_tuple_str_plain_copyreg_str_plain_copy_reg_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 257;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 21, tmp_list_element_1 );
    tmp_called_name_32 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_32 == NULL ))
    {
        tmp_called_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 258;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 258;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_32, &PyTuple_GET_ITEM( const_tuple_0ffb7aa296a1a559b3279099e864d24d_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 258;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 22, tmp_list_element_1 );
    tmp_called_name_33 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_33 == NULL ))
    {
        tmp_called_name_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_33 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 259;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 259;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_33, &PyTuple_GET_ITEM( const_tuple_7744af6bf310e946f06ba9c9cfb772a3_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 259;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 23, tmp_list_element_1 );
    tmp_called_name_34 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_34 == NULL ))
    {
        tmp_called_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_34 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 260;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 260;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_34, &PyTuple_GET_ITEM( const_tuple_7b5da3b00ca2fdce5840f2ce04d1b8fa_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 260;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 24, tmp_list_element_1 );
    tmp_called_name_35 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_35 == NULL ))
    {
        tmp_called_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_35 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 261;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 261;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_35, &PyTuple_GET_ITEM( const_tuple_3c757a1f2fee4a0707afdc3c9cb3076b_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 261;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 25, tmp_list_element_1 );
    tmp_called_name_36 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_36 == NULL ))
    {
        tmp_called_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_36 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 262;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 262;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_36, &PyTuple_GET_ITEM( const_tuple_bf55bfbbebe3eeeebcf334dacf4b2b2a_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 262;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 26, tmp_list_element_1 );
    tmp_called_name_37 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_37 == NULL ))
    {
        tmp_called_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_37 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 263;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 263;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_37, &PyTuple_GET_ITEM( const_tuple_45037418d37481db3e88817f5f3e75d5_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 263;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 27, tmp_list_element_1 );
    tmp_called_name_38 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_38 == NULL ))
    {
        tmp_called_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_38 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 264;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 264;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_38, &PyTuple_GET_ITEM( const_tuple_8a0fc753db780b1781f245eac064ea7a_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 264;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 28, tmp_list_element_1 );
    tmp_called_name_39 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_39 == NULL ))
    {
        tmp_called_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_39 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 265;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 265;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_39, &PyTuple_GET_ITEM( const_tuple_3587390c695a62b1bc9b3790076ef063_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 265;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 29, tmp_list_element_1 );
    tmp_called_name_40 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_40 == NULL ))
    {
        tmp_called_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_40 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 266;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 266;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_40, &PyTuple_GET_ITEM( const_tuple_e79d7f1b4734be0e37665951db297244_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 266;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 30, tmp_list_element_1 );
    tmp_called_name_41 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_41 == NULL ))
    {
        tmp_called_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_41 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 267;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 267;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_41, &PyTuple_GET_ITEM( const_tuple_ce4b83c13c6ebdbf1dc871fed81e4ec5_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 267;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 31, tmp_list_element_1 );
    tmp_called_name_42 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_42 == NULL ))
    {
        tmp_called_name_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_42 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 268;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 268;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_42, &PyTuple_GET_ITEM( const_tuple_6055af80c5f9a03e9a7357d5347363e9_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 268;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 32, tmp_list_element_1 );
    tmp_called_name_43 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_43 == NULL ))
    {
        tmp_called_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_43 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 269;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 269;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_43, &PyTuple_GET_ITEM( const_tuple_637700e8f9bffff9f0bedd6a331886d6_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 269;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 33, tmp_list_element_1 );
    tmp_called_name_44 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_44 == NULL ))
    {
        tmp_called_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_44 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 270;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 270;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_44, &PyTuple_GET_ITEM( const_tuple_5fefbced8180c1de12054109841aa2ac_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 270;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 34, tmp_list_element_1 );
    tmp_called_name_45 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_45 == NULL ))
    {
        tmp_called_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_45 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 271;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 271;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_45, &PyTuple_GET_ITEM( const_tuple_2e9b85309c724c79442c71c91ec8d9db_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 271;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 35, tmp_list_element_1 );
    tmp_called_name_46 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_46 == NULL ))
    {
        tmp_called_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_46 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 272;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 272;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_46, &PyTuple_GET_ITEM( const_tuple_str_plain_cPickle_str_plain_cPickle_str_plain_pickle_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 272;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 36, tmp_list_element_1 );
    tmp_called_name_47 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_47 == NULL ))
    {
        tmp_called_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_47 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 273;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 273;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_47, &PyTuple_GET_ITEM( const_tuple_str_plain_queue_str_plain_Queue_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 273;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 37, tmp_list_element_1 );
    tmp_called_name_48 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_48 == NULL ))
    {
        tmp_called_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_48 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 274;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 274;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_48, &PyTuple_GET_ITEM( const_tuple_str_plain_reprlib_str_plain_repr_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 274;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 38, tmp_list_element_1 );
    tmp_called_name_49 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_49 == NULL ))
    {
        tmp_called_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_49 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 275;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 275;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_49, &PyTuple_GET_ITEM( const_tuple_str_plain_socketserver_str_plain_SocketServer_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 275;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 39, tmp_list_element_1 );
    tmp_called_name_50 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_50 == NULL ))
    {
        tmp_called_name_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_50 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 276;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 276;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_50, &PyTuple_GET_ITEM( const_tuple_str_plain__thread_str_plain_thread_str_plain__thread_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 276;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 40, tmp_list_element_1 );
    tmp_called_name_51 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_51 == NULL ))
    {
        tmp_called_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_51 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 277;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 277;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_51, &PyTuple_GET_ITEM( const_tuple_str_plain_tkinter_str_plain_Tkinter_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 277;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 41, tmp_list_element_1 );
    tmp_called_name_52 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_52 == NULL ))
    {
        tmp_called_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_52 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 278;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 278;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_52, &PyTuple_GET_ITEM( const_tuple_d9dff4967d5a9b09841576123dbc8516_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 278;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 42, tmp_list_element_1 );
    tmp_called_name_53 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_53 == NULL ))
    {
        tmp_called_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_53 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 279;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 279;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_53, &PyTuple_GET_ITEM( const_tuple_7800b44798065cfcce1360ddcde41eb9_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 279;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 43, tmp_list_element_1 );
    tmp_called_name_54 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_54 == NULL ))
    {
        tmp_called_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_54 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 280;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 280;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_54, &PyTuple_GET_ITEM( const_tuple_b95bdcdaa5a3f6cca2a56bf3f208f534_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 280;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 44, tmp_list_element_1 );
    tmp_called_name_55 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_55 == NULL ))
    {
        tmp_called_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_55 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 281;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 281;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_55, &PyTuple_GET_ITEM( const_tuple_3adb059b24d1b9435823e57bdb130564_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 281;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 45, tmp_list_element_1 );
    tmp_called_name_56 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_56 == NULL ))
    {
        tmp_called_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_56 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 282;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 282;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_56, &PyTuple_GET_ITEM( const_tuple_097719e7086f8299513e74ca5958de16_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 282;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 46, tmp_list_element_1 );
    tmp_called_name_57 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_57 == NULL ))
    {
        tmp_called_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_57 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 283;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 283;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_57, &PyTuple_GET_ITEM( const_tuple_15e64786f005915ad409681ea2752bf5_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 283;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 47, tmp_list_element_1 );
    tmp_called_name_58 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_58 == NULL ))
    {
        tmp_called_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_58 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 284;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 284;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_58, &PyTuple_GET_ITEM( const_tuple_475aaddccb95239c04bd14a4bba3795b_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 284;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 48, tmp_list_element_1 );
    tmp_called_name_59 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_59 == NULL ))
    {
        tmp_called_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_59 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 285;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 285;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_59, &PyTuple_GET_ITEM( const_tuple_5e662527879cefa60fbd95a7550cf311_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 285;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 49, tmp_list_element_1 );
    tmp_called_name_60 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_60 == NULL ))
    {
        tmp_called_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_60 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 286;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 286;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_60, &PyTuple_GET_ITEM( const_tuple_bcccd33fd0f3812d38ab3f1b067a273d_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 286;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 50, tmp_list_element_1 );
    tmp_called_name_61 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_61 == NULL ))
    {
        tmp_called_name_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_61 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 288;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 288;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_61, &PyTuple_GET_ITEM( const_tuple_9014eeb983e968a4133ad734b7d01fab_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 288;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 51, tmp_list_element_1 );
    tmp_called_name_62 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_62 == NULL ))
    {
        tmp_called_name_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_62 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 290;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 290;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_62, &PyTuple_GET_ITEM( const_tuple_983a57efce70dcb41da6c64e832b9120_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 290;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 52, tmp_list_element_1 );
    tmp_called_name_63 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_63 == NULL ))
    {
        tmp_called_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_63 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 291;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 291;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_63, &PyTuple_GET_ITEM( const_tuple_7099190257daa86fff9f296ebbde3ab0_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 291;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 53, tmp_list_element_1 );
    tmp_called_name_64 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_64 == NULL ))
    {
        tmp_called_name_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_64 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 292;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 292;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_64, &PyTuple_GET_ITEM( const_tuple_2fe8e15bea8bb8677d6cd93bd8860484_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 292;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 54, tmp_list_element_1 );
    tmp_called_name_65 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_65 == NULL ))
    {
        tmp_called_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_65 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 293;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 293;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_65, &PyTuple_GET_ITEM( const_tuple_1a737763e143149741eebf35b19ac3f9_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 293;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 55, tmp_list_element_1 );
    tmp_called_name_66 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_66 == NULL ))
    {
        tmp_called_name_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_66 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 295;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 295;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_66, &PyTuple_GET_ITEM( const_tuple_40b4cdd541b3488caf75a166eaafbeab_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 295;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 56, tmp_list_element_1 );
    tmp_called_name_67 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_67 == NULL ))
    {
        tmp_called_name_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_67 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 296;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 296;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_67, &PyTuple_GET_ITEM( const_tuple_b95736e8f51c92667f5e42089a453e06_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 296;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 57, tmp_list_element_1 );
    tmp_called_name_68 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_68 == NULL ))
    {
        tmp_called_name_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_68 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 297;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 297;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_68, &PyTuple_GET_ITEM( const_tuple_501a0d1ae5006e649fedcf0d29387d8c_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 297;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 58, tmp_list_element_1 );
    tmp_called_name_69 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_69 == NULL ))
    {
        tmp_called_name_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_69 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 298;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 298;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_69, &PyTuple_GET_ITEM( const_tuple_9697a5e2e564347b16ed1cb098f05587_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 298;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 59, tmp_list_element_1 );
    tmp_called_name_70 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_70 == NULL ))
    {
        tmp_called_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_70 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 299;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 299;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_70, &PyTuple_GET_ITEM( const_tuple_45353a5ecbb9971e49387253d02aa926_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 299;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 60, tmp_list_element_1 );
    tmp_called_name_71 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_71 == NULL ))
    {
        tmp_called_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_71 == NULL )
    {
        Py_DECREF( tmp_assign_source_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 300;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 300;
    tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_71, &PyTuple_GET_ITEM( const_tuple_4690034a949ab9ca5f391d7593b67689_tuple, 0 ) );

    if ( tmp_list_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_100 );

        exception_lineno = 300;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_100, 61, tmp_list_element_1 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes, tmp_assign_source_100 );
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 303;

        goto frame_exception_exit_1;
    }

    tmp_compare_left_10 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_platform );
    if ( tmp_compare_left_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 303;

        goto frame_exception_exit_1;
    }
    tmp_compare_right_10 = const_str_plain_win32;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_10, tmp_compare_right_10 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_10 );

        exception_lineno = 303;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_10 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_left_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes );

    if (unlikely( tmp_left_name_1 == NULL ))
    {
        tmp_left_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__moved_attributes );
    }

    if ( tmp_left_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 304;

        goto frame_exception_exit_1;
    }

    tmp_right_name_1 = PyList_New( 1 );
    tmp_called_name_72 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_called_name_72 == NULL ))
    {
        tmp_called_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_called_name_72 == NULL )
    {
        Py_DECREF( tmp_right_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 305;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 305;
    tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_72, &PyTuple_GET_ITEM( const_tuple_str_plain_winreg_str_plain__winreg_tuple, 0 ) );

    if ( tmp_list_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 305;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_right_name_1, 0, tmp_list_element_2 );
    tmp_assign_source_101 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_assign_source_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes, tmp_assign_source_101 );
    branch_no_5:;
    tmp_iter_arg_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes );

    if (unlikely( tmp_iter_arg_1 == NULL ))
    {
        tmp_iter_arg_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__moved_attributes );
    }

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 308;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_102 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_102 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 308;

        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_102;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_103 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_103 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            exception_lineno = 308;
            goto try_except_handler_25;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_103;
        Py_XDECREF( old );
    }

    tmp_assign_source_104 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_104 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_104 );
    tmp_setattr_target_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_setattr_target_1 == NULL ))
    {
        tmp_setattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 309;

        goto try_except_handler_25;
    }

    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 309;

        goto try_except_handler_25;
    }

    tmp_setattr_attr_1 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_name );
    if ( tmp_setattr_attr_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;

        goto try_except_handler_25;
    }
    tmp_setattr_value_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_1 == NULL ))
    {
        tmp_setattr_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_1 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 309;

        goto try_except_handler_25;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    Py_DECREF( tmp_setattr_attr_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 309;

        goto try_except_handler_25;
    }
    tmp_isinstance_inst_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_isinstance_inst_1 == NULL ))
    {
        tmp_isinstance_inst_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 310;

        goto try_except_handler_25;
    }

    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedModule );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedModule );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedModule" );
        exception_tb = NULL;

        exception_lineno = 310;

        goto try_except_handler_25;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 310;

        goto try_except_handler_25;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_14 == NULL ))
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 311;

        goto try_except_handler_25;
    }

    tmp_called_name_73 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__add_module );
    if ( tmp_called_name_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 311;

        goto try_except_handler_25;
    }
    tmp_args_element_name_26 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_args_element_name_26 == NULL ))
    {
        tmp_args_element_name_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_args_element_name_26 == NULL )
    {
        Py_DECREF( tmp_called_name_73 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 311;

        goto try_except_handler_25;
    }

    tmp_left_name_2 = const_str_digest_13baab1dc3d5588a95d9291b1530e6c0;
    tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_15 == NULL ))
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_15 == NULL )
    {
        Py_DECREF( tmp_called_name_73 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 311;

        goto try_except_handler_25;
    }

    tmp_right_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_name );
    if ( tmp_right_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_73 );

        exception_lineno = 311;

        goto try_except_handler_25;
    }
    tmp_args_element_name_27 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_args_element_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_73 );

        exception_lineno = 311;

        goto try_except_handler_25;
    }
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 311;
    {
        PyObject *call_args[] = { tmp_args_element_name_26, tmp_args_element_name_27 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_73, call_args );
    }

    Py_DECREF( tmp_called_name_73 );
    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 311;

        goto try_except_handler_25;
    }
    Py_DECREF( tmp_unused );
    branch_no_6:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 308;

        goto try_except_handler_25;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 312;

        goto frame_exception_exit_1;
    }

    tmp_assattr_name_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__moved_attributes );

    if (unlikely( tmp_assattr_name_1 == NULL ))
    {
        tmp_assattr_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__moved_attributes );
    }

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 314;

        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_assattr_target_1 == NULL ))
    {
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 314;

        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__moved_attributes, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 314;

        goto frame_exception_exit_1;
    }
    tmp_called_name_74 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__MovedItems );

    if (unlikely( tmp_called_name_74 == NULL ))
    {
        tmp_called_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__MovedItems );
    }

    if ( tmp_called_name_74 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_MovedItems" );
        exception_tb = NULL;

        exception_lineno = 316;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 316;
    tmp_assign_source_105 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_74, &PyTuple_GET_ITEM( const_tuple_str_digest_d8d4f5e440c7f01129293c18f6555af5_tuple, 0 ) );

    if ( tmp_assign_source_105 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 316;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves, tmp_assign_source_105 );
    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_16 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 317;

        goto frame_exception_exit_1;
    }

    tmp_called_name_75 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__add_module );
    if ( tmp_called_name_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 317;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_28 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_args_element_name_28 == NULL ))
    {
        tmp_args_element_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_args_element_name_28 == NULL )
    {
        Py_DECREF( tmp_called_name_75 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "moves" );
        exception_tb = NULL;

        exception_lineno = 317;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_29 = const_str_plain_moves;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 317;
    {
        PyObject *call_args[] = { tmp_args_element_name_28, tmp_args_element_name_29 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_75, call_args );
    }

    Py_DECREF( tmp_called_name_75 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 317;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_106 = PyTuple_New( 1 );
    tmp_tuple_element_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_6 == NULL ))
    {
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_assign_source_106 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 320;

        goto try_except_handler_26;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_assign_source_106, 0, tmp_tuple_element_6 );
    assert( tmp_class_creation_8__bases == NULL );
    tmp_class_creation_8__bases = tmp_assign_source_106;

    tmp_assign_source_108 = const_str_plain_six;
    assert( outline_7_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_108 );
    outline_7_var___module__ = tmp_assign_source_108;

    tmp_assign_source_109 = const_str_digest_12251381889b9eebcd7998baa486eb86;
    assert( outline_7_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_109 );
    outline_7_var___doc__ = tmp_assign_source_109;

    // Tried code:
    tmp_outline_return_value_12 = _PyDict_NewPresized( 2 );
    tmp_dict_value_31 = outline_7_var___module__;

    CHECK_OBJECT( tmp_dict_value_31 );
    tmp_dict_key_31 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_12, tmp_dict_key_31, tmp_dict_value_31 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_32 = outline_7_var___doc__;

    CHECK_OBJECT( tmp_dict_value_32 );
    tmp_dict_key_32 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_12, tmp_dict_key_32, tmp_dict_value_32 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_27;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_27:;
    CHECK_OBJECT( (PyObject *)outline_7_var___module__ );
    Py_DECREF( outline_7_var___module__ );
    outline_7_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_7_var___doc__ );
    Py_DECREF( outline_7_var___doc__ );
    outline_7_var___doc__ = NULL;

    goto outline_result_12;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_7_var___module__ );
    Py_DECREF( outline_7_var___module__ );
    outline_7_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_7_var___doc__ );
    Py_DECREF( outline_7_var___doc__ );
    outline_7_var___doc__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_12:;
    tmp_assign_source_107 = tmp_outline_return_value_12;
    assert( tmp_class_creation_8__class_dict == NULL );
    tmp_class_creation_8__class_dict = tmp_assign_source_107;

    tmp_compare_left_11 = const_str_plain___metaclass__;
    tmp_compare_right_11 = tmp_class_creation_8__class_dict;

    CHECK_OBJECT( tmp_compare_right_11 );
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_dict_name_8 = tmp_class_creation_8__class_dict;

    CHECK_OBJECT( tmp_dict_name_8 );
    tmp_key_name_8 = const_str_plain___metaclass__;
    tmp_assign_source_110 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
    if ( tmp_assign_source_110 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_26;
    }
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_subscribed_name_7 = tmp_class_creation_8__bases;

    CHECK_OBJECT( tmp_subscribed_name_7 );
    tmp_subscript_name_7 = const_int_0;
    tmp_assign_source_111 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    if ( tmp_assign_source_111 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_26;
    }
    assert( tmp_select_metaclass_8__base == NULL );
    tmp_select_metaclass_8__base = tmp_assign_source_111;

    // Tried code:
    // Tried code:
    tmp_source_name_17 = tmp_select_metaclass_8__base;

    CHECK_OBJECT( tmp_source_name_17 );
    tmp_outline_return_value_13 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_17 );
    if ( tmp_outline_return_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_29;
    }
    goto try_return_handler_28;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_29:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_15 );
    Py_XDECREF( exception_keeper_value_15 );
    Py_XDECREF( exception_keeper_tb_15 );
    tmp_type_arg_5 = tmp_select_metaclass_8__base;

    CHECK_OBJECT( tmp_type_arg_5 );
    tmp_outline_return_value_13 = BUILTIN_TYPE1( tmp_type_arg_5 );
    assert( tmp_outline_return_value_13 != NULL );
    goto try_return_handler_28;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_28:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_8__base );
    Py_DECREF( tmp_select_metaclass_8__base );
    tmp_select_metaclass_8__base = NULL;

    goto outline_result_13;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_8__base );
    Py_DECREF( tmp_select_metaclass_8__base );
    tmp_select_metaclass_8__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_13:;
    tmp_assign_source_110 = tmp_outline_return_value_13;
    condexpr_end_9:;
    assert( tmp_class_creation_8__metaclass == NULL );
    tmp_class_creation_8__metaclass = tmp_assign_source_110;

    tmp_called_name_76 = tmp_class_creation_8__metaclass;

    CHECK_OBJECT( tmp_called_name_76 );
    tmp_args_element_name_30 = const_str_plain_Module_six_moves_urllib_parse;
    tmp_args_element_name_31 = tmp_class_creation_8__bases;

    CHECK_OBJECT( tmp_args_element_name_31 );
    tmp_args_element_name_32 = tmp_class_creation_8__class_dict;

    CHECK_OBJECT( tmp_args_element_name_32 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 320;
    {
        PyObject *call_args[] = { tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32 };
        tmp_assign_source_112 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_76, call_args );
    }

    if ( tmp_assign_source_112 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_26;
    }
    assert( tmp_class_creation_8__class == NULL );
    tmp_class_creation_8__class = tmp_assign_source_112;

    goto try_end_11;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    tmp_assign_source_113 = tmp_class_creation_8__class;

    CHECK_OBJECT( tmp_assign_source_113 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse, tmp_assign_source_113 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class );
    Py_DECREF( tmp_class_creation_8__class );
    tmp_class_creation_8__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__bases );
    Py_DECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class_dict );
    Py_DECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__metaclass );
    Py_DECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    tmp_assign_source_114 = PyList_New( 23 );
    tmp_called_name_77 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_77 == NULL ))
    {
        tmp_called_name_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_77 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 326;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 326;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_77, &PyTuple_GET_ITEM( const_tuple_984a3c0b9d6169d86acb2dc8b260b341_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 326;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 0, tmp_list_element_3 );
    tmp_called_name_78 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_78 == NULL ))
    {
        tmp_called_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_78 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 327;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 327;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_78, &PyTuple_GET_ITEM( const_tuple_78e9781575bd6d8322d39e052488fa24_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 327;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 1, tmp_list_element_3 );
    tmp_called_name_79 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_79 == NULL ))
    {
        tmp_called_name_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_79 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 328;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 328;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_79, &PyTuple_GET_ITEM( const_tuple_cf52b2b37e911829df5ff352b85be861_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 328;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 2, tmp_list_element_3 );
    tmp_called_name_80 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_80 == NULL ))
    {
        tmp_called_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_80 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 329;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 329;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_80, &PyTuple_GET_ITEM( const_tuple_9ff7e2fe8abf63b3e87d03f2088c5d5b_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 329;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 3, tmp_list_element_3 );
    tmp_called_name_81 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_81 == NULL ))
    {
        tmp_called_name_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_81 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 330;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 330;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_81, &PyTuple_GET_ITEM( const_tuple_660bb9f22a6b0a50d22309f5a819d5b9_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 330;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 4, tmp_list_element_3 );
    tmp_called_name_82 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_82 == NULL ))
    {
        tmp_called_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_82 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 331;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 331;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_82, &PyTuple_GET_ITEM( const_tuple_96d5029fff2746470ef46a3ceb6051e9_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 331;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 5, tmp_list_element_3 );
    tmp_called_name_83 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_83 == NULL ))
    {
        tmp_called_name_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_83 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 332;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 332;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_83, &PyTuple_GET_ITEM( const_tuple_fb3ff378eab016f1fbe37ce5c0b2a7a2_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 332;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 6, tmp_list_element_3 );
    tmp_called_name_84 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_84 == NULL ))
    {
        tmp_called_name_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_84 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 333;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 333;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_84, &PyTuple_GET_ITEM( const_tuple_a766c17241115f6922b493dfd444b3b5_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 333;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 7, tmp_list_element_3 );
    tmp_called_name_85 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_85 == NULL ))
    {
        tmp_called_name_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_85 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 334;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 334;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_85, &PyTuple_GET_ITEM( const_tuple_bac0c0a02283d00086e7154e3ccd16fa_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 334;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 8, tmp_list_element_3 );
    tmp_called_name_86 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_86 == NULL ))
    {
        tmp_called_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_86 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 335;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 335;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_86, &PyTuple_GET_ITEM( const_tuple_251221e54a5302daeb82388ea082ec95_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 335;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 9, tmp_list_element_3 );
    tmp_called_name_87 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_87 == NULL ))
    {
        tmp_called_name_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_87 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 336;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 336;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_87, &PyTuple_GET_ITEM( const_tuple_0aeb88ab8b07f50c3aa99cca279585f5_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 336;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 10, tmp_list_element_3 );
    tmp_called_name_88 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_88 == NULL ))
    {
        tmp_called_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_88 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 337;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 337;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_88, &PyTuple_GET_ITEM( const_tuple_df925d4985bc969100774d9243b00230_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 337;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 11, tmp_list_element_3 );
    tmp_called_name_89 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_89 == NULL ))
    {
        tmp_called_name_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_89 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 338;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 338;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_89, &PyTuple_GET_ITEM( const_tuple_babec2abb7e153e924c00b8631fa8b3e_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 338;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 12, tmp_list_element_3 );
    tmp_called_name_90 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_90 == NULL ))
    {
        tmp_called_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_90 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 339;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 339;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_90, &PyTuple_GET_ITEM( const_tuple_3c2cfa4d8d869eac22bbe9f4c9750958_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 339;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 13, tmp_list_element_3 );
    tmp_called_name_91 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_91 == NULL ))
    {
        tmp_called_name_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_91 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 340;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 340;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_91, &PyTuple_GET_ITEM( const_tuple_49e1c219cac19618803b54f7bbc6a8b3_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 340;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 14, tmp_list_element_3 );
    tmp_called_name_92 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_92 == NULL ))
    {
        tmp_called_name_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_92 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 341;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 341;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_92, &PyTuple_GET_ITEM( const_tuple_26533cd3b686453399a2fcd7c33efdc4_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 341;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 15, tmp_list_element_3 );
    tmp_called_name_93 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_93 == NULL ))
    {
        tmp_called_name_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_93 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 342;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 342;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_93, &PyTuple_GET_ITEM( const_tuple_d573636f316e67f758ce3eddfc433d39_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 342;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 16, tmp_list_element_3 );
    tmp_called_name_94 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_94 == NULL ))
    {
        tmp_called_name_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_94 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 343;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 343;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_94, &PyTuple_GET_ITEM( const_tuple_a3a1664206aaa7cec123aae86a15e82f_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 343;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 17, tmp_list_element_3 );
    tmp_called_name_95 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_95 == NULL ))
    {
        tmp_called_name_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_95 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 344;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 344;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_95, &PyTuple_GET_ITEM( const_tuple_54b4c1ec2d6520f4636e0ca09f0dc192_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 344;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 18, tmp_list_element_3 );
    tmp_called_name_96 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_96 == NULL ))
    {
        tmp_called_name_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_96 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 345;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 345;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_96, &PyTuple_GET_ITEM( const_tuple_ff4d67a7d238296854403a8ee68e5eb0_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 345;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 19, tmp_list_element_3 );
    tmp_called_name_97 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_97 == NULL ))
    {
        tmp_called_name_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_97 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 346;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 346;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_97, &PyTuple_GET_ITEM( const_tuple_1ca2df1302c361039c60608fe3780090_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 346;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 20, tmp_list_element_3 );
    tmp_called_name_98 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_98 == NULL ))
    {
        tmp_called_name_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_98 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 347;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 347;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_98, &PyTuple_GET_ITEM( const_tuple_187fbe928d64ead4410a5c32362e3350_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 347;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 21, tmp_list_element_3 );
    tmp_called_name_99 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_99 == NULL ))
    {
        tmp_called_name_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_99 == NULL )
    {
        Py_DECREF( tmp_assign_source_114 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 348;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 348;
    tmp_list_element_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_99, &PyTuple_GET_ITEM( const_tuple_bfa27b76382800d90ae398d88a50f5e8_tuple, 0 ) );

    if ( tmp_list_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_114 );

        exception_lineno = 348;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_114, 22, tmp_list_element_3 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes, tmp_assign_source_114 );
    tmp_iter_arg_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );

    if (unlikely( tmp_iter_arg_2 == NULL ))
    {
        tmp_iter_arg_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );
    }

    if ( tmp_iter_arg_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_parse_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 350;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_115 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_115 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 350;

        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_115;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_116 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_116 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            exception_lineno = 350;
            goto try_except_handler_30;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_116;
        Py_XDECREF( old );
    }

    tmp_assign_source_117 = tmp_for_loop_2__iter_value;

    CHECK_OBJECT( tmp_assign_source_117 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_117 );
    tmp_setattr_target_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );

    if (unlikely( tmp_setattr_target_2 == NULL ))
    {
        tmp_setattr_target_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );
    }

    if ( tmp_setattr_target_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_parse" );
        exception_tb = NULL;

        exception_lineno = 351;

        goto try_except_handler_30;
    }

    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_18 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 351;

        goto try_except_handler_30;
    }

    tmp_setattr_attr_2 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_name );
    if ( tmp_setattr_attr_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 351;

        goto try_except_handler_30;
    }
    tmp_setattr_value_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_2 == NULL ))
    {
        tmp_setattr_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_2 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 351;

        goto try_except_handler_30;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_2, tmp_setattr_attr_2, tmp_setattr_value_2 );
    Py_DECREF( tmp_setattr_attr_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 351;

        goto try_except_handler_30;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 350;

        goto try_except_handler_30;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 352;

        goto frame_exception_exit_1;
    }

    tmp_assattr_name_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );

    if (unlikely( tmp_assattr_name_2 == NULL ))
    {
        tmp_assattr_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_parse_moved_attributes );
    }

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_parse_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 354;

        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );

    if (unlikely( tmp_assattr_target_2 == NULL ))
    {
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );
    }

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_parse" );
        exception_tb = NULL;

        exception_lineno = 354;

        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__moved_attributes, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto frame_exception_exit_1;
    }
    tmp_source_name_19 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_19 == NULL ))
    {
        tmp_source_name_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_19 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 356;

        goto frame_exception_exit_1;
    }

    tmp_called_name_100 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain__add_module );
    if ( tmp_called_name_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 356;

        goto frame_exception_exit_1;
    }
    tmp_called_name_101 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );

    if (unlikely( tmp_called_name_101 == NULL ))
    {
        tmp_called_name_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_parse );
    }

    if ( tmp_called_name_101 == NULL )
    {
        Py_DECREF( tmp_called_name_100 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_parse" );
        exception_tb = NULL;

        exception_lineno = 356;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 356;
    tmp_args_element_name_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_101, &PyTuple_GET_ITEM( const_tuple_str_digest_da28dd0fdfcf2d692298525ceb765fa8_tuple, 0 ) );

    if ( tmp_args_element_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_100 );

        exception_lineno = 356;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_34 = const_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd;
    tmp_args_element_name_35 = const_str_digest_1a36329ae97c46a5978110ca53f2f5e7;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 356;
    {
        PyObject *call_args[] = { tmp_args_element_name_33, tmp_args_element_name_34, tmp_args_element_name_35 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_100, call_args );
    }

    Py_DECREF( tmp_called_name_100 );
    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 356;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_118 = PyTuple_New( 1 );
    tmp_tuple_element_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_7 == NULL ))
    {
        tmp_tuple_element_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_118 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 360;

        goto try_except_handler_31;
    }

    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_assign_source_118, 0, tmp_tuple_element_7 );
    assert( tmp_class_creation_9__bases == NULL );
    tmp_class_creation_9__bases = tmp_assign_source_118;

    tmp_assign_source_120 = const_str_plain_six;
    assert( outline_8_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_120 );
    outline_8_var___module__ = tmp_assign_source_120;

    tmp_assign_source_121 = const_str_digest_53317e6be879446851f4fe6f94b546e7;
    assert( outline_8_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_121 );
    outline_8_var___doc__ = tmp_assign_source_121;

    // Tried code:
    tmp_outline_return_value_14 = _PyDict_NewPresized( 2 );
    tmp_dict_value_33 = outline_8_var___module__;

    CHECK_OBJECT( tmp_dict_value_33 );
    tmp_dict_key_33 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_14, tmp_dict_key_33, tmp_dict_value_33 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_34 = outline_8_var___doc__;

    CHECK_OBJECT( tmp_dict_value_34 );
    tmp_dict_key_34 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_14, tmp_dict_key_34, tmp_dict_value_34 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_32;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_32:;
    CHECK_OBJECT( (PyObject *)outline_8_var___module__ );
    Py_DECREF( outline_8_var___module__ );
    outline_8_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_8_var___doc__ );
    Py_DECREF( outline_8_var___doc__ );
    outline_8_var___doc__ = NULL;

    goto outline_result_14;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_8_var___module__ );
    Py_DECREF( outline_8_var___module__ );
    outline_8_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_8_var___doc__ );
    Py_DECREF( outline_8_var___doc__ );
    outline_8_var___doc__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_14:;
    tmp_assign_source_119 = tmp_outline_return_value_14;
    assert( tmp_class_creation_9__class_dict == NULL );
    tmp_class_creation_9__class_dict = tmp_assign_source_119;

    tmp_compare_left_12 = const_str_plain___metaclass__;
    tmp_compare_right_12 = tmp_class_creation_9__class_dict;

    CHECK_OBJECT( tmp_compare_right_12 );
    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_dict_name_9 = tmp_class_creation_9__class_dict;

    CHECK_OBJECT( tmp_dict_name_9 );
    tmp_key_name_9 = const_str_plain___metaclass__;
    tmp_assign_source_122 = DICT_GET_ITEM( tmp_dict_name_9, tmp_key_name_9 );
    if ( tmp_assign_source_122 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 360;

        goto try_except_handler_31;
    }
    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_subscribed_name_8 = tmp_class_creation_9__bases;

    CHECK_OBJECT( tmp_subscribed_name_8 );
    tmp_subscript_name_8 = const_int_0;
    tmp_assign_source_123 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    if ( tmp_assign_source_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 360;

        goto try_except_handler_31;
    }
    assert( tmp_select_metaclass_9__base == NULL );
    tmp_select_metaclass_9__base = tmp_assign_source_123;

    // Tried code:
    // Tried code:
    tmp_source_name_20 = tmp_select_metaclass_9__base;

    CHECK_OBJECT( tmp_source_name_20 );
    tmp_outline_return_value_15 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_20 );
    if ( tmp_outline_return_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 360;

        goto try_except_handler_34;
    }
    goto try_return_handler_33;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_34:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_18 );
    Py_XDECREF( exception_keeper_value_18 );
    Py_XDECREF( exception_keeper_tb_18 );
    tmp_type_arg_6 = tmp_select_metaclass_9__base;

    CHECK_OBJECT( tmp_type_arg_6 );
    tmp_outline_return_value_15 = BUILTIN_TYPE1( tmp_type_arg_6 );
    assert( tmp_outline_return_value_15 != NULL );
    goto try_return_handler_33;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_33:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_9__base );
    Py_DECREF( tmp_select_metaclass_9__base );
    tmp_select_metaclass_9__base = NULL;

    goto outline_result_15;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_9__base );
    Py_DECREF( tmp_select_metaclass_9__base );
    tmp_select_metaclass_9__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_15:;
    tmp_assign_source_122 = tmp_outline_return_value_15;
    condexpr_end_10:;
    assert( tmp_class_creation_9__metaclass == NULL );
    tmp_class_creation_9__metaclass = tmp_assign_source_122;

    tmp_called_name_102 = tmp_class_creation_9__metaclass;

    CHECK_OBJECT( tmp_called_name_102 );
    tmp_args_element_name_36 = const_str_plain_Module_six_moves_urllib_error;
    tmp_args_element_name_37 = tmp_class_creation_9__bases;

    CHECK_OBJECT( tmp_args_element_name_37 );
    tmp_args_element_name_38 = tmp_class_creation_9__class_dict;

    CHECK_OBJECT( tmp_args_element_name_38 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 360;
    {
        PyObject *call_args[] = { tmp_args_element_name_36, tmp_args_element_name_37, tmp_args_element_name_38 };
        tmp_assign_source_124 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_102, call_args );
    }

    if ( tmp_assign_source_124 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 360;

        goto try_except_handler_31;
    }
    assert( tmp_class_creation_9__class == NULL );
    tmp_class_creation_9__class = tmp_assign_source_124;

    goto try_end_13;
    // Exception handler code:
    try_except_handler_31:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    tmp_assign_source_125 = tmp_class_creation_9__class;

    CHECK_OBJECT( tmp_assign_source_125 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error, tmp_assign_source_125 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class );
    Py_DECREF( tmp_class_creation_9__class );
    tmp_class_creation_9__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__bases );
    Py_DECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class_dict );
    Py_DECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__metaclass );
    Py_DECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    tmp_assign_source_126 = PyList_New( 3 );
    tmp_called_name_103 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_103 == NULL ))
    {
        tmp_called_name_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_103 == NULL )
    {
        Py_DECREF( tmp_assign_source_126 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 366;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 366;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_103, &PyTuple_GET_ITEM( const_tuple_0db68c6d9d6e9f72fb07658a5f445faa_tuple, 0 ) );

    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_126 );

        exception_lineno = 366;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_126, 0, tmp_list_element_4 );
    tmp_called_name_104 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_104 == NULL ))
    {
        tmp_called_name_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_104 == NULL )
    {
        Py_DECREF( tmp_assign_source_126 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 367;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 367;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_104, &PyTuple_GET_ITEM( const_tuple_d480c8e131efdfec2fb5132c1c72fa41_tuple, 0 ) );

    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_126 );

        exception_lineno = 367;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_126, 1, tmp_list_element_4 );
    tmp_called_name_105 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_105 == NULL ))
    {
        tmp_called_name_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_126 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 368;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 368;
    tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_105, &PyTuple_GET_ITEM( const_tuple_3b157fc36a8865a9b3c7d8f99bdfe584_tuple, 0 ) );

    if ( tmp_list_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_126 );

        exception_lineno = 368;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_126, 2, tmp_list_element_4 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes, tmp_assign_source_126 );
    tmp_iter_arg_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );

    if (unlikely( tmp_iter_arg_3 == NULL ))
    {
        tmp_iter_arg_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );
    }

    if ( tmp_iter_arg_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_error_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 370;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_127 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_127 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 370;

        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_127;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    CHECK_OBJECT( tmp_next_source_3 );
    tmp_assign_source_128 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_128 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            exception_lineno = 370;
            goto try_except_handler_35;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_128;
        Py_XDECREF( old );
    }

    tmp_assign_source_129 = tmp_for_loop_3__iter_value;

    CHECK_OBJECT( tmp_assign_source_129 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_129 );
    tmp_setattr_target_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );

    if (unlikely( tmp_setattr_target_3 == NULL ))
    {
        tmp_setattr_target_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );
    }

    if ( tmp_setattr_target_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_error" );
        exception_tb = NULL;

        exception_lineno = 371;

        goto try_except_handler_35;
    }

    tmp_source_name_21 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_21 == NULL ))
    {
        tmp_source_name_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_21 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 371;

        goto try_except_handler_35;
    }

    tmp_setattr_attr_3 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_name );
    if ( tmp_setattr_attr_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 371;

        goto try_except_handler_35;
    }
    tmp_setattr_value_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_3 == NULL ))
    {
        tmp_setattr_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_3 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 371;

        goto try_except_handler_35;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_3, tmp_setattr_attr_3, tmp_setattr_value_3 );
    Py_DECREF( tmp_setattr_attr_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 371;

        goto try_except_handler_35;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 370;

        goto try_except_handler_35;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_14;
    // Exception handler code:
    try_except_handler_35:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 372;

        goto frame_exception_exit_1;
    }

    tmp_assattr_name_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );

    if (unlikely( tmp_assattr_name_3 == NULL ))
    {
        tmp_assattr_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_error_moved_attributes );
    }

    if ( tmp_assattr_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_error_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 374;

        goto frame_exception_exit_1;
    }

    tmp_assattr_target_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );

    if (unlikely( tmp_assattr_target_3 == NULL ))
    {
        tmp_assattr_target_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );
    }

    if ( tmp_assattr_target_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_error" );
        exception_tb = NULL;

        exception_lineno = 374;

        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__moved_attributes, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 374;

        goto frame_exception_exit_1;
    }
    tmp_source_name_22 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_22 == NULL ))
    {
        tmp_source_name_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_22 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 376;

        goto frame_exception_exit_1;
    }

    tmp_called_name_106 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain__add_module );
    if ( tmp_called_name_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 376;

        goto frame_exception_exit_1;
    }
    tmp_called_name_107 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );

    if (unlikely( tmp_called_name_107 == NULL ))
    {
        tmp_called_name_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_error );
    }

    if ( tmp_called_name_107 == NULL )
    {
        Py_DECREF( tmp_called_name_106 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_error" );
        exception_tb = NULL;

        exception_lineno = 376;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 376;
    tmp_args_element_name_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_107, &PyTuple_GET_ITEM( const_tuple_str_digest_345fae18cb5b2b245881e77b200cffe5_tuple, 0 ) );

    if ( tmp_args_element_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_106 );

        exception_lineno = 376;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_40 = const_str_digest_cc1200855d2ddc077676ac963b3ffc09;
    tmp_args_element_name_41 = const_str_digest_836236e827883e9923f3b043ffe4640d;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 376;
    {
        PyObject *call_args[] = { tmp_args_element_name_39, tmp_args_element_name_40, tmp_args_element_name_41 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_106, call_args );
    }

    Py_DECREF( tmp_called_name_106 );
    Py_DECREF( tmp_args_element_name_39 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 376;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_130 = PyTuple_New( 1 );
    tmp_tuple_element_8 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_8 == NULL ))
    {
        tmp_tuple_element_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_130 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 380;

        goto try_except_handler_36;
    }

    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_assign_source_130, 0, tmp_tuple_element_8 );
    assert( tmp_class_creation_10__bases == NULL );
    tmp_class_creation_10__bases = tmp_assign_source_130;

    tmp_assign_source_132 = const_str_plain_six;
    assert( outline_9_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_132 );
    outline_9_var___module__ = tmp_assign_source_132;

    tmp_assign_source_133 = const_str_digest_f13c881fad34db50f71983f3aeb67682;
    assert( outline_9_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_133 );
    outline_9_var___doc__ = tmp_assign_source_133;

    // Tried code:
    tmp_outline_return_value_16 = _PyDict_NewPresized( 2 );
    tmp_dict_value_35 = outline_9_var___module__;

    CHECK_OBJECT( tmp_dict_value_35 );
    tmp_dict_key_35 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_16, tmp_dict_key_35, tmp_dict_value_35 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_36 = outline_9_var___doc__;

    CHECK_OBJECT( tmp_dict_value_36 );
    tmp_dict_key_36 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_16, tmp_dict_key_36, tmp_dict_value_36 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_37;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_37:;
    CHECK_OBJECT( (PyObject *)outline_9_var___module__ );
    Py_DECREF( outline_9_var___module__ );
    outline_9_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_9_var___doc__ );
    Py_DECREF( outline_9_var___doc__ );
    outline_9_var___doc__ = NULL;

    goto outline_result_16;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_9_var___module__ );
    Py_DECREF( outline_9_var___module__ );
    outline_9_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_9_var___doc__ );
    Py_DECREF( outline_9_var___doc__ );
    outline_9_var___doc__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_16:;
    tmp_assign_source_131 = tmp_outline_return_value_16;
    assert( tmp_class_creation_10__class_dict == NULL );
    tmp_class_creation_10__class_dict = tmp_assign_source_131;

    tmp_compare_left_13 = const_str_plain___metaclass__;
    tmp_compare_right_13 = tmp_class_creation_10__class_dict;

    CHECK_OBJECT( tmp_compare_right_13 );
    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    assert( !(tmp_cmp_In_10 == -1) );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto condexpr_true_11;
    }
    else
    {
        goto condexpr_false_11;
    }
    condexpr_true_11:;
    tmp_dict_name_10 = tmp_class_creation_10__class_dict;

    CHECK_OBJECT( tmp_dict_name_10 );
    tmp_key_name_10 = const_str_plain___metaclass__;
    tmp_assign_source_134 = DICT_GET_ITEM( tmp_dict_name_10, tmp_key_name_10 );
    if ( tmp_assign_source_134 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 380;

        goto try_except_handler_36;
    }
    goto condexpr_end_11;
    condexpr_false_11:;
    tmp_subscribed_name_9 = tmp_class_creation_10__bases;

    CHECK_OBJECT( tmp_subscribed_name_9 );
    tmp_subscript_name_9 = const_int_0;
    tmp_assign_source_135 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
    if ( tmp_assign_source_135 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 380;

        goto try_except_handler_36;
    }
    assert( tmp_select_metaclass_10__base == NULL );
    tmp_select_metaclass_10__base = tmp_assign_source_135;

    // Tried code:
    // Tried code:
    tmp_source_name_23 = tmp_select_metaclass_10__base;

    CHECK_OBJECT( tmp_source_name_23 );
    tmp_outline_return_value_17 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_23 );
    if ( tmp_outline_return_value_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 380;

        goto try_except_handler_39;
    }
    goto try_return_handler_38;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_39:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_21 );
    Py_XDECREF( exception_keeper_value_21 );
    Py_XDECREF( exception_keeper_tb_21 );
    tmp_type_arg_7 = tmp_select_metaclass_10__base;

    CHECK_OBJECT( tmp_type_arg_7 );
    tmp_outline_return_value_17 = BUILTIN_TYPE1( tmp_type_arg_7 );
    assert( tmp_outline_return_value_17 != NULL );
    goto try_return_handler_38;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_38:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_10__base );
    Py_DECREF( tmp_select_metaclass_10__base );
    tmp_select_metaclass_10__base = NULL;

    goto outline_result_17;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_10__base );
    Py_DECREF( tmp_select_metaclass_10__base );
    tmp_select_metaclass_10__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_17:;
    tmp_assign_source_134 = tmp_outline_return_value_17;
    condexpr_end_11:;
    assert( tmp_class_creation_10__metaclass == NULL );
    tmp_class_creation_10__metaclass = tmp_assign_source_134;

    tmp_called_name_108 = tmp_class_creation_10__metaclass;

    CHECK_OBJECT( tmp_called_name_108 );
    tmp_args_element_name_42 = const_str_plain_Module_six_moves_urllib_request;
    tmp_args_element_name_43 = tmp_class_creation_10__bases;

    CHECK_OBJECT( tmp_args_element_name_43 );
    tmp_args_element_name_44 = tmp_class_creation_10__class_dict;

    CHECK_OBJECT( tmp_args_element_name_44 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 380;
    {
        PyObject *call_args[] = { tmp_args_element_name_42, tmp_args_element_name_43, tmp_args_element_name_44 };
        tmp_assign_source_136 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_108, call_args );
    }

    if ( tmp_assign_source_136 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 380;

        goto try_except_handler_36;
    }
    assert( tmp_class_creation_10__class == NULL );
    tmp_class_creation_10__class = tmp_assign_source_136;

    goto try_end_15;
    // Exception handler code:
    try_except_handler_36:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_22;
    exception_value = exception_keeper_value_22;
    exception_tb = exception_keeper_tb_22;
    exception_lineno = exception_keeper_lineno_22;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    tmp_assign_source_137 = tmp_class_creation_10__class;

    CHECK_OBJECT( tmp_assign_source_137 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request, tmp_assign_source_137 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class );
    Py_DECREF( tmp_class_creation_10__class );
    tmp_class_creation_10__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__bases );
    Py_DECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class_dict );
    Py_DECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__metaclass );
    Py_DECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    tmp_assign_source_138 = PyList_New( 33 );
    tmp_called_name_109 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_109 == NULL ))
    {
        tmp_called_name_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_109 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 386;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 386;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_109, &PyTuple_GET_ITEM( const_tuple_a6f1f81e42e5089d1024dd955c26fecb_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 386;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 0, tmp_list_element_5 );
    tmp_called_name_110 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_110 == NULL ))
    {
        tmp_called_name_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_110 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 387;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 387;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_110, &PyTuple_GET_ITEM( const_tuple_e99c3cc9ae070defe545bc4670ffe562_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 387;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 1, tmp_list_element_5 );
    tmp_called_name_111 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_111 == NULL ))
    {
        tmp_called_name_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 388;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 388;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_111, &PyTuple_GET_ITEM( const_tuple_2792b1645e86bd168640ecdc181de7f0_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 388;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 2, tmp_list_element_5 );
    tmp_called_name_112 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_112 == NULL ))
    {
        tmp_called_name_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_112 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 389;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 389;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_112, &PyTuple_GET_ITEM( const_tuple_3995f12c179c3da99f4c894c4c4d2f62_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 389;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 3, tmp_list_element_5 );
    tmp_called_name_113 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_113 == NULL ))
    {
        tmp_called_name_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_113 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 390;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 390;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_113, &PyTuple_GET_ITEM( const_tuple_396a7f2f1c8cc1a49644e2d70fbf84b7_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 390;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 4, tmp_list_element_5 );
    tmp_called_name_114 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_114 == NULL ))
    {
        tmp_called_name_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 391;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 391;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_114, &PyTuple_GET_ITEM( const_tuple_ccc5148c1ffc3bb25867fbbb42b14935_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 391;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 5, tmp_list_element_5 );
    tmp_called_name_115 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_115 == NULL ))
    {
        tmp_called_name_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_115 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 392;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 392;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_115, &PyTuple_GET_ITEM( const_tuple_2a18a27202a0de4adbc95ba8a11f560f_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 392;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 6, tmp_list_element_5 );
    tmp_called_name_116 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_116 == NULL ))
    {
        tmp_called_name_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_116 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 393;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 393;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_116, &PyTuple_GET_ITEM( const_tuple_389a28f291802cc0a0085952a3a22b60_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 393;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 7, tmp_list_element_5 );
    tmp_called_name_117 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_117 == NULL ))
    {
        tmp_called_name_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_117 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 394;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 394;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_117, &PyTuple_GET_ITEM( const_tuple_94ed24c5de0b5faae2f5a276954e68c7_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 394;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 8, tmp_list_element_5 );
    tmp_called_name_118 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_118 == NULL ))
    {
        tmp_called_name_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_118 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 395;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 395;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_118, &PyTuple_GET_ITEM( const_tuple_8292d771d0d3943f00d787fb78144aa5_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 395;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 9, tmp_list_element_5 );
    tmp_called_name_119 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_119 == NULL ))
    {
        tmp_called_name_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_119 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 396;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 396;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_119, &PyTuple_GET_ITEM( const_tuple_d163cfbffab84df59e8dd6da3f628bcf_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 396;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 10, tmp_list_element_5 );
    tmp_called_name_120 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_120 == NULL ))
    {
        tmp_called_name_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 397;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 397;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_120, &PyTuple_GET_ITEM( const_tuple_e947148020cbfcd708486a3b1b35ad67_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 397;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 11, tmp_list_element_5 );
    tmp_called_name_121 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_121 == NULL ))
    {
        tmp_called_name_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_121 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 398;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 398;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_121, &PyTuple_GET_ITEM( const_tuple_b473fdb3fae60eb77f013c32c3ffb3fc_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 398;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 12, tmp_list_element_5 );
    tmp_called_name_122 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_122 == NULL ))
    {
        tmp_called_name_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_122 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 399;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 399;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_122, &PyTuple_GET_ITEM( const_tuple_efb9818f797f41ca8cd537504758b934_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 399;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 13, tmp_list_element_5 );
    tmp_called_name_123 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_123 == NULL ))
    {
        tmp_called_name_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_123 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 400;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 400;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_123, &PyTuple_GET_ITEM( const_tuple_baab2066a890f5a4da9f9b0b9fd29426_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 400;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 14, tmp_list_element_5 );
    tmp_called_name_124 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_124 == NULL ))
    {
        tmp_called_name_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_124 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 401;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 401;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_124, &PyTuple_GET_ITEM( const_tuple_2801f9d5853d87578e3fa44023dd4fca_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 401;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 15, tmp_list_element_5 );
    tmp_called_name_125 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_125 == NULL ))
    {
        tmp_called_name_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_125 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 402;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 402;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_125, &PyTuple_GET_ITEM( const_tuple_bc4631e0500ad0200707b6322dc1e719_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 402;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 16, tmp_list_element_5 );
    tmp_called_name_126 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_126 == NULL ))
    {
        tmp_called_name_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 403;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 403;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_126, &PyTuple_GET_ITEM( const_tuple_586a1339d35425b5e4ad734e75b48193_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 403;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 17, tmp_list_element_5 );
    tmp_called_name_127 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_127 == NULL ))
    {
        tmp_called_name_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_127 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 404;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 404;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_127, &PyTuple_GET_ITEM( const_tuple_98dea5b39ce2f80cd635f22e0bf8279d_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 404;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 18, tmp_list_element_5 );
    tmp_called_name_128 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_128 == NULL ))
    {
        tmp_called_name_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_128 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 405;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 405;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_128, &PyTuple_GET_ITEM( const_tuple_02f51975eddf6871d90b3972207564b4_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 405;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 19, tmp_list_element_5 );
    tmp_called_name_129 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_129 == NULL ))
    {
        tmp_called_name_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_129 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 406;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 406;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_129, &PyTuple_GET_ITEM( const_tuple_547fe239a3216bb76fb01949941399cd_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 406;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 20, tmp_list_element_5 );
    tmp_called_name_130 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_130 == NULL ))
    {
        tmp_called_name_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_130 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 407;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 407;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_130, &PyTuple_GET_ITEM( const_tuple_31e595002f80a39949775964212a97b9_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 407;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 21, tmp_list_element_5 );
    tmp_called_name_131 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_131 == NULL ))
    {
        tmp_called_name_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_131 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 408;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 408;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_131, &PyTuple_GET_ITEM( const_tuple_1a887db86b993bc5af6452d60025b66a_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 408;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 22, tmp_list_element_5 );
    tmp_called_name_132 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_132 == NULL ))
    {
        tmp_called_name_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_132 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 409;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 409;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_132, &PyTuple_GET_ITEM( const_tuple_60129dcac20b2fd977caf96a60c6f195_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 409;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 23, tmp_list_element_5 );
    tmp_called_name_133 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_133 == NULL ))
    {
        tmp_called_name_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_133 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 410;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 410;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_133, &PyTuple_GET_ITEM( const_tuple_536bae295f6c691eda7efd286d7e1ec3_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 410;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 24, tmp_list_element_5 );
    tmp_called_name_134 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_134 == NULL ))
    {
        tmp_called_name_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_134 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 411;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 411;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_134, &PyTuple_GET_ITEM( const_tuple_320c4efc844604789134735e48a67fb0_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 411;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 25, tmp_list_element_5 );
    tmp_called_name_135 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_135 == NULL ))
    {
        tmp_called_name_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_135 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 412;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 412;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_135, &PyTuple_GET_ITEM( const_tuple_4c109344b1de9cdf741fe56a6a856fad_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 412;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 26, tmp_list_element_5 );
    tmp_called_name_136 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_136 == NULL ))
    {
        tmp_called_name_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_136 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 413;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 413;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_136, &PyTuple_GET_ITEM( const_tuple_46f723d6309298cb06eb75b900616e85_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 413;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 27, tmp_list_element_5 );
    tmp_called_name_137 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_137 == NULL ))
    {
        tmp_called_name_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_137 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 414;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 414;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_137, &PyTuple_GET_ITEM( const_tuple_75a767cdb7534ca136a0d52bc78149c5_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 414;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 28, tmp_list_element_5 );
    tmp_called_name_138 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_138 == NULL ))
    {
        tmp_called_name_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_138 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 415;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 415;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_138, &PyTuple_GET_ITEM( const_tuple_bb96d7dab96c950426bed873db7c315f_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 415;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 29, tmp_list_element_5 );
    tmp_called_name_139 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_139 == NULL ))
    {
        tmp_called_name_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_139 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 416;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 416;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_139, &PyTuple_GET_ITEM( const_tuple_b7e39273727f74459e3203a2be1ea787_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 416;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 30, tmp_list_element_5 );
    tmp_called_name_140 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_140 == NULL ))
    {
        tmp_called_name_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_140 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 417;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 417;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_140, &PyTuple_GET_ITEM( const_tuple_99eb417383bb9fbe2453d9fa8f007261_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 417;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 31, tmp_list_element_5 );
    tmp_called_name_141 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_141 == NULL ))
    {
        tmp_called_name_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_141 == NULL )
    {
        Py_DECREF( tmp_assign_source_138 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 418;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 418;
    tmp_list_element_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_141, &PyTuple_GET_ITEM( const_tuple_f6d2b5ea4f78df02af3dc15c90b4619a_tuple, 0 ) );

    if ( tmp_list_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_138 );

        exception_lineno = 418;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_138, 32, tmp_list_element_5 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes, tmp_assign_source_138 );
    tmp_iter_arg_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );

    if (unlikely( tmp_iter_arg_4 == NULL ))
    {
        tmp_iter_arg_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );
    }

    if ( tmp_iter_arg_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_request_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 420;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_139 = MAKE_ITERATOR( tmp_iter_arg_4 );
    if ( tmp_assign_source_139 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 420;

        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_139;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    CHECK_OBJECT( tmp_next_source_4 );
    tmp_assign_source_140 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_140 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            exception_lineno = 420;
            goto try_except_handler_40;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_140;
        Py_XDECREF( old );
    }

    tmp_assign_source_141 = tmp_for_loop_4__iter_value;

    CHECK_OBJECT( tmp_assign_source_141 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_141 );
    tmp_setattr_target_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );

    if (unlikely( tmp_setattr_target_4 == NULL ))
    {
        tmp_setattr_target_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );
    }

    if ( tmp_setattr_target_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_request" );
        exception_tb = NULL;

        exception_lineno = 421;

        goto try_except_handler_40;
    }

    tmp_source_name_24 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_24 == NULL ))
    {
        tmp_source_name_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_24 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 421;

        goto try_except_handler_40;
    }

    tmp_setattr_attr_4 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_name );
    if ( tmp_setattr_attr_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 421;

        goto try_except_handler_40;
    }
    tmp_setattr_value_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_4 == NULL ))
    {
        tmp_setattr_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_4 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 421;

        goto try_except_handler_40;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_4, tmp_setattr_attr_4, tmp_setattr_value_4 );
    Py_DECREF( tmp_setattr_attr_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 421;

        goto try_except_handler_40;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 420;

        goto try_except_handler_40;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_16;
    // Exception handler code:
    try_except_handler_40:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_23;
    exception_value = exception_keeper_value_23;
    exception_tb = exception_keeper_tb_23;
    exception_lineno = exception_keeper_lineno_23;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 422;

        goto frame_exception_exit_1;
    }

    tmp_assattr_name_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );

    if (unlikely( tmp_assattr_name_4 == NULL ))
    {
        tmp_assattr_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_request_moved_attributes );
    }

    if ( tmp_assattr_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_request_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 424;

        goto frame_exception_exit_1;
    }

    tmp_assattr_target_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );

    if (unlikely( tmp_assattr_target_4 == NULL ))
    {
        tmp_assattr_target_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );
    }

    if ( tmp_assattr_target_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_request" );
        exception_tb = NULL;

        exception_lineno = 424;

        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__moved_attributes, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 424;

        goto frame_exception_exit_1;
    }
    tmp_source_name_25 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_25 == NULL ))
    {
        tmp_source_name_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_25 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 426;

        goto frame_exception_exit_1;
    }

    tmp_called_name_142 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain__add_module );
    if ( tmp_called_name_142 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 426;

        goto frame_exception_exit_1;
    }
    tmp_called_name_143 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );

    if (unlikely( tmp_called_name_143 == NULL ))
    {
        tmp_called_name_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_request );
    }

    if ( tmp_called_name_143 == NULL )
    {
        Py_DECREF( tmp_called_name_142 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_request" );
        exception_tb = NULL;

        exception_lineno = 426;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 426;
    tmp_args_element_name_45 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_143, &PyTuple_GET_ITEM( const_tuple_str_digest_39084269160328bfe64f57e4e4ad6847_tuple, 0 ) );

    if ( tmp_args_element_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_142 );

        exception_lineno = 426;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_46 = const_str_digest_44b5a94106b8a7650b1be1b19e45a62a;
    tmp_args_element_name_47 = const_str_digest_0796df54888fe073ef078d402adc4fc3;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 426;
    {
        PyObject *call_args[] = { tmp_args_element_name_45, tmp_args_element_name_46, tmp_args_element_name_47 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_142, call_args );
    }

    Py_DECREF( tmp_called_name_142 );
    Py_DECREF( tmp_args_element_name_45 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 426;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_142 = PyTuple_New( 1 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_142 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 430;

        goto try_except_handler_41;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_assign_source_142, 0, tmp_tuple_element_9 );
    assert( tmp_class_creation_11__bases == NULL );
    tmp_class_creation_11__bases = tmp_assign_source_142;

    tmp_assign_source_144 = const_str_plain_six;
    assert( outline_10_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_144 );
    outline_10_var___module__ = tmp_assign_source_144;

    tmp_assign_source_145 = const_str_digest_89029d2dedfd3a97fd4d41a1b57a375b;
    assert( outline_10_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_145 );
    outline_10_var___doc__ = tmp_assign_source_145;

    // Tried code:
    tmp_outline_return_value_18 = _PyDict_NewPresized( 2 );
    tmp_dict_value_37 = outline_10_var___module__;

    CHECK_OBJECT( tmp_dict_value_37 );
    tmp_dict_key_37 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_18, tmp_dict_key_37, tmp_dict_value_37 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_38 = outline_10_var___doc__;

    CHECK_OBJECT( tmp_dict_value_38 );
    tmp_dict_key_38 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_18, tmp_dict_key_38, tmp_dict_value_38 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_42;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_42:;
    CHECK_OBJECT( (PyObject *)outline_10_var___module__ );
    Py_DECREF( outline_10_var___module__ );
    outline_10_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_10_var___doc__ );
    Py_DECREF( outline_10_var___doc__ );
    outline_10_var___doc__ = NULL;

    goto outline_result_18;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_10_var___module__ );
    Py_DECREF( outline_10_var___module__ );
    outline_10_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_10_var___doc__ );
    Py_DECREF( outline_10_var___doc__ );
    outline_10_var___doc__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_18:;
    tmp_assign_source_143 = tmp_outline_return_value_18;
    assert( tmp_class_creation_11__class_dict == NULL );
    tmp_class_creation_11__class_dict = tmp_assign_source_143;

    tmp_compare_left_14 = const_str_plain___metaclass__;
    tmp_compare_right_14 = tmp_class_creation_11__class_dict;

    CHECK_OBJECT( tmp_compare_right_14 );
    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    assert( !(tmp_cmp_In_11 == -1) );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto condexpr_true_12;
    }
    else
    {
        goto condexpr_false_12;
    }
    condexpr_true_12:;
    tmp_dict_name_11 = tmp_class_creation_11__class_dict;

    CHECK_OBJECT( tmp_dict_name_11 );
    tmp_key_name_11 = const_str_plain___metaclass__;
    tmp_assign_source_146 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
    if ( tmp_assign_source_146 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 430;

        goto try_except_handler_41;
    }
    goto condexpr_end_12;
    condexpr_false_12:;
    tmp_subscribed_name_10 = tmp_class_creation_11__bases;

    CHECK_OBJECT( tmp_subscribed_name_10 );
    tmp_subscript_name_10 = const_int_0;
    tmp_assign_source_147 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    if ( tmp_assign_source_147 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 430;

        goto try_except_handler_41;
    }
    assert( tmp_select_metaclass_11__base == NULL );
    tmp_select_metaclass_11__base = tmp_assign_source_147;

    // Tried code:
    // Tried code:
    tmp_source_name_26 = tmp_select_metaclass_11__base;

    CHECK_OBJECT( tmp_source_name_26 );
    tmp_outline_return_value_19 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_26 );
    if ( tmp_outline_return_value_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 430;

        goto try_except_handler_44;
    }
    goto try_return_handler_43;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_44:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_24 );
    Py_XDECREF( exception_keeper_value_24 );
    Py_XDECREF( exception_keeper_tb_24 );
    tmp_type_arg_8 = tmp_select_metaclass_11__base;

    CHECK_OBJECT( tmp_type_arg_8 );
    tmp_outline_return_value_19 = BUILTIN_TYPE1( tmp_type_arg_8 );
    assert( tmp_outline_return_value_19 != NULL );
    goto try_return_handler_43;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_43:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_11__base );
    Py_DECREF( tmp_select_metaclass_11__base );
    tmp_select_metaclass_11__base = NULL;

    goto outline_result_19;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_11__base );
    Py_DECREF( tmp_select_metaclass_11__base );
    tmp_select_metaclass_11__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_19:;
    tmp_assign_source_146 = tmp_outline_return_value_19;
    condexpr_end_12:;
    assert( tmp_class_creation_11__metaclass == NULL );
    tmp_class_creation_11__metaclass = tmp_assign_source_146;

    tmp_called_name_144 = tmp_class_creation_11__metaclass;

    CHECK_OBJECT( tmp_called_name_144 );
    tmp_args_element_name_48 = const_str_plain_Module_six_moves_urllib_response;
    tmp_args_element_name_49 = tmp_class_creation_11__bases;

    CHECK_OBJECT( tmp_args_element_name_49 );
    tmp_args_element_name_50 = tmp_class_creation_11__class_dict;

    CHECK_OBJECT( tmp_args_element_name_50 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 430;
    {
        PyObject *call_args[] = { tmp_args_element_name_48, tmp_args_element_name_49, tmp_args_element_name_50 };
        tmp_assign_source_148 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_144, call_args );
    }

    if ( tmp_assign_source_148 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 430;

        goto try_except_handler_41;
    }
    assert( tmp_class_creation_11__class == NULL );
    tmp_class_creation_11__class = tmp_assign_source_148;

    goto try_end_17;
    // Exception handler code:
    try_except_handler_41:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    tmp_assign_source_149 = tmp_class_creation_11__class;

    CHECK_OBJECT( tmp_assign_source_149 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response, tmp_assign_source_149 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class );
    Py_DECREF( tmp_class_creation_11__class );
    tmp_class_creation_11__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__bases );
    Py_DECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class_dict );
    Py_DECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__metaclass );
    Py_DECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    tmp_assign_source_150 = PyList_New( 4 );
    tmp_called_name_145 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_145 == NULL ))
    {
        tmp_called_name_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_145 == NULL )
    {
        Py_DECREF( tmp_assign_source_150 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 436;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 436;
    tmp_list_element_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_145, &PyTuple_GET_ITEM( const_tuple_7e06f3f94729eeecb6299351e347eec1_tuple, 0 ) );

    if ( tmp_list_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_150 );

        exception_lineno = 436;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_150, 0, tmp_list_element_6 );
    tmp_called_name_146 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_146 == NULL ))
    {
        tmp_called_name_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_146 == NULL )
    {
        Py_DECREF( tmp_assign_source_150 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 437;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 437;
    tmp_list_element_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_146, &PyTuple_GET_ITEM( const_tuple_48228a4a2559ba3fee2e803642cf63ab_tuple, 0 ) );

    if ( tmp_list_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_150 );

        exception_lineno = 437;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_150, 1, tmp_list_element_6 );
    tmp_called_name_147 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_147 == NULL ))
    {
        tmp_called_name_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_147 == NULL )
    {
        Py_DECREF( tmp_assign_source_150 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 438;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 438;
    tmp_list_element_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_147, &PyTuple_GET_ITEM( const_tuple_a9bb06e0d954d35a31cafab01ed89b9c_tuple, 0 ) );

    if ( tmp_list_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_150 );

        exception_lineno = 438;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_150, 2, tmp_list_element_6 );
    tmp_called_name_148 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_148 == NULL ))
    {
        tmp_called_name_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_148 == NULL )
    {
        Py_DECREF( tmp_assign_source_150 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 439;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 439;
    tmp_list_element_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_148, &PyTuple_GET_ITEM( const_tuple_104a70332acb2b4496703dc266a2c27c_tuple, 0 ) );

    if ( tmp_list_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_150 );

        exception_lineno = 439;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_150, 3, tmp_list_element_6 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes, tmp_assign_source_150 );
    tmp_iter_arg_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );

    if (unlikely( tmp_iter_arg_5 == NULL ))
    {
        tmp_iter_arg_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );
    }

    if ( tmp_iter_arg_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_response_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 441;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_151 = MAKE_ITERATOR( tmp_iter_arg_5 );
    if ( tmp_assign_source_151 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 441;

        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_151;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    CHECK_OBJECT( tmp_next_source_5 );
    tmp_assign_source_152 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_152 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            exception_lineno = 441;
            goto try_except_handler_45;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_152;
        Py_XDECREF( old );
    }

    tmp_assign_source_153 = tmp_for_loop_5__iter_value;

    CHECK_OBJECT( tmp_assign_source_153 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_153 );
    tmp_setattr_target_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );

    if (unlikely( tmp_setattr_target_5 == NULL ))
    {
        tmp_setattr_target_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );
    }

    if ( tmp_setattr_target_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_response" );
        exception_tb = NULL;

        exception_lineno = 442;

        goto try_except_handler_45;
    }

    tmp_source_name_27 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_27 == NULL ))
    {
        tmp_source_name_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_27 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 442;

        goto try_except_handler_45;
    }

    tmp_setattr_attr_5 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_name );
    if ( tmp_setattr_attr_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 442;

        goto try_except_handler_45;
    }
    tmp_setattr_value_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_5 == NULL ))
    {
        tmp_setattr_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_5 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 442;

        goto try_except_handler_45;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_5, tmp_setattr_attr_5, tmp_setattr_value_5 );
    Py_DECREF( tmp_setattr_attr_5 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 442;

        goto try_except_handler_45;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 441;

        goto try_except_handler_45;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_18;
    // Exception handler code:
    try_except_handler_45:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 443;

        goto frame_exception_exit_1;
    }

    tmp_assattr_name_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );

    if (unlikely( tmp_assattr_name_5 == NULL ))
    {
        tmp_assattr_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_response_moved_attributes );
    }

    if ( tmp_assattr_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_response_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 445;

        goto frame_exception_exit_1;
    }

    tmp_assattr_target_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );

    if (unlikely( tmp_assattr_target_5 == NULL ))
    {
        tmp_assattr_target_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );
    }

    if ( tmp_assattr_target_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_response" );
        exception_tb = NULL;

        exception_lineno = 445;

        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__moved_attributes, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 445;

        goto frame_exception_exit_1;
    }
    tmp_source_name_28 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_28 == NULL ))
    {
        tmp_source_name_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_28 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 447;

        goto frame_exception_exit_1;
    }

    tmp_called_name_149 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain__add_module );
    if ( tmp_called_name_149 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 447;

        goto frame_exception_exit_1;
    }
    tmp_called_name_150 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );

    if (unlikely( tmp_called_name_150 == NULL ))
    {
        tmp_called_name_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_response );
    }

    if ( tmp_called_name_150 == NULL )
    {
        Py_DECREF( tmp_called_name_149 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_response" );
        exception_tb = NULL;

        exception_lineno = 447;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 447;
    tmp_args_element_name_51 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_150, &PyTuple_GET_ITEM( const_tuple_str_digest_9a0abb54c3c0c01efb557f34bd7cbd38_tuple, 0 ) );

    if ( tmp_args_element_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_149 );

        exception_lineno = 447;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_52 = const_str_digest_377bbfde508aa04103b00d9192b3b50d;
    tmp_args_element_name_53 = const_str_digest_2a86adf5a4eff7c85cf98b964b9653c8;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 447;
    {
        PyObject *call_args[] = { tmp_args_element_name_51, tmp_args_element_name_52, tmp_args_element_name_53 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_149, call_args );
    }

    Py_DECREF( tmp_called_name_149 );
    Py_DECREF( tmp_args_element_name_51 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 447;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_154 = PyTuple_New( 1 );
    tmp_tuple_element_10 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__LazyModule );

    if (unlikely( tmp_tuple_element_10 == NULL ))
    {
        tmp_tuple_element_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__LazyModule );
    }

    if ( tmp_tuple_element_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_154 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_LazyModule" );
        exception_tb = NULL;

        exception_lineno = 451;

        goto try_except_handler_46;
    }

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_assign_source_154, 0, tmp_tuple_element_10 );
    assert( tmp_class_creation_12__bases == NULL );
    tmp_class_creation_12__bases = tmp_assign_source_154;

    tmp_assign_source_156 = const_str_plain_six;
    assert( outline_11_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_156 );
    outline_11_var___module__ = tmp_assign_source_156;

    tmp_assign_source_157 = const_str_digest_36bd400ddf45050462a62a66cdace7eb;
    assert( outline_11_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_157 );
    outline_11_var___doc__ = tmp_assign_source_157;

    // Tried code:
    tmp_outline_return_value_20 = _PyDict_NewPresized( 2 );
    tmp_dict_value_39 = outline_11_var___module__;

    CHECK_OBJECT( tmp_dict_value_39 );
    tmp_dict_key_39 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_20, tmp_dict_key_39, tmp_dict_value_39 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_40 = outline_11_var___doc__;

    CHECK_OBJECT( tmp_dict_value_40 );
    tmp_dict_key_40 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_20, tmp_dict_key_40, tmp_dict_value_40 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_47;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_47:;
    CHECK_OBJECT( (PyObject *)outline_11_var___module__ );
    Py_DECREF( outline_11_var___module__ );
    outline_11_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var___doc__ );
    Py_DECREF( outline_11_var___doc__ );
    outline_11_var___doc__ = NULL;

    goto outline_result_20;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_11_var___module__ );
    Py_DECREF( outline_11_var___module__ );
    outline_11_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_11_var___doc__ );
    Py_DECREF( outline_11_var___doc__ );
    outline_11_var___doc__ = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_20:;
    tmp_assign_source_155 = tmp_outline_return_value_20;
    assert( tmp_class_creation_12__class_dict == NULL );
    tmp_class_creation_12__class_dict = tmp_assign_source_155;

    tmp_compare_left_15 = const_str_plain___metaclass__;
    tmp_compare_right_15 = tmp_class_creation_12__class_dict;

    CHECK_OBJECT( tmp_compare_right_15 );
    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    assert( !(tmp_cmp_In_12 == -1) );
    if ( tmp_cmp_In_12 == 1 )
    {
        goto condexpr_true_13;
    }
    else
    {
        goto condexpr_false_13;
    }
    condexpr_true_13:;
    tmp_dict_name_12 = tmp_class_creation_12__class_dict;

    CHECK_OBJECT( tmp_dict_name_12 );
    tmp_key_name_12 = const_str_plain___metaclass__;
    tmp_assign_source_158 = DICT_GET_ITEM( tmp_dict_name_12, tmp_key_name_12 );
    if ( tmp_assign_source_158 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 451;

        goto try_except_handler_46;
    }
    goto condexpr_end_13;
    condexpr_false_13:;
    tmp_subscribed_name_11 = tmp_class_creation_12__bases;

    CHECK_OBJECT( tmp_subscribed_name_11 );
    tmp_subscript_name_11 = const_int_0;
    tmp_assign_source_159 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    if ( tmp_assign_source_159 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 451;

        goto try_except_handler_46;
    }
    assert( tmp_select_metaclass_12__base == NULL );
    tmp_select_metaclass_12__base = tmp_assign_source_159;

    // Tried code:
    // Tried code:
    tmp_source_name_29 = tmp_select_metaclass_12__base;

    CHECK_OBJECT( tmp_source_name_29 );
    tmp_outline_return_value_21 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_29 );
    if ( tmp_outline_return_value_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 451;

        goto try_except_handler_49;
    }
    goto try_return_handler_48;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_49:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_27 );
    Py_XDECREF( exception_keeper_value_27 );
    Py_XDECREF( exception_keeper_tb_27 );
    tmp_type_arg_9 = tmp_select_metaclass_12__base;

    CHECK_OBJECT( tmp_type_arg_9 );
    tmp_outline_return_value_21 = BUILTIN_TYPE1( tmp_type_arg_9 );
    assert( tmp_outline_return_value_21 != NULL );
    goto try_return_handler_48;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_48:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_12__base );
    Py_DECREF( tmp_select_metaclass_12__base );
    tmp_select_metaclass_12__base = NULL;

    goto outline_result_21;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_12__base );
    Py_DECREF( tmp_select_metaclass_12__base );
    tmp_select_metaclass_12__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_21:;
    tmp_assign_source_158 = tmp_outline_return_value_21;
    condexpr_end_13:;
    assert( tmp_class_creation_12__metaclass == NULL );
    tmp_class_creation_12__metaclass = tmp_assign_source_158;

    tmp_called_name_151 = tmp_class_creation_12__metaclass;

    CHECK_OBJECT( tmp_called_name_151 );
    tmp_args_element_name_54 = const_str_plain_Module_six_moves_urllib_robotparser;
    tmp_args_element_name_55 = tmp_class_creation_12__bases;

    CHECK_OBJECT( tmp_args_element_name_55 );
    tmp_args_element_name_56 = tmp_class_creation_12__class_dict;

    CHECK_OBJECT( tmp_args_element_name_56 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 451;
    {
        PyObject *call_args[] = { tmp_args_element_name_54, tmp_args_element_name_55, tmp_args_element_name_56 };
        tmp_assign_source_160 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_151, call_args );
    }

    if ( tmp_assign_source_160 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 451;

        goto try_except_handler_46;
    }
    assert( tmp_class_creation_12__class == NULL );
    tmp_class_creation_12__class = tmp_assign_source_160;

    goto try_end_19;
    // Exception handler code:
    try_except_handler_46:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_keeper_lineno_28 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    Py_XDECREF( tmp_class_creation_12__class_dict );
    tmp_class_creation_12__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_28;
    exception_value = exception_keeper_value_28;
    exception_tb = exception_keeper_tb_28;
    exception_lineno = exception_keeper_lineno_28;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    tmp_assign_source_161 = tmp_class_creation_12__class;

    CHECK_OBJECT( tmp_assign_source_161 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser, tmp_assign_source_161 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class );
    Py_DECREF( tmp_class_creation_12__class );
    tmp_class_creation_12__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__bases );
    Py_DECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class_dict );
    Py_DECREF( tmp_class_creation_12__class_dict );
    tmp_class_creation_12__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__metaclass );
    Py_DECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    tmp_assign_source_162 = PyList_New( 1 );
    tmp_called_name_152 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_MovedAttribute );

    if (unlikely( tmp_called_name_152 == NULL ))
    {
        tmp_called_name_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MovedAttribute );
    }

    if ( tmp_called_name_152 == NULL )
    {
        Py_DECREF( tmp_assign_source_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "MovedAttribute" );
        exception_tb = NULL;

        exception_lineno = 457;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 457;
    tmp_list_element_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_152, &PyTuple_GET_ITEM( const_tuple_e8b8019293fbbb866ccd61f144dc2978_tuple, 0 ) );

    if ( tmp_list_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_162 );

        exception_lineno = 457;

        goto frame_exception_exit_1;
    }
    PyList_SET_ITEM( tmp_assign_source_162, 0, tmp_list_element_7 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes, tmp_assign_source_162 );
    tmp_iter_arg_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );

    if (unlikely( tmp_iter_arg_6 == NULL ))
    {
        tmp_iter_arg_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );
    }

    if ( tmp_iter_arg_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_robotparser_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 459;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_163 = MAKE_ITERATOR( tmp_iter_arg_6 );
    if ( tmp_assign_source_163 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;

        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_6__for_iterator == NULL );
    tmp_for_loop_6__for_iterator = tmp_assign_source_163;

    // Tried code:
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator;

    CHECK_OBJECT( tmp_next_source_6 );
    tmp_assign_source_164 = ITERATOR_NEXT( tmp_next_source_6 );
    if ( tmp_assign_source_164 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            exception_lineno = 459;
            goto try_except_handler_50;
        }
    }

    {
        PyObject *old = tmp_for_loop_6__iter_value;
        tmp_for_loop_6__iter_value = tmp_assign_source_164;
        Py_XDECREF( old );
    }

    tmp_assign_source_165 = tmp_for_loop_6__iter_value;

    CHECK_OBJECT( tmp_assign_source_165 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr, tmp_assign_source_165 );
    tmp_setattr_target_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );

    if (unlikely( tmp_setattr_target_6 == NULL ))
    {
        tmp_setattr_target_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );
    }

    if ( tmp_setattr_target_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_robotparser" );
        exception_tb = NULL;

        exception_lineno = 460;

        goto try_except_handler_50;
    }

    tmp_source_name_30 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_source_name_30 == NULL ))
    {
        tmp_source_name_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_source_name_30 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 460;

        goto try_except_handler_50;
    }

    tmp_setattr_attr_6 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_name );
    if ( tmp_setattr_attr_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 460;

        goto try_except_handler_50;
    }
    tmp_setattr_value_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_attr );

    if (unlikely( tmp_setattr_value_6 == NULL ))
    {
        tmp_setattr_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_attr );
    }

    if ( tmp_setattr_value_6 == NULL )
    {
        Py_DECREF( tmp_setattr_attr_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 460;

        goto try_except_handler_50;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_6, tmp_setattr_attr_6, tmp_setattr_value_6 );
    Py_DECREF( tmp_setattr_attr_6 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 460;

        goto try_except_handler_50;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;

        goto try_except_handler_50;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_20;
    // Exception handler code:
    try_except_handler_50:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_29;
    exception_value = exception_keeper_value_29;
    exception_tb = exception_keeper_tb_29;
    exception_lineno = exception_keeper_lineno_29;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_attr );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "attr" );
        exception_tb = NULL;

        exception_lineno = 461;

        goto frame_exception_exit_1;
    }

    tmp_assattr_name_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );

    if (unlikely( tmp_assattr_name_6 == NULL ))
    {
        tmp_assattr_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__urllib_robotparser_moved_attributes );
    }

    if ( tmp_assattr_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_urllib_robotparser_moved_attributes" );
        exception_tb = NULL;

        exception_lineno = 463;

        goto frame_exception_exit_1;
    }

    tmp_assattr_target_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );

    if (unlikely( tmp_assattr_target_6 == NULL ))
    {
        tmp_assattr_target_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );
    }

    if ( tmp_assattr_target_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_robotparser" );
        exception_tb = NULL;

        exception_lineno = 463;

        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain__moved_attributes, tmp_assattr_name_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 463;

        goto frame_exception_exit_1;
    }
    tmp_source_name_31 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_31 == NULL ))
    {
        tmp_source_name_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_31 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 465;

        goto frame_exception_exit_1;
    }

    tmp_called_name_153 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain__add_module );
    if ( tmp_called_name_153 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 465;

        goto frame_exception_exit_1;
    }
    tmp_called_name_154 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );

    if (unlikely( tmp_called_name_154 == NULL ))
    {
        tmp_called_name_154 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib_robotparser );
    }

    if ( tmp_called_name_154 == NULL )
    {
        Py_DECREF( tmp_called_name_153 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib_robotparser" );
        exception_tb = NULL;

        exception_lineno = 465;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 465;
    tmp_args_element_name_57 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_154, &PyTuple_GET_ITEM( const_tuple_str_digest_a5f041d60ba724151c334293929df649_tuple, 0 ) );

    if ( tmp_args_element_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_153 );

        exception_lineno = 465;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_58 = const_str_digest_3f74da80d70054f566244d16961c095c;
    tmp_args_element_name_59 = const_str_digest_2a7b3d36c635f4688c336c8ee8000e51;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 465;
    {
        PyObject *call_args[] = { tmp_args_element_name_57, tmp_args_element_name_58, tmp_args_element_name_59 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_153, call_args );
    }

    Py_DECREF( tmp_called_name_153 );
    Py_DECREF( tmp_args_element_name_57 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 465;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_assign_source_166 = PyTuple_New( 1 );
    tmp_source_name_32 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_32 == NULL ))
    {
        tmp_source_name_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_32 == NULL )
    {
        Py_DECREF( tmp_assign_source_166 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 469;

        goto try_except_handler_51;
    }

    tmp_tuple_element_11 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_ModuleType );
    if ( tmp_tuple_element_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_166 );

        exception_lineno = 469;

        goto try_except_handler_51;
    }
    PyTuple_SET_ITEM( tmp_assign_source_166, 0, tmp_tuple_element_11 );
    assert( tmp_class_creation_13__bases == NULL );
    tmp_class_creation_13__bases = tmp_assign_source_166;

    tmp_assign_source_168 = const_str_plain_six;
    assert( outline_12_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_168 );
    outline_12_var___module__ = tmp_assign_source_168;

    tmp_assign_source_169 = const_str_digest_b136a150499b95c9a0929c5fba6642cb;
    assert( outline_12_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_169 );
    outline_12_var___doc__ = tmp_assign_source_169;

    tmp_assign_source_170 = PyList_New( 0 );
    assert( outline_12_var___path__ == NULL );
    outline_12_var___path__ = tmp_assign_source_170;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bd5eb45c4557ae66e67170aba1b94aa0_2, codeobj_bd5eb45c4557ae66e67170aba1b94aa0, module_six, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_bd5eb45c4557ae66e67170aba1b94aa0_2 = cache_frame_bd5eb45c4557ae66e67170aba1b94aa0_2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bd5eb45c4557ae66e67170aba1b94aa0_2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bd5eb45c4557ae66e67170aba1b94aa0_2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_2 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_called_instance_2 == NULL ))
    {
        tmp_called_instance_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 473;
        type_description_2 = "oooNNNNNN";
        goto frame_exception_exit_2;
    }

    frame_bd5eb45c4557ae66e67170aba1b94aa0_2->m_frame.f_lineno = 473;
    tmp_assign_source_171 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain__get_module, &PyTuple_GET_ITEM( const_tuple_str_digest_3b6f70723b1e9c5c7e613ae0f57ab8cd_tuple, 0 ) );

    if ( tmp_assign_source_171 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 473;
        type_description_2 = "oooNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_12_var_parse == NULL );
    outline_12_var_parse = tmp_assign_source_171;

    tmp_called_instance_3 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_called_instance_3 == NULL ))
    {
        tmp_called_instance_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 474;
        type_description_2 = "ooooNNNNN";
        goto frame_exception_exit_2;
    }

    frame_bd5eb45c4557ae66e67170aba1b94aa0_2->m_frame.f_lineno = 474;
    tmp_assign_source_172 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain__get_module, &PyTuple_GET_ITEM( const_tuple_str_digest_cc1200855d2ddc077676ac963b3ffc09_tuple, 0 ) );

    if ( tmp_assign_source_172 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 474;
        type_description_2 = "ooooNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_12_var_error == NULL );
    outline_12_var_error = tmp_assign_source_172;

    tmp_called_instance_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_called_instance_4 == NULL ))
    {
        tmp_called_instance_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 475;
        type_description_2 = "oooooNNNN";
        goto frame_exception_exit_2;
    }

    frame_bd5eb45c4557ae66e67170aba1b94aa0_2->m_frame.f_lineno = 475;
    tmp_assign_source_173 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain__get_module, &PyTuple_GET_ITEM( const_tuple_str_digest_44b5a94106b8a7650b1be1b19e45a62a_tuple, 0 ) );

    if ( tmp_assign_source_173 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        type_description_2 = "oooooNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_12_var_request == NULL );
    outline_12_var_request = tmp_assign_source_173;

    tmp_called_instance_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_called_instance_5 == NULL ))
    {
        tmp_called_instance_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_called_instance_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 476;
        type_description_2 = "ooooooNNN";
        goto frame_exception_exit_2;
    }

    frame_bd5eb45c4557ae66e67170aba1b94aa0_2->m_frame.f_lineno = 476;
    tmp_assign_source_174 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain__get_module, &PyTuple_GET_ITEM( const_tuple_str_digest_377bbfde508aa04103b00d9192b3b50d_tuple, 0 ) );

    if ( tmp_assign_source_174 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 476;
        type_description_2 = "ooooooNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_12_var_response == NULL );
    outline_12_var_response = tmp_assign_source_174;

    tmp_called_instance_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_called_instance_6 == NULL ))
    {
        tmp_called_instance_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_called_instance_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 477;
        type_description_2 = "oooooooNN";
        goto frame_exception_exit_2;
    }

    frame_bd5eb45c4557ae66e67170aba1b94aa0_2->m_frame.f_lineno = 477;
    tmp_assign_source_175 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain__get_module, &PyTuple_GET_ITEM( const_tuple_str_digest_3f74da80d70054f566244d16961c095c_tuple, 0 ) );

    if ( tmp_assign_source_175 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        type_description_2 = "oooooooNN";
        goto frame_exception_exit_2;
    }
    assert( outline_12_var_robotparser == NULL );
    outline_12_var_robotparser = tmp_assign_source_175;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd5eb45c4557ae66e67170aba1b94aa0_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd5eb45c4557ae66e67170aba1b94aa0_2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bd5eb45c4557ae66e67170aba1b94aa0_2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bd5eb45c4557ae66e67170aba1b94aa0_2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bd5eb45c4557ae66e67170aba1b94aa0_2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bd5eb45c4557ae66e67170aba1b94aa0_2,
        type_description_2,
        outline_12_var___module__,
        outline_12_var___doc__,
        outline_12_var___path__,
        outline_12_var_parse,
        outline_12_var_error,
        outline_12_var_request,
        outline_12_var_response,
        outline_12_var_robotparser,
        NULL
    );


    // Release cached frame.
    if ( frame_bd5eb45c4557ae66e67170aba1b94aa0_2 == cache_frame_bd5eb45c4557ae66e67170aba1b94aa0_2 )
    {
        Py_DECREF( frame_bd5eb45c4557ae66e67170aba1b94aa0_2 );
    }
    cache_frame_bd5eb45c4557ae66e67170aba1b94aa0_2 = NULL;

    assertFrameObject( frame_bd5eb45c4557ae66e67170aba1b94aa0_2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_1;

    frame_no_exception_1:;

    goto skip_nested_handling_1;
    nested_frame_exit_1:;

    goto try_except_handler_52;
    skip_nested_handling_1:;
    tmp_assign_source_176 = MAKE_FUNCTION_six$$$function_21___dir__(  );
    assert( outline_12_var___dir__ == NULL );
    outline_12_var___dir__ = tmp_assign_source_176;

    tmp_outline_return_value_22 = _PyDict_NewPresized( 9 );
    tmp_dict_value_41 = outline_12_var___module__;

    CHECK_OBJECT( tmp_dict_value_41 );
    tmp_dict_key_41 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_22, tmp_dict_key_41, tmp_dict_value_41 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_42 = outline_12_var___doc__;

    CHECK_OBJECT( tmp_dict_value_42 );
    tmp_dict_key_42 = const_str_plain___doc__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_22, tmp_dict_key_42, tmp_dict_value_42 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_43 = outline_12_var___path__;

    CHECK_OBJECT( tmp_dict_value_43 );
    tmp_dict_key_43 = const_str_plain___path__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_22, tmp_dict_key_43, tmp_dict_value_43 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_44 = outline_12_var_parse;

    CHECK_OBJECT( tmp_dict_value_44 );
    tmp_dict_key_44 = const_str_plain_parse;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_22, tmp_dict_key_44, tmp_dict_value_44 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_45 = outline_12_var_error;

    CHECK_OBJECT( tmp_dict_value_45 );
    tmp_dict_key_45 = const_str_plain_error;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_22, tmp_dict_key_45, tmp_dict_value_45 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_46 = outline_12_var_request;

    CHECK_OBJECT( tmp_dict_value_46 );
    tmp_dict_key_46 = const_str_plain_request;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_22, tmp_dict_key_46, tmp_dict_value_46 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_47 = outline_12_var_response;

    CHECK_OBJECT( tmp_dict_value_47 );
    tmp_dict_key_47 = const_str_plain_response;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_22, tmp_dict_key_47, tmp_dict_value_47 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_48 = outline_12_var_robotparser;

    CHECK_OBJECT( tmp_dict_value_48 );
    tmp_dict_key_48 = const_str_plain_robotparser;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_22, tmp_dict_key_48, tmp_dict_value_48 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_49 = outline_12_var___dir__;

    CHECK_OBJECT( tmp_dict_value_49 );
    tmp_dict_key_49 = const_str_plain___dir__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_22, tmp_dict_key_49, tmp_dict_value_49 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_52;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_52:;
    CHECK_OBJECT( (PyObject *)outline_12_var___module__ );
    Py_DECREF( outline_12_var___module__ );
    outline_12_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var___doc__ );
    Py_DECREF( outline_12_var___doc__ );
    outline_12_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var___path__ );
    Py_DECREF( outline_12_var___path__ );
    outline_12_var___path__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var_parse );
    Py_DECREF( outline_12_var_parse );
    outline_12_var_parse = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var_error );
    Py_DECREF( outline_12_var_error );
    outline_12_var_error = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var_request );
    Py_DECREF( outline_12_var_request );
    outline_12_var_request = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var_response );
    Py_DECREF( outline_12_var_response );
    outline_12_var_response = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var_robotparser );
    Py_DECREF( outline_12_var_robotparser );
    outline_12_var_robotparser = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var___dir__ );
    Py_DECREF( outline_12_var___dir__ );
    outline_12_var___dir__ = NULL;

    goto outline_result_22;
    // Exception handler code:
    try_except_handler_52:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)outline_12_var___module__ );
    Py_DECREF( outline_12_var___module__ );
    outline_12_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var___doc__ );
    Py_DECREF( outline_12_var___doc__ );
    outline_12_var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_12_var___path__ );
    Py_DECREF( outline_12_var___path__ );
    outline_12_var___path__ = NULL;

    Py_XDECREF( outline_12_var_parse );
    outline_12_var_parse = NULL;

    Py_XDECREF( outline_12_var_error );
    outline_12_var_error = NULL;

    Py_XDECREF( outline_12_var_request );
    outline_12_var_request = NULL;

    Py_XDECREF( outline_12_var_response );
    outline_12_var_response = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_30;
    exception_value = exception_keeper_value_30;
    exception_tb = exception_keeper_tb_30;
    exception_lineno = exception_keeper_lineno_30;

    goto outline_exception_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_1:;
    exception_lineno = 469;
    goto try_except_handler_51;
    outline_result_22:;
    tmp_assign_source_167 = tmp_outline_return_value_22;
    assert( tmp_class_creation_13__class_dict == NULL );
    tmp_class_creation_13__class_dict = tmp_assign_source_167;

    tmp_compare_left_16 = const_str_plain___metaclass__;
    tmp_compare_right_16 = tmp_class_creation_13__class_dict;

    CHECK_OBJECT( tmp_compare_right_16 );
    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_16, tmp_compare_left_16 );
    assert( !(tmp_cmp_In_13 == -1) );
    if ( tmp_cmp_In_13 == 1 )
    {
        goto condexpr_true_14;
    }
    else
    {
        goto condexpr_false_14;
    }
    condexpr_true_14:;
    tmp_dict_name_13 = tmp_class_creation_13__class_dict;

    CHECK_OBJECT( tmp_dict_name_13 );
    tmp_key_name_13 = const_str_plain___metaclass__;
    tmp_assign_source_177 = DICT_GET_ITEM( tmp_dict_name_13, tmp_key_name_13 );
    if ( tmp_assign_source_177 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 469;

        goto try_except_handler_51;
    }
    goto condexpr_end_14;
    condexpr_false_14:;
    tmp_subscribed_name_12 = tmp_class_creation_13__bases;

    CHECK_OBJECT( tmp_subscribed_name_12 );
    tmp_subscript_name_12 = const_int_0;
    tmp_assign_source_178 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    if ( tmp_assign_source_178 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 469;

        goto try_except_handler_51;
    }
    assert( tmp_select_metaclass_13__base == NULL );
    tmp_select_metaclass_13__base = tmp_assign_source_178;

    // Tried code:
    // Tried code:
    tmp_source_name_33 = tmp_select_metaclass_13__base;

    CHECK_OBJECT( tmp_source_name_33 );
    tmp_outline_return_value_23 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_33 );
    if ( tmp_outline_return_value_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 469;

        goto try_except_handler_54;
    }
    goto try_return_handler_53;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Exception handler code:
    try_except_handler_54:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_keeper_lineno_31 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_31 );
    Py_XDECREF( exception_keeper_value_31 );
    Py_XDECREF( exception_keeper_tb_31 );
    tmp_type_arg_10 = tmp_select_metaclass_13__base;

    CHECK_OBJECT( tmp_type_arg_10 );
    tmp_outline_return_value_23 = BUILTIN_TYPE1( tmp_type_arg_10 );
    assert( tmp_outline_return_value_23 != NULL );
    goto try_return_handler_53;
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_53:;
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_13__base );
    Py_DECREF( tmp_select_metaclass_13__base );
    tmp_select_metaclass_13__base = NULL;

    goto outline_result_23;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_select_metaclass_13__base );
    Py_DECREF( tmp_select_metaclass_13__base );
    tmp_select_metaclass_13__base = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_23:;
    tmp_assign_source_177 = tmp_outline_return_value_23;
    condexpr_end_14:;
    assert( tmp_class_creation_13__metaclass == NULL );
    tmp_class_creation_13__metaclass = tmp_assign_source_177;

    tmp_called_name_155 = tmp_class_creation_13__metaclass;

    CHECK_OBJECT( tmp_called_name_155 );
    tmp_args_element_name_60 = const_str_plain_Module_six_moves_urllib;
    tmp_args_element_name_61 = tmp_class_creation_13__bases;

    CHECK_OBJECT( tmp_args_element_name_61 );
    tmp_args_element_name_62 = tmp_class_creation_13__class_dict;

    CHECK_OBJECT( tmp_args_element_name_62 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 469;
    {
        PyObject *call_args[] = { tmp_args_element_name_60, tmp_args_element_name_61, tmp_args_element_name_62 };
        tmp_assign_source_179 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_155, call_args );
    }

    if ( tmp_assign_source_179 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 469;

        goto try_except_handler_51;
    }
    assert( tmp_class_creation_13__class == NULL );
    tmp_class_creation_13__class = tmp_assign_source_179;

    goto try_end_21;
    // Exception handler code:
    try_except_handler_51:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_keeper_lineno_32 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    Py_XDECREF( tmp_class_creation_13__class_dict );
    tmp_class_creation_13__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_32;
    exception_value = exception_keeper_value_32;
    exception_tb = exception_keeper_tb_32;
    exception_lineno = exception_keeper_lineno_32;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    tmp_assign_source_180 = tmp_class_creation_13__class;

    CHECK_OBJECT( tmp_assign_source_180 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib, tmp_assign_source_180 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__class );
    Py_DECREF( tmp_class_creation_13__class );
    tmp_class_creation_13__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__bases );
    Py_DECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__class_dict );
    Py_DECREF( tmp_class_creation_13__class_dict );
    tmp_class_creation_13__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__metaclass );
    Py_DECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    tmp_source_name_34 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_source_name_34 == NULL ))
    {
        tmp_source_name_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_source_name_34 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 482;

        goto frame_exception_exit_1;
    }

    tmp_called_name_156 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain__add_module );
    if ( tmp_called_name_156 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 482;

        goto frame_exception_exit_1;
    }
    tmp_called_name_157 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib );

    if (unlikely( tmp_called_name_157 == NULL ))
    {
        tmp_called_name_157 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Module_six_moves_urllib );
    }

    if ( tmp_called_name_157 == NULL )
    {
        Py_DECREF( tmp_called_name_156 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "Module_six_moves_urllib" );
        exception_tb = NULL;

        exception_lineno = 482;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 482;
    tmp_args_element_name_63 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_157, &PyTuple_GET_ITEM( const_tuple_str_digest_666540d560c14e9851ed9be690845abf_tuple, 0 ) );

    if ( tmp_args_element_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_156 );

        exception_lineno = 482;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_64 = const_str_digest_bdf07efe689edd815848f7ba41ea2eee;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 482;
    {
        PyObject *call_args[] = { tmp_args_element_name_63, tmp_args_element_name_64 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_156, call_args );
    }

    Py_DECREF( tmp_called_name_156 );
    Py_DECREF( tmp_args_element_name_63 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 482;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_181 = MAKE_FUNCTION_six$$$function_22_add_move(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_add_move, tmp_assign_source_181 );
    tmp_assign_source_182 = MAKE_FUNCTION_six$$$function_23_remove_move(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_remove_move, tmp_assign_source_182 );
    tmp_cond_value_4 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_4 == NULL ))
    {
        tmp_cond_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 502;

        goto frame_exception_exit_1;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 502;

        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_assign_source_183 = const_str_plain___func__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_func, tmp_assign_source_183 );
    tmp_assign_source_184 = const_str_plain___self__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_self, tmp_assign_source_184 );
    tmp_assign_source_185 = const_str_plain___closure__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_closure, tmp_assign_source_185 );
    tmp_assign_source_186 = const_str_plain___code__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_code, tmp_assign_source_186 );
    tmp_assign_source_187 = const_str_plain___defaults__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_defaults, tmp_assign_source_187 );
    tmp_assign_source_188 = const_str_plain___globals__;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_globals, tmp_assign_source_188 );
    goto branch_end_7;
    branch_no_7:;
    tmp_assign_source_189 = const_str_plain_im_func;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_func, tmp_assign_source_189 );
    tmp_assign_source_190 = const_str_plain_im_self;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_self, tmp_assign_source_190 );
    tmp_assign_source_191 = const_str_plain_func_closure;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_closure, tmp_assign_source_191 );
    tmp_assign_source_192 = const_str_plain_func_code;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_code, tmp_assign_source_192 );
    tmp_assign_source_193 = const_str_plain_func_defaults;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_defaults, tmp_assign_source_193 );
    tmp_assign_source_194 = const_str_plain_func_globals;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_globals, tmp_assign_source_194 );
    branch_end_7:;
    // Tried code:
    tmp_assign_source_195 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_next );

    if (unlikely( tmp_assign_source_195 == NULL ))
    {
        tmp_assign_source_195 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_next );
    }

    if ( tmp_assign_source_195 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "next" );
        exception_tb = NULL;

        exception_lineno = 521;

        goto try_except_handler_55;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_advance_iterator, tmp_assign_source_195 );
    goto try_end_22;
    // Exception handler code:
    try_except_handler_55:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_keeper_lineno_33 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_f01c021eb7965a8a0c5072bbbfd8ee24 );
    if ( exception_keeper_tb_33 == NULL )
    {
        exception_keeper_tb_33 = MAKE_TRACEBACK( frame_f01c021eb7965a8a0c5072bbbfd8ee24, exception_keeper_lineno_33 );
    }
    else if ( exception_keeper_lineno_33 != 0 )
    {
        exception_keeper_tb_33 = ADD_TRACEBACK( exception_keeper_tb_33, frame_f01c021eb7965a8a0c5072bbbfd8ee24, exception_keeper_lineno_33 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_33, &exception_keeper_value_33, &exception_keeper_tb_33 );
    PUBLISH_EXCEPTION( &exception_keeper_type_33, &exception_keeper_value_33, &exception_keeper_tb_33 );
    tmp_compare_left_17 = PyThreadState_GET()->exc_type;
    tmp_compare_right_17 = PyExc_NameError;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_17, tmp_compare_right_17 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 522;

        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_2 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_assign_source_196 = MAKE_FUNCTION_six$$$function_24_advance_iterator(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_advance_iterator, tmp_assign_source_196 );
    goto branch_end_8;
    branch_no_8:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 520;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame) frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = exception_tb->tb_lineno;

    goto frame_exception_exit_1;
    branch_end_8:;
    goto try_end_22;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // End of try:
    try_end_22:;
    tmp_assign_source_197 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_advance_iterator );

    if (unlikely( tmp_assign_source_197 == NULL ))
    {
        tmp_assign_source_197 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_advance_iterator );
    }

    if ( tmp_assign_source_197 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "advance_iterator" );
        exception_tb = NULL;

        exception_lineno = 525;

        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_next, tmp_assign_source_197 );
    // Tried code:
    tmp_assign_source_198 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable );

    if (unlikely( tmp_assign_source_198 == NULL ))
    {
        tmp_assign_source_198 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_callable );
    }

    if ( tmp_assign_source_198 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "callable" );
        exception_tb = NULL;

        exception_lineno = 529;

        goto try_except_handler_56;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable, tmp_assign_source_198 );
    goto try_end_23;
    // Exception handler code:
    try_except_handler_56:;
    exception_keeper_type_34 = exception_type;
    exception_keeper_value_34 = exception_value;
    exception_keeper_tb_34 = exception_tb;
    exception_keeper_lineno_34 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    PRESERVE_FRAME_EXCEPTION( frame_f01c021eb7965a8a0c5072bbbfd8ee24 );
    if ( exception_keeper_tb_34 == NULL )
    {
        exception_keeper_tb_34 = MAKE_TRACEBACK( frame_f01c021eb7965a8a0c5072bbbfd8ee24, exception_keeper_lineno_34 );
    }
    else if ( exception_keeper_lineno_34 != 0 )
    {
        exception_keeper_tb_34 = ADD_TRACEBACK( exception_keeper_tb_34, frame_f01c021eb7965a8a0c5072bbbfd8ee24, exception_keeper_lineno_34 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_34, &exception_keeper_value_34, &exception_keeper_tb_34 );
    PUBLISH_EXCEPTION( &exception_keeper_type_34, &exception_keeper_value_34, &exception_keeper_tb_34 );
    tmp_compare_left_18 = PyThreadState_GET()->exc_type;
    tmp_compare_right_18 = PyExc_NameError;
    tmp_exc_match_exception_match_3 = EXCEPTION_MATCH_BOOL( tmp_compare_left_18, tmp_compare_right_18 );
    if ( tmp_exc_match_exception_match_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 530;

        goto frame_exception_exit_1;
    }
    if ( tmp_exc_match_exception_match_3 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_assign_source_199 = MAKE_FUNCTION_six$$$function_25_callable(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable, tmp_assign_source_199 );
    goto branch_end_9;
    branch_no_9:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 528;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame) frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = exception_tb->tb_lineno;

    goto frame_exception_exit_1;
    branch_end_9:;
    goto try_end_23;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // End of try:
    try_end_23:;
    tmp_cond_value_5 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_5 == NULL ))
    {
        tmp_cond_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 535;

        goto frame_exception_exit_1;
    }

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 535;

        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_assign_source_200 = MAKE_FUNCTION_six$$$function_26_get_unbound_function(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_unbound_function, tmp_assign_source_200 );
    tmp_source_name_35 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_35 == NULL ))
    {
        tmp_source_name_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_35 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;

        exception_lineno = 539;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_201 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_MethodType );
    if ( tmp_assign_source_201 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 539;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_bound_method, tmp_assign_source_201 );
    tmp_assign_source_202 = MAKE_FUNCTION_six$$$function_27_create_unbound_method(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_unbound_method, tmp_assign_source_202 );
    tmp_assign_source_203 = (PyObject *)&PyBaseObject_Type;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Iterator, tmp_assign_source_203 );
    goto branch_end_10;
    branch_no_10:;
    tmp_assign_source_204 = MAKE_FUNCTION_six$$$function_28_get_unbound_function(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_unbound_function, tmp_assign_source_204 );
    tmp_assign_source_205 = MAKE_FUNCTION_six$$$function_29_create_bound_method(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_bound_method, tmp_assign_source_205 );
    tmp_assign_source_206 = MAKE_FUNCTION_six$$$function_30_create_unbound_method(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_create_unbound_method, tmp_assign_source_206 );
    tmp_assign_source_208 = const_str_plain_six;
    assert( outline_13_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_208 );
    outline_13_var___module__ = tmp_assign_source_208;

    tmp_assign_source_209 = MAKE_FUNCTION_six$$$function_31_next(  );
    assert( outline_13_var_next == NULL );
    outline_13_var_next = tmp_assign_source_209;

    // Tried code:
    tmp_outline_return_value_24 = _PyDict_NewPresized( 2 );
    tmp_dict_value_50 = outline_13_var___module__;

    CHECK_OBJECT( tmp_dict_value_50 );
    tmp_dict_key_50 = const_str_plain___module__;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_24, tmp_dict_key_50, tmp_dict_value_50 );
    assert( !(tmp_res != 0) );
    tmp_dict_value_51 = outline_13_var_next;

    CHECK_OBJECT( tmp_dict_value_51 );
    tmp_dict_key_51 = const_str_plain_next;
    tmp_res = PyDict_SetItem( tmp_outline_return_value_24, tmp_dict_key_51, tmp_dict_value_51 );
    assert( !(tmp_res != 0) );
    goto try_return_handler_57;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_57:;
    CHECK_OBJECT( (PyObject *)outline_13_var___module__ );
    Py_DECREF( outline_13_var___module__ );
    outline_13_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_13_var_next );
    Py_DECREF( outline_13_var_next );
    outline_13_var_next = NULL;

    goto outline_result_24;
    // End of try:
    CHECK_OBJECT( (PyObject *)outline_13_var___module__ );
    Py_DECREF( outline_13_var___module__ );
    outline_13_var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)outline_13_var_next );
    Py_DECREF( outline_13_var_next );
    outline_13_var_next = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( six );
    return MOD_RETURN_VALUE( NULL );
    outline_result_24:;
    tmp_assign_source_207 = tmp_outline_return_value_24;
    assert( tmp_class_creation_14__class_dict == NULL );
    tmp_class_creation_14__class_dict = tmp_assign_source_207;

    // Tried code:
    tmp_compare_left_19 = const_str_plain___metaclass__;
    tmp_compare_right_19 = tmp_class_creation_14__class_dict;

    CHECK_OBJECT( tmp_compare_right_19 );
    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_19, tmp_compare_left_19 );
    assert( !(tmp_cmp_In_14 == -1) );
    if ( tmp_cmp_In_14 == 1 )
    {
        goto condexpr_true_15;
    }
    else
    {
        goto condexpr_false_15;
    }
    condexpr_true_15:;
    tmp_dict_name_14 = tmp_class_creation_14__class_dict;

    CHECK_OBJECT( tmp_dict_name_14 );
    tmp_key_name_14 = const_str_plain___metaclass__;
    tmp_assign_source_210 = DICT_GET_ITEM( tmp_dict_name_14, tmp_key_name_14 );
    if ( tmp_assign_source_210 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_58;
    }
    goto condexpr_end_15;
    condexpr_false_15:;
    tmp_assign_source_210 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_assign_source_210 );
    condexpr_end_15:;
    assert( tmp_class_creation_14__metaclass == NULL );
    tmp_class_creation_14__metaclass = tmp_assign_source_210;

    tmp_called_name_158 = tmp_class_creation_14__metaclass;

    CHECK_OBJECT( tmp_called_name_158 );
    tmp_args_element_name_65 = const_str_plain_Iterator;
    tmp_args_element_name_66 = const_tuple_type_object_tuple;
    tmp_args_element_name_67 = tmp_class_creation_14__class_dict;

    CHECK_OBJECT( tmp_args_element_name_67 );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 555;
    {
        PyObject *call_args[] = { tmp_args_element_name_65, tmp_args_element_name_66, tmp_args_element_name_67 };
        tmp_assign_source_211 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_158, call_args );
    }

    if ( tmp_assign_source_211 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_58;
    }
    assert( tmp_class_creation_14__class == NULL );
    tmp_class_creation_14__class = tmp_assign_source_211;

    goto try_end_24;
    // Exception handler code:
    try_except_handler_58:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_keeper_lineno_35 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class_dict );
    Py_DECREF( tmp_class_creation_14__class_dict );
    tmp_class_creation_14__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_35;
    exception_value = exception_keeper_value_35;
    exception_tb = exception_keeper_tb_35;
    exception_lineno = exception_keeper_lineno_35;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    tmp_assign_source_212 = tmp_class_creation_14__class;

    CHECK_OBJECT( tmp_assign_source_212 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_Iterator, tmp_assign_source_212 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class );
    Py_DECREF( tmp_class_creation_14__class );
    tmp_class_creation_14__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class_dict );
    Py_DECREF( tmp_class_creation_14__class_dict );
    tmp_class_creation_14__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__metaclass );
    Py_DECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    tmp_assign_source_213 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable );

    if (unlikely( tmp_assign_source_213 == NULL ))
    {
        tmp_assign_source_213 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_callable );
    }

    if ( tmp_assign_source_213 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "callable" );
        exception_tb = NULL;

        exception_lineno = 560;

        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_callable, tmp_assign_source_213 );
    branch_end_10:;
    tmp_called_name_159 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_159 == NULL ))
    {
        tmp_called_name_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_159 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 561;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_68 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_unbound_function );

    if (unlikely( tmp_args_element_name_68 == NULL ))
    {
        tmp_args_element_name_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_unbound_function );
    }

    if ( tmp_args_element_name_68 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "get_unbound_function" );
        exception_tb = NULL;

        exception_lineno = 561;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_69 = const_str_digest_a13cea3eac144232780ec70fab3f1816;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 561;
    {
        PyObject *call_args[] = { tmp_args_element_name_68, tmp_args_element_name_69 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_159, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 561;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_36 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_36 == NULL ))
    {
        tmp_source_name_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_36 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 565;

        goto frame_exception_exit_1;
    }

    tmp_called_name_160 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_attrgetter );
    if ( tmp_called_name_160 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 565;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_70 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_func );

    if (unlikely( tmp_args_element_name_70 == NULL ))
    {
        tmp_args_element_name_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__meth_func );
    }

    if ( tmp_args_element_name_70 == NULL )
    {
        Py_DECREF( tmp_called_name_160 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_meth_func" );
        exception_tb = NULL;

        exception_lineno = 565;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 565;
    {
        PyObject *call_args[] = { tmp_args_element_name_70 };
        tmp_assign_source_214 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_160, call_args );
    }

    Py_DECREF( tmp_called_name_160 );
    if ( tmp_assign_source_214 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 565;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_method_function, tmp_assign_source_214 );
    tmp_source_name_37 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_37 == NULL ))
    {
        tmp_source_name_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_37 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 566;

        goto frame_exception_exit_1;
    }

    tmp_called_name_161 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_attrgetter );
    if ( tmp_called_name_161 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_71 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__meth_self );

    if (unlikely( tmp_args_element_name_71 == NULL ))
    {
        tmp_args_element_name_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__meth_self );
    }

    if ( tmp_args_element_name_71 == NULL )
    {
        Py_DECREF( tmp_called_name_161 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_meth_self" );
        exception_tb = NULL;

        exception_lineno = 566;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 566;
    {
        PyObject *call_args[] = { tmp_args_element_name_71 };
        tmp_assign_source_215 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_161, call_args );
    }

    Py_DECREF( tmp_called_name_161 );
    if ( tmp_assign_source_215 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_method_self, tmp_assign_source_215 );
    tmp_source_name_38 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_38 == NULL ))
    {
        tmp_source_name_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_38 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 567;

        goto frame_exception_exit_1;
    }

    tmp_called_name_162 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_attrgetter );
    if ( tmp_called_name_162 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 567;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_72 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_closure );

    if (unlikely( tmp_args_element_name_72 == NULL ))
    {
        tmp_args_element_name_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_closure );
    }

    if ( tmp_args_element_name_72 == NULL )
    {
        Py_DECREF( tmp_called_name_162 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_func_closure" );
        exception_tb = NULL;

        exception_lineno = 567;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 567;
    {
        PyObject *call_args[] = { tmp_args_element_name_72 };
        tmp_assign_source_216 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_162, call_args );
    }

    Py_DECREF( tmp_called_name_162 );
    if ( tmp_assign_source_216 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 567;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_closure, tmp_assign_source_216 );
    tmp_source_name_39 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_39 == NULL ))
    {
        tmp_source_name_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_39 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 568;

        goto frame_exception_exit_1;
    }

    tmp_called_name_163 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_attrgetter );
    if ( tmp_called_name_163 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 568;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_73 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_code );

    if (unlikely( tmp_args_element_name_73 == NULL ))
    {
        tmp_args_element_name_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_code );
    }

    if ( tmp_args_element_name_73 == NULL )
    {
        Py_DECREF( tmp_called_name_163 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_func_code" );
        exception_tb = NULL;

        exception_lineno = 568;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 568;
    {
        PyObject *call_args[] = { tmp_args_element_name_73 };
        tmp_assign_source_217 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_163, call_args );
    }

    Py_DECREF( tmp_called_name_163 );
    if ( tmp_assign_source_217 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 568;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_code, tmp_assign_source_217 );
    tmp_source_name_40 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_40 == NULL ))
    {
        tmp_source_name_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_40 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 569;

        goto frame_exception_exit_1;
    }

    tmp_called_name_164 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_attrgetter );
    if ( tmp_called_name_164 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 569;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_74 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_defaults );

    if (unlikely( tmp_args_element_name_74 == NULL ))
    {
        tmp_args_element_name_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_defaults );
    }

    if ( tmp_args_element_name_74 == NULL )
    {
        Py_DECREF( tmp_called_name_164 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_func_defaults" );
        exception_tb = NULL;

        exception_lineno = 569;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 569;
    {
        PyObject *call_args[] = { tmp_args_element_name_74 };
        tmp_assign_source_218 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_164, call_args );
    }

    Py_DECREF( tmp_called_name_164 );
    if ( tmp_assign_source_218 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 569;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_defaults, tmp_assign_source_218 );
    tmp_source_name_41 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_41 == NULL ))
    {
        tmp_source_name_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_41 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 570;

        goto frame_exception_exit_1;
    }

    tmp_called_name_165 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_attrgetter );
    if ( tmp_called_name_165 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 570;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_75 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__func_globals );

    if (unlikely( tmp_args_element_name_75 == NULL ))
    {
        tmp_args_element_name_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__func_globals );
    }

    if ( tmp_args_element_name_75 == NULL )
    {
        Py_DECREF( tmp_called_name_165 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_func_globals" );
        exception_tb = NULL;

        exception_lineno = 570;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 570;
    {
        PyObject *call_args[] = { tmp_args_element_name_75 };
        tmp_assign_source_219 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_165, call_args );
    }

    Py_DECREF( tmp_called_name_165 );
    if ( tmp_assign_source_219 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 570;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_get_function_globals, tmp_assign_source_219 );
    tmp_cond_value_6 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_6 == NULL ))
    {
        tmp_cond_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 573;

        goto frame_exception_exit_1;
    }

    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 573;

        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_assign_source_220 = MAKE_FUNCTION_six$$$function_32_iterkeys(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterkeys, tmp_assign_source_220 );
    tmp_assign_source_221 = MAKE_FUNCTION_six$$$function_33_itervalues(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_itervalues, tmp_assign_source_221 );
    tmp_assign_source_222 = MAKE_FUNCTION_six$$$function_34_iteritems(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iteritems, tmp_assign_source_222 );
    tmp_assign_source_223 = MAKE_FUNCTION_six$$$function_35_iterlists(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterlists, tmp_assign_source_223 );
    tmp_called_instance_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_called_instance_7 == NULL ))
    {
        tmp_called_instance_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_called_instance_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 586;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 586;
    tmp_assign_source_224 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_methodcaller, &PyTuple_GET_ITEM( const_tuple_str_plain_keys_tuple, 0 ) );

    if ( tmp_assign_source_224 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 586;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewkeys, tmp_assign_source_224 );
    tmp_called_instance_8 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_called_instance_8 == NULL ))
    {
        tmp_called_instance_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_called_instance_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 588;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 588;
    tmp_assign_source_225 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_methodcaller, &PyTuple_GET_ITEM( const_tuple_str_plain_values_tuple, 0 ) );

    if ( tmp_assign_source_225 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 588;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewvalues, tmp_assign_source_225 );
    tmp_called_instance_9 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_called_instance_9 == NULL ))
    {
        tmp_called_instance_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_called_instance_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 590;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 590;
    tmp_assign_source_226 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_methodcaller, &PyTuple_GET_ITEM( const_tuple_str_plain_items_tuple, 0 ) );

    if ( tmp_assign_source_226 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 590;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewitems, tmp_assign_source_226 );
    goto branch_end_11;
    branch_no_11:;
    tmp_assign_source_227 = MAKE_FUNCTION_six$$$function_36_iterkeys(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterkeys, tmp_assign_source_227 );
    tmp_assign_source_228 = MAKE_FUNCTION_six$$$function_37_itervalues(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_itervalues, tmp_assign_source_228 );
    tmp_assign_source_229 = MAKE_FUNCTION_six$$$function_38_iteritems(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iteritems, tmp_assign_source_229 );
    tmp_assign_source_230 = MAKE_FUNCTION_six$$$function_39_iterlists(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterlists, tmp_assign_source_230 );
    tmp_called_instance_10 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_called_instance_10 == NULL ))
    {
        tmp_called_instance_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_called_instance_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 604;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 604;
    tmp_assign_source_231 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_methodcaller, &PyTuple_GET_ITEM( const_tuple_str_plain_viewkeys_tuple, 0 ) );

    if ( tmp_assign_source_231 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewkeys, tmp_assign_source_231 );
    tmp_called_instance_11 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_called_instance_11 == NULL ))
    {
        tmp_called_instance_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_called_instance_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 606;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 606;
    tmp_assign_source_232 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_methodcaller, &PyTuple_GET_ITEM( const_tuple_str_plain_viewvalues_tuple, 0 ) );

    if ( tmp_assign_source_232 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 606;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewvalues, tmp_assign_source_232 );
    tmp_called_instance_12 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_called_instance_12 == NULL ))
    {
        tmp_called_instance_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_called_instance_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 608;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 608;
    tmp_assign_source_233 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_methodcaller, &PyTuple_GET_ITEM( const_tuple_str_plain_viewitems_tuple, 0 ) );

    if ( tmp_assign_source_233 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 608;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_viewitems, tmp_assign_source_233 );
    branch_end_11:;
    tmp_called_name_166 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_166 == NULL ))
    {
        tmp_called_name_166 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_166 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 610;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_76 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterkeys );

    if (unlikely( tmp_args_element_name_76 == NULL ))
    {
        tmp_args_element_name_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iterkeys );
    }

    if ( tmp_args_element_name_76 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iterkeys" );
        exception_tb = NULL;

        exception_lineno = 610;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_77 = const_str_digest_c1940ed36d6c651776a6e3a34c7131e3;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 610;
    {
        PyObject *call_args[] = { tmp_args_element_name_76, tmp_args_element_name_77 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_166, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 610;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_167 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_167 == NULL ))
    {
        tmp_called_name_167 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_167 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 611;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_78 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_itervalues );

    if (unlikely( tmp_args_element_name_78 == NULL ))
    {
        tmp_args_element_name_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itervalues );
    }

    if ( tmp_args_element_name_78 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "itervalues" );
        exception_tb = NULL;

        exception_lineno = 611;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_79 = const_str_digest_c18de21b4af59af9eda7ad848834774a;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 611;
    {
        PyObject *call_args[] = { tmp_args_element_name_78, tmp_args_element_name_79 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_167, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 611;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_168 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_168 == NULL ))
    {
        tmp_called_name_168 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_168 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 612;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_80 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_iteritems );

    if (unlikely( tmp_args_element_name_80 == NULL ))
    {
        tmp_args_element_name_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iteritems );
    }

    if ( tmp_args_element_name_80 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iteritems" );
        exception_tb = NULL;

        exception_lineno = 612;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_81 = const_str_digest_a343d5bd65de7d15893f1a0d02d09f45;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 612;
    {
        PyObject *call_args[] = { tmp_args_element_name_80, tmp_args_element_name_81 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_168, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 612;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_169 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_169 == NULL ))
    {
        tmp_called_name_169 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_169 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 614;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_82 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterlists );

    if (unlikely( tmp_args_element_name_82 == NULL ))
    {
        tmp_args_element_name_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_iterlists );
    }

    if ( tmp_args_element_name_82 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "iterlists" );
        exception_tb = NULL;

        exception_lineno = 614;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_83 = const_str_digest_ef5ae5746ab9ada338d738fcd9ef185d;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 614;
    {
        PyObject *call_args[] = { tmp_args_element_name_82, tmp_args_element_name_83 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_169, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 614;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_cond_value_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_7 == NULL ))
    {
        tmp_cond_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 618;

        goto frame_exception_exit_1;
    }

    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 618;

        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_assign_source_234 = MAKE_FUNCTION_six$$$function_40_b(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_b, tmp_assign_source_234 );
    tmp_assign_source_235 = MAKE_FUNCTION_six$$$function_41_u(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_u, tmp_assign_source_235 );
    tmp_assign_source_236 = LOOKUP_BUILTIN( const_str_plain_chr );
    assert( tmp_assign_source_236 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_unichr, tmp_assign_source_236 );
    tmp_name_name_6 = const_str_plain_struct;
    tmp_globals_name_6 = (PyObject *)moduledict_six;
    tmp_locals_name_6 = Py_None;
    tmp_fromlist_name_6 = Py_None;
    tmp_level_name_6 = const_int_0;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 625;
    tmp_assign_source_237 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6 );
    if ( tmp_assign_source_237 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 625;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_struct, tmp_assign_source_237 );
    tmp_called_instance_13 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_struct );

    if (unlikely( tmp_called_instance_13 == NULL ))
    {
        tmp_called_instance_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
    }

    if ( tmp_called_instance_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct" );
        exception_tb = NULL;

        exception_lineno = 626;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 626;
    tmp_source_name_42 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_Struct, &PyTuple_GET_ITEM( const_tuple_str_digest_492eced51578a561806e20ae8ef1f867_tuple, 0 ) );

    if ( tmp_source_name_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 626;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_238 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_pack );
    Py_DECREF( tmp_source_name_42 );
    if ( tmp_assign_source_238 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 626;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_int2byte, tmp_assign_source_238 );
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_struct );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "struct" );
        exception_tb = NULL;

        exception_lineno = 627;

        goto frame_exception_exit_1;
    }

    tmp_called_instance_14 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_called_instance_14 == NULL ))
    {
        tmp_called_instance_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_called_instance_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 628;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 628;
    tmp_assign_source_239 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_itemgetter, &PyTuple_GET_ITEM( const_tuple_int_0_tuple, 0 ) );

    if ( tmp_assign_source_239 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 628;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_byte2int, tmp_assign_source_239 );
    tmp_source_name_43 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_43 == NULL ))
    {
        tmp_source_name_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_43 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;

        exception_lineno = 629;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_240 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_getitem );
    if ( tmp_assign_source_240 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 629;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_indexbytes, tmp_assign_source_240 );
    tmp_assign_source_241 = LOOKUP_BUILTIN( const_str_plain_iter );
    assert( tmp_assign_source_241 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterbytes, tmp_assign_source_241 );
    tmp_name_name_7 = const_str_plain_io;
    tmp_globals_name_7 = (PyObject *)moduledict_six;
    tmp_locals_name_7 = Py_None;
    tmp_fromlist_name_7 = Py_None;
    tmp_level_name_7 = const_int_0;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 631;
    tmp_assign_source_242 = IMPORT_MODULE5( tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_7 );
    if ( tmp_assign_source_242 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 631;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_io, tmp_assign_source_242 );
    tmp_source_name_44 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_io );

    if (unlikely( tmp_source_name_44 == NULL ))
    {
        tmp_source_name_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
    }

    if ( tmp_source_name_44 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "io" );
        exception_tb = NULL;

        exception_lineno = 632;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_243 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_StringIO );
    if ( tmp_assign_source_243 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 632;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_243 );
    tmp_source_name_45 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_io );

    if (unlikely( tmp_source_name_45 == NULL ))
    {
        tmp_source_name_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
    }

    if ( tmp_source_name_45 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "io" );
        exception_tb = NULL;

        exception_lineno = 633;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_244 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_BytesIO );
    if ( tmp_assign_source_244 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 633;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_BytesIO, tmp_assign_source_244 );
    tmp_assign_source_245 = const_str_plain_assertCountEqual;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertCountEqual, tmp_assign_source_245 );
    tmp_source_name_46 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_46 == NULL ))
    {
        tmp_source_name_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_46 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 635;

        goto frame_exception_exit_1;
    }

    tmp_subscribed_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_version_info );
    if ( tmp_subscribed_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 635;

        goto frame_exception_exit_1;
    }
    tmp_subscript_name_13 = const_int_pos_1;
    tmp_compare_left_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    Py_DECREF( tmp_subscribed_name_13 );
    if ( tmp_compare_left_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 635;

        goto frame_exception_exit_1;
    }
    tmp_compare_right_20 = const_int_pos_1;
    tmp_cmp_LtE_1 = RICH_COMPARE_BOOL_LE( tmp_compare_left_20, tmp_compare_right_20 );
    if ( tmp_cmp_LtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_20 );

        exception_lineno = 635;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_20 );
    if ( tmp_cmp_LtE_1 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_assign_source_246 = const_str_plain_assertRaisesRegexp;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex, tmp_assign_source_246 );
    tmp_assign_source_247 = const_str_plain_assertRegexpMatches;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRegex, tmp_assign_source_247 );
    goto branch_end_13;
    branch_no_13:;
    tmp_assign_source_248 = const_str_plain_assertRaisesRegex;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex, tmp_assign_source_248 );
    tmp_assign_source_249 = const_str_plain_assertRegex;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRegex, tmp_assign_source_249 );
    branch_end_13:;
    goto branch_end_12;
    branch_no_12:;
    tmp_assign_source_250 = MAKE_FUNCTION_six$$$function_42_b(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_b, tmp_assign_source_250 );
    tmp_assign_source_251 = MAKE_FUNCTION_six$$$function_43_u(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_u, tmp_assign_source_251 );
    tmp_assign_source_252 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_unichr );

    if (unlikely( tmp_assign_source_252 == NULL ))
    {
        tmp_assign_source_252 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unichr );
    }

    if ( tmp_assign_source_252 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "unichr" );
        exception_tb = NULL;

        exception_lineno = 648;

        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_unichr, tmp_assign_source_252 );
    tmp_assign_source_253 = LOOKUP_BUILTIN( const_str_plain_chr );
    assert( tmp_assign_source_253 != NULL );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_int2byte, tmp_assign_source_253 );
    tmp_assign_source_254 = MAKE_FUNCTION_six$$$function_44_byte2int(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_byte2int, tmp_assign_source_254 );
    tmp_assign_source_255 = MAKE_FUNCTION_six$$$function_45_indexbytes(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_indexbytes, tmp_assign_source_255 );
    tmp_source_name_47 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_47 == NULL ))
    {
        tmp_source_name_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_47 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 656;

        goto frame_exception_exit_1;
    }

    tmp_called_name_170 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_partial );
    if ( tmp_called_name_170 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 656;

        goto frame_exception_exit_1;
    }
    tmp_source_name_48 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_itertools );

    if (unlikely( tmp_source_name_48 == NULL ))
    {
        tmp_source_name_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
    }

    if ( tmp_source_name_48 == NULL )
    {
        Py_DECREF( tmp_called_name_170 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "itertools" );
        exception_tb = NULL;

        exception_lineno = 656;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_84 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_imap );
    if ( tmp_args_element_name_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_170 );

        exception_lineno = 656;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_85 = LOOKUP_BUILTIN( const_str_plain_ord );
    assert( tmp_args_element_name_85 != NULL );
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 656;
    {
        PyObject *call_args[] = { tmp_args_element_name_84, tmp_args_element_name_85 };
        tmp_assign_source_256 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_170, call_args );
    }

    Py_DECREF( tmp_called_name_170 );
    Py_DECREF( tmp_args_element_name_84 );
    if ( tmp_assign_source_256 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 656;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_iterbytes, tmp_assign_source_256 );
    tmp_name_name_8 = const_str_plain_StringIO;
    tmp_globals_name_8 = (PyObject *)moduledict_six;
    tmp_locals_name_8 = Py_None;
    tmp_fromlist_name_8 = Py_None;
    tmp_level_name_8 = const_int_0;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 657;
    tmp_assign_source_257 = IMPORT_MODULE5( tmp_name_name_8, tmp_globals_name_8, tmp_locals_name_8, tmp_fromlist_name_8, tmp_level_name_8 );
    if ( tmp_assign_source_257 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 657;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_257 );
    // Tried code:
    tmp_source_name_49 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO );

    if (unlikely( tmp_source_name_49 == NULL ))
    {
        tmp_source_name_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StringIO );
    }

    if ( tmp_source_name_49 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "StringIO" );
        exception_tb = NULL;

        exception_lineno = 658;

        goto try_except_handler_59;
    }

    tmp_assign_source_258 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_StringIO );
    if ( tmp_assign_source_258 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 658;

        goto try_except_handler_59;
    }
    assert( tmp_assign_unpack_1__assign_source == NULL );
    tmp_assign_unpack_1__assign_source = tmp_assign_source_258;

    goto try_end_25;
    // Exception handler code:
    try_except_handler_59:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_keeper_lineno_36 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_36;
    exception_value = exception_keeper_value_36;
    exception_tb = exception_keeper_tb_36;
    exception_lineno = exception_keeper_lineno_36;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    tmp_assign_source_259 = tmp_assign_unpack_1__assign_source;

    CHECK_OBJECT( tmp_assign_source_259 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_StringIO, tmp_assign_source_259 );
    tmp_assign_source_260 = tmp_assign_unpack_1__assign_source;

    CHECK_OBJECT( tmp_assign_source_260 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_BytesIO, tmp_assign_source_260 );
    CHECK_OBJECT( (PyObject *)tmp_assign_unpack_1__assign_source );
    Py_DECREF( tmp_assign_unpack_1__assign_source );
    tmp_assign_unpack_1__assign_source = NULL;

    tmp_assign_source_261 = const_str_plain_assertItemsEqual;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertCountEqual, tmp_assign_source_261 );
    tmp_assign_source_262 = const_str_plain_assertRaisesRegexp;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRaisesRegex, tmp_assign_source_262 );
    tmp_assign_source_263 = const_str_plain_assertRegexpMatches;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__assertRegex, tmp_assign_source_263 );
    branch_end_12:;
    tmp_called_name_171 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_171 == NULL ))
    {
        tmp_called_name_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_171 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 662;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_86 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_b );

    if (unlikely( tmp_args_element_name_86 == NULL ))
    {
        tmp_args_element_name_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_b );
    }

    if ( tmp_args_element_name_86 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "b" );
        exception_tb = NULL;

        exception_lineno = 662;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_87 = const_str_digest_0e07ea38c4cf2fbcefc89e7de4db934c;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 662;
    {
        PyObject *call_args[] = { tmp_args_element_name_86, tmp_args_element_name_87 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_171, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 662;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_172 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_172 == NULL ))
    {
        tmp_called_name_172 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_172 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 663;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_88 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_u );

    if (unlikely( tmp_args_element_name_88 == NULL ))
    {
        tmp_args_element_name_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_u );
    }

    if ( tmp_args_element_name_88 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "u" );
        exception_tb = NULL;

        exception_lineno = 663;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_89 = const_str_digest_ebf751844f7678efef5423dab5acd577;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 663;
    {
        PyObject *call_args[] = { tmp_args_element_name_88, tmp_args_element_name_89 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_172, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 663;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_264 = MAKE_FUNCTION_six$$$function_46_assertCountEqual(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_assertCountEqual, tmp_assign_source_264 );
    tmp_assign_source_265 = MAKE_FUNCTION_six$$$function_47_assertRaisesRegex(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_assertRaisesRegex, tmp_assign_source_265 );
    tmp_assign_source_266 = MAKE_FUNCTION_six$$$function_48_assertRegex(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_assertRegex, tmp_assign_source_266 );
    tmp_cond_value_8 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_PY3 );

    if (unlikely( tmp_cond_value_8 == NULL ))
    {
        tmp_cond_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY3 );
    }

    if ( tmp_cond_value_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "PY3" );
        exception_tb = NULL;

        exception_lineno = 678;

        goto frame_exception_exit_1;
    }

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 678;

        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_source_name_50 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_source_name_50 == NULL ))
    {
        tmp_source_name_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_source_name_50 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "moves" );
        exception_tb = NULL;

        exception_lineno = 679;

        goto frame_exception_exit_1;
    }

    tmp_getattr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_builtins );
    if ( tmp_getattr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 679;

        goto frame_exception_exit_1;
    }
    tmp_getattr_attr_1 = const_str_plain_exec;
    tmp_assign_source_267 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    Py_DECREF( tmp_getattr_target_1 );
    if ( tmp_assign_source_267 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 679;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_, tmp_assign_source_267 );
    tmp_defaults_4 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_4 );
    tmp_assign_source_268 = MAKE_FUNCTION_six$$$function_49_reraise( tmp_defaults_4 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_reraise, tmp_assign_source_268 );
    goto branch_end_14;
    branch_no_14:;
    tmp_defaults_5 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_5 );
    tmp_assign_source_269 = MAKE_FUNCTION_six$$$function_50_exec_( tmp_defaults_5 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_, tmp_assign_source_269 );
    tmp_called_name_173 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_ );

    if (unlikely( tmp_called_name_173 == NULL ))
    {
        tmp_called_name_173 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exec_ );
    }

    if ( tmp_called_name_173 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "exec_" );
        exception_tb = NULL;

        exception_lineno = 701;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 701;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_173, &PyTuple_GET_ITEM( const_tuple_str_digest_cac36d305945ac2bbd2d1b0c1a3dadc8_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 701;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_end_14:;
    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = 2;
    tmp_source_name_51 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_51 == NULL ))
    {
        tmp_source_name_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_51 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 706;

        goto frame_exception_exit_1;
    }

    tmp_slice_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_version_info );
    if ( tmp_slice_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 706;

        goto frame_exception_exit_1;
    }
    tmp_compare_left_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    Py_DECREF( tmp_slice_source_2 );
    if ( tmp_compare_left_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 706;

        goto frame_exception_exit_1;
    }
    tmp_compare_right_21 = const_tuple_int_pos_3_int_pos_2_tuple;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ_NORECURSE( tmp_compare_left_21, tmp_compare_right_21 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_21 );

        exception_lineno = 706;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_21 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_called_name_174 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_ );

    if (unlikely( tmp_called_name_174 == NULL ))
    {
        tmp_called_name_174 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exec_ );
    }

    if ( tmp_called_name_174 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "exec_" );
        exception_tb = NULL;

        exception_lineno = 707;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 707;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_174, &PyTuple_GET_ITEM( const_tuple_str_digest_813378a9c91048d7990696da82a61814_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 707;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_15;
    branch_no_15:;
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = 2;
    tmp_source_name_52 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_52 == NULL ))
    {
        tmp_source_name_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_52 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 712;

        goto frame_exception_exit_1;
    }

    tmp_slice_source_3 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_version_info );
    if ( tmp_slice_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 712;

        goto frame_exception_exit_1;
    }
    tmp_compare_left_22 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    Py_DECREF( tmp_slice_source_3 );
    if ( tmp_compare_left_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 712;

        goto frame_exception_exit_1;
    }
    tmp_compare_right_22 = const_tuple_int_pos_3_int_pos_2_tuple;
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_22, tmp_compare_right_22 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_22 );

        exception_lineno = 712;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_22 );
    if ( tmp_cmp_Gt_1 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_called_name_175 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_exec_ );

    if (unlikely( tmp_called_name_175 == NULL ))
    {
        tmp_called_name_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_exec_ );
    }

    if ( tmp_called_name_175 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "exec_" );
        exception_tb = NULL;

        exception_lineno = 713;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 713;
    tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_175, &PyTuple_GET_ITEM( const_tuple_str_digest_f4d3a600a6e16b82e3f10867b851d5a1_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 713;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_16;
    branch_no_16:;
    tmp_assign_source_270 = MAKE_FUNCTION_six$$$function_51_raise_from(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_raise_from, tmp_assign_source_270 );
    branch_end_16:;
    branch_end_15:;
    tmp_source_name_53 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_moves );

    if (unlikely( tmp_source_name_53 == NULL ))
    {
        tmp_source_name_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_moves );
    }

    if ( tmp_source_name_53 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "moves" );
        exception_tb = NULL;

        exception_lineno = 721;

        goto frame_exception_exit_1;
    }

    tmp_getattr_target_2 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_builtins );
    if ( tmp_getattr_target_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 721;

        goto frame_exception_exit_1;
    }
    tmp_getattr_attr_2 = const_str_plain_print;
    tmp_getattr_default_1 = Py_None;
    tmp_assign_source_271 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_1 );
    Py_DECREF( tmp_getattr_target_2 );
    if ( tmp_assign_source_271 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 721;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_, tmp_assign_source_271 );
    tmp_compare_left_23 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_ );

    if (unlikely( tmp_compare_left_23 == NULL ))
    {
        tmp_compare_left_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_print_ );
    }

    if ( tmp_compare_left_23 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "print_" );
        exception_tb = NULL;

        exception_lineno = 722;

        goto frame_exception_exit_1;
    }

    tmp_compare_right_23 = Py_None;
    tmp_is_2 = ( tmp_compare_left_23 == tmp_compare_right_23 );
    if ( tmp_is_2 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_assign_source_272 = MAKE_FUNCTION_six$$$function_52_print_(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_, tmp_assign_source_272 );
    branch_no_17:;
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = 2;
    tmp_source_name_54 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_54 == NULL ))
    {
        tmp_source_name_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_54 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 776;

        goto frame_exception_exit_1;
    }

    tmp_slice_source_4 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_version_info );
    if ( tmp_slice_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 776;

        goto frame_exception_exit_1;
    }
    tmp_compare_left_24 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    Py_DECREF( tmp_slice_source_4 );
    if ( tmp_compare_left_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 776;

        goto frame_exception_exit_1;
    }
    tmp_compare_right_24 = const_tuple_int_pos_3_int_pos_3_tuple;
    tmp_cmp_Lt_1 = RICH_COMPARE_BOOL_LT( tmp_compare_left_24, tmp_compare_right_24 );
    if ( tmp_cmp_Lt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_24 );

        exception_lineno = 776;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_24 );
    if ( tmp_cmp_Lt_1 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_assign_source_273 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_ );

    if (unlikely( tmp_assign_source_273 == NULL ))
    {
        tmp_assign_source_273 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_print_ );
    }

    if ( tmp_assign_source_273 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "print_" );
        exception_tb = NULL;

        exception_lineno = 777;

        goto frame_exception_exit_1;
    }

    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain__print, tmp_assign_source_273 );
    tmp_assign_source_274 = MAKE_FUNCTION_six$$$function_53_print_(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_print_, tmp_assign_source_274 );
    branch_no_18:;
    tmp_called_name_176 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__add_doc );

    if (unlikely( tmp_called_name_176 == NULL ))
    {
        tmp_called_name_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__add_doc );
    }

    if ( tmp_called_name_176 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_add_doc" );
        exception_tb = NULL;

        exception_lineno = 786;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_90 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_reraise );

    if (unlikely( tmp_args_element_name_90 == NULL ))
    {
        tmp_args_element_name_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_reraise );
    }

    if ( tmp_args_element_name_90 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "reraise" );
        exception_tb = NULL;

        exception_lineno = 786;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_91 = const_str_digest_91987f05961643baf523130276babe51;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 786;
    {
        PyObject *call_args[] = { tmp_args_element_name_90, tmp_args_element_name_91 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_176, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 786;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = 2;
    tmp_source_name_55 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_55 == NULL ))
    {
        tmp_source_name_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_55 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 788;

        goto frame_exception_exit_1;
    }

    tmp_slice_source_5 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_version_info );
    if ( tmp_slice_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 788;

        goto frame_exception_exit_1;
    }
    tmp_compare_left_25 = LOOKUP_INDEX_SLICE( tmp_slice_source_5, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    Py_DECREF( tmp_slice_source_5 );
    if ( tmp_compare_left_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 788;

        goto frame_exception_exit_1;
    }
    tmp_compare_right_25 = const_tuple_int_pos_3_int_pos_4_tuple;
    tmp_cmp_Lt_2 = RICH_COMPARE_BOOL_LT( tmp_compare_left_25, tmp_compare_right_25 );
    if ( tmp_cmp_Lt_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_25 );

        exception_lineno = 788;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_25 );
    if ( tmp_cmp_Lt_2 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_defaults_6 = PyTuple_New( 2 );
    tmp_source_name_56 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_56 == NULL ))
    {
        tmp_source_name_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_56 == NULL )
    {
        Py_DECREF( tmp_defaults_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 789;

        goto frame_exception_exit_1;
    }

    tmp_tuple_element_12 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_WRAPPER_ASSIGNMENTS );
    if ( tmp_tuple_element_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_defaults_6 );

        exception_lineno = 789;

        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_defaults_6, 0, tmp_tuple_element_12 );
    tmp_source_name_57 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_57 == NULL ))
    {
        tmp_source_name_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_57 == NULL )
    {
        Py_DECREF( tmp_defaults_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 790;

        goto frame_exception_exit_1;
    }

    tmp_tuple_element_12 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_WRAPPER_UPDATES );
    if ( tmp_tuple_element_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_defaults_6 );

        exception_lineno = 790;

        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_defaults_6, 1, tmp_tuple_element_12 );
    tmp_assign_source_275 = MAKE_FUNCTION_six$$$function_54_wraps( tmp_defaults_6 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_wraps, tmp_assign_source_275 );
    goto branch_end_19;
    branch_no_19:;
    tmp_source_name_58 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_functools );

    if (unlikely( tmp_source_name_58 == NULL ))
    {
        tmp_source_name_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
    }

    if ( tmp_source_name_58 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "functools" );
        exception_tb = NULL;

        exception_lineno = 797;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_276 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain_wraps );
    if ( tmp_assign_source_276 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 797;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_wraps, tmp_assign_source_276 );
    branch_end_19:;
    tmp_assign_source_277 = MAKE_FUNCTION_six$$$function_55_with_metaclass(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_with_metaclass, tmp_assign_source_277 );
    tmp_assign_source_278 = MAKE_FUNCTION_six$$$function_56_add_metaclass(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_add_metaclass, tmp_assign_source_278 );
    tmp_assign_source_279 = MAKE_FUNCTION_six$$$function_57_python_2_unicode_compatible(  );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain_python_2_unicode_compatible, tmp_assign_source_279 );
    tmp_assign_source_280 = PyList_New( 0 );
    UPDATE_STRING_DICT1( moduledict_six, (Nuitka_StringObject *)const_str_plain___path__, tmp_assign_source_280 );
    tmp_assign_source_281 = const_str_plain_six;
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_281 );
    tmp_called_instance_15 = (PyObject *)moduledict_six;
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 851;
    tmp_compare_left_26 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain___spec___tuple, 0 ) );

    if ( tmp_compare_left_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 851;

        goto frame_exception_exit_1;
    }
    tmp_compare_right_26 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_26 != tmp_compare_right_26 );
    Py_DECREF( tmp_compare_left_26 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_assattr_name_7 = PyList_New( 0 );
    tmp_assattr_target_7 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain___spec__ );

    if (unlikely( tmp_assattr_target_7 == NULL ))
    {
        tmp_assattr_target_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
    }

    if ( tmp_assattr_target_7 == NULL )
    {
        Py_DECREF( tmp_assattr_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "__spec__" );
        exception_tb = NULL;

        exception_lineno = 852;

        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain_submodule_search_locations, tmp_assattr_name_7 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_7 );

        exception_lineno = 852;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_7 );
    branch_no_20:;
    tmp_source_name_59 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_59 == NULL ))
    {
        tmp_source_name_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_59 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 856;

        goto frame_exception_exit_1;
    }

    tmp_cond_value_9 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_meta_path );
    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 856;

        goto frame_exception_exit_1;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        exception_lineno = 856;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_called_name_177 = (PyObject *)&PyEnum_Type;
    tmp_source_name_60 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_60 == NULL ))
    {
        tmp_source_name_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_60 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 857;

        goto frame_exception_exit_1;
    }

    tmp_args_element_name_92 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_meta_path );
    if ( tmp_args_element_name_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;

        goto frame_exception_exit_1;
    }
    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 857;
    {
        PyObject *call_args[] = { tmp_args_element_name_92 };
        tmp_iter_arg_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_177, call_args );
    }

    Py_DECREF( tmp_args_element_name_92 );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_282 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_282 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;

        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator == NULL );
    tmp_for_loop_7__for_iterator = tmp_assign_source_282;

    // Tried code:
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_7__for_iterator;

    CHECK_OBJECT( tmp_next_source_7 );
    tmp_assign_source_283 = ITERATOR_NEXT( tmp_next_source_7 );
    if ( tmp_assign_source_283 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_7;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            exception_lineno = 857;
            goto try_except_handler_60;
        }
    }

    {
        PyObject *old = tmp_for_loop_7__iter_value;
        tmp_for_loop_7__iter_value = tmp_assign_source_283;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_8 = tmp_for_loop_7__iter_value;

    CHECK_OBJECT( tmp_iter_arg_8 );
    tmp_assign_source_284 = MAKE_ITERATOR( tmp_iter_arg_8 );
    if ( tmp_assign_source_284 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;

        goto try_except_handler_61;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_284;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_285 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_285 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }



        exception_lineno = 857;
        goto try_except_handler_62;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_285;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_286 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_286 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }



        exception_lineno = 857;
        goto try_except_handler_62;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_286;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 857;
                goto try_except_handler_62;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;
        goto try_except_handler_62;
    }
    goto try_end_26;
    // Exception handler code:
    try_except_handler_62:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_keeper_lineno_37 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_37;
    exception_value = exception_keeper_value_37;
    exception_tb = exception_keeper_tb_37;
    exception_lineno = exception_keeper_lineno_37;

    goto try_except_handler_61;
    // End of try:
    try_end_26:;
    goto try_end_27;
    // Exception handler code:
    try_except_handler_61:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_keeper_lineno_38 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_38;
    exception_value = exception_keeper_value_38;
    exception_tb = exception_keeper_tb_38;
    exception_lineno = exception_keeper_lineno_38;

    goto try_except_handler_60;
    // End of try:
    try_end_27:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_287 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_287 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_i, tmp_assign_source_287 );
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_288 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_288 );
    UPDATE_STRING_DICT0( moduledict_six, (Nuitka_StringObject *)const_str_plain_importer, tmp_assign_source_288 );
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_type_arg_11 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_importer );

    if (unlikely( tmp_type_arg_11 == NULL ))
    {
        tmp_type_arg_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_importer );
    }

    if ( tmp_type_arg_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "importer" );
        exception_tb = NULL;

        exception_lineno = 862;

        goto try_except_handler_60;
    }

    tmp_source_name_61 = BUILTIN_TYPE1( tmp_type_arg_11 );
    if ( tmp_source_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 862;

        goto try_except_handler_60;
    }
    tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain___name__ );
    Py_DECREF( tmp_source_name_61 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 862;

        goto try_except_handler_60;
    }
    tmp_compexpr_right_4 = const_str_plain__SixMetaPathImporter;
    tmp_and_left_value_1 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 862;

        goto try_except_handler_60;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 863;

        goto try_except_handler_60;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_source_name_62 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_importer );

    if (unlikely( tmp_source_name_62 == NULL ))
    {
        tmp_source_name_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_importer );
    }

    if ( tmp_source_name_62 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "importer" );
        exception_tb = NULL;

        exception_lineno = 863;

        goto try_except_handler_60;
    }

    tmp_compexpr_left_5 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain_name );
    if ( tmp_compexpr_left_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 863;

        goto try_except_handler_60;
    }
    tmp_compexpr_right_5 = const_str_plain_six;
    tmp_and_right_value_1 = RICH_COMPARE_EQ_NORECURSE( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    Py_DECREF( tmp_compexpr_left_5 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 863;

        goto try_except_handler_60;
    }
    tmp_cond_value_10 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_10 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 863;

        goto try_except_handler_60;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_source_name_63 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_63 == NULL ))
    {
        tmp_source_name_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_63 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 864;

        goto try_except_handler_60;
    }

    tmp_delsubscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_meta_path );
    if ( tmp_delsubscr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 864;

        goto try_except_handler_60;
    }
    tmp_delsubscr_subscript_1 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_i );

    if (unlikely( tmp_delsubscr_subscript_1 == NULL ))
    {
        tmp_delsubscr_subscript_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_i );
    }

    if ( tmp_delsubscr_subscript_1 == NULL )
    {
        Py_DECREF( tmp_delsubscr_target_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "i" );
        exception_tb = NULL;

        exception_lineno = 864;

        goto try_except_handler_60;
    }

    tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
    Py_DECREF( tmp_delsubscr_target_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 864;

        goto try_except_handler_60;
    }
    goto loop_end_7;
    branch_no_22:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 857;

        goto try_except_handler_60;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_28;
    // Exception handler code:
    try_except_handler_60:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_keeper_lineno_39 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_39;
    exception_value = exception_keeper_value_39;
    exception_tb = exception_keeper_tb_39;
    exception_lineno = exception_keeper_lineno_39;

    goto frame_exception_exit_1;
    // End of try:
    try_end_28:;
    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_i );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "i" );
        exception_tb = NULL;

        exception_lineno = 866;

        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_six, const_str_plain_importer );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "importer" );
        exception_tb = NULL;

        exception_lineno = 866;

        goto frame_exception_exit_1;
    }

    branch_no_21:;
    tmp_source_name_65 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain_sys );

    if (unlikely( tmp_source_name_65 == NULL ))
    {
        tmp_source_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
    }

    if ( tmp_source_name_65 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "sys" );
        exception_tb = NULL;

        exception_lineno = 868;

        goto frame_exception_exit_1;
    }

    tmp_source_name_64 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_meta_path );
    if ( tmp_source_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto frame_exception_exit_1;
    }
    tmp_called_name_178 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_append );
    Py_DECREF( tmp_source_name_64 );
    if ( tmp_called_name_178 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_93 = GET_STRING_DICT_VALUE( moduledict_six, (Nuitka_StringObject *)const_str_plain__importer );

    if (unlikely( tmp_args_element_name_93 == NULL ))
    {
        tmp_args_element_name_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__importer );
    }

    if ( tmp_args_element_name_93 == NULL )
    {
        Py_DECREF( tmp_called_name_178 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_importer" );
        exception_tb = NULL;

        exception_lineno = 868;

        goto frame_exception_exit_1;
    }

    frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame.f_lineno = 868;
    {
        PyObject *call_args[] = { tmp_args_element_name_93 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_178, call_args );
    }

    Py_DECREF( tmp_called_name_178 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

    // Restore frame exception if necessary.
#if 1
    RESTORE_FRAME_EXCEPTION( frame_f01c021eb7965a8a0c5072bbbfd8ee24 );
#endif
    popFrameStack();

    assertFrameObject( frame_f01c021eb7965a8a0c5072bbbfd8ee24 );

    goto frame_no_exception_2;
    frame_exception_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_f01c021eb7965a8a0c5072bbbfd8ee24 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f01c021eb7965a8a0c5072bbbfd8ee24, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f01c021eb7965a8a0c5072bbbfd8ee24->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f01c021eb7965a8a0c5072bbbfd8ee24, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_2:;

    return MOD_RETURN_VALUE( module_six );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
